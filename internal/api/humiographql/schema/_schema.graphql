"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include(
"""
Included when true.
"""
	if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip(
"""
Included when true.
"""
	if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
Marks an element of a GraphQL schema as no longer supported.
"""
directive @deprecated(
"""
Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted in [Markdown](https://daringfireball.net/projects/markdown/).
"""
	reason: String
) on ENUM_VALUE | FIELD_DEFINITION

directive @preview(
	reason: String!
) on ENUM_VALUE | FIELD_DEFINITION

"""
Data for updating action security policies
"""
input ActionSecurityPoliciesInput {
"""
Data for updating action security policies
"""
	emailActionEnabled: Boolean!
"""
Data for updating action security policies
"""
	emailActionRecipientAllowList: [String!]
"""
Data for updating action security policies
"""
	repoActionEnabled: Boolean!
"""
Data for updating action security policies
"""
	opsGenieActionEnabled: Boolean!
"""
Data for updating action security policies
"""
	pagerDutyActionEnabled: Boolean!
"""
Data for updating action security policies
"""
	slackSingleChannelActionEnabled: Boolean!
"""
Data for updating action security policies
"""
	slackMultiChannelActionEnabled: Boolean!
"""
Data for updating action security policies
"""
	uploadFileActionEnabled: Boolean!
"""
Data for updating action security policies
"""
	victorOpsActionEnabled: Boolean!
"""
Data for updating action security policies
"""
	webhookActionEnabled: Boolean!
"""
Data for updating action security policies
"""
	webhookActionUrlAllowList: [String!]
}

"""
Data for adding a label to an alert
"""
input AddAlertLabel {
"""
Data for adding a label to an alert
"""
	viewName: String!
"""
Data for adding a label to an alert
"""
	id: String!
"""
Data for adding a label to an alert
"""
	label: String!
}

"""
[PREVIEW: This functionality is still under development and can change without warning.] Input object for field addFieldAliasMapping
"""
input AddAliasMappingInput {
"""
[PREVIEW: This functionality is still under development and can change without warning.] Input object for field addFieldAliasMapping
"""
	schemaId: String!
"""
[PREVIEW: This functionality is still under development and can change without warning.] Input object for field addFieldAliasMapping
"""
	aliasMapping: AliasMappingInput!
}

type AddGroupMutation {
	group: Group!
}

"""
Input data to create an ingest token
"""
input AddIngestTokenV3Input {
"""
Input data to create an ingest token
"""
	repositoryName: String!
"""
Input data to create an ingest token
"""
	name: String!
"""
Input data to create an ingest token
"""
	parser: String
"""
Input data to create an ingest token
"""
	customToken: String
}

"""
Data for adding a label to a scheduled search
"""
input AddLabelScheduledSearch {
"""
Data for adding a label to a scheduled search
"""
	viewName: String!
"""
Data for adding a label to a scheduled search
"""
	id: String!
"""
Data for adding a label to a scheduled search
"""
	label: String!
}

input AddLimitInput {
	limitName: String!
	allowLogin: Boolean!
	dailyIngest: Long!
	retention: Int!
	allowSelfService: Boolean!
	expiration: Long
	contractVersion: Organizations__ContractVersion
	userLimit: Int
}

input AddLimitV2Input {
	limitName: String!
	allowLogin: Boolean!
	dailyIngest: Long
	dailyIngestContractualType: Organizations__ContractualType!
	storageContractualType: Organizations__ContractualType!
	dailyScanContractualType: Organizations__ContractualType!
	measurementType: Organizations__MeasurementType!
	dailyScan: Long
	retention: Int!
	maxRetention: Int!
	allowSelfService: Boolean!
	expiration: Long
	userLimit: Int
	dateType: String!
	trial: Boolean!
	allowFlightControl: Boolean!
	repositoryLimit: Int
}

type AddRecentQuery {
	recentQueries: [RecentQuery!]!
}

input AddRecentQueryInput {
	viewName: String!
	queryArguments: [InputDictionaryEntry!]!
	queryString: String!
	start: String!
	end: String!
	isLive: Boolean!
	widgetType: String
	options: JSON
}

input AddRoleInput {
	displayName: String!
	viewPermissions: [Permission!]!
	color: String
	systemPermissions: [SystemPermission!]
	organizationPermissions: [OrganizationPermission!]
	objectAction: ObjectAction
	organizationManagementPermissions: [OrganizationManagementPermission!]
}

type AddRoleMutation {
	role: Role!
}

"""
Data for adding a star to a scheduled search
"""
input AddStarScheduledSearch {
"""
Data for adding a star to a scheduled search
"""
	viewName: String!
"""
Data for adding a star to a scheduled search
"""
	id: String!
}

"""
Data for adding a star to an alert
"""
input AddStarToAlert {
"""
Data for adding a star to an alert
"""
	viewName: String!
"""
Data for adding a star to an alert
"""
	id: String!
}

input AddStarToFieldInput {
	fieldName: String!
	searchDomainName: String!
}

type AddStarToFieldMutation {
	starredFields: [String!]!
}

input AddStarToQueryInput {
	savedQueryId: String!
	searchDomainName: String!
}

input AddSubdomainInput {
	subdomain: String!
}

"""
Data for adding to the blocklist
"""
input AddToBlocklistByIdInput {
"""
Data for adding to the blocklist
"""
	pattern: String!
"""
Data for adding to the blocklist
"""
	type: BlockedQueryMatcherType!
"""
Data for adding to the blocklist
"""
	viewId: String
"""
Data for adding to the blocklist
"""
	clusterWide: Boolean
}

"""
Data for adding to the blocklist
"""
input AddToBlocklistInput {
"""
Data for adding to the blocklist
"""
	pattern: String!
"""
Data for adding to the blocklist
"""
	type: BlockedQueryMatcherType!
"""
Data for adding to the blocklist
"""
	viewName: String
"""
Data for adding to the blocklist
"""
	clusterWide: Boolean
}

input AddUserInput {
	username: String!
	company: String
	isRoot: Boolean
	firstName: String
	lastName: String
	fullName: String
	picture: String
	email: String
	countryCode: String
	stateCode: String
}

input AddUserInputV2 {
	username: String!
	company: String
	isRoot: Boolean
	firstName: String
	lastName: String
	fullName: String
	picture: String
	email: String
	countryCode: String
	stateCode: String
	sendInvite: Boolean
	verificationToken: String
	isOrgOwner: Boolean
}

input AddUsersToGroupInput {
	users: [String!]!
	groupId: String!
}

type AddUsersToGroupMutation {
	group: Group!
}

input AliasInfoInput {
	source: String!
	alias: String!
}

"""
[PREVIEW: This functionality is still under development and can change without warning.] Input object for creating a new alias mapping.
"""
input AliasMappingInput {
"""
[PREVIEW: This functionality is still under development and can change without warning.] Input object for creating a new alias mapping.
"""
	name: String!
"""
[PREVIEW: This functionality is still under development and can change without warning.] Input object for creating a new alias mapping.
"""
	tags: [TagsInput!]!
"""
[PREVIEW: This functionality is still under development and can change without warning.] Input object for creating a new alias mapping.
"""
	aliases: [AliasInfoInput!]!
"""
[PREVIEW: This functionality is still under development and can change without warning.] Input object for creating a new alias mapping.
"""
	originalFieldsToKeep: [String!]
}

input AnalyticsBrowser {
	info: AnalyticsBrowserInfo!
	isChrome: Boolean!
	isChromeHeadless: Boolean!
	isEdge: Boolean!
	isFirefox: Boolean!
	isIE: Boolean!
	isSafari: Boolean!
}

input AnalyticsBrowserInfo {
	name: String
	version: String
	major: String
}

input AnalyticsDevice {
	info: AnalyticsDeviceInfo!
	isConsole: Boolean!
	isDesktop: Boolean!
	isMobile: Boolean!
	isTablet: Boolean!
}

input AnalyticsDeviceInfo {
	model: String
	type: String
	vendor: String
}

input AnalyticsEngine {
	info: AnalyticsInfo!
	isWebkit: Boolean!
}

input AnalyticsFeature {
	name: String!
	value: Boolean!
}

input AnalyticsInfo {
	name: String!
	version: String!
}

input AnalyticsLog {
	category: String!
	action: String!
	message: String
}

input AnalyticsLogWithTimestamp {
	eventId: String!
	timestamp: Long!
	route: String!
	action: String!
	system: String!
	arguments: [String!]!
	feature: String
	features: [AnalyticsFeature!]!
	context: String!
	metrics: AnalyticsMetrics!
	userAgent: AnalyticsUserAgent!
}

input AnalyticsMetrics {
	fps: Int!
}

input AnalyticsOS {
	info: AnalyticsInfo!
	isAndroid: Boolean!
	isIOS: Boolean!
	isLinux: Boolean!
	isMacOS: Boolean!
	isWindows: Boolean!
}

input AnalyticsUserAgent {
	browser: AnalyticsBrowser!
	device: AnalyticsDevice!
	engine: AnalyticsEngine!
	os: AnalyticsOS!
}

input ArgumentInput {
	key: String!
	value: String!
}

"""
A gap in th array. Null values represent missing bounds
"""
type ArrayGap {
"""
[PREVIEW: API under active development] Array gap starts at this index (inclusive)
"""
	startsAtIndex: Int!
"""
[PREVIEW: API under active development] Array gap ends at this index (exclusive)
"""
	endsAtIndex: Int!
}

"""
Array gaps identified for a given prefix
"""
type ArrayWithGap {
"""
[PREVIEW: API under active development] Prefix that represents a field up until the point at which a gap was identified. For instance, the field `a[0].b[1]` would give the prefix `a[0].b` as the gap occurs when indexing `b` with `1`. For `a[1].b[0]` we would get the prefix `a`.
"""
	lastValidPrefix: String!
"""
[PREVIEW: API under active development] Gaps identified for array prefix
"""
	gaps: [ArrayGap!]!
}

"""
Different ways in which an assertion may fail.
"""
union AssertionFailureOnField =FieldUnexpectedlyPresent | FieldHadUnexpectedValue | FieldHadConflictingAssertions | AssertionOnFieldWasOrphaned

"""
This occurs when an assertion was set to run on some output event that wasn't produced by the parser. That is, the assertion may be set to run on output event number 2, but the parser only produced one event.
"""
type AssertionOnFieldWasOrphaned {
"""
Field being asserted on.
"""
	fieldName: String!
}

input AssignAssetPermissionsToGroupInputType {
	groupId: String!
	assetId: String!
	assetType: AssetPermissionsAssetType!
	searchDomainId: String
	assetPermissions: [AssetPermissionInputEnum!]!
}

input AssignAssetPermissionsToUserInputType {
	userId: String!
	assetId: String!
	assetType: AssetPermissionsAssetType!
	searchDomainId: String
	assetPermissions: [AssetPermissionInputEnum!]!
}

input AssignOrganizationManagementRoleToGroupInput {
	groupId: String!
	roleId: String!
	organizationIds: [String!]!
}

type AssignOrganizationManagementRoleToGroupMutation {
	group: GroupOrganizationManagementRole!
}

input AssignOrganizationRoleToGroupInput {
	groupId: String!
	roleId: String!
}

type AssignOrganizationRoleToGroupMutation {
	group: GroupOrganizationRole!
}

"""
Input data to assign a parser to an ingest token
"""
input AssignParserToIngestTokenInputV2 {
"""
Input data to assign a parser to an ingest token
"""
	repositoryName: String!
"""
Input data to assign a parser to an ingest token
"""
	tokenName: String!
"""
Input data to assign a parser to an ingest token
"""
	parser: String!
}

input AssignRoleToGroupInput {
	viewId: String!
	groupId: String!
	roleId: String!
	overrideExistingAssignmentsForView: Boolean
}

type AssignRoleToGroupMutation {
	group: SearchDomainRole!
}

input AssignSystemRoleToGroupInput {
	groupId: String!
	roleId: String!
}

type AssignSystemRoleToGroupMutation {
	group: GroupSystemRole!
}

input AssignUserRolesInSearchDomainInput {
	searchDomainId: String!
	roleAssignments: [UserRoleAssignmentInput!]!
}

"""
Authentication through Auth0.
"""
type Auth0Authentication implements AuthenticationMethod{
	auth0Domain: String!
	clientId: String!
	allowSignup: Boolean!
	redirectUrl: String!
"""
The display name of the authentication method.
"""
	name: String!
}

"""
Payload for specifying targets for batch updating query ownership
"""
input BatchUpdateQueryOwnershipInput {
"""
Payload for specifying targets for batch updating query ownership
"""
	targetType: QueryOwnership_SelectionTargetType!
"""
Payload for specifying targets for batch updating query ownership
"""
	ids: [String!]!
}

type BlockIngestMutation {
	repository: Repository!
}

input BlockIngestOnOrgInput {
	blockIngest: Boolean!
}

type BooleanResultType {
	result: Boolean!
}

"""
By proxy authentication. Authentication is provided by proxy.
"""
type ByProxyAuthentication implements AuthenticationMethod{
	name: String!
}

"""
A policy for choosing which segments to cache on local disk when overcommiting
local storage with bucket storage.

This can be used to protect certain repositories for local storage, such that
searching other repositories does not evict them.

A cache policy in LogScale divides segments into prioritized and non-prioritized
segments. When segments needs to be evicted from local storage, we always try
evicting non-prioritized segments before prioritized segments.

A cache policy can be set either on one of three levels (in order of precedence):
 - Repo
 - Org
 - Globally

 When determining the cache policy for a repo we first check if there is a cache
 policy set on the repo. If none is set on the repo, we check the the org. If none
 is set there either we check the global setting.

"""
input CachePolicyInput {
"""
A policy for choosing which segments to cache on local disk when overcommiting
local storage with bucket storage.

This can be used to protect certain repositories for local storage, such that
searching other repositories does not evict them.

A cache policy in LogScale divides segments into prioritized and non-prioritized
segments. When segments needs to be evicted from local storage, we always try
evicting non-prioritized segments before prioritized segments.

A cache policy can be set either on one of three levels (in order of precedence):
 - Repo
 - Org
 - Globally

 When determining the cache policy for a repo we first check if there is a cache
 policy set on the repo. If none is set on the repo, we check the the org. If none
 is set there either we check the global setting.

"""
	prioritizeMillis: Long
}

input CancelRedactEventsInput {
	repositoryName: String!
	redactionTaskId: String!
}

"""
Data for clearing the error on an aggregate alert.
"""
input ClearErrorOnAggregateAlertInput {
"""
Data for clearing the error on an aggregate alert.
"""
	viewName: RepoOrViewName!
"""
Data for clearing the error on an aggregate alert.
"""
	id: String!
}

"""
Data for clearing the error on an alert
"""
input ClearErrorOnAlertInput {
"""
Data for clearing the error on an alert
"""
	viewName: String!
"""
Data for clearing the error on an alert
"""
	id: String!
}

"""
Data for clearing the error on a filter alert
"""
input ClearErrorOnFilterAlertInput {
"""
Data for clearing the error on a filter alert
"""
	viewName: RepoOrViewName!
"""
Data for clearing the error on a filter alert
"""
	id: String!
}

"""
Data for clearing the error on a scheduled search
"""
input ClearErrorOnScheduledSearchInput {
"""
Data for clearing the error on a scheduled search
"""
	viewName: String!
"""
Data for clearing the error on a scheduled search
"""
	id: String!
}

input ClearFieldConfigurationsInput {
	viewOrRepositoryName: String!
}

input ClearRecentQueriesInput {
	viewOrRepositoryName: String!
}

"""
Data for clearing the search limit on a search domain.
"""
input ClearSearchLimitForSearchDomain {
"""
Data for clearing the search limit on a search domain.
"""
	id: String!
}

"""
Input data to clone an existing parser
"""
input CloneParserInput {
"""
Input data to clone an existing parser
"""
	newParserName: String!
"""
Input data to clone an existing parser
"""
	repositoryName: String!
"""
Input data to clone an existing parser
"""
	parserIdToClone: String!
}

"""
Whether a column has been added or removed at the given index
"""
input ColumnChange {
"""
Whether a column has been added or removed at the given index
"""
	changeKind: ColumnChangeKind!
"""
Whether a column has been added or removed at the given index
"""
	index: Int!
}

enum ColumnChangeKind {
	Remove
	Add
}

input ConflictResolutionConfiguration {
	entityType: AssetType!
	entityName: String!
	conflictResolution: MergeStrategy!
}

type CopyDashboardMutation {
	dashboard: Dashboard!
}

type CreateActionFromPackageTemplateMutation {
	action: Action!
}

"""
Data for creating an action from a yaml template
"""
input CreateActionFromTemplateInput {
"""
Data for creating an action from a yaml template
"""
	viewName: RepoOrViewName!
"""
Data for creating an action from a yaml template
"""
	name: String!
"""
Data for creating an action from a yaml template
"""
	yamlTemplate: YAML!
}

"""
Data for creating an aggregate alert.
"""
input CreateAggregateAlert {
"""
Data for creating an aggregate alert.
"""
	viewName: RepoOrViewName!
"""
Data for creating an aggregate alert.
"""
	name: String!
"""
Data for creating an aggregate alert.
"""
	description: String
"""
Data for creating an aggregate alert.
"""
	queryString: String!
"""
Data for creating an aggregate alert.
"""
	actionIdsOrNames: [String!]!
"""
Data for creating an aggregate alert.
"""
	labels: [String!]
"""
Data for creating an aggregate alert.
"""
	enabled: Boolean
"""
Data for creating an aggregate alert.
"""
	throttleTimeSeconds: Long!
"""
Data for creating an aggregate alert.
"""
	throttleField: String
"""
Data for creating an aggregate alert.
"""
	searchIntervalSeconds: Long!
"""
Data for creating an aggregate alert.
"""
	queryTimestampType: QueryTimestampType!
"""
Data for creating an aggregate alert.
"""
	triggerMode: TriggerMode
"""
Data for creating an aggregate alert.
"""
	runAsUserId: String
"""
Data for creating an aggregate alert.
"""
	queryOwnershipType: QueryOwnershipType!
}

"""
Data for creating an alert
"""
input CreateAlert {
"""
Data for creating an alert
"""
	viewName: String!
"""
Data for creating an alert
"""
	name: String!
"""
Data for creating an alert
"""
	description: String
"""
Data for creating an alert
"""
	queryString: String!
"""
Data for creating an alert
"""
	queryStart: String!
"""
Data for creating an alert
"""
	throttleTimeMillis: Long!
"""
Data for creating an alert
"""
	throttleField: String
"""
Data for creating an alert
"""
	runAsUserId: String
"""
Data for creating an alert
"""
	enabled: Boolean
"""
Data for creating an alert
"""
	actions: [String!]!
"""
Data for creating an alert
"""
	labels: [String!]
"""
Data for creating an alert
"""
	queryOwnershipType: QueryOwnershipType
}

type CreateAlertFromPackageTemplateMutation {
	alert: Alert!
}

"""
Data for creating an alert from a yaml template
"""
input CreateAlertFromTemplateInput {
"""
Data for creating an alert from a yaml template
"""
	viewName: RepoOrViewName!
"""
Data for creating an alert from a yaml template
"""
	name: String!
"""
Data for creating an alert from a yaml template
"""
	yamlTemplate: YAML!
}

"""
Data for creating an ingest feed that uses AWS S3 and SQS
"""
input CreateAwsS3SqsIngestFeed {
"""
Data for creating an ingest feed that uses AWS S3 and SQS
"""
	repositoryName: RepoOrViewName!
"""
Data for creating an ingest feed that uses AWS S3 and SQS
"""
	name: String!
"""
Data for creating an ingest feed that uses AWS S3 and SQS
"""
	description: String
"""
Data for creating an ingest feed that uses AWS S3 and SQS
"""
	parser: String!
"""
Data for creating an ingest feed that uses AWS S3 and SQS
"""
	authentication: IngestFeedAwsAuthenticationInput!
"""
Data for creating an ingest feed that uses AWS S3 and SQS
"""
	sqsUrl: String!
"""
Data for creating an ingest feed that uses AWS S3 and SQS
"""
	region: String!
"""
Data for creating an ingest feed that uses AWS S3 and SQS
"""
	enabled: Boolean!
"""
Data for creating an ingest feed that uses AWS S3 and SQS
"""
	preprocessing: IngestFeedPreprocessingInput!
"""
Data for creating an ingest feed that uses AWS S3 and SQS
"""
	compression: IngestFeedCompression!
}

input CreateCustomLinkInteractionInput {
	path: String!
	customLinkInteractionInput: CustomLinkInteractionInput!
}

type CreateDashboardFromPackageTemplateMutation {
	dashboard: Dashboard!
}

"""
Data for creating a dashboard from a yaml specification.
"""
input CreateDashboardFromTemplateV2Input {
"""
Data for creating a dashboard from a yaml specification.
"""
	viewName: RepoOrViewName!
"""
Data for creating a dashboard from a yaml specification.
"""
	name: String!
"""
Data for creating a dashboard from a yaml specification.
"""
	yamlTemplate: YAML!
}

input CreateDashboardInput {
	searchDomainName: String!
	name: String!
	labels: [String!]
	widgets: [WidgetInput!]
	sections: [SectionInput!]
	links: [LinkInput!]
	defaultFilterId: String
	filters: [FilterInput!]
	parameters: [ParameterInput!]
	description: String
	updateFrequency: DashboardUpdateFrequencyInput
}

input CreateDashboardLinkInteractionInput {
	path: String!
	dashboardLinkInteractionInput: DashboardLinkInteractionInput!
}

type CreateDashboardMutation {
	dashboard: Dashboard!
}

"""
Data for creating an email action
"""
input CreateEmailAction {
"""
Data for creating an email action
"""
	viewName: String!
"""
Data for creating an email action
"""
	name: String!
"""
Data for creating an email action
"""
	recipients: [String!]!
"""
Data for creating an email action
"""
	subjectTemplate: String
"""
Data for creating an email action
"""
	bodyTemplate: String
"""
Data for creating an email action
"""
	useProxy: Boolean!
"""
Data for creating an email action
"""
	attachCsv: Boolean
}

"""
Data for creating an event forwarding rule
"""
input CreateEventForwardingRule {
"""
Data for creating an event forwarding rule
"""
	repoName: String!
"""
Data for creating an event forwarding rule
"""
	queryString: String!
"""
Data for creating an event forwarding rule
"""
	eventForwarderId: String!
"""
Data for creating an event forwarding rule
"""
	languageVersion: LanguageVersionEnum
}

"""
Data for creating an FDR feed
"""
input CreateFdrFeed {
"""
Data for creating an FDR feed
"""
	repositoryName: String!
"""
Data for creating an FDR feed
"""
	name: String!
"""
Data for creating an FDR feed
"""
	description: String
"""
Data for creating an FDR feed
"""
	parser: String!
"""
Data for creating an FDR feed
"""
	clientId: String!
"""
Data for creating an FDR feed
"""
	clientSecret: String!
"""
Data for creating an FDR feed
"""
	sqsUrl: String!
"""
Data for creating an FDR feed
"""
	s3Identifier: String!
"""
Data for creating an FDR feed
"""
	enabled: Boolean
}

input CreateFieldAliasSchemaInput {
	name: String!
	fields: [SchemaFieldInput!]!
	aliasMappings: [AliasMappingInput!]
}

"""
Data for creating a filter alert
"""
input CreateFilterAlert {
"""
Data for creating a filter alert
"""
	viewName: RepoOrViewName!
"""
Data for creating a filter alert
"""
	name: String!
"""
Data for creating a filter alert
"""
	description: String
"""
Data for creating a filter alert
"""
	queryString: String!
"""
Data for creating a filter alert
"""
	actionIdsOrNames: [String!]!
"""
Data for creating a filter alert
"""
	labels: [String!]
"""
Data for creating a filter alert
"""
	enabled: Boolean
"""
Data for creating a filter alert
"""
	throttleTimeSeconds: Long
"""
Data for creating a filter alert
"""
	throttleField: String
"""
Data for creating a filter alert
"""
	runAsUserId: String
"""
Data for creating a filter alert
"""
	queryOwnershipType: QueryOwnershipType!
}

"""
Data for creating a LogScale repository action
"""
input CreateHumioRepoAction {
"""
Data for creating a LogScale repository action
"""
	viewName: String!
"""
Data for creating a LogScale repository action
"""
	name: String!
"""
Data for creating a LogScale repository action
"""
	ingestToken: String!
}

"""
Input data to create an ingest listener
"""
input CreateIngestListenerV3Input {
"""
Input data to create an ingest listener
"""
	repositoryName: String!
"""
Input data to create an ingest listener
"""
	port: Int!
"""
Input data to create an ingest listener
"""
	protocol: IngestListenerProtocol!
"""
Input data to create an ingest listener
"""
	vHost: Int
"""
Input data to create an ingest listener
"""
	name: String!
"""
Input data to create an ingest listener
"""
	bindInterface: String!
"""
Input data to create an ingest listener
"""
	parser: String!
"""
Input data to create an ingest listener
"""
	charset: String!
}

"""
Data for creating a Kafka event forwarder
"""
input CreateKafkaEventForwarder {
"""
Data for creating a Kafka event forwarder
"""
	name: String!
"""
Data for creating a Kafka event forwarder
"""
	description: String!
"""
Data for creating a Kafka event forwarder
"""
	properties: String!
"""
Data for creating a Kafka event forwarder
"""
	topic: String!
"""
Data for creating a Kafka event forwarder
"""
	enabled: Boolean
}

"""
Data for creating a local multi-cluster connection
"""
input CreateLocalClusterConnectionInput {
"""
Data for creating a local multi-cluster connection
"""
	multiClusterViewName: String!
"""
Data for creating a local multi-cluster connection
"""
	targetViewName: String!
"""
Data for creating a local multi-cluster connection
"""
	tags: [ClusterConnectionInputTag!]
"""
Data for creating a local multi-cluster connection
"""
	queryPrefix: String
}

"""
Data for creating an OpsGenie action
"""
input CreateOpsGenieAction {
"""
Data for creating an OpsGenie action
"""
	viewName: String!
"""
Data for creating an OpsGenie action
"""
	name: String!
"""
Data for creating an OpsGenie action
"""
	apiUrl: String!
"""
Data for creating an OpsGenie action
"""
	genieKey: String!
"""
Data for creating an OpsGenie action
"""
	useProxy: Boolean!
}

"""
The specification of an external function.
"""
input CreateOrUpdateExternalFunctionInput {
"""
The specification of an external function.
"""
	name: String!
"""
The specification of an external function.
"""
	procedureURL: String!
"""
The specification of an external function.
"""
	parameters: [ParameterSpecificationInput!]!
"""
The specification of an external function.
"""
	description: String!
"""
The specification of an external function.
"""
	kind: KindInput!
}

input CreateOrganizationPermissionTokenInput {
	name: String!
	expireAt: Long
	ipFilterId: String
	permissions: [OrganizationPermission!]!
}

"""
Data for creating a PagerDuty action.
"""
input CreatePagerDutyAction {
"""
Data for creating a PagerDuty action.
"""
	viewName: String!
"""
Data for creating a PagerDuty action.
"""
	name: String!
"""
Data for creating a PagerDuty action.
"""
	severity: String!
"""
Data for creating a PagerDuty action.
"""
	routingKey: String!
"""
Data for creating a PagerDuty action.
"""
	useProxy: Boolean!
}

type CreateParserFromPackageTemplateMutation {
	parser: Parser!
}

"""
Data for creating a parser from a yaml template
"""
input CreateParserFromTemplateInput {
"""
Data for creating a parser from a yaml template
"""
	viewName: RepoOrViewName!
"""
Data for creating a parser from a yaml template
"""
	name: String!
"""
Data for creating a parser from a yaml template
"""
	yamlTemplate: YAML!
}

input CreateParserInput {
	name: String!
	testData: [String!]!
	sourceCode: String!
	repositoryName: String!
	tagFields: [String!]!
	force: Boolean!
	languageVersion: LanguageVersionEnum
}

"""
Input for creating a parser.
"""
input CreateParserInputV2 {
"""
Input for creating a parser.
"""
	name: String!
"""
Input for creating a parser.
"""
	script: String!
"""
Input for creating a parser.
"""
	testCases: [ParserTestCaseInput!]!
"""
Input for creating a parser.
"""
	repositoryName: RepoOrViewName!
"""
Input for creating a parser.
"""
	fieldsToTag: [String!]!
"""
Input for creating a parser.
"""
	fieldsToBeRemovedBeforeParsing: [String!]!
"""
Input for creating a parser.
"""
	allowOverwritingExistingParser: Boolean
"""
Input for creating a parser.
"""
	languageVersion: LanguageVersionInputType
}

type CreateParserMutation {
	parser: Parser!
}

input CreatePersonalUserTokenInput {
	expireAt: Long
	ipFilterId: String
}

"""
Data for creating a post message Slack action.
"""
input CreatePostMessageSlackAction {
"""
Data for creating a post message Slack action.
"""
	viewName: String!
"""
Data for creating a post message Slack action.
"""
	name: String!
"""
Data for creating a post message Slack action.
"""
	apiToken: String!
"""
Data for creating a post message Slack action.
"""
	channels: [String!]!
"""
Data for creating a post message Slack action.
"""
	fields: [SlackFieldEntryInput!]!
"""
Data for creating a post message Slack action.
"""
	useProxy: Boolean!
}

"""
Data for creating a remote cluster connection
"""
input CreateRemoteClusterConnectionInput {
"""
Data for creating a remote cluster connection
"""
	multiClusterViewName: String!
"""
Data for creating a remote cluster connection
"""
	publicUrl: String!
"""
Data for creating a remote cluster connection
"""
	token: String!
"""
Data for creating a remote cluster connection
"""
	tags: [ClusterConnectionInputTag!]
"""
Data for creating a remote cluster connection
"""
	queryPrefix: String
}

type CreateRepositoryMutation {
	repository: Repository!
}

type CreateSavedQueryFromPackageTemplateMutation {
	savedQuery: SavedQuery!
}

input CreateSavedQueryInput {
	name: String!
	viewName: String!
	queryString: String!
	start: String
	end: String
	isLive: Boolean
	widgetType: String
	options: String
	dashboardLinkInteractions: [DashboardLinkInteractionInput!]
	customLinkInteractions: [CustomLinkInteractionInput!]
	searchLinkInteractions: [SearchLinkInteractionInput!]
	updateParametersInteractions: [UpdateParametersInteractionInput!]
}

type CreateSavedQueryPayload {
	savedQuery: SavedQuery!
}

"""
Data for creating a scheduled report.
"""
input CreateScheduledReportInput {
"""
Data for creating a scheduled report.
"""
	viewName: String!
"""
Data for creating a scheduled report.
"""
	name: String!
"""
Data for creating a scheduled report.
"""
	password: String
"""
Data for creating a scheduled report.
"""
	enabled: Boolean!
"""
Data for creating a scheduled report.
"""
	description: String!
"""
Data for creating a scheduled report.
"""
	dashboardId: String!
"""
Data for creating a scheduled report.
"""
	timeIntervalFrom: String
"""
Data for creating a scheduled report.
"""
	schedule: CreateScheduledReportScheduleInput!
"""
Data for creating a scheduled report.
"""
	labels: [String!]!
"""
Data for creating a scheduled report.
"""
	parameters: [CreateScheduledReportParameterValueInput!]!
"""
Data for creating a scheduled report.
"""
	recipients: [String!]!
"""
Data for creating a scheduled report.
"""
	layout: CreateScheduledReportLayoutInput!
}

"""
Layout of the scheduled report.
"""
input CreateScheduledReportLayoutInput {
"""
Layout of the scheduled report.
"""
	paperSize: String!
"""
Layout of the scheduled report.
"""
	paperOrientation: String!
"""
Layout of the scheduled report.
"""
	paperLayout: String!
"""
Layout of the scheduled report.
"""
	showDescription: Boolean!
"""
Layout of the scheduled report.
"""
	showTitleFrontpage: Boolean!
"""
Layout of the scheduled report.
"""
	showParameters: Boolean!
"""
Layout of the scheduled report.
"""
	maxNumberOfRows: Int!
"""
Layout of the scheduled report.
"""
	showTitleHeader: Boolean!
"""
Layout of the scheduled report.
"""
	showExportDate: Boolean!
"""
Layout of the scheduled report.
"""
	footerShowPageNumbers: Boolean!
}

"""
List of parameter value configurations.
"""
input CreateScheduledReportParameterValueInput {
"""
List of parameter value configurations.
"""
	id: String!
"""
List of parameter value configurations.
"""
	value: String!
}

"""
The schedule to run the report by.
"""
input CreateScheduledReportScheduleInput {
"""
The schedule to run the report by.
"""
	cronExpression: String!
"""
The schedule to run the report by.
"""
	timeZone: String!
"""
The schedule to run the report by.
"""
	startDate: Long!
"""
The schedule to run the report by.
"""
	endDate: Long
}

"""
Data for creating a scheduled search
"""
input CreateScheduledSearch {
"""
Data for creating a scheduled search
"""
	viewName: String!
"""
Data for creating a scheduled search
"""
	name: String!
"""
Data for creating a scheduled search
"""
	description: String
"""
Data for creating a scheduled search
"""
	queryString: String!
"""
Data for creating a scheduled search
"""
	queryStart: String!
"""
Data for creating a scheduled search
"""
	queryEnd: String!
"""
Data for creating a scheduled search
"""
	schedule: String!
"""
Data for creating a scheduled search
"""
	timeZone: String!
"""
Data for creating a scheduled search
"""
	backfillLimit: Int!
"""
Data for creating a scheduled search
"""
	enabled: Boolean
"""
Data for creating a scheduled search
"""
	actions: [String!]!
"""
Data for creating a scheduled search
"""
	labels: [String!]
"""
Data for creating a scheduled search
"""
	runAsUserId: String
"""
Data for creating a scheduled search
"""
	queryOwnershipType: QueryOwnershipType
}

"""
Data for creating a scheduled search from a yaml template.
"""
input CreateScheduledSearchFromTemplateInput {
"""
Data for creating a scheduled search from a yaml template.
"""
	viewName: RepoOrViewName!
"""
Data for creating a scheduled search from a yaml template.
"""
	name: String!
"""
Data for creating a scheduled search from a yaml template.
"""
	yamlTemplate: YAML!
}

input CreateSearchLinkInteractionInput {
	path: String!
	searchLinkInteractionInput: SearchLinkInteractionInput!
}

"""
Data for creating a Slack action.
"""
input CreateSlackAction {
"""
Data for creating a Slack action.
"""
	viewName: String!
"""
Data for creating a Slack action.
"""
	name: String!
"""
Data for creating a Slack action.
"""
	url: String!
"""
Data for creating a Slack action.
"""
	fields: [SlackFieldEntryInput!]!
"""
Data for creating a Slack action.
"""
	useProxy: Boolean!
}

input CreateSystemPermissionTokenInput {
	name: String!
	expireAt: Long
	ipFilterId: String
	permissions: [SystemPermission!]!
}

"""
Data for creating an upload file action.
"""
input CreateUploadFileAction {
"""
Data for creating an upload file action.
"""
	viewName: String!
"""
Data for creating an upload file action.
"""
	name: String!
"""
Data for creating an upload file action.
"""
	fileName: String!
}

"""
Data for creating a VictorOps action.
"""
input CreateVictorOpsAction {
"""
Data for creating a VictorOps action.
"""
	viewName: String!
"""
Data for creating a VictorOps action.
"""
	name: String!
"""
Data for creating a VictorOps action.
"""
	messageType: String!
"""
Data for creating a VictorOps action.
"""
	notifyUrl: String!
"""
Data for creating a VictorOps action.
"""
	useProxy: Boolean!
}

input CreateViewPermissionsTokenInput {
	name: String!
	expireAt: Long
	ipFilterId: String
	viewIds: [String!]!
	permissions: [Permission!]!
}

"""
Data for creating a webhook action.
"""
input CreateWebhookAction {
"""
Data for creating a webhook action.
"""
	viewName: String!
"""
Data for creating a webhook action.
"""
	name: String!
"""
Data for creating a webhook action.
"""
	url: String!
"""
Data for creating a webhook action.
"""
	method: String!
"""
Data for creating a webhook action.
"""
	headers: [HttpHeaderEntryInput!]!
"""
Data for creating a webhook action.
"""
	bodyTemplate: String!
"""
Data for creating a webhook action.
"""
	ignoreSSL: Boolean!
"""
Data for creating a webhook action.
"""
	useProxy: Boolean!
}

input CustomLinkInteractionInput {
	name: String!
	titleTemplate: String
	urlTemplate: String!
	openInNewTab: Boolean!
	urlEncodeArgs: Boolean
	fieldInteractionConditions: [FieldInteractionConditionInput!]
}

input DashboardLinkInteractionInput {
	name: String!
	titleTemplate: String
	arguments: [ArgumentInput!]!
	dashboardId: String
	dashboardName: String
	dashboardRepoOrViewName: RepoOrViewName
	packageSpecifier: UnversionedPackageSpecifier
	openInNewTab: Boolean!
	useWidgetTimeWindow: Boolean!
	fieldInteractionConditions: [FieldInteractionConditionInput!]
}

"""
The frequency at which a dashboard updates its results.
"""
enum DashboardUpdateFrequency {
	RealTime
	Never
}

input DashboardUpdateFrequencyInput {
	updateFrequencyType: DashboardUpdateFrequency!
}

"""
Data for deleting an action.
"""
input DeleteAction {
"""
Data for deleting an action.
"""
	viewName: String!
"""
Data for deleting an action.
"""
	id: String!
}

"""
Data for deleting an aggregate alert.
"""
input DeleteAggregateAlert {
"""
Data for deleting an aggregate alert.
"""
	viewName: RepoOrViewName!
"""
Data for deleting an aggregate alert.
"""
	id: String!
}

"""
Data for deleting an alert
"""
input DeleteAlert {
"""
Data for deleting an alert
"""
	viewName: String!
"""
Data for deleting an alert
"""
	id: String!
}

"""
Data for deleting a cluster connection
"""
input DeleteClusterConnectionInput {
"""
Data for deleting a cluster connection
"""
	multiClusterViewName: String!
"""
Data for deleting a cluster connection
"""
	connectionId: String!
}

input DeleteDashboardInput {
	id: String!
}

"""
The data for deleting a dashboard
"""
input DeleteDashboardInputV2 {
"""
The data for deleting a dashboard
"""
	viewId: String!
"""
The data for deleting a dashboard
"""
	dashboardId: String!
}

type DeleteDashboardMutation {
	dashboard: Dashboard!
}

"""
Data for deleting an event forwarder
"""
input DeleteEventForwarderInput {
"""
Data for deleting an event forwarder
"""
	id: String!
}

"""
Data for deleting an event forwarding rule
"""
input DeleteEventForwardingRule {
"""
Data for deleting an event forwarding rule
"""
	repoName: String!
"""
Data for deleting an event forwarding rule
"""
	id: String!
}

"""
Data for deleting an FDR feed
"""
input DeleteFdrFeed {
"""
Data for deleting an FDR feed
"""
	repositoryName: String!
"""
Data for deleting an FDR feed
"""
	id: String!
}

input DeleteFieldAliasSchema {
	schemaId: String!
}

"""
Data for deleting a filter alert
"""
input DeleteFilterAlert {
"""
Data for deleting a filter alert
"""
	viewName: RepoOrViewName!
"""
Data for deleting a filter alert
"""
	id: String!
}

"""
Data for deleting an ingest feed
"""
input DeleteIngestFeed {
"""
Data for deleting an ingest feed
"""
	repositoryName: RepoOrViewName!
"""
Data for deleting an ingest feed
"""
	id: String!
}

input DeleteInteractionInput {
	path: String!
	id: String!
}

input DeleteParserInput {
	id: String!
	repositoryName: RepoOrViewName!
}

input DeleteSavedQueryInput {
	id: String!
	viewName: String!
}

"""
Data for deleting a scheduled report.
"""
input DeleteScheduledReportInput {
"""
Data for deleting a scheduled report.
"""
	viewName: String!
"""
Data for deleting a scheduled report.
"""
	id: String!
}

"""
Data for deleting a scheduled search
"""
input DeleteScheduledSearch {
"""
Data for deleting a scheduled search
"""
	viewName: String!
"""
Data for deleting a scheduled search
"""
	id: String!
}

input DeleteSearchDomainByIdInput {
	id: String!
	deleteMessage: String
}

"""
Data for disabling an aggregate alert.
"""
input DisableAggregateAlert {
"""
Data for disabling an aggregate alert.
"""
	viewName: RepoOrViewName!
"""
Data for disabling an aggregate alert.
"""
	id: String!
}

"""
Data for disabling an alert
"""
input DisableAlert {
"""
Data for disabling an alert
"""
	viewName: RepoOrViewName!
"""
Data for disabling an alert
"""
	id: String!
}

"""
Data for disabling an event forwarder
"""
input DisableEventForwarderInput {
"""
Data for disabling an event forwarder
"""
	id: String!
}

input DisableFieldAliasSchemaOnOrgInput {
	schemaId: String!
}

input DisableFieldAliasSchemaOnViewInput {
	viewName: String!
	schemaId: String!
}

"""
Data for disabling a filter alert
"""
input DisableFilterAlert {
"""
Data for disabling a filter alert
"""
	viewName: RepoOrViewName!
"""
Data for disabling a filter alert
"""
	id: String!
}

"""
Data for disabling access to IOCs (indicators of compromise) for an organization
"""
input DisableOrganizationIocAccess {
"""
Data for disabling access to IOCs (indicators of compromise) for an organization
"""
	organizationId: String!
}

"""
Data for disabling a scheduled report.
"""
input DisableScheduledReportInput {
"""
Data for disabling a scheduled report.
"""
	viewName: String!
"""
Data for disabling a scheduled report.
"""
	id: String!
}

"""
Data for disabling a scheduled search
"""
input DisableStarScheduledSearch {
"""
Data for disabling a scheduled search
"""
	viewName: String!
"""
Data for disabling a scheduled search
"""
	id: String!
}

input DynamicConfigInputObject {
	config: DynamicConfig!
	value: String!
}

"""
An email action.
"""
type EmailAction implements Action{
"""
List of email addresses to send an email to.
"""
	recipients: [String!]!
"""
Subject of the email. Can be templated with values from the result.
"""
	subjectTemplate: String
"""
Body of the email. Can be templated with values from the result.
"""
	bodyTemplate: String
"""
Defines whether the action should use the configured proxy to make web requests.
"""
	useProxy: Boolean!
"""
Whether the result set should be be attached as a CSV file.
"""
	attachCsv: Boolean!
"""
The name of the action.
"""
	name: String!
"""
The display name of the action.
"""
	displayName: String!
"""
The id of the action.
"""
	id: String!
"""
A template that can be used to recreate the action.
"""
	yamlTemplate: YAML!
	packageId: VersionedPackageSpecifier
"""
The package if any which the action is part of.
"""
	package: PackageInstallation
"""
False if this type of action is disabled because of a security policy, true otherwise
"""
	isAllowedToRun: Boolean!
"""
True if this action is used by triggers, where the query is run by the organization. If true, then the OrganizationOwnedQueries permission is required to edit the action.
"""
	requiresOrganizationOwnedQueriesPermissionToEdit: Boolean!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] Allowed asset actions
"""
	allowedActions: [AssetAction!]!
}

"""
Data for enabling an aggregate alert.
"""
input EnableAggregateAlert {
"""
Data for enabling an aggregate alert.
"""
	viewName: RepoOrViewName!
"""
Data for enabling an aggregate alert.
"""
	id: String!
}

"""
Data for enabling an alert
"""
input EnableAlert {
"""
Data for enabling an alert
"""
	viewName: RepoOrViewName!
"""
Data for enabling an alert
"""
	id: String!
}

"""
Data for enabling an event forwarder
"""
input EnableEventForwarderInput {
"""
Data for enabling an event forwarder
"""
	id: String!
}

input EnableFieldAliasSchemaOnOrgInput {
	schemaId: String!
}

input EnableFieldAliasSchemaOnViewsInput {
	viewNames: [String!]!
	schemaId: String!
}

"""
Data for enabling a filter alert
"""
input EnableFilterAlert {
"""
Data for enabling a filter alert
"""
	viewName: RepoOrViewName!
"""
Data for enabling a filter alert
"""
	id: String!
}

"""
Data for enabling access to IOCs (indicators of compromise) for an organization
"""
input EnableOrganizationIocAccess {
"""
Data for enabling access to IOCs (indicators of compromise) for an organization
"""
	organizationId: String!
}

"""
Data for enabling a scheduled report.
"""
input EnableScheduledReportInput {
"""
Data for enabling a scheduled report.
"""
	viewName: String!
"""
Data for enabling a scheduled report.
"""
	id: String!
}

"""
Data for enabling a scheduled search
"""
input EnableStarScheduledSearch {
"""
Data for enabling a scheduled search
"""
	viewName: String!
"""
Data for enabling a scheduled search
"""
	id: String!
}

input EnableWorkerQueryTracingInputType {
	quotaKey: String!
	expiry: DateTime!
}

"""
Enable or disable language restrictions
"""
input EnabledInput {
"""
Enable or disable language restrictions
"""
	version: LanguageVersionEnum!
"""
Enable or disable language restrictions
"""
	enabled: Boolean!
}

input EnforceSubdomainsInput {
	enforce: Boolean!
}

"""
Information about an enrolled collector
"""
type EnrolledCollector {
	id: String!
	configId: String
	machineId: String!
}

"""
Enterprise only authentication.
"""
type EnterpriseOnlyAuthentication implements AuthenticationMethod{
	name: String!
}

"""
A single field in an event with a name and a value
"""
type EventField {
"""
The name of the field
"""
	fieldName: String!
"""
The value of the field
"""
	value: String!
}

"""
A single field in an event with a key and a value
"""
type Field {
"""
The key of the field
"""
	key: String!
"""
The value of the field
"""
	value: String!
}

input FieldConfigurationInput {
	viewId: String!
	fieldName: String!
	json: JSON!
}

"""
Assertion results can be uniquely identified by the output event index and the field name they operate on. So if the same field on the same event has multiple assertions attached, this failure is produced.
"""
type FieldHadConflictingAssertions {
"""
Field being asserted on.
"""
	fieldName: String!
}

"""
An assertion was made that a field had some value, and this assertion failed due to an unexpected value for the field.
"""
type FieldHadUnexpectedValue {
"""
Field being asserted on.
"""
	fieldName: String!
"""
Value that was asserted to be contained in the field.
"""
	expectedValue: String!
"""
The actual value of the field. Note that this is null in the case where the field wasn't present at all.
"""
	actualValue: String
}

"""
Asserts that a given field has an expected value after having been parsed.
"""
input FieldHasValueInput {
"""
Asserts that a given field has an expected value after having been parsed.
"""
	fieldName: String!
"""
Asserts that a given field has an expected value after having been parsed.
"""
	expectedValue: String!
}

input FieldInteractionConditionInput {
	fieldName: String!
	operator: FieldConditionOperatorType!
	argument: String!
}

"""
An assertion was made that a field should not be present, and this assertion failed.
"""
type FieldUnexpectedlyPresent {
"""
Field being asserted on.
"""
	fieldName: String!
"""
The value that the field contained.
"""
	actualValue: String!
}

"""
A dashboard parameter where suggestions are taken from uploaded files.
"""
type FileDashboardParameter implements DashboardParameter{
"""
The name of the file to perform lookups in.
"""
	fileName: String!
"""
The column where the value of suggestions are taken from,
"""
	valueColumn: String!
"""
The column where the label of suggestions are taken from,
"""
	labelColumn: String
"""
Fields and values, where an entry in a file must match one of the given values for each field.
"""
	valueFilters: [FileParameterValueFilter!]!
"""
Regex patterns used to block parameter input.
"""
	invalidInputPatterns: [String!]
"""
Message when parameter input is blocked.
"""
	invalidInputMessage: String
"""
The ID of the parameter.
"""
	id: String!
"""
The label or 'name' displayed next to the input for the variable to make it more human-readable.
"""
	label: String!
"""
The value assigned to the parameter on dashboard load, if no other value is specified.
"""
	defaultValueV2: String
"""
A number that determines the order in which parameters are displayed on a dashboard. If null, the parameter is ordered after other parameters in alphanumerical order.
"""
	order: Int
"""
A number that determines the width of a parameter.
"""
	width: Int
"""
[PREVIEW: The multi-value parameters feature is still in development.] A flag indicating whether the parameter supports having multiple values
"""
	isMultiParam: Boolean
"""
[PREVIEW: The multi-value parameters feature is still in development.] The value assigned to the multi-value parameter on dashboard load, if no other value is specified. This replaces defaultValue whenever isMultiParam is true
"""
	defaultMultiValues: [String!]
}

"""
A filter to reduce entries from files down to those with a matching value in the field.
"""
type FileParameterValueFilter {
	field: String!
	values: [String!]!
}

input FilterInput {
	id: String!
	name: String!
	prefix: String!
}

"""
A dashboard parameter with a fixed list of values to select from.
"""
type FixedListDashboardParameter implements DashboardParameter{
	values: [FixedListParameterOption!]!
"""
The ID of the parameter.
"""
	id: String!
"""
The label or 'name' displayed next to the input for the variable to make it more human-readable.
"""
	label: String!
"""
The value assigned to the parameter on dashboard load, if no other value is specified.
"""
	defaultValueV2: String
"""
A number that determines the order in which parameters are displayed on a dashboard. If null, the parameter is ordered after other parameters in alphanumerical order.
"""
	order: Int
"""
A number that determines the width of a parameter.
"""
	width: Int
"""
[PREVIEW: The multi-value parameters feature is still in development.] A flag indicating whether the parameter supports having multiple values
"""
	isMultiParam: Boolean
"""
[PREVIEW: The multi-value parameters feature is still in development.] The value assigned to the multi-value parameter on dashboard load, if no other value is specified. This replaces defaultValue whenever isMultiParam is true
"""
	defaultMultiValues: [String!]
}

"""
An option in a fixed list parameter.
"""
type FixedListParameterOption {
	label: String!
	value: String!
}

type FleetConfigurationTest {
	collectorIds: [String!]!
	configId: String!
}

"""
A dashboard parameter without restrictions or suggestions.
"""
type FreeTextDashboardParameter implements DashboardParameter{
"""
Regex patterns used to block parameter input.
"""
	invalidInputPatterns: [String!]
"""
Message when parameter input is blocked.
"""
	invalidInputMessage: String
"""
The ID of the parameter.
"""
	id: String!
"""
The label or 'name' displayed next to the input for the variable to make it more human-readable.
"""
	label: String!
"""
The value assigned to the parameter on dashboard load, if no other value is specified.
"""
	defaultValueV2: String
"""
A number that determines the order in which parameters are displayed on a dashboard. If null, the parameter is ordered after other parameters in alphanumerical order.
"""
	order: Int
"""
A number that determines the width of a parameter.
"""
	width: Int
"""
[PREVIEW: The multi-value parameters feature is still in development.] A flag indicating whether the parameter supports having multiple values
"""
	isMultiParam: Boolean
"""
[PREVIEW: The multi-value parameters feature is still in development.] The value assigned to the multi-value parameter on dashboard load, if no other value is specified. This replaces defaultValue whenever isMultiParam is true
"""
	defaultMultiValues: [String!]
}

"""
Input list of function names
"""
input FunctionListInput {
"""
Input list of function names
"""
	version: LanguageVersionEnum!
"""
Input list of function names
"""
	functions: [String!]!
}

"""
The organization management roles of the group.
"""
type GroupOrganizationManagementRole {
	role: Role!
}

input GroupRoleAssignment {
	groupId: String!
	roleId: String!
}

"""
A http request header.
"""
type HttpHeaderEntry {
"""
Key of a http(s) header.
"""
	header: String!
"""
Value of a http(s) header.
"""
	value: String!
}

"""
Http(s) Header entry.
"""
input HttpHeaderEntryInput {
"""
Http(s) Header entry.
"""
	header: String!
"""
Http(s) Header entry.
"""
	value: String!
}

"""
A LogScale repository action.
"""
type HumioRepoAction implements Action{
"""
Humio ingest token for the dataspace that the action should ingest into.
"""
	ingestToken: String!
"""
The name of the action.
"""
	name: String!
"""
The display name of the action.
"""
	displayName: String!
"""
The id of the action.
"""
	id: String!
"""
A template that can be used to recreate the action.
"""
	yamlTemplate: YAML!
	packageId: VersionedPackageSpecifier
"""
The package if any which the action is part of.
"""
	package: PackageInstallation
"""
False if this type of action is disabled because of a security policy, true otherwise
"""
	isAllowedToRun: Boolean!
"""
True if this action is used by triggers, where the query is run by the organization. If true, then the OrganizationOwnedQueries permission is required to edit the action.
"""
	requiresOrganizationOwnedQueriesPermissionToEdit: Boolean!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] Allowed asset actions
"""
	allowedActions: [AssetAction!]!
}

input IPFilterIdInput {
	id: String!
}

input IPFilterInput {
	name: String!
	ipFilter: String!
}

input IPFilterUpdateInput {
	id: String!
	name: String
	ipFilter: String
}

type Ignored implements contractual{
	includeUsage: Boolean!
}

"""
How to authenticate to AWS.
"""
input IngestFeedAwsAuthenticationInput {
"""
How to authenticate to AWS.
"""
	kind: IngestFeedAwsAuthenticationKind!
"""
How to authenticate to AWS.
"""
	roleArn: String
}

"""
The kind of AWS authentication to use.
"""
enum IngestFeedAwsAuthenticationKind {
"""
IAM role authentication
"""
	IamRole
}

"""
The preprocessing to apply to an ingest feed before parsing.
"""
input IngestFeedPreprocessingInput {
"""
The preprocessing to apply to an ingest feed before parsing.
"""
	kind: IngestFeedPreprocessingKind!
}

input IngestPartitionInput {
	id: Int!
	nodeIds: [Int!]!
}

input InputData {
	id: String!
}

input InputDictionaryEntry {
	key: String!
	value: String!
}

input InstallPackageFromRegistryInput {
	viewName: RepoOrViewName!
	packageId: VersionedPackageSpecifier!
	queryOwnershipType: QueryOwnershipType
}

type InstallPackageFromRegistryResult {
	package: Package2!
}

type InstallPackageFromZipResult {
	wasSuccessful: Boolean!
}

type InteractionId {
	id: String!
}

"""
A Kafka event forwarder
"""
type KafkaEventForwarder implements EventForwarder{
"""
The Kafka topic the events should be forwarded to
"""
	topic: String!
"""
The Kafka producer configuration used to forward events in the form of properties (x.y.z=abc). See https://library.humio.com/humio-server/ingesting-data-event-forwarders.html#kafka-configuration.
"""
	properties: String!
"""
Id of the event forwarder
"""
	id: String!
"""
Name of the event forwarder
"""
	name: String!
"""
Description of the event forwarder
"""
	description: String!
"""
Is the event forwarder enabled
"""
	enabled: Boolean!
}

"""
Defines how the external function is executed.
"""
input KindInput {
"""
Defines how the external function is executed.
"""
	name: KindEnum!
"""
Defines how the external function is executed.
"""
	parametersDefiningKeyFields: [String!]
"""
Defines how the external function is executed.
"""
	fixedKeyFields: [String!]
}

type Limited implements contractual{
	limit: Long!
	includeUsage: Boolean!
}

input LinkInput {
	name: String!
	token: String!
}

"""
A widget that lists links to other dashboards.
"""
type LinkWidget implements Widget{
	labels: [String!]!
	id: String!
	title: String!
	description: String
	x: Int!
	y: Int!
	width: Int!
	height: Int!
}

"""
A local cluster connection.
"""
type LocalClusterConnection implements ClusterConnection{
"""
Id of the local view to connect with
"""
	targetViewId: String!
"""
Name of the local view to connect with
"""
	targetViewName: RepoOrViewName!
	targetViewType: LocalTargetType!
"""
Id of the connection
"""
	id: String!
"""
Cluster identity of the connection
"""
	clusterId: String!
"""
Cluster connection tags
"""
	tags: [ClusterConnectionTag!]!
"""
Cluster connection query prefix
"""
	queryPrefix: String!
}

"""
Indicates whether the target of a local cluster connection is a view or a repo
"""
enum LocalTargetType {
	View
	Repo
}

input LoginBridgeInput {
	name: String!
	description: String!
	issuer: String!
	remoteId: String!
	loginUrl: String!
	relayStateUrl: String!
	samlEntityId: String!
	privateSamlCertificate: String!
	publicSamlCertificate: String!
	allowedUsers: [String!]!
	groupAttribute: String!
	groups: [String!]!
	organizationIdAttributeName: String!
	additionalAttributes: String
	organizationNameAttribute: String
	generateUserName: Boolean!
	termsDescription: String!
	termsLink: String!
}

input LoginBridgeUpdateInput {
	name: String
	description: String
	issuer: String
	remoteId: String
	loginUrl: String
	relayStateUrl: String
	samlEntityId: String
	privateSamlCertificate: String
	publicSamlCertificate: String
	allowedUsers: [String!]
	groupAttribute: String
	groups: [String!]
	organizationIdAttributeName: String
	additionalAttributes: String
	organizationNameAttribute: String
	generateUserName: Boolean
	termsDescription: String
	termsLink: String
}

input MarkLimitDeletedInput {
	limitName: String!
	deleted: Boolean!
}

enum MergeStrategy {
	Theirs
	Ours
}

input MigrateLimitsInput {
	createLogLimit: Boolean!
	defaultLimit: String
}

type Mutation {
"""
[PREVIEW: Feature still in development] Will clear the search limit and excluded repository making future searches done on this view behave normally, i.e. having no search time-limit applied
"""
	ClearSearchLimitForSearchDomain(
"""
Data for clearing the search limit on a search domain.
"""
		input: ClearSearchLimitForSearchDomain!
	): View!
"""
[PREVIEW: Feature still in development] Will update search limit, which will restrict future searches to the specified limit, a list of repository names can be supplied and will not be restricted by this limit.
"""
	SetSearchLimitForSearchDomain(
"""
Data for updating search limit on a search domain.
"""
		input: SetSearchLimitForSearchDomain!
	): View!
"""
Client accepts LogScale's Terms and Conditions without providing any additional info
"""
	acceptTermsAndConditions: Account!
"""
Activates a user account supplying additional personal info. By activating the account the client accepts LogScale's Terms and Conditions: https://www.humio.com/terms-and-conditions
"""
	activateAccount(
"""
The first name of the user.
"""
		firstName: String!
"""
The last name of the user.
"""
		lastName: String!
"""
The email address of the user.
"""
		email: String!
"""
The name of company the user represents or is associated with.
"""
		company: String!
"""
The two letter ISO 3166-1 Alpha-2 country code for the country where the company is located.
"""
		countryCode: String!
"""
Optional country subdivision following ISO 3166-2.
"""
		stateCode: String
"""
Optional zip code. Required for community mode.
"""
		zip: String
"""
Optional phone number. Required for community mode.
"""
		phoneNumber: String
		utmParams: UtmParams
	): Account!
"""
Add a label to an alert.
"""
	addAlertLabelV2(
"""
Data for adding a label to an alert
"""
		input: AddAlertLabel!
	): Alert!
"""
Add a new filter to a dashboard's list of filters.
"""
	addDashboardFilter(
		name: String!
		prefixFilter: String!
		id: String!
		searchDomainName: String!
	): Dashboard!
"""
Add a label to a dashboard.
"""
	addDashboardLabel(
		id: String!
		label: String!
	): Dashboard!
"""
[PREVIEW: This functionality is still under development and can change without warning.] Adds a field alias mapping to an existing schema. Returns the ID of the alias mapping if created successfully.
"""
	addFieldAliasMapping(
		input: AddAliasMappingInput!
	): String!
"""
[PREVIEW: Internal testing.] Enable functions for use with specified language version.
"""
	addFunctionsToAllowList(
		input: FunctionListInput!
	): Boolean!
"""
Creates a new group.
"""
	addGroup(
		displayName: String!
		lookupName: String
	): AddGroupMutation!
"""
Create a new Ingest API Token.
"""
	addIngestTokenV3(
		input: AddIngestTokenV3Input!
	): IngestToken!
"""
Add a Limit to the given organization
"""
	addLimit(
		input: AddLimitInput!
	): Boolean!
"""
Add a Limit to the given organization
"""
	addLimitV2(
		input: AddLimitV2Input!
	): LimitV2!
	addLoginBridgeAllowedUsers(
		userID: String!
	): LoginBridge!
"""
Add or update default Query Quota Settings
"""
	addOrUpdateQueryQuotaDefaultSettings(
		input: QueryQuotaDefaultSettingsInput!
	): QueryQuotaDefaultSettings!
"""
Add or update existing Query Quota User Settings
"""
	addOrUpdateQueryQuotaUserSettings(
		input: QueryQuotaUserSettingsInput!
	): QueryQuotaUserSettings!
"""
Adds a query to the list of recent queries. The query is a JSON encoded query and visualization structure produced by the UI.
"""
	addRecentQuery(
		input: AddRecentQueryInput!
	): AddRecentQuery!
"""
Add a label to a scheduled search.
"""
	addScheduledSearchLabel(
"""
Data for adding a label to a scheduled search
"""
		input: AddLabelScheduledSearch!
	): ScheduledSearch!
"""
Add a star to an alert.
"""
	addStarToAlertV2(
"""
Data for adding a star to an alert
"""
		input: AddStarToAlert!
	): Alert!
"""
Add a star to a dashboard.
"""
	addStarToDashboard(
		id: String!
	): Dashboard!
	addStarToField(
		input: AddStarToFieldInput!
	): AddStarToFieldMutation!
"""
Add a star to a scheduled search.
"""
	addStarToScheduledSearch(
"""
Data for adding a star to a scheduled search
"""
		input: AddStarScheduledSearch!
	): ScheduledSearch!
"""
Add a star to a repository or view.
"""
	addStarToSearchDomain(
		name: String!
	): SearchDomain!
"""
[PREVIEW: Requires the feature enabled for the organization.] Adds a subdomain to the organization. Becomes primary subdomain if no primary has been set, and secondary otherwise
"""
	addSubdomain(
		input: AddSubdomainInput!
	): Organization!
"""
Blocklist a query based on a pattern based on a regex or exact match.
"""
	addToBlocklist(
"""
Data for adding to the blocklist
"""
		input: AddToBlocklistInput!
	): [BlockedQuery!]!
"""
Blocklist a query based on a pattern based on a regex or exact match.
"""
	addToBlocklistById(
"""
Data for adding to the blocklist
"""
		input: AddToBlocklistByIdInput!
	): [BlockedQuery!]!
"""
[PREVIEW: Under development] 
"""
	addToLogCollectorConfigurationTest(
		configId: String!
		collectorIds: [String!]!
	): FleetConfigurationTest!
"""
Add or invite a user. Calling this with an invitation token, will activate the account. By activating the account the client accepts LogScale's Terms and Conditions: https://www.humio.com/terms-and-conditions
"""
	addUserV2(
		input: AddUserInputV2!
	): userOrPendingUser!
"""
Adds users to an existing group.
"""
	addUsersToGroup(
		input: AddUsersToGroupInput!
	): AddUsersToGroupMutation!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] Assigns asset permissions to group. Unassignment can be done by providing an empty list of asset permissions for an asset
"""
	assignAssetPermissionsToGroup(
		input: AssignAssetPermissionsToGroupInputType!
	): Group!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] Assigns asset permissions to user. Unassignment can be done by providing an empty list of asset permissions for an asset
"""
	assignAssetPermissionsToUser(
		input: AssignAssetPermissionsToUserInputType!
	): User!
"""
[PREVIEW: Under development] 
"""
	assignLogCollectorConfiguration(
		configId: String
		id: String!
	): Boolean!
"""
[PREVIEW: Under development] 
"""
	assignLogCollectorsToConfiguration(
		configId: String
		ids: [String!]
	): [EnrolledCollector!]!
"""
[PREVIEW: Experimental feature to allow assigning permissions to manage a subset of organizations.] Assigns an organization management role to a group for the provided organizations.
"""
	assignOrganizationManagementRoleToGroup(
		input: AssignOrganizationManagementRoleToGroupInput!
	): AssignOrganizationManagementRoleToGroupMutation!
"""
[PREVIEW: No note] Assigns a organization role to a group.
"""
	assignOrganizationRoleToGroup(
		input: AssignOrganizationRoleToGroupInput!
	): AssignOrganizationRoleToGroupMutation!
"""
Assign an ingest token to be associated with a parser.
"""
	assignParserToIngestTokenV2(
		input: AssignParserToIngestTokenInputV2!
	): IngestToken!
"""
Assigns a role to a group for a given view. If called with overrideExistingAssignmentsForView=false, this mutation can assign multiple roles for the same view. Calling with overrideExistingAssignmentsForView=false is thus only available if the MultipleViewRoleBindings feature is enabled.
"""
	assignRoleToGroup(
		input: AssignRoleToGroupInput!
	): AssignRoleToGroupMutation!
"""
Assigns a system role to a group.
"""
	assignSystemRoleToGroup(
		input: AssignSystemRoleToGroupInput!
	): AssignSystemRoleToGroupMutation!
"""
Assign node tasks. This is not a replacement, but will add to the existing assigned node tasks. Returns the set of assigned tasks after the assign operation has completed.
"""
	assignTasks(
"""
ID of the node to assign node tasks to.
"""
		nodeID: Int!
"""
List of tasks to assign.
"""
		tasks: [NodeTaskEnum!]!
	): [NodeTaskEnum!]!
"""
[PREVIEW: This mutation is dependent on the MultipleViewRoleBindings feature being enabled.] Assigns roles for the user in the search domain. This mutation allows assigning multiple roles for the same view and is thus dependent on the MultipleViewRoleBindings feature being enabled.
"""
	assignUserRolesInSearchDomain(
		input: AssignUserRolesInSearchDomainInput!
	): [User!]!
"""
Batch update query ownership to run queries on behalf of the organization for triggers and shared dashboards.
"""
	batchUpdateQueryOwnership(
		input: BatchUpdateQueryOwnershipInput!
	): Boolean!
"""
Block ingest to the specified repository for a number of seconds (at most 1 year) into the future
"""
	blockIngest(
		repositoryName: String!
		seconds: Int!
	): BlockIngestMutation!
"""
Set whether the organization is blocking ingest and dataspaces are pausing ingest
"""
	blockIngestOnOrg(
		input: BlockIngestOnOrgInput!
	): Organization!
"""
Cancel a previously submitted redaction. Returns true if the redaction was cancelled, false otherwise. Cancellation is best effort. If some events have already been redacted, they are not restored.
"""
	cancelRedactEvents(
		input: CancelRedactEventsInput!
	): Boolean!
	changeUserAndGroupRolesForSearchDomain(
		searchDomainId: String!
		groups: [GroupRoleAssignment!]!
		users: [UserRoleAssignment!]!
	): [UserOrGroup!]!
"""
Set CID of provisioned organization
"""
	clearCid: Organization!
"""
Clear the error status on an aggregate alert. The status will be updated if the error reoccurs.
"""
	clearErrorOnAggregateAlert(
"""
Data for clearing the error on an aggregate alert.
"""
		input: ClearErrorOnAggregateAlertInput!
	): AggregateAlert!
"""
Clear the error status on an alert. The status will be updated if the error reoccurs.
"""
	clearErrorOnAlert(
"""
Data for clearing the error on an alert
"""
		input: ClearErrorOnAlertInput!
	): Alert!
"""
Clear the error status on a filter alert. The status will be updated if the error reoccurs.
"""
	clearErrorOnFilterAlert(
"""
Data for clearing the error on a filter alert
"""
		input: ClearErrorOnFilterAlertInput!
	): FilterAlert!
"""
Clear the error status on a scheduled search. The status will be updated if the error reoccurs.
"""
	clearErrorOnScheduledSearch(
"""
Data for clearing the error on a scheduled search
"""
		input: ClearErrorOnScheduledSearchInput!
	): ScheduledSearch!
"""
Clears UI configurations for all fields for the current user
"""
	clearFieldConfigurations(
		input: ClearFieldConfigurationsInput!
	): Boolean!
"""
Clear recent queries for current user on a given view or repository.
"""
	clearRecentQueries(
		input: ClearRecentQueriesInput!
	): Boolean!
"""
Create a clone of an existing parser.
"""
	cloneParser(
		input: CloneParserInput!
	): Parser!
"""
Unregisters a node from the cluster.
"""
	clusterUnregisterNode(
"""
Force removal of the node. I hope you know what you are doing!
"""
		force: Boolean!
"""
ID of the node to unregister.
"""
		nodeID: Int!
	): UnregisterNodeMutation!
"""
Create a clone of a dashboard.
"""
	copyDashboard(
		id: String!
"""
The name of the repository or view where the dashboard to be copied to.
"""
		targetSearchDomainName: String
"""
The name of the repository or view where the dashboard to be copied from.
"""
		sourceSearchDomainName: String!
"""
The name the copied dashboard should have.
"""
		name: String!
	): CopyDashboardMutation!
"""
Create an action from a package action template.
"""
	createActionFromPackageTemplate(
"""
The name of the view the package is installed in.
"""
		viewName: String!
"""
The id of the package to fetch the action template from.
"""
		packageId: VersionedPackageSpecifier!
"""
The name of the action template in the package.
"""
		actionTemplateName: String!
"""
The name of the new action to create.
"""
		overrideName: String
	): CreateActionFromPackageTemplateMutation!
"""
Create an action from yaml template
"""
	createActionFromTemplate(
"""
Data for creating an action from a yaml template
"""
		input: CreateActionFromTemplateInput!
	): Action!
"""
Create an aggregate alert.
"""
	createAggregateAlert(
"""
Data for creating an aggregate alert.
"""
		input: CreateAggregateAlert!
	): AggregateAlert!
"""
Create an alert.
"""
	createAlert(
"""
Data for creating an alert
"""
		input: CreateAlert!
	): Alert!
"""
Create an alert from a package alert template.
"""
	createAlertFromPackageTemplate(
"""
The name of the view or repo the package is installed in.
"""
		searchDomainName: String!
"""
The id of the package to fetch the alert template from.
"""
		packageId: VersionedPackageSpecifier!
"""
The name of the alert template in the package.
"""
		alertTemplateName: String!
"""
The name of the new alert to create.
"""
		alertName: String!
	): CreateAlertFromPackageTemplateMutation!
"""
Create an alert from yaml template
"""
	createAlertFromTemplate(
"""
Data for creating an alert from a yaml template
"""
		input: CreateAlertFromTemplateInput!
	): Alert!
"""
Create an ingest feed that uses AWS S3 and SQS
"""
	createAwsS3SqsIngestFeed(
"""
Data for creating an ingest feed that uses AWS S3 and SQS
"""
		input: CreateAwsS3SqsIngestFeed!
	): IngestFeed!
"""
[PREVIEW: in development.] Create a custom link interaction.
"""
	createCustomLinkInteraction(
		input: CreateCustomLinkInteractionInput!
	): InteractionId!
"""
Create a dashboard.
"""
	createDashboard(
		input: CreateDashboardInput!
	): CreateDashboardMutation!
"""
Create a dashboard from a package dashboard template.
"""
	createDashboardFromPackageTemplate(
"""
The name of the view the package is installed in.
"""
		viewName: String!
"""
The id of the package to fetch the dashboard template from.
"""
		packageId: VersionedPackageSpecifier!
"""
The name of the dashboard template in the package.
"""
		dashboardTemplateName: String!
"""
The name of the new dashboard to create.
"""
		overrideName: String
	): CreateDashboardFromPackageTemplateMutation!
"""
Create a dashboard from a yaml specification.
"""
	createDashboardFromTemplateV2(
"""
Data for creating a dashboard from a yaml specification.
"""
		input: CreateDashboardFromTemplateV2Input!
	): Dashboard!
"""
[PREVIEW: in development.] Create a dashboard link interaction.
"""
	createDashboardLinkInteraction(
		input: CreateDashboardLinkInteractionInput!
	): InteractionId!
"""
Gets or create a new demo data view.
"""
	createDemoDataRepository(
		demoDataType: String!
	): Repository!
"""
Create an email action.
"""
	createEmailAction(
"""
Data for creating an email action
"""
		input: CreateEmailAction!
	): EmailAction!
"""
Create an organization. Root operation.
"""
	createEmptyOrganization(
		name: String!
		description: String
		organizationId: String
		subdomain: String
		cid: String
	): Organization!
"""
Create an event forwarding rule on a repository and return it
"""
	createEventForwardingRule(
"""
Data for creating an event forwarding rule
"""
		input: CreateEventForwardingRule!
	): EventForwardingRule!
"""
Create an FDR feed
"""
	createFdrFeed(
"""
Data for creating an FDR feed
"""
		input: CreateFdrFeed!
	): FdrFeed!
"""
[PREVIEW: This functionality is still under development and can change without warning.] Creates a schema. If another schema already exists with the same name, then this overwrites it.
"""
	createFieldAliasSchema(
		input: CreateFieldAliasSchemaInput!
	): FieldAliasSchema!
"""
Create a filter alert.
"""
	createFilterAlert(
"""
Data for creating a filter alert
"""
		input: CreateFilterAlert!
	): FilterAlert!
"""
[PREVIEW: Under development] 
"""
	createFleetInstallToken(
		name: String!
		configId: String
	): FleetInstallationToken!
"""
Create a LogScale repository action.
"""
	createHumioRepoAction(
"""
Data for creating a LogScale repository action
"""
		input: CreateHumioRepoAction!
	): HumioRepoAction!
"""
Create a new IP filter.
"""
	createIPFilter(
		input: IPFilterInput!
	): IPFilter!
"""
Create a new ingest listener.
"""
	createIngestListenerV3(
		input: CreateIngestListenerV3Input!
	): IngestListener!
"""
Create a Kafka event forwarder and return it
"""
	createKafkaEventForwarder(
"""
Data for creating a Kafka event forwarder
"""
		input: CreateKafkaEventForwarder!
	): KafkaEventForwarder!
"""
[PREVIEW: Experimental feature, not ready for production.] Create a cluster connection to a local view.
"""
	createLocalClusterConnection(
"""
Data for creating a local multi-cluster connection
"""
		input: CreateLocalClusterConnectionInput!
	): LocalClusterConnection!
"""
[PREVIEW: Under development] Creates a log collector configuration.
"""
	createLogCollectorConfiguration(
		name: String!
		draft: String
	): LogCollectorConfiguration!
"""
[PREVIEW: Under development] 
"""
	createLogCollectorGroup(
		name: String!
		filter: String
		configIds: [String!]
	): LogCollectorGroup!
"""
Create a lookup file from a package lookup file template.
"""
	createLookupFileFromPackageTemplate(
"""
The name of the view the package is installed in.
"""
		viewName: RepoOrViewName!
"""
The id of the package to fetch the lookup file template from.
"""
		packageId: VersionedPackageSpecifier!
"""
The filename of the lookup file template in the package.
"""
		lookupFileTemplateName: String!
"""
The name of the new lookup file to create.
"""
		overrideName: String
	): FileNameAndPath!
"""
Create an OpsGenie action.
"""
	createOpsGenieAction(
"""
Data for creating an OpsGenie action
"""
		input: CreateOpsGenieAction!
	): OpsGenieAction!
"""
[PREVIEW: Feature still in development] 
"""
	createOrUpdateCrossOrganizationView(
		name: String!
		limitIds: [String!]!
		filter: String
		repoFilters: [RepoFilterInput!]
	): View!
"""
[PREVIEW: Experimental prototype not ready for production use] Creates or updates an external function specification.
"""
	createOrUpdateExternalFunction(
		input: CreateOrUpdateExternalFunctionInput!
	): ExternalFunctionSpecificationOutput!
"""
Create a organization permissions token for organizational-level access.
"""
	createOrganizationPermissionsToken(
		input: CreateOrganizationPermissionTokenInput!
	): String!
"""
Create a metric view, usage view and log view for each organization. (Root operation)
"""
	createOrganizationsViews(
		includeDebugView: Boolean
		specificOrganization: String
	): Boolean!
"""
Create a PagerDuty action.
"""
	createPagerDutyAction(
"""
Data for creating a PagerDuty action.
"""
		input: CreatePagerDutyAction!
	): PagerDutyAction!
"""
Create a parser.
"""
	createParser(
		input: CreateParserInput!
	): CreateParserMutation!
"""
Create a parser from a package parser template.
"""
	createParserFromPackageTemplate(
"""
The name of the view the package is installed in.
"""
		viewName: String!
"""
The id of the package to fetch the parser template from.
"""
		packageId: VersionedPackageSpecifier!
"""
The name of the parser template in the package.
"""
		parserTemplateName: String!
"""
The name of the new parser to create.
"""
		overrideName: String
	): CreateParserFromPackageTemplateMutation!
"""
Create a parser from a yaml specification
"""
	createParserFromTemplate(
"""
Data for creating a parser from a yaml template
"""
		input: CreateParserFromTemplateInput!
	): Parser!
"""
Create a parser.
"""
	createParserV2(
		input: CreateParserInputV2!
	): Parser!
"""
Create a personal user token for the user. It will inherit the same permissions as the user.
"""
	createPersonalUserToken(
		input: CreatePersonalUserTokenInput!
	): String!
"""
Create a new sharable link to a dashboard.
"""
	createReadonlyToken(
		id: String!
		name: String!
		ipFilterId: String
"""
Ownership of the queries run by this shared dashboard. If value is User, ownership wil be based the calling user
"""
		queryOwnershipType: QueryOwnershipType
	): DashboardLink!
"""
[PREVIEW: Experimental feature, not ready for production.] Create a cluster connection to a remote view.
"""
	createRemoteClusterConnection(
"""
Data for creating a remote cluster connection
"""
		input: CreateRemoteClusterConnectionInput!
	): RemoteClusterConnection!
"""
Create a new repository.
"""
	createRepository(
		name: String!
		description: String
		retentionInMillis: Long
		retentionInIngestSizeBytes: Long
		retentionInStorageSizeBytes: Long
		organizationId: String
		type: RepositoryType
		repositoryId: String
		dataType: RepositoryDataType
"""
The limit the repository should be attached to, only a cloud feature. If not specified a default will be found and used
"""
		limitId: String
	): CreateRepositoryMutation!
"""
Adds a role. Only usable if roles are not managed externally, e.g. in LDAP.
"""
	createRole(
		input: AddRoleInput!
	): AddRoleMutation!
"""
Create a saved query.
"""
	createSavedQuery(
		input: CreateSavedQueryInput!
	): CreateSavedQueryPayload!
"""
Create a saved query from a package saved query template.
"""
	createSavedQueryFromPackageTemplate(
"""
The name of the view the package is installed in.
"""
		viewName: String!
"""
The id of the package to fetch the saved query template from.
"""
		packageId: VersionedPackageSpecifier!
"""
The name of the saved query template in the package.
"""
		savedQueryTemplateName: String!
"""
The name of the new saved query to create.
"""
		overrideName: String
	): CreateSavedQueryFromPackageTemplateMutation!
"""
Create a scheduled report.
"""
	createScheduledReport(
"""
Data for creating a scheduled report.
"""
		input: CreateScheduledReportInput!
	): ScheduledReport!
"""
Create a scheduled search.
"""
	createScheduledSearch(
"""
Data for creating a scheduled search
"""
		input: CreateScheduledSearch!
	): ScheduledSearch!
"""
Create a scheduled search from a package scheduled search template.
"""
	createScheduledSearchFromPackageTemplate(
"""
The name of the view or repo the package is installed in.
"""
		searchDomainName: RepoOrViewName!
"""
The id of the package to fetch the scheduled search template from.
"""
		packageId: VersionedPackageSpecifier!
"""
The name of the scheduled search template in the package.
"""
		scheduledSearchTemplateName: String!
"""
The name of the new scheduled search to create.
"""
		scheduledSearchName: String!
	): ScheduledSearch!
"""
Create a scheduled search from a yaml specification.
"""
	createScheduledSearchFromTemplate(
"""
Data for creating a scheduled search from a yaml template.
"""
		input: CreateScheduledSearchFromTemplateInput!
	): ScheduledSearch!
"""
[PREVIEW: in development.] Create a search link interaction.
"""
	createSearchLinkInteraction(
		input: CreateSearchLinkInteractionInput!
	): InteractionId!
"""
Create a Slack action.
"""
	createSlackAction(
"""
Data for creating a Slack action.
"""
		input: CreateSlackAction!
	): SlackAction!
"""
Create a post message Slack action.
"""
	createSlackPostMessageAction(
"""
Data for creating a post message Slack action.
"""
		input: CreatePostMessageSlackAction!
	): SlackPostMessageAction!
"""
Create a system permissions token for system-level access.
"""
	createSystemPermissionsToken(
		input: CreateSystemPermissionTokenInput!
	): String!
"""
Create an upload file action.
"""
	createUploadFileAction(
"""
Data for creating an upload file action.
"""
		input: CreateUploadFileAction!
	): UploadFileAction!
"""
Create a VictorOps action.
"""
	createVictorOpsAction(
"""
Data for creating a VictorOps action.
"""
		input: CreateVictorOpsAction!
	): VictorOpsAction!
"""
Create a new view.
"""
	createView(
		name: String!
		description: String
		connections: [ViewConnectionInput!]
		federatedViews: [String!]
		isFederated: Boolean
	): View!
"""
Create a view permission token. The permissions will take effect across all the views.
"""
	createViewPermissionsToken(
		input: CreateViewPermissionsTokenInput!
	): String!
"""
Create a webhook action.
"""
	createWebhookAction(
"""
Data for creating a webhook action.
"""
		input: CreateWebhookAction!
	): WebhookAction!
"""
Delete an action.
"""
	deleteAction(
"""
Data for deleting an action.
"""
		input: DeleteAction!
	): Boolean!
"""
Delete an aggregate alert.
"""
	deleteAggregateAlert(
"""
Data for deleting an aggregate alert.
"""
		input: DeleteAggregateAlert!
	): Boolean!
"""
Delete an alert.
"""
	deleteAlert(
"""
Data for deleting an alert
"""
		input: DeleteAlert!
	): Boolean!
"""
[PREVIEW: Experimental feature, not ready for production.] Delete a cluster connection from a view.
"""
	deleteClusterConnection(
"""
Data for deleting a cluster connection
"""
		input: DeleteClusterConnectionInput!
	): Boolean!
"""
Delete a dashboard.
"""
	deleteDashboard(
		input: DeleteDashboardInput!
	): DeleteDashboardMutation!
"""
Delete a dashboard by looking up the view with the given viewId and then the dashboard in the view with the given dashboardId.
"""
	deleteDashboardV2(
		input: DeleteDashboardInputV2!
	): SearchDomain!
"""
Delete an event forwarder
"""
	deleteEventForwarder(
"""
Data for deleting an event forwarder
"""
		input: DeleteEventForwarderInput!
	): Boolean!
"""
Delete an event forwarding rule on a repository
"""
	deleteEventForwardingRule(
"""
Data for deleting an event forwarding rule
"""
		input: DeleteEventForwardingRule!
	): Boolean!
"""
[PREVIEW: Experimental prototype not ready for production use] Deletes a given external function specification.
"""
	deleteExternalFunction(
		input: deleteExternalFunctionInput!
	): Boolean!
"""
Delete an FDR feed
"""
	deleteFdrFeed(
"""
Data for deleting an FDR feed
"""
		input: DeleteFdrFeed!
	): Boolean!
"""
Delete a feature flag.
"""
	deleteFeatureFlag(
		feature: String!
	): Boolean!
"""
[PREVIEW: This functionality is still under development and can change without warning.] deletes an alias mapping
"""
	deleteFieldAliasSchema(
		input: DeleteFieldAliasSchema!
	): Boolean!
"""
Delete a filter alert.
"""
	deleteFilterAlert(
"""
Data for deleting a filter alert
"""
		input: DeleteFilterAlert!
	): Boolean!
"""
[PREVIEW: Under development] 
"""
	deleteFleetInstallToken(
		token: String!
	): Boolean!
"""
Delete IP filter.
"""
	deleteIPFilter(
		input: IPFilterIdInput!
	): Boolean!
"""
For deleting an identity provider. Root operation.
"""
	deleteIdentityProvider(
		id: String!
	): Boolean!
"""
Delete an ingest feed
"""
	deleteIngestFeed(
"""
Data for deleting an ingest feed
"""
		input: DeleteIngestFeed!
	): Boolean!
"""
Delete an ingest listener.
"""
	deleteIngestListener(
		id: String!
	): BooleanResultType!
"""
[PREVIEW: in development.] Delete an interaction.
"""
	deleteInteraction(
		input: DeleteInteractionInput!
	): Boolean!
"""
[PREVIEW: Under development] 
"""
	deleteLogCollectorConfiguration(
		configId: String!
		versionId: Int!
	): Boolean!
"""
[PREVIEW: Under development] 
"""
	deleteLogCollectorGroup(
		id: String!
	): Boolean!
"""
[PREVIEW: Under development] 
"""
	deleteLostCollectors(
		dryRun: Boolean!
		days: Int!
	): Int!
"""
Delete notification from the system. Requires root.
"""
	deleteNotification(
		notificationId: String!
	): Boolean!
"""
Delete a parser.
"""
	deleteParser(
		input: DeleteParserInput!
	): BooleanResultType!
"""
Remove a shared link to a dashboard.
"""
	deleteReadonlyToken(
		id: String!
		token: String!
	): BooleanResultType!
"""
Deletes a saved query.
"""
	deleteSavedQuery(
		input: DeleteSavedQueryInput!
	): BooleanResultType!
"""
Delete a scheduled report.
"""
	deleteScheduledReport(
		input: DeleteScheduledReportInput!
	): Boolean!
"""
Delete a scheduled search.
"""
	deleteScheduledSearch(
"""
Data for deleting a scheduled search
"""
		input: DeleteScheduledSearch!
	): Boolean!
"""
Delete a repository or view.
"""
	deleteSearchDomain(
		name: String!
		deleteMessage: String
	): BooleanResultType!
"""
Delete a repository or view.
"""
	deleteSearchDomainById(
		input: DeleteSearchDomainByIdInput!
	): Boolean!
"""
Delete a token
"""
	deleteToken(
		input: InputData!
	): Boolean!
"""
Disable an aggregate alert.
"""
	disableAggregateAlert(
"""
Data for disabling an aggregate alert.
"""
		input: DisableAggregateAlert!
	): Boolean!
"""
Disable an alert.
"""
	disableAlert(
"""
Data for disabling an alert
"""
		input: DisableAlert!
	): Boolean!
"""
Removes demo view.
"""
	disableDemoDataForUser: Boolean!
"""
Disables an event forwarder
"""
	disableEventForwarder(
"""
Data for disabling an event forwarder
"""
		input: DisableEventForwarderInput!
	): Boolean!
"""
Disable a feature.
"""
	disableFeature(
		feature: FeatureFlag!
	): Boolean!
"""
Disable a feature for a specific organization.
"""
	disableFeatureForOrg(
		orgId: String!
		feature: FeatureFlag!
	): Boolean!
"""
Disable a feature for a specific user.
"""
	disableFeatureForUser(
		feature: FeatureFlag!
		userId: String!
	): Boolean!
"""
[PREVIEW: This functionality is still under development and can change without warning.] Disables the schema on this organization
"""
	disableFieldAliasSchemaOnOrg(
		input: DisableFieldAliasSchemaOnOrgInput!
	): Boolean!
"""
[PREVIEW: This functionality is still under development and can change without warning.] Disables the schema on the given view or repository.
"""
	disableFieldAliasSchemaOnView(
		input: DisableFieldAliasSchemaOnViewInput!
	): Boolean!
"""
Disable a filter alert.
"""
	disableFilterAlert(
"""
Data for disabling a filter alert
"""
		input: DisableFilterAlert!
	): Boolean!
"""
[PREVIEW: Under development] 
"""
	disableLogCollectorDebugLogging: Boolean!
"""
[PREVIEW: Under development] 
"""
	disableLogCollectorInstanceDebugLogging(
		id: String!
	): Boolean!
"""
Disable access to IOCs (indicators of compromise) for an organization. (Requires Organization Manager Permission)
"""
	disableOrganizationIocAccess(
"""
Data for disabling access to IOCs (indicators of compromise) for an organization
"""
		input: DisableOrganizationIocAccess!
	): Organization!
"""
Disable a scheduled report.
"""
	disableScheduledReport(
		input: DisableScheduledReportInput!
	): Boolean!
"""
Disable execution of a scheduled search.
"""
	disableScheduledSearch(
"""
Data for disabling a scheduled search
"""
		input: DisableStarScheduledSearch!
	): ScheduledSearch!
"""
[PREVIEW: Internal debugging tool, do not use without explicit instruction from support] Disable query tracing on worker nodes for queries with the given quota key
"""
	disableWorkerQueryTracing(
"""
The quota key to disable tracing for
"""
		quotaKey: String!
	): Boolean!
"""
Dismiss notification for specific user, if allowed by notification type.
"""
	dismissNotification(
		notificationId: String!
	): Boolean!
"""
Enable an aggregate alert.
"""
	enableAggregateAlert(
"""
Data for enabling an aggregate alert.
"""
		input: EnableAggregateAlert!
	): Boolean!
"""
Enable an alert.
"""
	enableAlert(
"""
Data for enabling an alert
"""
		input: EnableAlert!
	): Boolean!
"""
Gets or create a new demo data view.
"""
	enableDemoDataForUser(
		demoDataType: String!
	): View!
"""
Enables an event forwarder
"""
	enableEventForwarder(
"""
Data for enabling an event forwarder
"""
		input: EnableEventForwarderInput!
	): Boolean!
"""
Enable a feature.
"""
	enableFeature(
		feature: FeatureFlag!
	): Boolean!
"""
Enable a feature for a specific organization.
"""
	enableFeatureForOrg(
		orgId: String!
		feature: FeatureFlag!
	): Boolean!
"""
Enable a feature for a specific user.
"""
	enableFeatureForUser(
		feature: FeatureFlag!
		userId: String!
	): Boolean!
"""
[PREVIEW: This functionality is still under development and can change without warning.] Enables the schema on this organization. Field alias mappings in this schema will be active during search across all views and repositories within this org.
"""
	enableFieldAliasSchemaOnOrg(
		input: EnableFieldAliasSchemaOnOrgInput!
	): Boolean!
"""
[PREVIEW: This functionality is still under development and can change without warning.] 
Enables the schema on the given list of views or repositories.
Field alias mappings in this schema will be active during search within this view or repository.
If at least one view fails to be enabled on the given view, then no changes are performed on any of the views.

"""
	enableFieldAliasSchemaOnViews(
		input: EnableFieldAliasSchemaOnViewsInput!
	): Boolean!
"""
Enable a filter alert.
"""
	enableFilterAlert(
"""
Data for enabling a filter alert
"""
		input: EnableFilterAlert!
	): Boolean!
"""
[PREVIEW: Under development] 
"""
	enableLogCollectorDebugLogging(
		url: String
		token: String!
		level: String!
		repository: String
	): Boolean!
"""
[PREVIEW: Under development] 
"""
	enableLogCollectorInstanceDebugLogging(
		id: String!
		url: String
		token: String!
		level: String!
		repositoryName: String
	): Boolean!
"""
Enable access to IOCs (indicators of compromise) for an organization. (Requires Organization Manager Permission).
"""
	enableOrganizationIocAccess(
"""
Data for enabling access to IOCs (indicators of compromise) for an organization
"""
		input: EnableOrganizationIocAccess!
	): Organization!
"""
Enable a scheduled report.
"""
	enableScheduledReport(
		input: EnableScheduledReportInput!
	): Boolean!
"""
Enable execution of a scheduled search.
"""
	enableScheduledSearch(
"""
Data for enabling a scheduled search
"""
		input: EnableStarScheduledSearch!
	): ScheduledSearch!
"""
[PREVIEW: Internal debugging tool, do not use without explicit instruction from support] Enable query tracing on worker nodes for queries with the given quota key
"""
	enableWorkerQueryTracing(
		input: EnableWorkerQueryTracingInputType!
	): Boolean!
"""
Extend a Cloud Trial. (Requires Root Permissions)
"""
	extendCloudTrial(
		organizationId: String!
		days: Int!
	): Boolean!
"""
Set the primary bucket target for the organization.
"""
	findOrCreateBucketStorageEntity(
		organizationId: String!
	): Int!
"""
Installs a package in a specific view.
"""
	installPackageFromRegistryV2(
		InstallPackageFromRegistryInput: InstallPackageFromRegistryInput!
	): InstallPackageFromRegistryResult!
"""
Installs a package from file provided in multipart/form-data (name=file) in a specific view.
"""
	installPackageFromZip(
"""
The name of the view the package is installed in.
"""
		viewName: String!
"""
Overwrite existing installed package
"""
		overwrite: Boolean
"""
[PREVIEW: The query ownership feature is still in development] Ownership of the queries run by the triggers (e.g. alerts and scheduled searches) that are installed as part of this package. If value is User, ownership will be based on the calling user.
"""
		queryOwnershipType: QueryOwnershipType
	): InstallPackageFromZipResult!
	killQuery(
		viewName: String!
		pattern: String!
	): BooleanResultType!
"""
[PREVIEW: Internal testing.] Enable a or disable language restrictions for specified version.
"""
	languageRestrictionsEnable(
		input: EnabledInput!
	): Boolean!
"""
[PREVIEW: Feature still in development] 
"""
	linkChildOrganization(
		childId: String!
	): OrganizationLink!
"""
Log UI Action.
"""
	logAnalytics(
		input: AnalyticsLog!
	): Boolean!
"""
[PREVIEW: New analytics implementation] Log UI Action.
"""
	logAnalyticsBatch(
		input: [AnalyticsLogWithTimestamp!]!
	): Boolean!
"""
[PREVIEW: This feature is under development] Logs a service level indicator to the humio repo with #kind=frontend.
"""
	logFrontendServiceLevelIndicators(
		input: [ServiceLevelIndicatorLogArg!]!
	): Boolean!
"""
Logs out of a users session.
"""
	logoutOfSession: Boolean!
"""
Set a limits deleted mark
"""
	markLimitDeleted(
		input: MarkLimitDeletedInput!
	): Boolean!
"""
Migrate all organizations to the new Limits model (requires root).
"""
	migrateToNewLimits(
		input: MigrateLimitsInput!
	): Boolean!
"""
For setting up a new Azure AD OIDC idp. Root operation.
"""
	newAzureAdOidcIdentityProvider(
		name: String!
		tenantId: String!
		clientID: String!
		clientSecret: String!
		domains: [String!]!
		enableDebug: Boolean
		scopeClaim: String
	): OidcIdentityProvider!
"""
Create new file
"""
	newFile(
		fileName: String!
		name: String!
	): UploadedFileSnapshot!
"""
For setting up a new OIDC idp. Root operation.
"""
	newOIDCIdentityProvider(
		input: OidcConfigurationInput!
	): OidcIdentityProvider!
	newSamlIdentityProvider(
"""
Optional specify the ID externally (root only)
"""
		id: String
		name: String!
		signOnUrl: String!
		idpCertificateInBase64: String!
		idpEntityId: String!
		domains: [String!]!
		groupMembershipAttribute: String
		userAttribute: String
		enableDebug: Boolean
"""
Only used internal
"""
		adminAttribute: String
"""
Only used internal
"""
		adminAttributeMatch: String
"""
If multiple Idp's are defined the default idp is used whenever redirecting to login
"""
		defaultIdp: Boolean
"""
Only used internal
"""
		humioOwned: Boolean
"""
Lazy create users during login
"""
		lazyCreateUsers: Boolean
	): SamlIdentityProvider!
"""
Create notification. Required permissions depends on targets.
 Examples:
 mutation{notify(Target:Group, ids: ["GroupId1", "GroupId2"],...)} #Notify users in group1 and group2
 mutation{notify(Target:OrgRoot, ids: ["OrgId1", "OrgId2"],...)} # Notify org roots in org1 and org2
 mutation{notify(Target:Root,...)} #Notify all root users
 mutation{notify(Target:All,...)} # Notify all users
 mutation{notify(Target:All,["UserId1", "UserId2", "UserId3"],...)} #Notify user 1, 2 & 3

"""
	notify(
		input: NotificationInput!
	): Notification!
"""
Override whether feature should be rolled out.
"""
	overrideRolledOutFeatureFlag(
		feature: FeatureFlag!
		rollOut: Boolean!
	): Boolean!
"""
Proxy mutation through a specific organization. Root operation.
"""
	proxyOrganization(
		organizationId: String!
	): Organization!
"""
[PREVIEW: Under development] Updates a log collector configuration.
"""
	publishLogCollectorConfiguration(
		id: String!
		yaml: String
		currentVersion: Int!
	): LogCollectorConfiguration!
"""
Recover the organization with the given id.
"""
	recoverOrganization(
		organizationId: String!
	): Organization!
"""
Redact events matching a certain query within a certain time interval. Returns the id of the submitted redaction task
"""
	redactEvents(
		input: RedactEventsInputType!
	): String!
"""
Refresh the list of regions
"""
	refreshRegions: Boolean!
"""
Remove a label from an alert.
"""
	removeAlertLabelV2(
"""
Data for removing a label from an alert
"""
		input: RemoveAlertLabel!
	): Alert!
"""
Remove a filter from a dashboard's list of filters.
"""
	removeDashboardFilter(
		id: String!
		filterId: String!
	): Dashboard!
"""
Remove a label from a dashboard.
"""
	removeDashboardLabel(
		id: String!
		label: String!
	): Dashboard!
"""
Gets or create a new demo data view.
"""
	removeDemoDataRepository(
		demoDataType: String!
	): Boolean!
"""
[PREVIEW: This functionality is still under development and can change without warning.] Removes a field alias mapping to an existing schema.
"""
	removeFieldAliasMapping(
		input: RemoveAliasMappingInput!
	): Boolean!
"""
Remove file
"""
	removeFile(
		fileName: String!
		name: String!
	): BooleanResultType!
"""
Remove an item on the query blocklist.
"""
	removeFromBlocklist(
"""
Data for removing a blocklist entry
"""
		input: RemoveFromBlocklistInput!
	): Boolean!
"""
[PREVIEW: Under development] 
"""
	removeFromLogCollectorConfigurationTest(
		configId: String!
		collectorIds: [String!]!
	): FleetConfigurationTest!
"""
[PREVIEW: Internal testing.] Disable functions for use with specified language version.
"""
	removeFunctionsFromAllowList(
		input: FunctionListInput!
	): Boolean!
"""
[PREVIEW: Cache policies are a limited feature and is subject to change] Removes the global default cache policy
"""
	removeGlobalDefaultCachePolicy: Boolean!
"""
Removes a group. Only usable if roles are not managed externally, e.g. in LDAP.
"""
	removeGroup(
		groupId: String!
	): RemoveGroupMutation!
"""
Remove an Ingest Token.
"""
	removeIngestToken(
"""
The name of the repository to remove the ingest token from.
"""
		repositoryName: String!
"""
The name of the token to delete.
"""
		name: String!
	): BooleanResultType!
"""
Remove a limit in the given organization
"""
	removeLimit(
		input: RemoveLimitInput!
	): Boolean!
	removeLoginBridge: Boolean!
	removeLoginBridgeAllowedUsers(
		userID: String!
	): LoginBridge!
"""
[PREVIEW: Cache policies are a limited feature and is subject to change] Removes the default cache policy of the current organization.
"""
	removeOrgDefaultCachePolicy: Boolean!
"""
Remove the organization with the given id (needs to be the same organization ID as the requesting user is in).
"""
	removeOrganization(
		organizationId: String!
	): Boolean!
"""
Remove the bucket config for the organization.
"""
	removeOrganizationBucketConfig: Organization!
"""
Remove a parser.
"""
	removeParser(
		input: RemoveParserInput!
	): RemoveParserMutation!
	removeQueryQuotaDefaultSettings: Boolean!
	removeQueryQuotaUserSettings(
		username: String!
	): Boolean!
"""
[PREVIEW: Cache policies are a limited feature and is subject to change] Removes the cache policy of a repository
"""
	removeRepoCachePolicy(
"""
Data to remove a repository cache policy
"""
		input: RemoveRepoCachePolicyInput!
	): Boolean!
"""
Removes a role. Only usable if roles are not managed externally, e.g. in LDAP.
"""
	removeRole(
		roleId: String!
	): BooleanResultType!
"""
Remove a label from a scheduled search.
"""
	removeScheduledSearchLabel(
"""
Data for removing a label
"""
		input: RemoveLabelScheduledSearch!
	): ScheduledSearch!
"""
[PREVIEW: Requires the feature enabled for the organization.] Removes a secondary subdomain from the organization
"""
	removeSecondarySubdomain(
		input: RemoveSecondarySubdomainInput!
	): Organization!
"""
Temporary mutation to remove all size based retention for all organizations.
"""
	removeSizeBasedRetentionForAllOrganizations: [String!]!
"""
Remove a star from an alert.
"""
	removeStarFromAlertV2(
"""
Data for removing a star from an alert
"""
		input: RemoveStarFromAlert!
	): Alert!
"""
Remove a star from a dashboard.
"""
	removeStarFromDashboard(
		id: String!
	): Dashboard!
	removeStarFromField(
		input: RemoveStarToFieldInput!
	): RemoveStarToFieldMutation!
"""
Remove a star from a scheduled search.
"""
	removeStarFromScheduledSearch(
"""
Data for removing a star
"""
		input: RemoveStarScheduledSearch!
	): ScheduledSearch!
"""
Remove a star from a repository or view.
"""
	removeStarFromSearchDomain(
		name: String!
	): SearchDomain!
"""
[PREVIEW: Requires the feature enabled for the organization.] Remove the subdomain settings for the organization.
"""
	removeSubdomainSettings: Organization!
"""
Remove a user.
"""
	removeUser(
		input: RemoveUserInput!
	): RemoveUserMutation!
"""
Remove a user.
"""
	removeUserById(
		input: RemoveUserByIdInput!
	): RemoveUserByIdMutation!
"""
Removes users from an existing group.
"""
	removeUsersFromGroup(
		input: RemoveUsersFromGroupInput!
	): RemoveUsersFromGroupMutation!
"""
Rename a dashboard.
"""
	renameDashboard(
		id: String!
		name: String!
	): Dashboard!
"""
Rename a Repository or View.
"""
	renameSearchDomain(
"""
Old name for Repository or View
"""
		name: String!
"""
New name for Repository or View. Note that this changes the URLs for accessing the Repository or View.
"""
		renameTo: String!
	): SearchDomain!
"""
Rename a Repository or View.
"""
	renameSearchDomainById(
		input: RenameSearchDomainByIdInput!
	): SearchDomain!
	renameWidget(
		id: String!
		widgetId: String!
		title: String!
	): Dashboard!
"""
Resend an invite to a pending user.
"""
	resendInvitation(
		input: TokenInput!
	): Boolean!
"""
[PREVIEW: Feature still in development] Resets the flight recorder settings to default for the given vhost
"""
	resetFlightRecorderSettings(
"""
The vhost to change the settings for.
"""
		vhost: Int!
	): Boolean!
"""
Sets the quota and rate to the given value or resets it to defaults
"""
	resetQuota(
"""
Data for resetting quota
"""
		input: ResetQuotaInput!
	): Boolean!
	resetToFactorySettings: Account!
"""
[PREVIEW: BETA feature.] Restore a deleted search domain.
"""
	restoreDeletedSearchDomain(
		input: RestoreDeletedSearchDomainInput!
	): SearchDomain!
"""
Resubmit marketo lead. Requires root level privileges and an organization owner in the organization (the lead).
"""
	resubmitMarketoLead(
		input: ResubmitMarketoLeadData!
	): Boolean!
"""
Revoke a pending user. Once revoked, the invitation link sent to the user becomes invalid.
"""
	revokePendingUser(
		input: TokenInput!
	): Boolean!
"""
Revoke the specified session. Can be a single session, all sessions for a user or all sessions in an organization.
"""
	revokeSession(
		input: RevokeSessionInput!
	): Boolean!
"""
Rollback the organization with the given id.
"""
	rollbackOrganization(
		organizationId: String!
	): Boolean!
"""
Rotate a token
"""
	rotateToken(
		input: RotateTokenInputData!
	): String!
"""
[PREVIEW: This feature is under development] Manually start the organization inconsistency job. This job will check for inconsistencies like orphaned entities, references to non-existent entities. The job can be run in a dry-run mode that only logs what would have happened.
"""
	runInconsistencyCheck(
		input: RunInconsistencyCheckInput!
	): String!
"""
Configures S3 archiving for a repository. E.g. bucket and region.
"""
	s3ConfigureArchiving(
		repositoryName: String!
		bucket: String!
		region: String!
		format: S3ArchivingFormat!
		tagOrderInName: [String!]
		startFromDateTime: DateTime
	): BooleanResultType!
"""
Disables the archiving job for the repository.
"""
	s3DisableArchiving(
		repositoryName: String!
	): BooleanResultType!
"""
Enables the archiving job for the repository.
"""
	s3EnableArchiving(
		repositoryName: String!
	): BooleanResultType!
"""
Mark all segment files as unarchived.
"""
	s3ResetArchiving(
		repositoryName: String!
	): BooleanResultType!
"""
Scheduled report result failed.
"""
	scheduledReportResultFailed(
		input: ScheduledReportResultFailedInput!
	): Boolean!
"""
Scheduled report result succeeded.
"""
	scheduledReportResultSucceeded(
		input: ScheduledReportResultSucceededInput!
	): Boolean!
"""
[PREVIEW: Feature still in development] Set to true to allow moving existing segments between nodes to achieve a better data distribution
"""
	setAllowRebalanceExistingSegments(
"""
true if the cluster should allow moving existing segments between nodes to achieve a better data distribution
"""
		allowRebalanceExistingSegments: Boolean!
	): Boolean!
"""
[PREVIEW: Feature still in development] Set whether or not to allow updating the desired digesters automatically
"""
	setAllowUpdateDesiredDigesters(
"""
Whether or not to allow updating the desired digesters automatically
"""
		allowUpdateDesiredDigesters: Boolean!
	): Boolean!
"""
Automatically search when arriving at the search page
"""
	setAutomaticSearching(
		name: String!
		automaticSearch: Boolean!
	): setAutomaticSearching!
"""
Set CID of provisioned organization
"""
	setCid(
		cid: String!
	): Organization!
"""
Set a duration from now, until which this host will be considered alive by LogScale, even when it's offline.
"""
	setConsideredAliveFor(
"""
ID of the node to consider alive.
"""
		nodeID: Int!
"""
Amount of millis that the node will be considered alive for (from now).
"""
		aliveForMillis: Long
	): DateTime
"""
Set a time in the future, until which this host will be considered alive by LogScale, even when it's offline.
"""
	setConsideredAliveUntil(
"""
ID of the node to consider alive.
"""
		nodeID: Int!
"""
Time in the future
"""
		aliveUntil: DateTime
	): DateTime
"""
Mark a filter as the default for a dashboard. This filter will automatically be active when the dashboard is opened.
"""
	setDefaultDashboardFilter(
		id: String!
		filterId: String
	): Dashboard!
"""
Set the query that should be loaded on entering the search page in a specific view.
"""
	setDefaultSavedQuery(
		input: SetDefaultSavedQueryInput!
	): BooleanResultType!
"""
[PREVIEW: Feature still in development] Sets the digest replication factor to the supplied value
"""
	setDigestReplicationFactor(
"""
The replication factor for segments newly written to digest nodes. Applies until the segments are moved to storage nodes.
"""
		digestReplicationFactor: Int!
	): Int!
"""
Set a dynamic config. Requires root level access.
"""
	setDynamicConfig(
		input: DynamicConfigInputObject!
	): Boolean!
"""
[PREVIEW: Requires the feature enabled for the organization.] Configures whether subdomains are enforced for the organization
"""
	setEnforceSubdomains(
		input: EnforceSubdomainsInput!
	): Organization!
"""
Save UI styling and other properties for a field. These will be used whenever that field is added to a table or event list in LogScale's UI.
"""
	setFieldConfiguration(
		input: FieldConfigurationInput!
	): Boolean!
"""
[PREVIEW: Cache policies are a limited feature and is subject to change] Sets the global default cache policy. This policy will be applied to a repo if neither a repo or org cache policy is set.
"""
	setGlobalDefaultCachePolicy(
"""
Data to set a global default cache policy
"""
		input: SetGlobalDefaultCachePolicyInput!
	): Boolean!
"""
[PREVIEW: Feature still in development] Toggle whether the specified host should be prepared for eviction from the cluster. If preparing for eviction, the cluster will attempt to move data and work away from the host.
"""
	setIsBeingEvicted(
"""
ID of the node to set the isBeingEvicted flag for.
"""
		vhost: Int!
"""
Eviction flag indicating whether a node should be prepared for eviction from the cluster.
"""
		isBeingEvicted: Boolean!
	): Boolean!
"""
Remove a limit in the given organization
"""
	setLimitDisplayName(
		input: SetLimitDisplayNameInput!
	): Boolean!
	setLoginBridge(
		input: LoginBridgeInput!
	): LoginBridge!
	setLoginBridgeTermsState(
		accepted: Boolean!
	): LoginBridge!
"""
[PREVIEW: Under development] 
"""
	setLostCollectorDays(
		days: Int
	): Boolean!
"""
[PREVIEW: Feature still in development] Sets the percentage of all hosts relevant to a particular cluster rebalance operation that need to be alive before we allow the system to automatically execute the operation to the supplied value. Cluster rebalance operations currently include reassigning digest work, and moving existing segments to balance disk usage.
"""
	setMinHostAlivePercentageToEnableClusterRebalancing(
"""
Percentage of all hosts relevant to a particular cluster rebalance operation that need to be alive before we allow the system to automatically execute the operation. Cluster rebalance operations currently include reassigning digest work, and moving existing segments to balance disk usage. Must be between 0 and 100, both inclusive
"""
		minHostAlivePercentageToEnableClusterRebalancing: Int!
	): Int!
"""
[PREVIEW: Feature still in development] Sets the duration old object sampling will run for before dumping results and restarting
"""
	setOldObjectSampleDurationMinutes(
"""
The vhost to change the setting for.
"""
		vhost: Int!
"""
The duration old object sampling will run for before dumping results and restarting
"""
		oldObjectSampleDurationMinutes: Long!
	): Long!
"""
[PREVIEW: Feature still in development] Toggles the OldObjectSample event on or off
"""
	setOldObjectSampleEnabled(
"""
The vhost to change the setting for.
"""
		vhost: Int!
"""
true to enable the OldObjectSample event
"""
		oldObjectSampleEnabled: Boolean!
	): Boolean!
"""
[PREVIEW: Cache policies are a limited feature and is subject to change] Sets the default cache policy of the current organization. This policy will be applied to repos within the current organizatio if a repo cache policy is set.
"""
	setOrgDefaultCachePolicy(
"""
Data to set a organization default cache policy
"""
		input: SetOrgDefaultCachePolicyInput!
	): Boolean!
"""
Set the primary bucket target for the organization.
"""
	setOrganizationBucket1(
		targetBucketId1: String!
	): Organization!
"""
Set the secondary bucket target for the organization.
"""
	setOrganizationBucket2(
		targetBucketId2: String!
	): Organization!
"""
[PREVIEW: Requires the feature enabled for the organization.] Set the primary domain for the organization. If a primary domain is already set the existing primary domain is converted to a secondary domain
"""
	setPrimarySubdomain(
		input: SetPrimarySubdomainInput!
	): Organization!
"""
[PREVIEW: Cache policies are a limited feature and is subject to change] Sets the cache policy of a repository.
"""
	setRepoCachePolicy(
"""
Data to set a repo cache policy
"""
		input: SetRepoCachePolicyInput!
	): Boolean!
"""
[PREVIEW: Feature still in development] Sets the segment replication factor to the supplied value
"""
	setSegmentReplicationFactor(
"""
replication factor for segment storage
"""
		segmentReplicationFactor: Int!
	): Int!
"""
[PREVIEW: Requires the feature enabled for the organization.] Set the subdomain settings for an organization. This overrides previously configured settings
"""
	setSubdomainSettings(
		input: SetSubdomainSettingsInput!
	): Organization!
"""
Set current tag groupings for a repository.
"""
	setTagGroupings(
"""
The name of the repository on which to apply the new tag groupings.
"""
		repositoryName: String!
"""
The tag groupings to set for the repository.
"""
		tagGroupings: [TagGroupingRuleInput!]!
	): [TagGroupingRule!]!
"""
[PREVIEW: Under development] 
"""
	setWantedLogCollectorVersion(
		id: String!
		version: String
		timeOfUpdate: DateTime
	): Boolean!
"""
Star a saved query in user settings.
"""
	starQuery(
		input: AddStarToQueryInput!
	): BooleanResultType!
"""
[PREVIEW: Under development] 
"""
	startLogCollectorConfigurationTest(
		configId: String!
		collectorIds: [String!]!
	): FleetConfigurationTest!
"""
[PREVIEW: Feature still in development] Stops all running queries including streaming queries
"""
	stopAllQueries(
"""
Input to stopping queries.
"""
		input: StopQueriesInput
	): Boolean!
"""
[PREVIEW: Feature still in development] Stops all historical queries, ignores live and streaming queries
"""
	stopHistoricalQueries(
"""
Input to stopping queries.
"""
		input: StopQueriesInput
	): Boolean!
"""
[PREVIEW: Under development] 
"""
	stopLogCollectorConfigurationTest(
		configId: String!
	): FleetConfigurationTest!
"""
Stops all streaming queries
"""
	stopStreamingQueries(
"""
Input to stopping queries.
"""
		input: StopQueriesInput
	): Boolean!
"""
Tests whether the Iam role is setup correctly and that there is a connection to the SQS queue.
"""
	testAwsS3SqsIngestFeed(
"""
Data for testing an ingest feed that uses AWS S3 and SQS
"""
		input: TestAwsS3SqsIngestFeed!
	): Boolean!
"""
Test an email action
"""
	testEmailAction(
"""
Data for testing an email action
"""
		input: TestEmailAction!
	): TestResult!
"""
[PREVIEW: Not used by UI yet. Output is subject to change.] Test an FDR feed.
"""
	testFdrFeed(
"""
Data for testing an FDR feed.
"""
		input: TestFdrFeed!
	): TestFdrResult!
"""
Test a Humio repo action.
"""
	testHumioRepoAction(
"""
Data for testing a Humio repo action
"""
		input: TestHumioRepoAction!
	): TestResult!
"""
Test that a Kafka event forwarder can connect to the specified Kafka server and topic.
Note that this may create the topic on the broker if the Kafka broker is configured to automatically create
topics.
"""
	testKafkaEventForwarderV2(
"""
Data for testing a Kafka event forwarder
"""
		input: TestKafkaEventForwarder!
	): TestResult!
"""
Test an OpsGenie action.
"""
	testOpsGenieAction(
"""
Data for testing an OpsGenie action
"""
		input: TestOpsGenieAction!
	): TestResult!
"""
Test a PagerDuty action.
"""
	testPagerDutyAction(
"""
Data for testing a PagerDuty action.
"""
		input: TestPagerDutyAction!
	): TestResult!
"""
Test a parser on some test events. If the parser fails to run, an error is returned. Otherwise, a list of results, one for each test event, is returned.
"""
	testParser(
		input: TestParserInputV2!
	): TestParserResultV2!
"""
Test a parser on some test cases.
"""
	testParserV2(
		input: ParserTestRunInput!
	): ParserTestRunOutput!
"""
Test a Slack action.
"""
	testSlackAction(
"""
Data for testing a Slack action.
"""
		input: TestSlackAction!
	): TestResult!
"""
Test a post message Slack action.
"""
	testSlackPostMessageAction(
"""
Data for testing a post message Slack action.
"""
		input: TestPostMessageSlackAction!
	): TestResult!
"""
Test an upload file action
"""
	testUploadFileAction(
"""
Data for testing an upload file action.
"""
		input: TestUploadFileAction!
	): TestResult!
"""
Test a VictorOps action.
"""
	testVictorOpsAction(
"""
Data for testing a VictorOps action.
"""
		input: TestVictorOpsAction!
	): TestResult!
"""
Test a webhook action.
"""
	testWebhookAction(
"""
Data for testing a webhook action.
"""
		input: TestWebhookAction!
	): TestResult!
"""
Will attempt to trigger a poll on an ingest feed.
"""
	triggerPollIngestFeed(
"""
Data for trigger polling an ingest feed
"""
		input: TriggerPollIngestFeed!
	): Boolean!
"""
Un-associates a token with its currently assigned parser.
"""
	unassignIngestToken(
"""
The name of the repository the ingest token belongs to.
"""
		repositoryName: String!
"""
The name of the token.
"""
		tokenName: String!
	): UnassignIngestTokenMutation!
"""
[PREVIEW: Experimental feature to allow unassigning permissions to manage a subset of organizations.] Removes the organization management role assigned to the group for the provided organizations.
"""
	unassignOrganizationManagementRoleFromGroup(
		input: UnassignOrganizationManagementRoleFromGroupInput!
	): UnassignSystemRoleFromGroup!
"""
[PREVIEW: No note] Removes the organization role assigned to the group.
"""
	unassignOrganizationRoleFromGroup(
		input: RemoveOrganizationRoleFromGroupInput!
	): UnassignOrganizationRoleFromGroup!
"""
Removes the role assigned to the group for a given view.
"""
	unassignRoleFromGroup(
		input: RemoveRoleFromGroupInput!
	): UnassignRoleFromGroup!
"""
[PREVIEW: No note] Removes the system role assigned to the group.
"""
	unassignSystemRoleFromGroup(
		input: RemoveSystemRoleFromGroupInput!
	): UnassignSystemRoleFromGroup!
"""
Unassign node tasks. Returns the set of assigned tasks after the unassign operation has completed.
"""
	unassignTasks(
"""
ID of the node to assign node tasks to.
"""
		nodeID: Int!
"""
List of tasks to unassign.
"""
		tasks: [NodeTaskEnum!]!
	): [NodeTaskEnum!]!
	unassignUserRoleForSearchDomain(
		userId: String!
		searchDomainId: String!
"""
If specified, only unassigns the role with the specified id. If not specified, unassigns all user roles for the user in the search domain.
"""
		roleId: String
	): User!
"""
Unblock ingest to the specified repository. (Requires ManageCluster Permission)
"""
	unblockIngest(
		repositoryName: String!
	): UnblockIngestMutation!
"""
[PREVIEW: Under development] 
"""
	unenrollLogCollectors(
		ids: [String!]
	): [EnrolledCollector!]!
"""
Uninstalls a package from a specific view.
"""
	uninstallPackage(
"""
The id of the package to uninstall.
"""
		packageId: UnversionedPackageSpecifier!
"""
The name of the view the package to uninstall is installed in.
"""
		viewName: String!
	): BooleanResultType!
"""
[PREVIEW: Feature still in development] 
"""
	unlinkChildOrganization(
		childId: String!
	): Boolean!
"""
Unset a dynamic config. Requires Manage Cluster permission.
"""
	unsetDynamicConfig(
		input: UnsetDynamicConfigInputObject!
	): Boolean!
"""
Unset the secondary bucket target for the organization.
"""
	unsetOrganizationBucket2: Organization!
"""
Unstar a saved query in user settings.
"""
	unstarQuery(
		input: RemoveStarFromQueryInput!
	): SavedQueryStarredUpdate!
"""
Update the action security policies for the organization
"""
	updateActionSecurityPolicies(
		input: ActionSecurityPoliciesInput!
	): Organization!
"""
Update an aggregate alert.
"""
	updateAggregateAlert(
"""
Data for updating an aggregate alert.
"""
		input: UpdateAggregateAlert!
	): AggregateAlert!
"""
Update an alert.
"""
	updateAlert(
"""
Data for updating an alert
"""
		input: UpdateAlert!
	): Alert!
"""
Update an ingest feed, which uses AWS S3 and SQS
"""
	updateAwsS3SqsIngestFeed(
"""
Data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
"""
		input: UpdateAwsS3SqsIngestFeed!
	): IngestFeed!
"""
[PREVIEW: in development.] Update a custom link interaction.
"""
	updateCustomLinkInteraction(
		input: UpdateCustomLinkInteractionInput!
	): InteractionId!
"""
Update a dashboard.
"""
	updateDashboard(
		input: UpdateDashboardInput!
	): UpdateDashboardMutation!
"""
Update a dashboard filter.
"""
	updateDashboardFilter(
		id: String!
		filterId: String!
		name: String!
		prefixFilter: String!
	): Dashboard!
"""
[PREVIEW: in development.] Update a dashboard link interaction.
"""
	updateDashboardLinkInteraction(
		input: UpdateDashboardLinkInteractionInput!
	): InteractionId!
"""
Update a dashboard token to run as another user
"""
	updateDashboardToken(
		viewId: String!
"""
Deprecated in favor of queryOwnershipType. If field is set to anything else than the calling user id, an exception will be thrown.
"""
		userId: String
		dashboardToken: String!
"""
Ownership of the query run by this shared dashboard. If value is User, ownership will be based on the calling user.
"""
		queryOwnershipType: QueryOwnershipType
	): View!
"""
Updates the default queryprefix for a group.
"""
	updateDefaultQueryPrefix(
		input: UpdateDefaultQueryPrefixInput!
	): UpdateDefaultQueryPrefixMutation!
"""
Updates the default role for a group.
"""
	updateDefaultRole(
		input: UpdateDefaultRoleInput!
	): updateDefaultRoleMutation!
	updateDescriptionForSearchDomain(
		name: String!
		newDescription: String!
	): UpdateDescriptionMutation!
"""
[PREVIEW: Under development] Updates a log collector configuration.
"""
	updateDraftLogCollectorConfiguration(
		id: String!
		draft: String
	): LogCollectorConfiguration!
"""
Update an email action.
"""
	updateEmailAction(
"""
Data for updating an email action.
"""
		input: UpdateEmailAction!
	): EmailAction!
"""
Update an event forwarding rule on a repository and return it
"""
	updateEventForwardingRule(
"""
Data for updating an event forwarding rule
"""
		input: UpdateEventForwardingRule!
	): EventForwardingRule!
"""
Update an FDR feed with the supplied changes. Note that the input fields to this method, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
"""
	updateFdrFeed(
"""
Data for updating an FDR feed. Note that the fields, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
"""
		input: UpdateFdrFeed!
	): FdrFeed!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] FDR feed administrator control update
"""
	updateFdrFeedControl(
"""
Data for updating the administrator control of an FDR feed.
"""
		input: UpdateFdrFeedControl!
	): FdrFeedControl!
"""
[PREVIEW: This functionality is still under development and can change without warning.] Updates an alias mapping on a schema.
"""
	updateFieldAliasMapping(
		input: UpdateFieldAliasMappingInput!
	): String!
"""
[PREVIEW: This functionality is still under development and can change without warning.] Updates an existing schema.
"""
	updateFieldAliasSchema(
		input: UpdateFieldAliasSchemaInput!
	): FieldAliasSchema!
"""
Change file
"""
	updateFile(
		fileName: String!
		name: String!
"""
The rows within the offset and limit. They will overwrite all existing rows that are also within the offset and limit.
"""
		changedRows: [[String!]!]!
"""
Table headers
"""
		headers: [String!]!
"""
List of column changes that will be applied to all rows in the file. Ordering is important, as the first change in the list will be executed first, and the next change will be executed on the resulting rows.
"""
		columnChanges: [ColumnChange!]!
"""
Used to find when to stop replacing rows, by adding the limit to the offset. If no offset is given, the file will be truncated to match the updated rows.
"""
		limit: Int
"""
Starting index to replace the old rows with the updated ones. It does not take into account the header row.
"""
		offset: Int
	): UploadedFileSnapshot!
"""
Update a filter alert.
"""
	updateFilterAlert(
"""
Data for updating a filter alert
"""
		input: UpdateFilterAlert!
	): FilterAlert!
"""
[PREVIEW: Under development] 
"""
	updateFleetInstallTokenConfigId(
		token: String!
		configId: String
	): FleetInstallationToken!
"""
[PREVIEW: Under development] 
"""
	updateFleetInstallTokenName(
		token: String!
		name: String!
	): FleetInstallationToken!
"""
Updates the group.
"""
	updateGroup(
		input: UpdateGroupInput!
	): UpdateGroupMutation!
"""
Update a LogScale repository action.
"""
	updateHumioRepoAction(
"""
Data for updating a LogScale repository action.
"""
		input: UpdateHumioRepoAction!
	): HumioRepoAction!
"""
Update IP filter.
"""
	updateIPFilter(
		input: IPFilterUpdateInput!
	): IPFilter!
"""
Update an ingest listener.
"""
	updateIngestListenerV3(
		input: UpdateIngestListenerV3Input!
	): IngestListener!
"""
Sets the ingest partition scheme of the LogScale cluster. Requires ManageCluster permission. Be aware that the ingest partition scheme is normally automated, and changes will be overwritten by the automation. This mutation should generally not be used unless the automation is temporarily disabled.
"""
	updateIngestPartitionScheme(
"""
The list of ingest partitions. If partitions are missing in the input, they are left unchanged.
"""
		partitions: [IngestPartitionInput!]!
	): BooleanResultType!
"""
Update a Kafka event forwarder and return it
"""
	updateKafkaEventForwarder(
"""
Data for updating a Kafka event forwarder
"""
		input: UpdateKafkaEventForwarder!
	): KafkaEventForwarder!
"""
Update the license key for the LogScale cluster. If there is an existing license on this cluster this operation requires permission to manage cluster.
"""
	updateLicenseKey(
		license: String!
	): License!
"""
Update the limit with the given name, only the arguments defined will be updated
"""
	updateLimit(
		input: UpdateLimitInput!
	): Boolean!
"""
Update the limit with the given name, only the arguments defined will be updated
"""
	updateLimitV2(
		input: UpdateLimitInputV2!
	): LimitV2!
"""
[PREVIEW: Experimental feature, not ready for production.] Update a cluster connection to a local view.
"""
	updateLocalClusterConnection(
"""
Data for updating a local cluster connection
"""
		input: UpdateLocalClusterConnectionInput!
	): LocalClusterConnection!
"""
[PREVIEW: Under development] 
"""
	updateLogCollectorConfigurationDescription(
		configId: String!
		description: String
	): LogCollectorConfiguration!
"""
[PREVIEW: Under development] 
"""
	updateLogCollectorConfigurationName(
		configId: String!
		name: String!
	): LogCollectorConfiguration!
"""
[PREVIEW: Under development] 
"""
	updateLogCollectorGroupConfigIds(
		id: String!
		configIds: [String!]
	): LogCollectorGroup!
"""
[PREVIEW: Under development] 
"""
	updateLogCollectorGroupFilter(
		id: String!
		filter: String
	): LogCollectorGroup!
"""
[PREVIEW: Under development] 
"""
	updateLogCollectorGroupName(
		id: String!
		name: String!
	): LogCollectorGroup!
"""
[PREVIEW: Under development] 
"""
	updateLogCollectorGroupWantedVersion(
		id: String!
		wantedVersion: String
	): LogCollectorGroup!
	updateLoginBridge(
		input: LoginBridgeUpdateInput!
	): LoginBridge!
"""
Override the globally configured maximum number of auto shards.
"""
	updateMaxAutoShardCount(
		repositoryName: String!
"""
New override value. Set to zero to remove current override.
"""
		maxAutoShardCount: Int!
	): Repository!
"""
Override the globally configured maximum size of ingest requests.
"""
	updateMaxIngestRequestSize(
		repositoryName: String!
"""
New override value. Set to zero to remove current override.
"""
		maxIngestRequestSize: Int!
	): Repository!
	updateOIDCIdentityProvider(
		input: UpdateOidcConfigurationInput!
	): OidcIdentityProvider!
"""
Update an OpsGenie action.
"""
	updateOpsGenieAction(
"""
Data for updating an OpsGenie action
"""
		input: UpdateOpsGenieAction!
	): OpsGenieAction!
"""
For manually fixing bad references. Root operation.
"""
	updateOrganizationForeignKey(
		id: String!
		foreignType: Organizations__ForeignType!
		operation: Organizations__Operation!
	): Organization!
"""
Update information about the organization
"""
	updateOrganizationInfo(
		name: String!
		countryCode: String!
		industry: String!
		useCases: [Organizations__UseCases!]!
	): Organization!
"""
For manually updating contract limits. System operation.
"""
	updateOrganizationLimits(
		input: OrganizationLimitsInput!
	): Organization!
"""
Update mutability of the organization
"""
	updateOrganizationMutability(
		organizationId: String!
		blockIngest: Boolean!
		readonly: Boolean!
	): Organization!
"""
Update a note for a given organization. Requires root.
"""
	updateOrganizationNotes(
		notes: String!
	): Boolean!
"""
Update the permissions of an organization permission token.
"""
	updateOrganizationPermissionsTokenPermissions(
		input: UpdateOrganizationPermissionsTokenPermissionsInput!
	): String!
"""
Update an users organizations root state
"""
	updateOrganizationRoot(
		userId: String!
		organizationRoot: Boolean!
	): Organization!
"""
Update the subscription of the organization. Root operation.
"""
	updateOrganizationSubscription(
		input: UpdateSubscriptionInputObject!
	): Organization!
"""
Updates a package in a specific view.
"""
	updatePackageFromRegistryV2(
		UpdatePackageFromRegistryInput: UpdatePackageFromRegistryInput!
	): PackageUpdateResult!
"""
Updates a package from file provided in multipart/form-data (name=file) in a specific view.
"""
	updatePackageFromZip(
"""
The name of the view the package is installed in.
"""
		viewName: String!
"""
how to handle conflicts
"""
		conflictResolutions: [ConflictResolutionConfiguration!]!
"""
[PREVIEW: The query ownership feature is still in development] Ownership of the queries run by the triggers (e.g. alerts and scheduled searches) that are installed as part of this package. If value is User, ownership will be based on the calling user.
"""
		queryOwnershipType: QueryOwnershipType
	): BooleanResultType!
"""
Update a PagerDuty action.
"""
	updatePagerDutyAction(
"""
Data for updating a PagerDuty action
"""
		input: UpdatePagerDutyAction!
	): PagerDutyAction!
"""
Update a parser.
"""
	updateParser(
		input: UpdateParserInput!
	): UpdateParserMutation!
"""
Update a parser. Only the provided fields are updated on the parser, and the remaining fields not provided are unchanged.
"""
	updateParserV2(
		input: UpdateParserInputV2!
	): Parser!
"""
Update the viewers profile.
"""
	updateProfile(
		firstName: String
		lastName: String
	): Account!
"""
Updates queryprefix for a group in a view.
"""
	updateQueryPrefix(
		input: UpdateQueryPrefixInput!
	): UpdateQueryPrefixMutation!
"""
Update the readonly dashboard ip filter
"""
	updateReadonlyDashboardIPFilter(
		ipFilter: String
	): Boolean!
"""
[PREVIEW: Experimental feature, not ready for production.] Update a cluster connection to a remote view.
"""
	updateRemoteClusterConnection(
"""
Data for updating a remote cluster connection
"""
		input: UpdateRemoteClusterConnectionInput!
	): RemoteClusterConnection!
"""
Change the data type of a repository.
"""
	updateRepositoryDataType(
		input: UpdateRepoDataTypeInputObject!
	): Boolean!
"""
Change the limit id of a repository.
"""
	updateRepositoryLimitId(
		input: UpdateRepoLimitIdInputObject!
	): Boolean!
"""
Change the type of a repository. Only useful in Cloud setups.
"""
	updateRepositoryType(
		name: String!
		type: String!
	): BooleanResultType!
"""
Change the usage tag of a repository.
"""
	updateRepositoryUsageTag(
		name: String!
		usageTag: String!
	): Boolean!
"""
Update the retention policy of a repository.
"""
	updateRetention(
"""
The name of the repository to change retention for.
"""
		repositoryName: String!
"""
The maximum time (in days) to keep data. Data old than this will be deleted.
"""
		timeBasedRetention: Float
"""
Sets retention (in gigabytes) based on the size of data when it arrives to LogScale, that is before parsing and compression. LogScale will keep `at most` this amount of data.
"""
		ingestSizeBasedRetention: Float
"""
Sets retention (in gigabytes) based on the size of data when it is stored in LogScale, that is after parsing and compression. LogScale will keep `at most` this amount of data.
"""
		storageSizeBasedRetention: Float
"""
Sets time (in days) to keep backups before they are deleted.
"""
		timeBasedBackupRetention: Float
	): UpdateRetentionMutation!
	updateRole(
		input: UpdateRoleInput!
	): UpdateRoleMutation!
	updateSamlIdentityProvider(
		id: String!
		name: String!
		signOnUrl: String!
		idpCertificateInBase64: String!
		idpEntityId: String!
		domains: [String!]!
		groupMembershipAttribute: String
		userAttribute: String
		enableDebug: Boolean
"""
Only used internal
"""
		adminAttribute: String
"""
Only used internal
"""
		adminAttributeMatch: String
"""
If multiple Idp's are defined the default idp is used whenever redirecting to login
"""
		defaultIdp: Boolean
"""
Only used internal
"""
		humioOwned: Boolean
"""
Lazy create users during login
"""
		lazyCreateUsers: Boolean
	): SamlIdentityProvider!
"""
Updates a saved query.
"""
	updateSavedQuery(
		input: UpdateSavedQueryInput!
	): UpdateSavedQueryPayload!
"""
Update a scheduled report. Only the supplied property values are updated.
"""
	updateScheduledReport(
		input: UpdateScheduledReportInput!
	): ScheduledReport!
"""
Update a scheduled search.
"""
	updateScheduledSearch(
"""
Data for updating a scheduled search
"""
		input: UpdateScheduledSearch!
	): ScheduledSearch!
"""
[PREVIEW: in development.] Update a search link interaction.
"""
	updateSearchLinkInteraction(
		input: UpdateSearchLinkInteractionInput!
	): InteractionId!
"""
Update session settings for the organization.
"""
	updateSessionSettings(
		input: SessionInput!
	): Organization!
"""
[PREVIEW: This mutation is dictated by the needs of the LogScale UI, and may include unstable or ephemeral settings.] Set flags for UI states and help messages.
"""
	updateSettings(
		isWelcomeMessageDismissed: Boolean
		isGettingStartedMessageDismissed: Boolean
		isCommunityMessageDismissed: Boolean
		isPackageDocsMessageDismissed: Boolean
		isEventListOrderedWithNewestAtBottom: Boolean
		isFieldPanelOpenByDefault: Boolean
		automaticallySearch: Boolean
		automaticallyHighlighting: Boolean
		uiTheme: UiTheme
		isDarkModeMessageDismissed: Boolean
		isResizableQueryFieldMessageDismissed: Boolean
		featureAnnouncementsToDismiss: [FeatureAnnouncement!]
		defaultTimeZone: String
	): UserSettings!
"""
Update the shared dashboards security policies for the organization. Updating the policies will update or delete all existing tokens that do not fit into the changes. For instance, enforcing an IP filter will set the IP filter on all shared dashboard tokens. Disabling shared dashboard tokens, will delete all shared dashboard tokens.
"""
	updateSharedDashboardsSecurityPolicies(
		input: SharedDashboardsSecurityPoliciesInput!
	): Organization!
"""
Update a Slack action.
"""
	updateSlackAction(
"""
Data for updating a Slack action
"""
		input: UpdateSlackAction!
	): SlackAction!
"""
Update a post-message Slack action.
"""
	updateSlackPostMessageAction(
"""
Data for updating a post-message Slack action
"""
		input: UpdatePostMessageSlackAction!
	): SlackPostMessageAction!
"""
[PREVIEW: Requires the feature enabled for the organization.] Update the social login options for the organization
"""
	updateSocialLoginSettings(
		input: [SocialLoginSettingsInput!]!
	): Organization!
"""
Update the permissions of a system permission token.
"""
	updateSystemPermissionsTokenPermissions(
		input: UpdateSystemPermissionsTokenPermissionsInput!
	): String!
"""
Update the token security policies for the organization. Updating the policies will update or delete all existing tokens that do not fit into the changes. For instance, enforcing an IP filter for personal user tokens will set the IP filter on all tokens of that type. Disabling a token type, will delete all tokens of that type. Finally setting an enforce expiration after will set that on all tokens that are above the interval and keep their current expiration if inside the interval. Tokens below the expiration will be deleted.
"""
	updateTokenSecurityPolicies(
		input: TokenSecurityPoliciesInput!
	): Organization!
"""
Update an upload file action.
"""
	updateUploadFileAction(
"""
Data for updating an upload file action.
"""
		input: UpdateUploadFileAction!
	): UploadFileAction!
"""
Updates a user. Requires Root Permission.
"""
	updateUser(
		input: AddUserInput!
	): UpdateUserMutation!
"""
Updates a user.
"""
	updateUserById(
		input: UpdateUserByIdInput!
	): UpdateUserByIdMutation!
"""
Update user default settings for the organization.
"""
	updateUserDefaultSettings(
		input: UserDefaultSettingsInput!
	): Organization!
"""
Update a VictorOps action.
"""
	updateVictorOpsAction(
"""
Data for updating a VictorOps action.
"""
		input: UpdateVictorOpsAction!
	): VictorOpsAction!
"""
Update a view.
"""
	updateView(
		viewName: String!
		connections: [ViewConnectionInput!]!
	): View!
"""
Update the permissions of a view permission token.
"""
	updateViewPermissionsTokenPermissions(
		input: UpdateViewPermissionsTokenPermissionsInput!
	): String!
"""
Update a webhook action.
"""
	updateWebhookAction(
"""
Data for updating a webhook action
"""
		input: UpdateWebhookAction!
	): WebhookAction!
"""
Upgrade the account.
"""
	upgradeAccount(
		input: UpgradeAccountData!
	): Boolean!
}

"""
This authentication type can be used to use LogScale without authentication. This should only be considered for testing and development purposes, it is not recommended for production systems and prevents LogScale from doing proper Audit Logging.
"""
type NoAuthentication implements AuthenticationMethod{
	name: String!
}

"""
A widget get text, links, etc.
"""
type NoteWidget implements Widget{
	backgroundColor: String
	textColor: String
	text: String!
	id: String!
	title: String!
	description: String
	x: Int!
	y: Int!
	width: Int!
	height: Int!
}

input NotificationInput {
	message: String!
	target: Targets!
	ids: [String!]
	title: String!
	dismissable: Boolean!
	severity: NotificationSeverity!
	link: String
	linkDescription: String
	notificationType: NotificationTypes!
}

"""
Authentication through OAuth Identity Providers.
"""
type OAuthAuthentication implements AuthenticationMethod{
	name: String!
	uiLoginFlow: Boolean!
	google: OAuthProvider
	github: OAuthProvider
	bitbucket: OAuthProvider
	oidc: OIDCProvider
}

"""
An OAuth Identity Provider.
"""
type OAuthProvider {
	id: String!
	clientId: String!
	redirectUrl: String!
}

"""
An OIDC identity provider
"""
type OIDCProvider {
	id: String!
	clientId: String!
	redirectUrl: String!
	authorizationEndpoint: String
	serviceName: String
	scopes: [String!]!
	federatedIdp: String
}

enum ObjectAction {
	Unknown
	ReadOnlyAndHidden
	ReadWriteAndVisible
}

input OidcConfigurationInput {
	name: String!
	clientID: String!
	clientSecret: String!
	issuer: String!
	tokenEndpointAuthMethod: String!
	authorizationEndpoint: String!
	tokenEndpoint: String
	userInfoEndpoint: String
	registrationEndpoint: String
	groupsClaim: String
	JWKSEndpoint: String
	domains: [String!]!
	scopes: [String!]!
	userClaim: String
	enableDebug: Boolean!
	defaultIdp: Boolean
	humioOwned: Boolean
	lazyCreateUsers: Boolean
	federatedIdp: String
	scopeClaim: String
}

type OidcIdentityProviderAuth implements AuthenticationMethodAuth{
	redirectUrl: String!
	authType: String!
	name: String!
	scopes: [String!]!
	serviceName: String!
	authorizeEndpoint: String!
	clientId: String!
	federatedIdp: String
}

"""
Represents information about a LogScale License.
"""
type OnPremLicense implements License{
"""
The time at which the license expires.
"""
	expiresAt: DateTime!
"""
The time at which the license was issued.
"""
	issuedAt: DateTime!
"""
license id.
"""
	uid: String!
"""
The maximum number of user accounts allowed in LogScale. Unlimited if undefined.
"""
	maxUsers: Int
"""
The name of the entity the license was issued to.
"""
	owner: String!
"""
Indicates whether the license allows running LogScale as a SaaS platform.
"""
	isSaaS: Boolean!
"""
Indicates whether the license is an OEM license.
"""
	isOem: Boolean!
}

"""
An OpsGenie action
"""
type OpsGenieAction implements Action{
"""
OpsGenie webhook url to send the request to.
"""
	apiUrl: String!
"""
Key to authenticate with OpsGenie.
"""
	genieKey: String!
"""
Defines whether the action should use the configured proxy to make web requests.
"""
	useProxy: Boolean!
"""
The name of the action.
"""
	name: String!
"""
The display name of the action.
"""
	displayName: String!
"""
The id of the action.
"""
	id: String!
"""
A template that can be used to recreate the action.
"""
	yamlTemplate: YAML!
	packageId: VersionedPackageSpecifier
"""
The package if any which the action is part of.
"""
	package: PackageInstallation
"""
False if this type of action is disabled because of a security policy, true otherwise
"""
	isAllowedToRun: Boolean!
"""
True if this action is used by triggers, where the query is run by the organization. If true, then the OrganizationOwnedQueries permission is required to edit the action.
"""
	requiresOrganizationOwnedQueriesPermissionToEdit: Boolean!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] Allowed asset actions
"""
	allowedActions: [AssetAction!]!
}

input OrganizationLimitsInput {
	ingest: Long!
	retention: Int!
	users: Int!
	expiration: Long!
	allowSelfService: Boolean
	contractVersion: Organizations__ContractVersion
}

"""
A link between two organizations
"""
type OrganizationLink {
	parentOrganization: Organization!
	childOrganization: Organization!
}

"""
Query running with organization based ownership
"""
type OrganizationOwnership implements QueryOwnership{
"""
Organization owning and running the query
"""
	organization: Organization!
"""
Id of organization owning and running the query
"""
	id: String!
}

"""
Organization permissions token. The token allows the caller to work with organization-level permissions.
"""
type OrganizationPermissionsToken implements Token{
"""
The set of permissions on the token
"""
	permissions: [String!]!
"""
The id of the token.
"""
	id: String!
"""
The name of the token.
"""
	name: String!
"""
The time at which the token expires.
"""
	expireAt: Long
"""
The ip filter on the token.
"""
	ipFilter: String
"""
The ip filter on the token.
"""
	ipFilterV2: IPFilter
"""
The date the token was created.
"""
	createdAt: Long!
}

enum Organizations__ContractualType {
	Limited
	Unlimited
	Ignored
}

enum Organizations__ForeignType {
	Unknown
	Role
	Group
	Idp
	View
	User
}

enum Organizations__Operation {
	Remove
	Add
}

"""
An event produced by a parser in a test run
"""
type OutputEvent {
"""
The fields of the event
"""
	fields: [EventField!]!
}

type PackageUpdateResult {
	package: Package2!
}

"""
A PagerDuty action.
"""
type PagerDutyAction implements Action{
"""
Severity level to give to the message.
"""
	severity: String!
"""
Routing key to authenticate with PagerDuty.
"""
	routingKey: String!
"""
Defines whether the action should use the configured proxy to make web requests.
"""
	useProxy: Boolean!
"""
The name of the action.
"""
	name: String!
"""
The display name of the action.
"""
	displayName: String!
"""
The id of the action.
"""
	id: String!
"""
A template that can be used to recreate the action.
"""
	yamlTemplate: YAML!
	packageId: VersionedPackageSpecifier
"""
The package if any which the action is part of.
"""
	package: PackageInstallation
"""
False if this type of action is disabled because of a security policy, true otherwise
"""
	isAllowedToRun: Boolean!
"""
True if this action is used by triggers, where the query is run by the organization. If true, then the OrganizationOwnedQueries permission is required to edit the action.
"""
	requiresOrganizationOwnedQueriesPermissionToEdit: Boolean!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] Allowed asset actions
"""
	allowedActions: [AssetAction!]!
}

input ParameterFilePropertiesInput {
	fileName: String!
	valueColumn: String!
	labelColumn: String
	valueFilters: [ParameterFileValueFilter!]!
	invalidInputPatterns: [String!]
	invalidInputMessage: String
}

input ParameterFileValueFilter {
	field: String!
	values: [String!]!
}

input ParameterFixedListOption {
	label: String!
	value: String!
}

input ParameterFixedListPropertiesInput {
	values: [ParameterFixedListOption!]!
}

input ParameterFreeTextPropertiesInput {
	invalidInputPatterns: [String!]
	invalidInputMessage: String
}

input ParameterInput {
	id: String!
	label: String!
	defaultValue: String
	order: Int
	width: Int
	freeTextOptions: ParameterFreeTextPropertiesInput
	queryOptions: ParameterQueryPropertiesInput
	fixedListOptions: ParameterFixedListPropertiesInput
	fileOptions: ParameterFilePropertiesInput
	isMultiParam: Boolean
	defaultMultiValues: [String!]
}

"""
A widget that contains dashboard parameters.
"""
type ParameterPanel implements Widget{
	parameterIds: [String!]!
	id: String!
	title: String!
	description: String
	x: Int!
	y: Int!
	width: Int!
	height: Int!
}

input ParameterQueryPropertiesInput {
	queryString: String!
	timeWindow: String!
	optionValueField: String!
	optionLabelField: String!
	useDashboardTimeIfSet: Boolean!
	invalidInputPatterns: [String!]
	invalidInputMessage: String
}

"""
The specification of a parameter
"""
input ParameterSpecificationInput {
"""
The specification of a parameter
"""
	name: String!
"""
The specification of a parameter
"""
	parameterType: ParameterTypeEnum!
"""
The specification of a parameter
"""
	minLong: Long
"""
The specification of a parameter
"""
	maxLong: Long
"""
The specification of a parameter
"""
	minDouble: Float
"""
The specification of a parameter
"""
	maxDouble: Float
"""
The specification of a parameter
"""
	minLength: Int
"""
The specification of a parameter
"""
	defaultValue: [String!]
}

"""
The result of parsing a single test event
"""
type ParseEventResult {
"""
The status of parsing the test event
"""
	status: ParseEventStatus!
"""
A potential error message
"""
	errorMessage: String
"""
The parsed events. Can be empty if the test was dropped by the parser or contain one or more events
"""
	events: [ParsedEvent!]!
}

"""
Staus of parsing a test event
"""
enum ParseEventStatus {
"""
The event was parsed successfully
"""
	success
"""
There was an error parsing the event
"""
	parseError
"""
There was an error extracting a timestamp from the event
"""
	timestampError
}

"""
A parsed event
"""
type ParsedEvent {
"""
The fields of the event
"""
	fields: [Field!]!
}

"""
Assertions on the shape of a given test case output event. It is a key-pair value, where the index of the output event is the key, and the assertions are the value.
"""
input ParserTestCaseAssertionsForOutputInput {
"""
Assertions on the shape of a given test case output event. It is a key-pair value, where the index of the output event is the key, and the assertions are the value.
"""
	outputEventIndex: Int!
"""
Assertions on the shape of a given test case output event. It is a key-pair value, where the index of the output event is the key, and the assertions are the value.
"""
	assertions: ParserTestCaseOutputAssertionsInput!
}

"""
Contains any test failures that relates to a specific output event. This is a key-value pair, where the index of the output event is the key, and the failures are the value.
"""
type ParserTestCaseFailuresForOutput {
"""
The index of the output event which these failures pertain to. Note that there may be failures pointing to non-existing output events, if e.g. an assertion was made on an output event which was not produced.
"""
	outputEventIndex: Int!
"""
Failures for the output event.
"""
	failures: ParserTestCaseOutputFailures!
}

"""
A test case for a parser.
"""
input ParserTestCaseInput {
"""
A test case for a parser.
"""
	event: ParserTestEventInput!
"""
A test case for a parser.
"""
	outputAssertions: [ParserTestCaseAssertionsForOutputInput!]
}

"""
Assertions on the shape of a given test case output event.
"""
input ParserTestCaseOutputAssertionsInput {
"""
Assertions on the shape of a given test case output event.
"""
	fieldsNotPresent: [String!]
"""
Assertions on the shape of a given test case output event.
"""
	fieldsHaveValues: [FieldHasValueInput!]
}

"""
Failures for an output event.
"""
type ParserTestCaseOutputFailures {
"""
Any errors produced by the parser when creating an output event.
"""
	parsingErrors: [String!]!
"""
Any assertion failures on the given output event. Note that all assertion failures can be uniquely identified by the output event index and the field name they operate on.
"""
	assertionFailuresOnFields: [AssertionFailureOnField!]!
"""
[PREVIEW: API under active development] Fields where the name begins with `#` even though they are not a tag. In LogScale, field names beginning with `#` are treated specially, and should only be constructed through the tagging mechanism. Fields which do begin with `#`, but are not proper tags, will be effectively unsearchable.
"""
	falselyTaggedFields: [String!]!
"""
[PREVIEW: API under active development] Any arrays with gaps in them. That is, if the fields `a[0]` and `a[2]` exist on an event, but not `a[1]`, we consider the array `a` to have a gap. This means LogScale will not include the `a[2]` field when doing array-based searches, since it considers `a[0]` to be the last element of the array.
"""
	arraysWithGaps: [ArrayWithGap!]!
}

"""
The output for parsing and verifying a test case
"""
type ParserTestCaseResult {
"""
The events produced by the parser. Contains zero to many events, as a parser can both drop events, or produce multiple output events from a single input.
"""
	outputEvents: [OutputEvent!]!
"""
Any failures produced during testing. If the list is empty, the test case can be considered to have passed. If the list contains elements, they are key-value pairs to be treated as a map-construct, where the index of the output event is the key, and the failures are the value.
"""
	outputFailures: [ParserTestCaseFailuresForOutput!]!
}

"""
An event for a parser to parse during testing.
"""
input ParserTestEventInput {
"""
An event for a parser to parse during testing.
"""
	rawString: String!
}

"""
A parser test result, where an unexpected error occurred during parsing.
"""
type ParserTestRunAborted {
	errorMessage: String!
}

"""
A parser test result, where all test cases were parsed and assertions run. Each result is given in the same order as the test cases were put in, so they can be matched by index.
"""
type ParserTestRunCompleted {
"""
The results for running each test case.
"""
	results: [ParserTestCaseResult!]!
}

"""
Input for testing a parser
"""
input ParserTestRunInput {
"""
Input for testing a parser
"""
	repositoryName: RepoOrViewName!
"""
Input for testing a parser
"""
	parserName: String!
"""
Input for testing a parser
"""
	script: String!
"""
Input for testing a parser
"""
	fieldsToTag: [String!]!
"""
Input for testing a parser
"""
	fieldsToBeRemovedBeforeParsing: [String!]!
"""
Input for testing a parser
"""
	testCases: [ParserTestCaseInput!]!
"""
Input for testing a parser
"""
	languageVersion: LanguageVersionInputType
}

"""
The output of running all the parser test cases.
"""
union ParserTestRunOutput =ParserTestRunCompleted | ParserTestRunAborted

enum Purposes {
	MSP
	ITOps
	IOT
	SecOps
	DevOps
}

"""
A dashboard parameter where suggestions are sourced from query results from LogScale.
"""
type QueryBasedDashboardParameter implements DashboardParameter{
"""
The LogScale query executed to find suggestions for the parameter value.
"""
	queryString: String!
"""
The time window (relative to now) in which LogScale will search for suggestions. E.g. 24h or 30d.
"""
	timeWindow: String!
"""
The field in the result set used as the 'value' of the suggestions.
"""
	optionValueField: String!
"""
The field in the result set used as the 'label' (the text in the dropdown) of the suggestions.
"""
	optionLabelField: String!
"""
If true, the parameters search time window will automatically change to match the dashboard's global time when active.
"""
	useDashboardTimeIfSet: Boolean!
"""
Regex patterns used to block parameter input.
"""
	invalidInputPatterns: [String!]
"""
Message when parameter input is blocked.
"""
	invalidInputMessage: String
"""
The ID of the parameter.
"""
	id: String!
"""
The label or 'name' displayed next to the input for the variable to make it more human-readable.
"""
	label: String!
"""
The value assigned to the parameter on dashboard load, if no other value is specified.
"""
	defaultValueV2: String
"""
A number that determines the order in which parameters are displayed on a dashboard. If null, the parameter is ordered after other parameters in alphanumerical order.
"""
	order: Int
"""
A number that determines the width of a parameter.
"""
	width: Int
"""
[PREVIEW: The multi-value parameters feature is still in development.] A flag indicating whether the parameter supports having multiple values
"""
	isMultiParam: Boolean
"""
[PREVIEW: The multi-value parameters feature is still in development.] The value assigned to the multi-value parameter on dashboard load, if no other value is specified. This replaces defaultValue whenever isMultiParam is true
"""
	defaultMultiValues: [String!]
}

"""
A widget with a visualization of a query result.
"""
type QueryBasedWidget implements Widget{
	queryString: String!
	start: String!
	end: String!
	isLive: Boolean!
	widgetType: String!
"""
An optional JSON value containing styling and other settings for the widget. This is solely used by the UI.
"""
	options: JSON
"""
[PREVIEW: Widget based interaction feature is under preview.] 
"""
	interactions: [QueryBasedWidgetInteraction!]!
	id: String!
	title: String!
	description: String
	x: Int!
	y: Int!
	width: Int!
	height: Int!
}

"""
The type of query ownership
"""
enum QueryOwnershipType {
"""
Queries run on behalf of user
"""
	User
"""
Queries run on behalf of the organization
"""
	Organization
}

"""
The target type to select
"""
enum QueryOwnership_SelectionTargetType {
"""
A single trigger or shared dashboard
"""
	PersistentQuery
"""
All triggers and shared dashboard connected to this view
"""
	View
"""
All triggers and shared dashboards within the organization
"""
	Organization
}

"""
Default Query Quota Settings for users which have not had specific settings assigned
"""
type QueryQuotaDefaultSettings {
"""
List of the rules that apply
"""
	settings: [QueryQuotaIntervalSetting!]!
}

input QueryQuotaDefaultSettingsInput {
	settings: [QueryQuotaIntervalSettingInput!]!
}

input QueryQuotaIntervalSettingInput {
	interval: QueryQuotaInterval!
	measurementKind: QueryQuotaMeasurementKind!
	value: Long
	valueKind: QueryQuotaIntervalSettingKind!
}

input QueryQuotaUserSettingsInput {
	username: String!
	settings: [QueryQuotaIntervalSettingInput!]!
}

input RedactEventsInputType {
	repositoryName: String!
	start: DateTime!
	end: DateTime!
	query: String!
	userMessage: String
}

"""
A remote cluster connection.
"""
type RemoteClusterConnection implements ClusterConnection{
"""
Public URL of the remote cluster to connect with
"""
	publicUrl: String!
"""
Id of the connection
"""
	id: String!
"""
Cluster identity of the connection
"""
	clusterId: String!
"""
Cluster connection tags
"""
	tags: [ClusterConnectionTag!]!
"""
Cluster connection query prefix
"""
	queryPrefix: String!
}

"""
Data for removing a label from an alert
"""
input RemoveAlertLabel {
"""
Data for removing a label from an alert
"""
	viewName: String!
"""
Data for removing a label from an alert
"""
	id: String!
"""
Data for removing a label from an alert
"""
	label: String!
}

"""
[PREVIEW: This functionality is still under development and can change without warning.] Input object for field removeFieldAliasMapping
"""
input RemoveAliasMappingInput {
"""
[PREVIEW: This functionality is still under development and can change without warning.] Input object for field removeFieldAliasMapping
"""
	schemaId: String!
"""
[PREVIEW: This functionality is still under development and can change without warning.] Input object for field removeFieldAliasMapping
"""
	aliasMappingId: String!
}

"""
Data for removing a blocklist entry
"""
input RemoveFromBlocklistInput {
"""
Data for removing a blocklist entry
"""
	id: String!
}

type RemoveGroupMutation {
	group: Group!
}

"""
Data for removing a label
"""
input RemoveLabelScheduledSearch {
"""
Data for removing a label
"""
	viewName: String!
"""
Data for removing a label
"""
	id: String!
"""
Data for removing a label
"""
	label: String!
}

input RemoveLimitInput {
	limitName: String!
}

input RemoveOrganizationRoleFromGroupInput {
	groupId: String!
	roleId: String!
}

input RemoveParserInput {
	id: String!
	repositoryName: String!
}

type RemoveParserMutation {
	parser: Parser!
}

"""
Data to remove a repository cache policy
"""
input RemoveRepoCachePolicyInput {
"""
Data to remove a repository cache policy
"""
	repositoryName: String!
}

input RemoveRoleFromGroupInput {
	viewId: String!
	groupId: String!
	roleId: String!
}

input RemoveSecondarySubdomainInput {
	subdomain: String!
}

"""
Data for removing a star from an alert
"""
input RemoveStarFromAlert {
"""
Data for removing a star from an alert
"""
	viewName: String!
"""
Data for removing a star from an alert
"""
	id: String!
}

input RemoveStarFromQueryInput {
	savedQueryId: String!
	searchDomainName: String!
}

"""
Data for removing a star
"""
input RemoveStarScheduledSearch {
"""
Data for removing a star
"""
	viewName: String!
"""
Data for removing a star
"""
	id: String!
}

input RemoveStarToFieldInput {
	fieldName: String!
	searchDomainName: String!
}

type RemoveStarToFieldMutation {
	starredFields: [String!]!
}

input RemoveSystemRoleFromGroupInput {
	groupId: String!
	roleId: String!
}

input RemoveUserByIdInput {
	id: String!
}

type RemoveUserByIdMutation {
	user: User!
}

input RemoveUserInput {
	username: String!
}

type RemoveUserMutation {
	user: User!
}

input RemoveUsersFromGroupInput {
	users: [String!]!
	groupId: String!
}

type RemoveUsersFromGroupMutation {
	group: Group!
}

input RenameSearchDomainByIdInput {
	id: String!
	newName: String!
	renameMessage: String
}

input RepoFilterInput {
	name: String!
	filter: String!
}

"""
Data for a reported warning or error.
"""
input ReportErrorInput {
"""
Data for a reported warning or error.
"""
	errorType: String!
"""
Data for a reported warning or error.
"""
	errorMessage: String!
}

"""
Data for resetting quota
"""
input ResetQuotaInput {
"""
Data for resetting quota
"""
	newQuota: Long
"""
Data for resetting quota
"""
	newRate: Long
}

input RestoreDeletedSearchDomainInput {
	id: String!
}

input ResubmitMarketoLeadData {
	utmParams: UtmParams
	zip: String
}

input RevokeSessionInput {
	id: String!
	revocationType: SessionRevocation__Type!
}

input RotateTokenInputData {
	id: String!
}

input RunInconsistencyCheckInput {
	dryRun: Boolean!
}

"""
This authentication type implements the SAML 2.0 Web Browser SSO Profile.
"""
type SAMLAuthentication implements AuthenticationMethod{
	name: String!
}

type SamlIdentityProviderAuth implements AuthenticationMethodAuth{
	name: String!
	authType: String!
}

type SavedQueryIsStarred {
	id: String!
	isStarred: Boolean!
}

type SavedQueryStarredUpdate {
	savedQuery: SavedQueryIsStarred!
}

"""
Data for reporting a failed report generation attempt.
"""
input ScheduledReportResultFailedInput {
"""
Data for reporting a failed report generation attempt.
"""
	reportErrors: [ReportErrorInput!]!
}

"""
Data for reporting a successful report generation attempt.
"""
input ScheduledReportResultSucceededInput {
"""
Data for reporting a successful report generation attempt.
"""
	filename: String!
}

input SchemaFieldInput {
	name: String!
	description: String
}

input SearchLinkInteractionInput {
	name: String!
	titleTemplate: String
	repoOrViewName: RepoOrViewName
	queryString: String!
	isLive: Boolean!
	arguments: [ArgumentInput!]!
	openInNewTab: Boolean!
	useWidgetTimeWindow: Boolean!
	fieldInteractionConditions: [FieldInteractionConditionInput!]
}

input SectionInput {
	id: String!
	title: String
	description: String
	collapsed: Boolean!
	timeSelector: TimeIntervalInput
	widgetIds: [String!]!
	order: Int!
}

input ServiceLevelIndicatorLogArg {
	frontendVersion: String!
	content: JSON!
}

input SessionInput {
	maxInactivityPeriod: Long!
	forceReauthenticationAfter: Long!
}

enum SessionRevocation__Type {
	Organization
	User
	Session
}

input SetDefaultSavedQueryInput {
	savedQueryId: String
	viewName: String!
}

"""
Data to set a global default cache policy
"""
input SetGlobalDefaultCachePolicyInput {
"""
Data to set a global default cache policy
"""
	policy: CachePolicyInput!
}

input SetLimitDisplayNameInput {
	limitName: String!
	displayName: String
}

"""
Data to set a organization default cache policy
"""
input SetOrgDefaultCachePolicyInput {
"""
Data to set a organization default cache policy
"""
	policy: CachePolicyInput!
}

input SetPrimarySubdomainInput {
	subdomain: String!
}

"""
Data to set a repo cache policy
"""
input SetRepoCachePolicyInput {
"""
Data to set a repo cache policy
"""
	repositoryName: String!
"""
Data to set a repo cache policy
"""
	policy: CachePolicyInput!
}

"""
Data for updating search limit on a search domain.
"""
input SetSearchLimitForSearchDomain {
"""
Data for updating search limit on a search domain.
"""
	id: String!
"""
Data for updating search limit on a search domain.
"""
	searchLimitMs: Long!
"""
Data for updating search limit on a search domain.
"""
	excludedRepoIds: [String!]!
}

input SetSubdomainSettingsInput {
	primarySubdomain: String!
	secondarySubdomains: [String!]
	enforceSubdomains: Boolean!
}

"""
Data for updating shared dashboards security policies
"""
input SharedDashboardsSecurityPoliciesInput {
"""
Data for updating shared dashboards security policies
"""
	sharedDashboardsEnabled: Boolean!
"""
Data for updating shared dashboards security policies
"""
	enforceIpFilterId: String
}

"""
A Slack action
"""
type SlackAction implements Action{
"""
Slack webhook url to send the request to.
"""
	url: String!
"""
Fields to include within the Slack message. Can be templated with values from the result.
"""
	fields: [SlackFieldEntry!]!
"""
Defines whether the action should use the configured proxy to make web requests.
"""
	useProxy: Boolean!
"""
The name of the action.
"""
	name: String!
"""
The display name of the action.
"""
	displayName: String!
"""
The id of the action.
"""
	id: String!
"""
A template that can be used to recreate the action.
"""
	yamlTemplate: YAML!
	packageId: VersionedPackageSpecifier
"""
The package if any which the action is part of.
"""
	package: PackageInstallation
"""
False if this type of action is disabled because of a security policy, true otherwise
"""
	isAllowedToRun: Boolean!
"""
True if this action is used by triggers, where the query is run by the organization. If true, then the OrganizationOwnedQueries permission is required to edit the action.
"""
	requiresOrganizationOwnedQueriesPermissionToEdit: Boolean!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] Allowed asset actions
"""
	allowedActions: [AssetAction!]!
}

"""
Field entry in a Slack message
"""
type SlackFieldEntry {
"""
Key of a Slack field.
"""
	fieldName: String!
"""
Value of a Slack field.
"""
	value: String!
}

"""
Slack message field entry.
"""
input SlackFieldEntryInput {
"""
Slack message field entry.
"""
	fieldName: String!
"""
Slack message field entry.
"""
	value: String!
}

"""
A slack post-message action.
"""
type SlackPostMessageAction implements Action{
"""
Api token to authenticate with Slack.
"""
	apiToken: String!
"""
List of Slack channels to message.
"""
	channels: [String!]!
"""
Fields to include within the Slack message. Can be templated with values from the result.
"""
	fields: [SlackFieldEntry!]!
"""
Defines whether the action should use the configured proxy to make web requests.
"""
	useProxy: Boolean!
"""
The name of the action.
"""
	name: String!
"""
The display name of the action.
"""
	displayName: String!
"""
The id of the action.
"""
	id: String!
"""
A template that can be used to recreate the action.
"""
	yamlTemplate: YAML!
	packageId: VersionedPackageSpecifier
"""
The package if any which the action is part of.
"""
	package: PackageInstallation
"""
False if this type of action is disabled because of a security policy, true otherwise
"""
	isAllowedToRun: Boolean!
"""
True if this action is used by triggers, where the query is run by the organization. If true, then the OrganizationOwnedQueries permission is required to edit the action.
"""
	requiresOrganizationOwnedQueriesPermissionToEdit: Boolean!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] Allowed asset actions
"""
	allowedActions: [AssetAction!]!
}

input SocialLoginSettingsInput {
	socialProviderProfile: SocialProviderProfile!
	filter: SocialLoginField!
	allowList: [String!]!
}

input StopQueriesInput {
	clusterWide: Boolean
}

"""
System permissions token. The token allows the caller to work with system-level permissions.
"""
type SystemPermissionsToken implements Token{
"""
The set of permissions on the token
"""
	permissions: [String!]!
"""
The id of the token.
"""
	id: String!
"""
The name of the token.
"""
	name: String!
"""
The time at which the token expires.
"""
	expireAt: Long
"""
The ip filter on the token.
"""
	ipFilter: String
"""
The ip filter on the token.
"""
	ipFilterV2: IPFilter
"""
The date the token was created.
"""
	createdAt: Long!
}

"""
The grouping rule for a given tag.
"""
input TagGroupingRuleInput {
"""
The grouping rule for a given tag.
"""
	tagName: String!
"""
The grouping rule for a given tag.
"""
	groupCount: Int!
}

input TagsInput {
	name: String!
	value: String!
}

enum Targets {
	All
	Group
	Root
	OrgRoot
}

"""
Data for testing an ingest feed that uses AWS S3 and SQS
"""
input TestAwsS3SqsIngestFeed {
"""
Data for testing an ingest feed that uses AWS S3 and SQS
"""
	repositoryName: RepoOrViewName!
"""
Data for testing an ingest feed that uses AWS S3 and SQS
"""
	authentication: IngestFeedAwsAuthenticationInput!
"""
Data for testing an ingest feed that uses AWS S3 and SQS
"""
	sqsUrl: String!
"""
Data for testing an ingest feed that uses AWS S3 and SQS
"""
	region: String!
}

"""
Data for testing an email action
"""
input TestEmailAction {
"""
Data for testing an email action
"""
	viewName: String!
"""
Data for testing an email action
"""
	name: String!
"""
Data for testing an email action
"""
	recipients: [String!]!
"""
Data for testing an email action
"""
	subjectTemplate: String
"""
Data for testing an email action
"""
	bodyTemplate: String
"""
Data for testing an email action
"""
	useProxy: Boolean!
"""
Data for testing an email action
"""
	attachCsv: Boolean
"""
Data for testing an email action
"""
	triggerName: String!
"""
Data for testing an email action
"""
	eventData: String!
}

"""
Collection of errors, which occurred during test.
"""
type TestFdrErrorResult {
"""
List of test errors.
"""
	errors: [error!]!
}

"""
Data for testing an FDR feed.
"""
input TestFdrFeed {
"""
Data for testing an FDR feed.
"""
	repositoryName: String!
"""
Data for testing an FDR feed.
"""
	feedId: String
"""
Data for testing an FDR feed.
"""
	clientId: String
"""
Data for testing an FDR feed.
"""
	clientSecret: String
"""
Data for testing an FDR feed.
"""
	sqsUrl: String
"""
Data for testing an FDR feed.
"""
	s3Identifier: String
}

"""
An error, which occurred when making a request towards an AWS resource.
"""
type TestFdrRequestError {
"""
Name of the AWS resource, which the request was made towards.
"""
	resourceName: String!
"""
Message specifying the request error.
"""
	message: String!
}

"""
Result of testing an FDR feed.
"""
union TestFdrResult =TestFdrErrorResult | TestFdrSuccessResult

"""
Test was a success.
"""
type TestFdrSuccessResult {
"""
This field is always 'true'
"""
	result: Boolean!
}

"""
A validation error related to a particular input field.
"""
type TestFdrValidationError {
"""
Name of the field, which the error relates to.
"""
	fieldName: String!
"""
Message specifying the validation error.
"""
	message: String!
}

"""
Data for testing a Humio repo action
"""
input TestHumioRepoAction {
"""
Data for testing a Humio repo action
"""
	viewName: String!
"""
Data for testing a Humio repo action
"""
	name: String!
"""
Data for testing a Humio repo action
"""
	ingestToken: String!
"""
Data for testing a Humio repo action
"""
	triggerName: String!
"""
Data for testing a Humio repo action
"""
	eventData: String!
}

"""
Data for testing a Kafka event forwarder
"""
input TestKafkaEventForwarder {
"""
Data for testing a Kafka event forwarder
"""
	name: String!
"""
Data for testing a Kafka event forwarder
"""
	description: String!
"""
Data for testing a Kafka event forwarder
"""
	properties: String!
"""
Data for testing a Kafka event forwarder
"""
	topic: String!
"""
Data for testing a Kafka event forwarder
"""
	enabled: Boolean
}

"""
Data for testing an OpsGenie action
"""
input TestOpsGenieAction {
"""
Data for testing an OpsGenie action
"""
	viewName: String!
"""
Data for testing an OpsGenie action
"""
	name: String!
"""
Data for testing an OpsGenie action
"""
	apiUrl: String!
"""
Data for testing an OpsGenie action
"""
	genieKey: String!
"""
Data for testing an OpsGenie action
"""
	useProxy: Boolean!
"""
Data for testing an OpsGenie action
"""
	triggerName: String!
"""
Data for testing an OpsGenie action
"""
	eventData: String!
}

"""
Data for testing a PagerDuty action.
"""
input TestPagerDutyAction {
"""
Data for testing a PagerDuty action.
"""
	viewName: String!
"""
Data for testing a PagerDuty action.
"""
	name: String!
"""
Data for testing a PagerDuty action.
"""
	severity: String!
"""
Data for testing a PagerDuty action.
"""
	routingKey: String!
"""
Data for testing a PagerDuty action.
"""
	useProxy: Boolean!
"""
Data for testing a PagerDuty action.
"""
	triggerName: String!
"""
Data for testing a PagerDuty action.
"""
	eventData: String!
}

"""
An error occurred while running the parser and no events were parsed
"""
type TestParserErrorResult {
"""
An error message
"""
	errorMessage: String!
}

"""
Input for testing a parser
"""
input TestParserInputV2 {
"""
Input for testing a parser
"""
	repositoryName: String!
"""
Input for testing a parser
"""
	parserId: String!
"""
Input for testing a parser
"""
	parserName: String!
"""
Input for testing a parser
"""
	parserScript: String!
"""
Input for testing a parser
"""
	testData: [String!]!
}

"""
The result of running the parser on all the test events
"""
union TestParserResultV2 =TestParserSuccessResultV2 | TestParserErrorResult

"""
The parser produced results for each test event
"""
type TestParserSuccessResultV2 {
"""
The results of parsing the test events
"""
	results: [ParseEventResult!]!
}

"""
Data for testing a post message Slack action.
"""
input TestPostMessageSlackAction {
"""
Data for testing a post message Slack action.
"""
	viewName: String!
"""
Data for testing a post message Slack action.
"""
	name: String!
"""
Data for testing a post message Slack action.
"""
	apiToken: String!
"""
Data for testing a post message Slack action.
"""
	channels: [String!]!
"""
Data for testing a post message Slack action.
"""
	fields: [SlackFieldEntryInput!]!
"""
Data for testing a post message Slack action.
"""
	useProxy: Boolean!
"""
Data for testing a post message Slack action.
"""
	triggerName: String!
"""
Data for testing a post message Slack action.
"""
	eventData: String!
}

"""
The result of the test
"""
type TestResult {
"""
True if the test was a success, false otherwise
"""
	success: Boolean!
"""
A message explaining the test result
"""
	message: String!
}

"""
Data for testing a Slack action.
"""
input TestSlackAction {
"""
Data for testing a Slack action.
"""
	viewName: String!
"""
Data for testing a Slack action.
"""
	name: String!
"""
Data for testing a Slack action.
"""
	url: String!
"""
Data for testing a Slack action.
"""
	fields: [SlackFieldEntryInput!]!
"""
Data for testing a Slack action.
"""
	useProxy: Boolean!
"""
Data for testing a Slack action.
"""
	triggerName: String!
"""
Data for testing a Slack action.
"""
	eventData: String!
}

"""
Data for testing an upload file action.
"""
input TestUploadFileAction {
"""
Data for testing an upload file action.
"""
	viewName: String!
"""
Data for testing an upload file action.
"""
	name: String!
"""
Data for testing an upload file action.
"""
	fileName: String!
"""
Data for testing an upload file action.
"""
	triggerName: String!
"""
Data for testing an upload file action.
"""
	eventData: String!
}

"""
Data for testing a VictorOps action.
"""
input TestVictorOpsAction {
"""
Data for testing a VictorOps action.
"""
	viewName: String!
"""
Data for testing a VictorOps action.
"""
	name: String!
"""
Data for testing a VictorOps action.
"""
	messageType: String!
"""
Data for testing a VictorOps action.
"""
	notifyUrl: String!
"""
Data for testing a VictorOps action.
"""
	useProxy: Boolean!
"""
Data for testing a VictorOps action.
"""
	triggerName: String!
"""
Data for testing a VictorOps action.
"""
	eventData: String!
}

"""
Data for testing a webhook action.
"""
input TestWebhookAction {
"""
Data for testing a webhook action.
"""
	viewName: String!
"""
Data for testing a webhook action.
"""
	name: String!
"""
Data for testing a webhook action.
"""
	url: String!
"""
Data for testing a webhook action.
"""
	method: String!
"""
Data for testing a webhook action.
"""
	headers: [HttpHeaderEntryInput!]!
"""
Data for testing a webhook action.
"""
	bodyTemplate: String!
"""
Data for testing a webhook action.
"""
	ignoreSSL: Boolean!
"""
Data for testing a webhook action.
"""
	useProxy: Boolean!
"""
Data for testing a webhook action.
"""
	triggerName: String!
"""
Data for testing a webhook action.
"""
	eventData: String!
}

input TimeIntervalInput {
	start: String!
	end: String!
}

input TokenInput {
	token: String!
}

"""
Data for updating token security policies
"""
input TokenSecurityPoliciesInput {
"""
Data for updating token security policies
"""
	personalUserTokensEnabled: Boolean!
"""
Data for updating token security policies
"""
	personalUserTokensEnforceExpirationAfterMs: Long
"""
Data for updating token security policies
"""
	personalUserTokensEnforceIpFilterId: String
"""
Data for updating token security policies
"""
	viewPermissionTokensEnabled: Boolean!
"""
Data for updating token security policies
"""
	viewPermissionTokensEnforceExpirationAfterMs: Long
"""
Data for updating token security policies
"""
	viewPermissionTokensEnforceIpFilterId: String
"""
Data for updating token security policies
"""
	viewPermissionTokensAllowPermissionUpdates: Boolean!
"""
Data for updating token security policies
"""
	organizationPermissionTokensEnabled: Boolean!
"""
Data for updating token security policies
"""
	organizationPermissionTokensEnforceExpirationAfterMs: Long
"""
Data for updating token security policies
"""
	organizationPermissionTokensEnforceIpFilterId: String
"""
Data for updating token security policies
"""
	organizationPermissionTokensAllowPermissionUpdates: Boolean!
"""
Data for updating token security policies
"""
	systemPermissionTokensEnabled: Boolean
"""
Data for updating token security policies
"""
	systemPermissionTokensEnforceExpirationAfterMs: Long
"""
Data for updating token security policies
"""
	systemPermissionTokensEnforceIpFilterId: String
"""
Data for updating token security policies
"""
	systemPermissionTokensAllowPermissionUpdates: Boolean
}

"""
Represents information about an on-going trial of LogScale.
"""
type TrialLicense implements License{
"""
The time at which the trial ends.
"""
	expiresAt: DateTime!
"""
The time at which the trial started.
"""
	issuedAt: DateTime!
}

"""
Data for trigger polling an ingest feed
"""
input TriggerPollIngestFeed {
"""
Data for trigger polling an ingest feed
"""
	repositoryName: RepoOrViewName!
"""
Data for trigger polling an ingest feed
"""
	id: String!
}

type UnassignIngestTokenMutation {
	repository: Repository!
}

input UnassignOrganizationManagementRoleFromGroupInput {
	groupId: String!
	roleId: String!
	organizationIds: [String!]!
}

type UnassignOrganizationRoleFromGroup {
	group: Group!
}

type UnassignRoleFromGroup {
	group: Group!
}

type UnassignSystemRoleFromGroup {
	group: Group!
}

type UnblockIngestMutation {
	repository: Repository!
}

"""
A widget that represents an unknown widget type.
"""
type UnknownWidget implements Widget{
	id: String!
	title: String!
	description: String
	x: Int!
	y: Int!
	width: Int!
	height: Int!
}

type Unlimited implements contractual{
	includeUsage: Boolean!
}

type UnregisterNodeMutation {
	cluster: Cluster!
}

input UnsetDynamicConfigInputObject {
	config: DynamicConfig!
}

"""
Data for updating an aggregate alert.
"""
input UpdateAggregateAlert {
"""
Data for updating an aggregate alert.
"""
	viewName: RepoOrViewName!
"""
Data for updating an aggregate alert.
"""
	id: String!
"""
Data for updating an aggregate alert.
"""
	name: String!
"""
Data for updating an aggregate alert.
"""
	description: String
"""
Data for updating an aggregate alert.
"""
	queryString: String!
"""
Data for updating an aggregate alert.
"""
	actionIdsOrNames: [String!]!
"""
Data for updating an aggregate alert.
"""
	labels: [String!]!
"""
Data for updating an aggregate alert.
"""
	enabled: Boolean!
"""
Data for updating an aggregate alert.
"""
	throttleTimeSeconds: Long!
"""
Data for updating an aggregate alert.
"""
	throttleField: String
"""
Data for updating an aggregate alert.
"""
	searchIntervalSeconds: Long!
"""
Data for updating an aggregate alert.
"""
	queryTimestampType: QueryTimestampType!
"""
Data for updating an aggregate alert.
"""
	triggerMode: TriggerMode!
"""
Data for updating an aggregate alert.
"""
	runAsUserId: String
"""
Data for updating an aggregate alert.
"""
	queryOwnershipType: QueryOwnershipType!
}

"""
Data for updating an alert
"""
input UpdateAlert {
"""
Data for updating an alert
"""
	viewName: String!
"""
Data for updating an alert
"""
	id: String!
"""
Data for updating an alert
"""
	name: String!
"""
Data for updating an alert
"""
	description: String
"""
Data for updating an alert
"""
	queryString: String!
"""
Data for updating an alert
"""
	queryStart: String!
"""
Data for updating an alert
"""
	throttleTimeMillis: Long!
"""
Data for updating an alert
"""
	throttleField: String
"""
Data for updating an alert
"""
	runAsUserId: String
"""
Data for updating an alert
"""
	enabled: Boolean!
"""
Data for updating an alert
"""
	actions: [String!]!
"""
Data for updating an alert
"""
	labels: [String!]!
"""
Data for updating an alert
"""
	queryOwnershipType: QueryOwnershipType
}

"""
Data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
"""
input UpdateAwsS3SqsIngestFeed {
"""
Data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
"""
	repositoryName: RepoOrViewName!
"""
Data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
"""
	id: String!
"""
Data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
"""
	name: String
"""
Data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
"""
	description: UpdateIngestFeedDescription
"""
Data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
"""
	parser: String
"""
Data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
"""
	authentication: IngestFeedAwsAuthenticationInput
"""
Data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
"""
	sqsUrl: String
"""
Data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
"""
	region: String
"""
Data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
"""
	enabled: Boolean
"""
Data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
"""
	preprocessing: IngestFeedPreprocessingInput
"""
Data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
"""
	compression: IngestFeedCompression
}

input UpdateCustomLinkInteractionInput {
	path: String!
	interactionId: String!
	customLinkInteractionInput: CustomLinkInteractionInput!
}

input UpdateDashboardInput {
	id: String!
	name: String
	labels: [String!]
	widgets: [WidgetInput!]
	sections: [SectionInput!]
	links: [LinkInput!]
	defaultFilterId: String
	filters: [FilterInput!]
	parameters: [ParameterInput!]
	description: String
	timeJumpSizeInMs: Int
	updateFrequency: DashboardUpdateFrequencyInput
	defaultSharedTimeStart: String
	defaultSharedTimeEnd: String
	defaultSharedTimeEnabled: Boolean
}

input UpdateDashboardLinkInteractionInput {
	path: String!
	interactionId: String!
	dashboardLinkInteractionInput: DashboardLinkInteractionInput!
}

type UpdateDashboardMutation {
	dashboard: Dashboard!
}

input UpdateDefaultQueryPrefixInput {
	queryPrefix: String
	groupId: String!
}

type UpdateDefaultQueryPrefixMutation {
	group: Group!
}

input UpdateDefaultRoleInput {
	roleId: String
	groupId: String!
}

"""
Type for updating the description. If the description should be cleared, supply an `UpdateDescription` object with no value or a `null` value. If the description should be changed, supply an `UpdateDescription`object with the desired value.
"""
input UpdateDescription {
"""
Type for updating the description. If the description should be cleared, supply an `UpdateDescription` object with no value or a `null` value. If the description should be changed, supply an `UpdateDescription`object with the desired value.
"""
	value: String
}

type UpdateDescriptionMutation {
	description: String!
}

"""
Data for updating an email action.
"""
input UpdateEmailAction {
"""
Data for updating an email action.
"""
	viewName: String!
"""
Data for updating an email action.
"""
	id: String!
"""
Data for updating an email action.
"""
	name: String!
"""
Data for updating an email action.
"""
	recipients: [String!]!
"""
Data for updating an email action.
"""
	subjectTemplate: String
"""
Data for updating an email action.
"""
	bodyTemplate: String
"""
Data for updating an email action.
"""
	useProxy: Boolean!
"""
Data for updating an email action.
"""
	attachCsv: Boolean
}

"""
Data for updating an event forwarding rule
"""
input UpdateEventForwardingRule {
"""
Data for updating an event forwarding rule
"""
	repoName: String!
"""
Data for updating an event forwarding rule
"""
	id: String!
"""
Data for updating an event forwarding rule
"""
	queryString: String!
"""
Data for updating an event forwarding rule
"""
	eventForwarderId: String!
"""
Data for updating an event forwarding rule
"""
	languageVersion: LanguageVersionEnum
}

"""
Data for updating an FDR feed. Note that the fields, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
"""
input UpdateFdrFeed {
"""
Data for updating an FDR feed. Note that the fields, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
"""
	repositoryName: String!
"""
Data for updating an FDR feed. Note that the fields, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
"""
	id: String!
"""
Data for updating an FDR feed. Note that the fields, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
"""
	name: String
"""
Data for updating an FDR feed. Note that the fields, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
"""
	description: UpdateDescription
"""
Data for updating an FDR feed. Note that the fields, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
"""
	parser: String
"""
Data for updating an FDR feed. Note that the fields, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
"""
	clientId: String
"""
Data for updating an FDR feed. Note that the fields, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
"""
	clientSecret: String
"""
Data for updating an FDR feed. Note that the fields, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
"""
	sqsUrl: String
"""
Data for updating an FDR feed. Note that the fields, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
"""
	s3Identifier: String
"""
Data for updating an FDR feed. Note that the fields, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
"""
	enabled: Boolean
}

"""
Data for updating the administrator control of an FDR feed.
"""
input UpdateFdrFeedControl {
"""
Data for updating the administrator control of an FDR feed.
"""
	repositoryName: String!
"""
Data for updating the administrator control of an FDR feed.
"""
	id: String!
"""
Data for updating the administrator control of an FDR feed.
"""
	maxNodes: UpdateLong
"""
Data for updating the administrator control of an FDR feed.
"""
	fileDownloadParallelism: UpdateLong
}

"""
[PREVIEW: This functionality is still under development and can change without warning.] Input object for field updateFieldAliasMapping
"""
input UpdateFieldAliasMappingInput {
"""
[PREVIEW: This functionality is still under development and can change without warning.] Input object for field updateFieldAliasMapping
"""
	schemaId: String!
"""
[PREVIEW: This functionality is still under development and can change without warning.] Input object for field updateFieldAliasMapping
"""
	aliasMappingId: String!
"""
[PREVIEW: This functionality is still under development and can change without warning.] Input object for field updateFieldAliasMapping
"""
	name: String
"""
[PREVIEW: This functionality is still under development and can change without warning.] Input object for field updateFieldAliasMapping
"""
	tags: [TagsInput!]
"""
[PREVIEW: This functionality is still under development and can change without warning.] Input object for field updateFieldAliasMapping
"""
	aliases: [AliasInfoInput!]
"""
[PREVIEW: This functionality is still under development and can change without warning.] Input object for field updateFieldAliasMapping
"""
	originalFieldsToKeep: [String!]
}

"""
[PREVIEW: This functionality is still under development and can change without warning.] Input object for field updateFieldAliasSchema
"""
input UpdateFieldAliasSchemaInput {
"""
[PREVIEW: This functionality is still under development and can change without warning.] Input object for field updateFieldAliasSchema
"""
	id: String!
"""
[PREVIEW: This functionality is still under development and can change without warning.] Input object for field updateFieldAliasSchema
"""
	name: String
"""
[PREVIEW: This functionality is still under development and can change without warning.] Input object for field updateFieldAliasSchema
"""
	fields: [SchemaFieldInput!]
"""
[PREVIEW: This functionality is still under development and can change without warning.] Input object for field updateFieldAliasSchema
"""
	aliasMappings: [AliasMappingInput!]
}

"""
Data for updating a filter alert
"""
input UpdateFilterAlert {
"""
Data for updating a filter alert
"""
	viewName: RepoOrViewName!
"""
Data for updating a filter alert
"""
	id: String!
"""
Data for updating a filter alert
"""
	name: String!
"""
Data for updating a filter alert
"""
	description: String
"""
Data for updating a filter alert
"""
	queryString: String!
"""
Data for updating a filter alert
"""
	actionIdsOrNames: [String!]!
"""
Data for updating a filter alert
"""
	labels: [String!]!
"""
Data for updating a filter alert
"""
	enabled: Boolean!
"""
Data for updating a filter alert
"""
	throttleTimeSeconds: Long
"""
Data for updating a filter alert
"""
	throttleField: String
"""
Data for updating a filter alert
"""
	runAsUserId: String
"""
Data for updating a filter alert
"""
	queryOwnershipType: QueryOwnershipType!
}

input UpdateGroupInput {
	groupId: String!
	displayName: String
	lookupName: String
}

type UpdateGroupMutation {
	group: Group!
}

"""
Data for updating a LogScale repository action.
"""
input UpdateHumioRepoAction {
"""
Data for updating a LogScale repository action.
"""
	viewName: String!
"""
Data for updating a LogScale repository action.
"""
	id: String!
"""
Data for updating a LogScale repository action.
"""
	name: String!
"""
Data for updating a LogScale repository action.
"""
	ingestToken: String!
}

"""
Type for updating the description. If the description should be cleared, supply an `UpdateDescription` object with no value or a `null` value. If the description should be changed, supply an `UpdateDescription`object with the desired value.
"""
input UpdateIngestFeedDescription {
"""
Type for updating the description. If the description should be cleared, supply an `UpdateDescription` object with no value or a `null` value. If the description should be changed, supply an `UpdateDescription`object with the desired value.
"""
	description: String
}

"""
Input data to update an ingest listener
"""
input UpdateIngestListenerV3Input {
"""
Input data to update an ingest listener
"""
	id: String!
"""
Input data to update an ingest listener
"""
	repositoryName: String!
"""
Input data to update an ingest listener
"""
	port: Int!
"""
Input data to update an ingest listener
"""
	protocol: IngestListenerProtocol!
"""
Input data to update an ingest listener
"""
	vHost: Int
"""
Input data to update an ingest listener
"""
	name: String!
"""
Input data to update an ingest listener
"""
	bindInterface: String!
"""
Input data to update an ingest listener
"""
	parser: String!
"""
Input data to update an ingest listener
"""
	charset: String!
}

"""
Data for updating a Kafka event forwarder
"""
input UpdateKafkaEventForwarder {
"""
Data for updating a Kafka event forwarder
"""
	id: String!
"""
Data for updating a Kafka event forwarder
"""
	name: String!
"""
Data for updating a Kafka event forwarder
"""
	description: String!
"""
Data for updating a Kafka event forwarder
"""
	properties: String!
"""
Data for updating a Kafka event forwarder
"""
	topic: String!
"""
Data for updating a Kafka event forwarder
"""
	enabled: Boolean
}

input UpdateLimitInput {
	limitName: String!
	allowLogin: Boolean
	dailyIngest: Long
	retention: Int
	allowSelfService: Boolean
	expiration: Long
	contractVersion: Organizations__ContractVersion
	userLimit: Int
}

input UpdateLimitInputV2 {
	id: String!
	name: String
	allowLogin: Boolean
	dailyIngest: Long
	dailyIngestContractualType: Organizations__ContractualType
	storageContractualType: Organizations__ContractualType
	dailyScanContractualType: Organizations__ContractualType
	measurementType: Organizations__MeasurementType
	dailyScan: Long
	retention: Int
	maxRetention: Int
	allowSelfService: Boolean
	expiration: Long
	userLimit: Int
	dateType: String
	trial: Boolean
	allowFlightControl: Boolean
	repositoryLimit: Int
}

"""
Data for updating a local cluster connection
"""
input UpdateLocalClusterConnectionInput {
"""
Data for updating a local cluster connection
"""
	multiClusterViewName: String!
"""
Data for updating a local cluster connection
"""
	connectionId: String!
"""
Data for updating a local cluster connection
"""
	targetViewName: String
"""
Data for updating a local cluster connection
"""
	tags: [ClusterConnectionInputTag!]
"""
Data for updating a local cluster connection
"""
	queryPrefix: String
}

"""
If the value should be cleared, supply an `UpdateLong` object the with no value or a `null` value. If the setting should be changed, supply a `UpdateLong` object with the desired value.
"""
input UpdateLong {
"""
If the value should be cleared, supply an `UpdateLong` object the with no value or a `null` value. If the setting should be changed, supply a `UpdateLong` object with the desired value.
"""
	value: Int
}

input UpdateOidcConfigurationInput {
	id: String!
	name: String!
	clientID: String!
	clientSecret: String!
	issuer: String!
	tokenEndpointAuthMethod: String!
	authorizationEndpoint: String!
	tokenEndpoint: String
	userInfoEndpoint: String
	registrationEndpoint: String
	groupsClaim: String
	JWKSEndpoint: String
	domains: [String!]!
	scopes: [String!]!
	userClaim: String!
	enableDebug: Boolean!
	defaultIdp: Boolean
	humioOwned: Boolean
	lazyCreateUsers: Boolean
	federatedIdp: String
	scopeClaim: String
}

"""
Data for updating an OpsGenie action
"""
input UpdateOpsGenieAction {
"""
Data for updating an OpsGenie action
"""
	viewName: String!
"""
Data for updating an OpsGenie action
"""
	id: String!
"""
Data for updating an OpsGenie action
"""
	name: String!
"""
Data for updating an OpsGenie action
"""
	apiUrl: String!
"""
Data for updating an OpsGenie action
"""
	genieKey: String!
"""
Data for updating an OpsGenie action
"""
	useProxy: Boolean!
}

input UpdateOrganizationPermissionsTokenPermissionsInput {
	id: String!
	permissions: [OrganizationPermission!]!
}

input UpdatePackageFromRegistryInput {
	viewName: RepoOrViewName!
	packageId: VersionedPackageSpecifier!
	conflictResolutions: [ConflictResolutionConfiguration!]!
	queryOwnershipType: QueryOwnershipType
}

"""
Data for updating a PagerDuty action
"""
input UpdatePagerDutyAction {
"""
Data for updating a PagerDuty action
"""
	viewName: String!
"""
Data for updating a PagerDuty action
"""
	id: String!
"""
Data for updating a PagerDuty action
"""
	name: String!
"""
Data for updating a PagerDuty action
"""
	severity: String!
"""
Data for updating a PagerDuty action
"""
	routingKey: String!
"""
Data for updating a PagerDuty action
"""
	useProxy: Boolean!
}

input UpdateParametersInteractionInput {
	name: String!
	titleTemplate: String
	arguments: [ArgumentInput!]!
	useWidgetTimeWindow: Boolean!
	fieldInteractionConditions: [FieldInteractionConditionInput!]
}

"""
Input for updating a parser.
"""
input UpdateParserInput {
"""
Input for updating a parser.
"""
	repositoryName: String
"""
Input for updating a parser.
"""
	id: String
"""
Input for updating a parser.
"""
	name: String
"""
Input for updating a parser.
"""
	testData: [String!]
"""
Input for updating a parser.
"""
	sourceCode: String
"""
Input for updating a parser.
"""
	tagFields: [String!]
"""
Input for updating a parser.
"""
	fieldsToBeRemovedBeforeParsing: [String!]
"""
Input for updating a parser.
"""
	languageVersion: LanguageVersionEnum
}

"""
Input for updating a parser.
"""
input UpdateParserInputV2 {
"""
Input for updating a parser.
"""
	repositoryName: RepoOrViewName!
"""
Input for updating a parser.
"""
	id: String!
"""
Input for updating a parser.
"""
	name: String
"""
Input for updating a parser.
"""
	script: UpdateParserScriptInput
"""
Input for updating a parser.
"""
	testCases: [ParserTestCaseInput!]
"""
Input for updating a parser.
"""
	fieldsToTag: [String!]
"""
Input for updating a parser.
"""
	fieldsToBeRemovedBeforeParsing: [String!]
}

type UpdateParserMutation {
	parser: Parser!
}

"""
Input for updating the parser script.
"""
input UpdateParserScriptInput {
"""
Input for updating the parser script.
"""
	script: String!
"""
Input for updating the parser script.
"""
	languageVersion: LanguageVersionInputType
}

"""
Data for updating a post-message Slack action
"""
input UpdatePostMessageSlackAction {
"""
Data for updating a post-message Slack action
"""
	viewName: String!
"""
Data for updating a post-message Slack action
"""
	id: String!
"""
Data for updating a post-message Slack action
"""
	name: String!
"""
Data for updating a post-message Slack action
"""
	apiToken: String!
"""
Data for updating a post-message Slack action
"""
	channels: [String!]!
"""
Data for updating a post-message Slack action
"""
	fields: [SlackFieldEntryInput!]!
"""
Data for updating a post-message Slack action
"""
	useProxy: Boolean!
}

input UpdateQueryPrefixInput {
	queryPrefix: String!
	viewId: String!
	groupId: String!
}

type UpdateQueryPrefixMutation {
	group: Group!
}

"""
Data for updating a remote cluster connection
"""
input UpdateRemoteClusterConnectionInput {
"""
Data for updating a remote cluster connection
"""
	multiClusterViewName: String!
"""
Data for updating a remote cluster connection
"""
	connectionId: String!
"""
Data for updating a remote cluster connection
"""
	publicUrl: String
"""
Data for updating a remote cluster connection
"""
	token: String
"""
Data for updating a remote cluster connection
"""
	tags: [ClusterConnectionInputTag!]
"""
Data for updating a remote cluster connection
"""
	queryPrefix: String
}

input UpdateRepoDataTypeInputObject {
	dataspaceId: String!
	repoDataType: RepositoryDataType!
}

input UpdateRepoLimitIdInputObject {
	dataspaceId: String!
	limitId: String!
}

type UpdateRetentionMutation {
	repository: SearchDomain!
}

input UpdateRoleInput {
	roleId: String!
	displayName: String!
	viewPermissions: [Permission!]!
	description: String
	color: String
	systemPermissions: [SystemPermission!]
	organizationPermissions: [OrganizationPermission!]
	objectAction: ObjectAction
	organizationManagementPermissions: [OrganizationManagementPermission!]
}

type UpdateRoleMutation {
	role: Role!
}

input UpdateSavedQueryInput {
	id: String!
	name: String
	viewName: String!
	queryString: String
	start: String
	end: String
	isLive: Boolean
	widgetType: String
	options: String
	dashboardLinkInteractions: [DashboardLinkInteractionInput!]
	customLinkInteractions: [CustomLinkInteractionInput!]
	searchLinkInteractions: [SearchLinkInteractionInput!]
	updateParametersInteractions: [UpdateParametersInteractionInput!]
}

type UpdateSavedQueryPayload {
	savedQuery: SavedQuery!
}

"""
Data for updating a scheduled report.
"""
input UpdateScheduledReportInput {
"""
Data for updating a scheduled report.
"""
	viewName: String!
"""
Data for updating a scheduled report.
"""
	id: String!
"""
Data for updating a scheduled report.
"""
	name: String
"""
Data for updating a scheduled report.
"""
	password: String
"""
Data for updating a scheduled report.
"""
	enabled: Boolean
"""
Data for updating a scheduled report.
"""
	description: String
"""
Data for updating a scheduled report.
"""
	dashboardId: String
"""
Data for updating a scheduled report.
"""
	timeIntervalFrom: String
"""
Data for updating a scheduled report.
"""
	schedule: UpdateScheduledReportScheduleInput
"""
Data for updating a scheduled report.
"""
	labels: [String!]
"""
Data for updating a scheduled report.
"""
	parameters: [UpdateScheduledReportParameterValueInput!]
"""
Data for updating a scheduled report.
"""
	recipients: [String!]
"""
Data for updating a scheduled report.
"""
	layout: UpdateScheduledReportLayoutInput
}

"""
Layout of the scheduled report.
"""
input UpdateScheduledReportLayoutInput {
"""
Layout of the scheduled report.
"""
	paperSize: String
"""
Layout of the scheduled report.
"""
	paperOrientation: String
"""
Layout of the scheduled report.
"""
	paperLayout: String
"""
Layout of the scheduled report.
"""
	showDescription: Boolean
"""
Layout of the scheduled report.
"""
	showTitleFrontpage: Boolean
"""
Layout of the scheduled report.
"""
	showParameters: Boolean
"""
Layout of the scheduled report.
"""
	maxNumberOfRows: Int
"""
Layout of the scheduled report.
"""
	showTitleHeader: Boolean
"""
Layout of the scheduled report.
"""
	showExportDate: Boolean
"""
Layout of the scheduled report.
"""
	footerShowPageNumbers: Boolean
}

"""
List of parameter value configurations.
"""
input UpdateScheduledReportParameterValueInput {
"""
List of parameter value configurations.
"""
	id: String!
"""
List of parameter value configurations.
"""
	value: String!
}

"""
The schedule to run the report by.
"""
input UpdateScheduledReportScheduleInput {
"""
The schedule to run the report by.
"""
	cronExpression: String!
"""
The schedule to run the report by.
"""
	timeZone: String!
"""
The schedule to run the report by.
"""
	startDate: Long!
"""
The schedule to run the report by.
"""
	endDate: Long
}

"""
Data for updating a scheduled search
"""
input UpdateScheduledSearch {
"""
Data for updating a scheduled search
"""
	viewName: String!
"""
Data for updating a scheduled search
"""
	id: String!
"""
Data for updating a scheduled search
"""
	name: String!
"""
Data for updating a scheduled search
"""
	description: String
"""
Data for updating a scheduled search
"""
	queryString: String!
"""
Data for updating a scheduled search
"""
	queryStart: String!
"""
Data for updating a scheduled search
"""
	queryEnd: String!
"""
Data for updating a scheduled search
"""
	schedule: String!
"""
Data for updating a scheduled search
"""
	timeZone: String!
"""
Data for updating a scheduled search
"""
	backfillLimit: Int!
"""
Data for updating a scheduled search
"""
	enabled: Boolean!
"""
Data for updating a scheduled search
"""
	actions: [String!]!
"""
Data for updating a scheduled search
"""
	labels: [String!]!
"""
Data for updating a scheduled search
"""
	runAsUserId: String
"""
Data for updating a scheduled search
"""
	queryOwnershipType: QueryOwnershipType
}

input UpdateSearchLinkInteractionInput {
	path: String!
	interactionId: String!
	searchLinkInteractionInput: SearchLinkInteractionInput!
}

"""
Data for updating a Slack action
"""
input UpdateSlackAction {
"""
Data for updating a Slack action
"""
	viewName: String!
"""
Data for updating a Slack action
"""
	id: String!
"""
Data for updating a Slack action
"""
	name: String!
"""
Data for updating a Slack action
"""
	url: String!
"""
Data for updating a Slack action
"""
	fields: [SlackFieldEntryInput!]!
"""
Data for updating a Slack action
"""
	useProxy: Boolean!
}

input UpdateSubscriptionInputObject {
	subscription: Organizations__Subscription!
	trialDays: Int
}

input UpdateSystemPermissionsTokenPermissionsInput {
	id: String!
	permissions: [SystemPermission!]!
}

"""
Data for updating an upload file action.
"""
input UpdateUploadFileAction {
"""
Data for updating an upload file action.
"""
	viewName: String!
"""
Data for updating an upload file action.
"""
	id: String!
"""
Data for updating an upload file action.
"""
	name: String!
"""
Data for updating an upload file action.
"""
	fileName: String!
}

input UpdateUserByIdInput {
	userId: String!
	company: String
	isRoot: Boolean
	username: String
	firstName: String
	lastName: String
	fullName: String
	picture: String
	email: String
	countryCode: String
	stateCode: String
}

type UpdateUserByIdMutation {
	user: User!
}

type UpdateUserMutation {
	user: User!
}

"""
Data for updating a VictorOps action.
"""
input UpdateVictorOpsAction {
"""
Data for updating a VictorOps action.
"""
	viewName: String!
"""
Data for updating a VictorOps action.
"""
	id: String!
"""
Data for updating a VictorOps action.
"""
	name: String!
"""
Data for updating a VictorOps action.
"""
	messageType: String!
"""
Data for updating a VictorOps action.
"""
	notifyUrl: String!
"""
Data for updating a VictorOps action.
"""
	useProxy: Boolean!
}

input UpdateViewPermissionsTokenPermissionsInput {
	id: String!
	permissions: [Permission!]!
}

"""
Data for updating a webhook action
"""
input UpdateWebhookAction {
"""
Data for updating a webhook action
"""
	viewName: String!
"""
Data for updating a webhook action
"""
	id: String!
"""
Data for updating a webhook action
"""
	name: String!
"""
Data for updating a webhook action
"""
	url: String!
"""
Data for updating a webhook action
"""
	method: String!
"""
Data for updating a webhook action
"""
	headers: [HttpHeaderEntryInput!]!
"""
Data for updating a webhook action
"""
	bodyTemplate: String!
"""
Data for updating a webhook action
"""
	ignoreSSL: Boolean!
"""
Data for updating a webhook action
"""
	useProxy: Boolean!
}

input UpgradeAccountData {
	lastName: String!
	company: String!
	email: String!
	firstName: String
	purpose: Purposes
	phoneNumber: String
	countryCode: String
	stateCode: String
	comment: String
}

"""
An upload file action.
"""
type UploadFileAction implements Action{
"""
File name for the uploaded file.
"""
	fileName: String!
"""
The name of the action.
"""
	name: String!
"""
The display name of the action.
"""
	displayName: String!
"""
The id of the action.
"""
	id: String!
"""
A template that can be used to recreate the action.
"""
	yamlTemplate: YAML!
	packageId: VersionedPackageSpecifier
"""
The package if any which the action is part of.
"""
	package: PackageInstallation
"""
False if this type of action is disabled because of a security policy, true otherwise
"""
	isAllowedToRun: Boolean!
"""
True if this action is used by triggers, where the query is run by the organization. If true, then the OrganizationOwnedQueries permission is required to edit the action.
"""
	requiresOrganizationOwnedQueriesPermissionToEdit: Boolean!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] Allowed asset actions
"""
	allowedActions: [AssetAction!]!
}

input UserDefaultSettingsInput {
	defaultTimeZone: String
}

"""
Query running with user based ownership
"""
type UserOwnership implements QueryOwnership{
"""
User owning and running the query. If null, then the user doesn't exist anymore.
"""
	user: User
"""
Id of user owning and running the query
"""
	id: String!
}

input UserRoleAssignment {
	userId: String!
	roleId: String!
}

input UserRoleAssignmentInput {
	userId: String!
	roleIds: [String!]!
}

"""
Username and password authentication. The underlying authentication mechanism is configured by the server, e.g. LDAP.
"""
type UsernameAndPasswordAuthentication implements AuthenticationMethod{
	name: String!
}

input UtmParams {
	campaign: String!
	content: String!
	medium: String!
	source: String!
	term: String!
}

"""
A VictorOps action.
"""
type VictorOpsAction implements Action{
"""
Type of the VictorOps message to make.
"""
	messageType: String!
"""
VictorOps webhook url to send the request to.
"""
	notifyUrl: String!
"""
Defines whether the action should use the configured proxy to make web requests.
"""
	useProxy: Boolean!
"""
The name of the action.
"""
	name: String!
"""
The display name of the action.
"""
	displayName: String!
"""
The id of the action.
"""
	id: String!
"""
A template that can be used to recreate the action.
"""
	yamlTemplate: YAML!
	packageId: VersionedPackageSpecifier
"""
The package if any which the action is part of.
"""
	package: PackageInstallation
"""
False if this type of action is disabled because of a security policy, true otherwise
"""
	isAllowedToRun: Boolean!
"""
True if this action is used by triggers, where the query is run by the organization. If true, then the OrganizationOwnedQueries permission is required to edit the action.
"""
	requiresOrganizationOwnedQueriesPermissionToEdit: Boolean!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] Allowed asset actions
"""
	allowedActions: [AssetAction!]!
}

"""
The repositories this view will read from.
"""
input ViewConnectionInput {
"""
The repositories this view will read from.
"""
	repositoryName: String!
"""
The repositories this view will read from.
"""
	filter: String!
"""
The repositories this view will read from.
"""
	languageVersion: LanguageVersionEnum
}

"""
View permissions token. The token allows the caller to work with the same set of view-level permissions across multiple views.
"""
type ViewPermissionsToken implements Token{
"""
The set of permissions on the token
"""
	permissions: [String!]!
"""
The set of views on the token. Will only list the views the user has access to.
"""
	views: [SearchDomain!]!
"""
The id of the token.
"""
	id: String!
"""
The name of the token.
"""
	name: String!
"""
The time at which the token expires.
"""
	expireAt: Long
"""
The ip filter on the token.
"""
	ipFilter: String
"""
The ip filter on the token.
"""
	ipFilterV2: IPFilter
"""
The date the token was created.
"""
	createdAt: Long!
}

"""
A webhook action
"""
type WebhookAction implements Action{
"""
Method to use for the request.
"""
	method: String!
"""
Url to send the http(s) request to.
"""
	url: String!
"""
Headers of the http(s) request.
"""
	headers: [HttpHeaderEntry!]!
"""
Body of the http(s) request. Can be templated with values from the result.
"""
	bodyTemplate: String!
"""
Flag indicating whether SSL should be ignored for the request.
"""
	ignoreSSL: Boolean!
"""
Defines whether the action should use the configured proxy to make web requests.
"""
	useProxy: Boolean!
"""
The name of the action.
"""
	name: String!
"""
The display name of the action.
"""
	displayName: String!
"""
The id of the action.
"""
	id: String!
"""
A template that can be used to recreate the action.
"""
	yamlTemplate: YAML!
	packageId: VersionedPackageSpecifier
"""
The package if any which the action is part of.
"""
	package: PackageInstallation
"""
False if this type of action is disabled because of a security policy, true otherwise
"""
	isAllowedToRun: Boolean!
"""
True if this action is used by triggers, where the query is run by the organization. If true, then the OrganizationOwnedQueries permission is required to edit the action.
"""
	requiresOrganizationOwnedQueriesPermissionToEdit: Boolean!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] Allowed asset actions
"""
	allowedActions: [AssetAction!]!
}

input WidgetInput {
	id: String!
	title: String!
	description: String
	x: Int!
	y: Int!
	width: Int!
	height: Int!
	queryOptions: WidgetQueryPropertiesInput
	noteOptions: WidgetNotePropertiesInput
	linkOptions: WidgetLinkPropertiesInput
	parameterPanelOptions: WidgetParameterPanelPropertiesInput
}

input WidgetLinkPropertiesInput {
	labels: [String!]!
}

input WidgetNotePropertiesInput {
	text: String!
	backgroundColor: String
	textColor: String
}

input WidgetParameterPanelPropertiesInput {
	parameterIds: [String!]!
}

input WidgetQueryPropertiesInput {
	queryString: String!
	start: String!
	end: String!
	widgetType: String!
	options: String
	dashboardLinkInteractions: [DashboardLinkInteractionInput!]
	customLinkInteractions: [CustomLinkInteractionInput!]
	searchLinkInteractions: [SearchLinkInteractionInput!]
	updateParametersInteractions: [UpdateParametersInteractionInput!]
}

"""
The input required to delete an external function specification.
"""
input deleteExternalFunctionInput {
"""
The input required to delete an external function specification.
"""
	name: String!
}

"""
FDR test errors
"""
union error =TestFdrValidationError | TestFdrRequestError

type setAutomaticSearching {
	automaticSearch: Boolean!
}

type updateDefaultRoleMutation {
	group: Group!
}

"""
A user or pending user, depending on whether an invitation was sent
"""
union userOrPendingUser =User | PendingUser

type AccessTokenValidatorResultType {
	sessionId: String
	showTermsAndConditions: ShowTermsAndConditions
}

"""
A user account.
"""
type Account {
	id: String!
	enabledFeaturesForAccount: [FeatureFlag!]!
	username: String!
	isRoot: Boolean!
	isOrganizationRoot: Boolean!
	fullName: String
	firstName: String
	lastName: String
	phoneNumber: String
	email: String
	picture: String
	settings: UserSettings!
	createdAt: DateTime!
	countryCode: String
	stateCode: String
	company: String
	canCreateCloudTrialRepo: Boolean!
	isCloudProAccount: Boolean!
	canCreateRepo: Boolean!
	externalPermissions: Boolean!
	externalGroupSynchronization: Boolean!
	currentOrganization: Organization!
	announcement: Notification
"""
[PREVIEW: New sorting and filtering options might be added.] 
"""
	notificationsV2(
		typeFilter: [NotificationTypes!]
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
	): NotificationsResultSet!
	token: PersonalUserToken
	fieldConfigurations(
		viewName: String!
	): [FieldConfiguration!]!
}

"""
An action that can be invoked from a trigger.
"""
interface Action {
"""
An action that can be invoked from a trigger.
"""
	name: String!
"""
An action that can be invoked from a trigger.
"""
	displayName: String!
"""
An action that can be invoked from a trigger.
"""
	id: String!
"""
An action that can be invoked from a trigger.
"""
	yamlTemplate: YAML!
"""
An action that can be invoked from a trigger.
"""
	packageId: VersionedPackageSpecifier
"""
An action that can be invoked from a trigger.
"""
	package: PackageInstallation
"""
An action that can be invoked from a trigger.
"""
	isAllowedToRun: Boolean!
"""
An action that can be invoked from a trigger.
"""
	requiresOrganizationOwnedQueriesPermissionToEdit: Boolean!
"""
An action that can be invoked from a trigger.
"""
	allowedActions: [AssetAction!]!
}

"""
Security policies for actions in the organization
"""
type ActionSecurityPolicies {
"""
Indicates if email actions can be configured and triggered
"""
	emailActionEnabled: Boolean!
"""
Allow list of glob patterns for acceptable email action recipients. Empty means no recipients allowed whereas null means all.
"""
	emailActionRecipientAllowList: [String!]
"""
Indicates if repository actions can be configured and triggered
"""
	repoActionEnabled: Boolean!
"""
Indicates if OpsGenie actions can be configured and triggered
"""
	opsGenieActionEnabled: Boolean!
"""
Indicates if PagerDuty actions can be configured and triggered
"""
	pagerDutyActionEnabled: Boolean!
"""
Indicates if single channel Slack actions can be configured and triggered
"""
	slackSingleChannelActionEnabled: Boolean!
"""
Indicates if multi channel Slack actions can be configured and triggered
"""
	slackMultiChannelActionEnabled: Boolean!
"""
Indicates if upload file actions can be configured and triggered
"""
	uploadFileActionEnabled: Boolean!
"""
Indicates if VictorOps actions can be configured and triggered
"""
	victorOpsActionEnabled: Boolean!
"""
Indicates if Webhook actions can be configured and triggered
"""
	webhookActionEnabled: Boolean!
"""
Allow list of glob patterns for acceptable webhook URLs. Empty means no recipients allowed whereas null means all.
"""
	webhookActionUrlAllowList: [String!]
}

type ActionTemplate {
	name: String!
	displayName: String!
	yamlTemplate: String!
"""
The type of action
"""
	type: ActionType!
}

"""
The type of action this template is for
"""
enum ActionType {
	Email
	LogScaleRepository
	OpsGenie
	PagerDuty
	SlackMulti
	SlackSingle
	UploadFile
	VictorOps
	Webhook
}

type ActiveSchemaOnView {
	viewName: RepoOrViewName!
	schemaId: String!
	is1to1Linked: Boolean!
}

"""
An aggregate alert.
"""
type AggregateAlert {
"""
Id of the aggregate alert.
"""
	id: String!
"""
Name of the aggregate alert.
"""
	name: String!
"""
Description of the aggregate alert.
"""
	description: String
"""
LogScale query to execute.
"""
	queryString: String!
"""
List of actions to fire on query result.
"""
	actions: [Action!]!
"""
Labels attached to the aggregate alert.
"""
	labels: [String!]!
"""
Flag indicating whether the aggregate alert is enabled.
"""
	enabled: Boolean!
"""
Throttle time in seconds.
"""
	throttleTimeSeconds: Long!
"""
A field to throttle on. Can only be set if throttleTimeSeconds is set.
"""
	throttleField: String
"""
Search interval in seconds.
"""
	searchIntervalSeconds: Long!
"""
Timestamp type to use for a query.
"""
	queryTimestampType: QueryTimestampType!
"""
Trigger mode used for triggering the alert.
"""
	triggerMode: TriggerMode!
"""
Unix timestamp for last execution of trigger.
"""
	lastTriggered: Long
"""
Unix timestamp for last successful poll (including action invocation if applicable) of the aggregate alert query. If this is not quite recent, then the alert might be having problems.
"""
	lastSuccessfulPoll: Long
"""
Last error encountered while running the aggregate alert.
"""
	lastError: String
"""
Last warnings encountered while running the aggregate alert.
"""
	lastWarnings: [String!]!
"""
YAML specification of the aggregate alert.
"""
	yamlTemplate: YAML!
"""
The id of the package of the aggregate alert template.
"""
	packageId: VersionedPackageSpecifier
"""
The package that the aggregate alert was installed as part of.
"""
	package: PackageInstallation
"""
Ownership of the query run by this alert
"""
	queryOwnership: QueryOwnership!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] Allowed asset actions
"""
	allowedActions: [AssetAction!]!
}

type AggregateAlertTemplate {
	name: String!
	displayName: String!
	yamlTemplate: YAML!
	labels: [String!]!
}

"""
An alert.
"""
type Alert {
"""
Id of the alert.
"""
	id: String!
"""
Name of the alert.
"""
	name: String!
	assetType: AssetType!
"""
Id of user which the alert is running as.
"""
	runAsUser: User
"""
Name of the alert.
"""
	displayName: String!
"""
Name of the alert.
"""
	description: String
"""
LogScale query to execute.
"""
	queryString: String!
"""
Start of the relative time interval for the query.
"""
	queryStart: String!
"""
Throttle time in milliseconds.
"""
	throttleTimeMillis: Long!
"""
Field to throttle on.
"""
	throttleField: String
"""
Unix timestamp for when the alert was last triggered.
"""
	timeOfLastTrigger: Long
"""
Flag indicating whether the alert is enabled.
"""
	enabled: Boolean!
"""
List of ids for actions to fire on query result.
"""
	actions: [String!]!
"""
List of ids for actions to fire on query result.
"""
	actionsV2: [Action!]!
"""
Last error encountered while running the alert.
"""
	lastError: String
"""
Last warnings encountered while running the alert.
"""
	lastWarnings: [String!]!
"""
Labels attached to the alert.
"""
	labels: [String!]!
"""
Flag indicating whether the calling user has 'starred' the alert.
"""
	isStarred: Boolean!
"""
A YAML formatted string that describes the alert.
"""
	yamlTemplate: String!
"""
The id of the package that the alert was installed as part of.
"""
	packageId: VersionedPackageSpecifier
"""
The package that the alert was installed as part of.
"""
	package: PackageInstallation
"""
Ownership of the query run by this alert
"""
	queryOwnership: QueryOwnership!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] Allowed asset actions
"""
	allowedActions: [AssetAction!]!
}

"""
All actions, labels and packages used in alerts.
"""
type AlertFieldValues {
"""
List of names of actions attached to alerts. Sorted by action names lexicographically..
"""
	actionNames: [String!]!
"""
List of labels attached to alerts. Sorted by label names lexicographically.
"""
	labels: [String!]!
"""
List of packages for installed alerts as unversioned qualified package specifiers `scope/packageName`. Sorted lexicographically.
"""
	unversionedPackageSpecifiers: [String!]!
}

"""
Arguments for alert field values query.
"""
input AlertFieldValuesInput {
"""
Arguments for alert field values query.
"""
	viewName: RepoOrViewName!
}

type AlertTemplate {
	name: String!
	displayName: String!
	yamlTemplate: String!
	labels: [String!]!
}

"""
The different types of alerts known to the system.
"""
enum AlertType {
	LegacyAlert
	FilterAlert
	AggregateAlert
}

type AliasInfo {
	source: String!
	alias: String!
}

type AliasMapping {
	id: String!
	name: String!
	tags: [TagInfo!]!
	aliases: [AliasInfo!]!
	originalFieldsToKeep: [String!]!
}

"""
Arguments for analyzeQuery
"""
input AnalyzeQueryArguments {
"""
Arguments for analyzeQuery
"""
	queryString: String!
"""
Arguments for analyzeQuery
"""
	version: LanguageVersionInputType!
"""
Arguments for analyzeQuery
"""
	isLive: Boolean
"""
Arguments for analyzeQuery
"""
	arguments: [QueryArgumentInputType!]
"""
Arguments for analyzeQuery
"""
	viewName: RepoOrViewName
}

"""
Result of analyzing a query.
"""
type AnalyzeQueryInfo {
"""
Check if the given query contains any errors or warnings when used in a standard search context.
"""
	validateQuery: QueryValidationInfo!
"""
Suggested type of alert to use for the given query.
Returns null if no suitable alert type could be suggested.
The given query is not guaranteed to be valid for the suggested alert type.

"""
	suggestedAlertType: SuggestedAlertTypeInfo
}

"""
Allowed asset action on asset
"""
enum AssetAction {
	Read
	Update
	Delete
}

"""
Asset permissions
"""
enum AssetPermissionInputEnum {
	UpdateAsset
	DeleteAsset
}

"""
Asset permission
"""
enum AssetPermissionOutputEnum {
	ReadAsset
	UpdateAsset
	DeleteAsset
}

"""
An asset permission search result set
"""
type AssetPermissionSearchResultSet {
"""
The total number of matching results
"""
	totalResults: Int!
"""
The paginated result set
"""
	results: [SearchAssetPermissionsResultEntry!]!
}

"""
The different types of assets.
"""
enum AssetPermissionsAssetType {
	LegacyAlert
	FilterAlert
	AggregateAlert
	ScheduledSearch
	ScheduledReport
	Action
	Dashboard
	File
	SavedQuery
}

"""
Asset permissions assigned to the group
"""
type AssetPermissionsForGroup {
"""
The unique id for the Asset
"""
	assetId: String!
"""
The type of the Asset
"""
	assetType: AssetPermissionsAssetType!
"""
The search domain that the asset belongs to
"""
	searchDomain: SearchDomain
"""
The group role assignments
"""
	roles: [GroupRole!]!
"""
The directly assigned asset permissions
"""
	directlyAssigned: [AssetPermissionOutputEnum!]!
}

"""
Asset permissions assigned to the user
"""
type AssetPermissionsForUser {
"""
The unique id for the Asset
"""
	assetId: String!
"""
The type of the Asset
"""
	assetType: AssetPermissionsAssetType!
"""
The search domain that the asset belongs to
"""
	searchDomain: SearchDomain
"""
The group role assignments
"""
	groupRoles: [GroupRole!]!
"""
The directly assigned asset permissions per group
"""
	groupDirectlyAssigned: [GroupAssetPermissionAssignment!]!
	userRoles: [Role!]!
"""
The directly assigned asset permissions
"""
	directlyAssigned: [AssetPermissionOutputEnum!]!
}

enum AssetType {
	Interaction
	ScheduledSearch
	Action
	File
	AggregateAlert
	FilterAlert
	Alert
	Parser
	SavedQuery
	Dashboard
}

"""
Represents information about how users authenticate with LogScale.
"""
interface AuthenticationMethod {
"""
Represents information about how users authenticate with LogScale.
"""
	name: String!
}

interface AuthenticationMethodAuth {
	authType: String!
}

"""
A regex pattern used to filter queries before they are executed.
"""
type BlockedQuery {
	id: String!
	expiresAt: DateTime
	expiresInMilliseconds: Int
	pattern: String!
	type: BlockedQueryMatcherType!
	view: View
"""
The organization owning the pattern or view, if any.
"""
	organization: Organization
	limitedToOrganization: Boolean!
"""
True if the current actor is allowed the remove this pattern
"""
	unblockAllowed: Boolean!
}

enum BlockedQueryMatcherType {
	EXACT
	REGEX
}

"""
Bucket storage configuration for the organization
"""
type BucketStorageConfig {
"""
The primary bucket storage of the organization
"""
	targetBucketId1: String!
"""
The secondary bucket storage of the organization
"""
	targetBucketId2: String
}

"""
A policy for choosing which segments to cache on local disk when overcommiting
local storage with bucket storage.

This can be used to protect certain repositories for local storage, such that
searching other repositories does not evict them.

A cache policy in LogScale divides segments into prioritized and non-prioritized
segments. When segments needs to be evicted from local storage, we always try
evicting non-prioritized segments before prioritized segments.

A cache policy can be set either on one of three levels (in order of precedence):
 - Repo
 - Org
 - Globally

 When determining the cache policy for a repo we first check if there is a cache
 policy set on the repo. If none is set on the repo, we check the the org. If none
 is set there either we check the global setting.

"""
type CachePolicy {
"""
Prioritize caching segments younger than this
"""
	prioritizeMillis: Long
}

enum Changes {
	Removed
	Added
	NoChange
}

"""
Data for checking a local cluster connection
"""
input CheckLocalClusterConnectionInput {
"""
Data for checking a local cluster connection
"""
	connectionId: String
"""
Data for checking a local cluster connection
"""
	targetViewName: String!
"""
Data for checking a local cluster connection
"""
	tags: [ClusterConnectionInputTag!]
"""
Data for checking a local cluster connection
"""
	queryPrefix: String
}

"""
Data for checking a remote cluster connection
"""
input CheckRemoteClusterConnectionInput {
"""
Data for checking a remote cluster connection
"""
	connectionId: String
"""
Data for checking a remote cluster connection
"""
	multiClusterViewName: String
"""
Data for checking a remote cluster connection
"""
	publicUrl: String!
"""
Data for checking a remote cluster connection
"""
	token: String
"""
Data for checking a remote cluster connection
"""
	tags: [ClusterConnectionInputTag!]
"""
Data for checking a remote cluster connection
"""
	queryPrefix: String
}

"""
An organization search result set
"""
type ChildOrganizationsResultSet {
"""
The total number of matching results
"""
	totalResults: Int!
"""
The paginated result set
"""
	results: [Organization!]!
}

"""
Identifies a client of the query.
"""
type Client {
	externalId: String!
	ip: String
	user: String
}

"""
Information about the LogScale cluster.
"""
type Cluster {
	nodes: [ClusterNode!]!
	clusterManagementSettings: ClusterManagementSettings!
	clusterInfoAgeSeconds: Float!
	underReplicatedSegmentSize: Float!
	overReplicatedSegmentSize: Float!
	missingSegmentSize: Float!
	properlyReplicatedSegmentSize: Float!
	inBucketStorageSegmentSize: Float!
	pendingBucketStorageSegmentSize: Float!
	pendingBucketStorageRiskySegmentSize: Float!
	targetUnderReplicatedSegmentSize: Float!
	targetOverReplicatedSegmentSize: Float!
	targetMissingSegmentSize: Float!
	targetProperlyReplicatedSegmentSize: Float!
	ingestPartitions: [IngestPartition!]!
	ingestPartitionsWarnings: [String!]!
	suggestedIngestPartitions: [IngestPartition!]!
	storagePartitions: [StoragePartition!]!
	storagePartitionsWarnings: [String!]!
	suggestedStoragePartitions: [StoragePartition!]!
	storageReplicationFactor: Int
	digestReplicationFactor: Int
	stats: ClusterStats!
"""
[PREVIEW: Cache policies are a limited feature and is subject to change] The default cache policy of this cluster.
"""
	defaultCachePolicy: CachePolicy
}

"""
A cluster connection.
"""
interface ClusterConnection {
"""
A cluster connection.
"""
	id: String!
"""
A cluster connection.
"""
	clusterId: String!
"""
A cluster connection.
"""
	tags: [ClusterConnectionTag!]!
"""
A cluster connection.
"""
	queryPrefix: String!
}

input ClusterConnectionInputTag {
	key: String!
	value: String!
}

"""
The status of a cluster connection.
"""
interface ClusterConnectionStatus {
"""
The status of a cluster connection.
"""
	id: String
"""
The status of a cluster connection.
"""
	isValid: Boolean!
"""
The status of a cluster connection.
"""
	errorMessages: [ConnectionAspectErrorType!]!
}

type ClusterConnectionTag {
	key: String!
	value: String!
}

"""
Settings for the LogScale cluster.
"""
type ClusterManagementSettings {
"""
Replication factor for segments
"""
	segmentReplicationFactor: Int!
"""
Replication factor for the digesters
"""
	digestReplicationFactor: Int!
"""
Percentage of all hosts relevant to a particular cluster rebalance operation that need to be alive before we allow the system to automatically execute the operation. Cluster rebalance operations currently include reassigning digest work, and moving existing segments to balance disk usage. Value is between 0 and 100, both inclusive
"""
	minHostAlivePercentageToEnableClusterRebalancing: Int!
"""
Whether or not desired digesters are allowed to be updated automatically
"""
	allowUpdateDesiredDigesters: Boolean!
"""
true if the cluster should allow moving existing segments between nodes to achieve a better data distribution
"""
	allowRebalanceExistingSegments: Boolean!
}

"""
A node in the a LogScale Cluster.
"""
type ClusterNode {
	id: Int!
	name: String!
	zone: String
	uri: String!
	uuid: String!
	humioVersion: String!
	supportedTasks: [NodeTaskEnum!]!
	assignedTasks: [NodeTaskEnum!]
	unassignedTasks: [NodeTaskEnum!]
	consideredAliveUntil: DateTime
	clusterInfoAgeSeconds: Float!
"""
The size in GB of data this node needs to receive.
"""
	inboundSegmentSize: Float!
"""
The size in GB of data this node has that others need.
"""
	outboundSegmentSize: Float!
	canBeSafelyUnregistered: Boolean!
	reasonsNodeCannotBeSafelyUnregistered: ReasonsNodeCannotBeSafelyUnregistered!
"""
The size in GB of data currently on this node.
"""
	currentSize: Float!
"""
The size in GB of the data currently on this node that are in the primary storage location.
"""
	primarySize: Float!
"""
The size in GB of the data currently on this node that are in the secondary storage location. Zero if no secondary is configured.
"""
	secondarySize: Float!
"""
The total size in GB of the primary storage location on this node.
"""
	totalSizeOfPrimary: Float!
"""
The total size in GB of the secondary storage location on this node. Zero if no secondary is configured.
"""
	totalSizeOfSecondary: Float!
"""
The size in GB of the free space on this node of the primary storage location.
"""
	freeOnPrimary: Float!
"""
The size in GB of the free space on this node of the secondary storage location. Zero if no secondary is configured.
"""
	freeOnSecondary: Float!
"""
The size in GB of work-in-progress data files.
"""
	wipSize: Float!
"""
The size in GB of data once the node has received the data allocated to it.
"""
	targetSize: Float!
"""
The size in GB of data that only exists on this node - i.e. only one replica exists in the cluster.
"""
	solitarySegmentSize: Float!
"""
A flag indicating whether the node is considered up or down by the cluster coordinated. This is based on the `lastHeartbeat` field.
"""
	isAvailable: Boolean!
"""
The last time a heartbeat was received from the node.
"""
	lastHeartbeat: DateTime!
"""
The time since a heartbeat was received from the node.
"""
	timeSinceLastHeartbeat: Long!
"""
A flag indicating whether the node is marked for eviction. The Falcon LogScale cluster will start to move segments, digesters and queries away from any node marked for eviction
"""
	isBeingEvicted: Boolean
"""
Contains data describing the status of eviction
"""
	evictionStatus: EvictionStatus!
"""
True if the machine the node runs on has local segment storage
"""
	hasStorageRole: Boolean!
"""
True if the machine the node runs on has the possibility to process kafka partitions
"""
	hasDigestRole: Boolean!
"""
The time at which the host booted
"""
	bootedAt: DateTime!
"""
The time since last boot
"""
	timeSinceBooted: Long!
}

"""
Global stats for the cluster
"""
type ClusterStats {
	compressedByteSize: Long!
	uncompressedByteSize: Long!
	compressedByteSizeOfMerged: Long!
	uncompressedByteSizeOfMerged: Long!
}

"""
Arguments for concatenateQueries
"""
input ConcatenateQueriesArguments {
"""
Arguments for concatenateQueries
"""
	queryStrings: [String!]!
"""
Arguments for concatenateQueries
"""
	version: LanguageVersionInputType!
}

"""
A value denoting some aspect of a cluster connection
"""
enum ConnectionAspect {
	Tag
	QueryPrefix
	Other
	TargetView
	PublicUrl
	Token
}

"""
A key-value pair from a connection aspect to an error message pertaining to that aspect
"""
type ConnectionAspectErrorType {
"""
A connection aspect
"""
	aspect: ConnectionAspect!
"""
An error message for the connection, tagged by the relevant aspect
"""
	error: String!
}

"""
Represents the connection between a view and an underlying repository in another organization.
"""
type CrossOrgViewConnection {
"""
ID of the underlying repository
"""
	id: String!
"""
Name of the underlying repository
"""
	name: String!
"""
The filter applied to all results from the repository.
"""
	filter: String!
	languageVersion: LanguageVersion!
"""
ID of the organization containing the underlying repository
"""
	orgId: String!
}

"""
The status the local database of CrowdStrike IOCs
"""
type CrowdStrikeIocStatus {
	databaseTables: [IocTableInfo!]!
}

type CurrentStats {
	ingest: Ingest!
	storedData: StoredData!
	scannedData: ScannedData!
	users: UsersLimit!
}

"""
Query result for current usage
"""
union CurrentUsageQueryResult =QueryInProgress | CurrentStats

type CustomLinkInteraction {
	urlTemplate: String!
	openInNewTab: Boolean!
	urlEncodeArgs: Boolean!
}

"""
Represents information about a dashboard.
"""
type Dashboard {
	id: String!
	name: String!
	description: String
	assetType: AssetType!
"""
A YAML formatted string that describes the dashboard. It does not contain links or permissions, and is safe to share and use for making copies of a dashboard.
"""
	templateYaml: String!
	displayName: String!
	labels: [String!]!
	widgets: [Widget!]!
	sections: [Section!]!
	readOnlyTokens: [DashboardLink!]!
	filters: [DashboardFilter!]!
	parameters: [DashboardParameter!]!
	updateFrequency: DashboardUpdateFrequencyType!
	isStarred: Boolean!
	defaultFilter: DashboardFilter
	defaultSharedTimeStart: String!
	defaultSharedTimeEnd: String!
	timeJumpSizeInMs: Int
	defaultSharedTimeEnabled: Boolean!
	searchDomain: SearchDomain!
	packageId: VersionedPackageSpecifier
	package: PackageInstallation
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] Allowed asset actions
"""
	allowedActions: [AssetAction!]!
}

"""
A dashboard
"""
type DashboardEntry {
	dashboard: Dashboard!
}

"""
A saved configuration for filtering dashboard widgets.
"""
type DashboardFilter {
	id: String!
	name: String!
	prefixFilter: String!
}

"""
A token that can be used to access the dashboard without logging in. Useful for e.g. wall mounted dashboards or public dashboards.
"""
type DashboardLink {
	name: String!
	token: String!
	createdBy: String!
"""
The ip filter for the dashboard link.
"""
	ipFilter: IPFilter
"""
Ownership of the queries run by this shared dashboard
"""
	queryOwnership: QueryOwnership!
}

type DashboardLinkInteraction {
	arguments: [DictionaryEntryType!]!
	dashboardReference: DashboardLinkInteractionDashboardReference!
	openInNewTab: Boolean!
	useWidgetTimeWindow: Boolean!
}

"""
A reference to a dashboard either by id or name
"""
type DashboardLinkInteractionDashboardReference {
	id: String
	name: String
	repoOrViewName: RepoOrViewName
	packageSpecifier: UnversionedPackageSpecifier
}

"""
A page of dashboards.
"""
type DashboardPage {
	pageInfo: PageType!
	page: [Dashboard!]!
}

"""
Represents a dashboard parameter.
"""
interface DashboardParameter {
"""
Represents a dashboard parameter.
"""
	id: String!
"""
Represents a dashboard parameter.
"""
	label: String!
"""
Represents a dashboard parameter.
"""
	defaultValueV2: String
"""
Represents a dashboard parameter.
"""
	order: Int
"""
Represents a dashboard parameter.
"""
	width: Int
"""
Represents a dashboard parameter.
"""
	isMultiParam: Boolean
"""
Represents a dashboard parameter.
"""
	defaultMultiValues: [String!]
}

type DashboardTemplate {
	name: String!
	displayName: String!
	yamlTemplate: String!
	labels: [String!]!
}

"""
The frequency at which a dashboard fetches new results for widgets.
"""
union DashboardUpdateFrequencyType =NeverDashboardUpdateFrequency | RealTimeDashboardUpdateFrequency

"""
A datasource, e.g. file name or system sending data to LogScale.
"""
type Datasource {
	name: String!
	oldestTimestamp: DateTime!
	newestTimestamp: DateTime!
	tags: [Tag!]!
"""
The size in Gigabytes of the data from this data source before compression.
"""
	sizeAtIngest: Float!
"""
This size in Gigabytes of the data from this data source currently on disk.
"""
	sizeOnDisk: Float!
"""
The size in Gigabytes of the data from this data source before compression, but only for the parts that are now part of a merged segment file.
"""
	sizeAtIngestOfMerged: Float!
"""
This size in Gigabytes of the data from this data source currently on disk, but only for the parts that are now part of a merged segment file.
"""
	sizeOnDiskOfMerged: Float!
}

"""
Date and time in the ISO-8601 instant format. Example: `2019-12-03T10:15:30.00Z`
"""
scalar DateTime

"""
A deletion of a set of events.
"""
type DeleteEvents {
	id: String!
	created: DateTime!
	start: DateTime!
	end: DateTime!
	query: String!
	createdByUser: String
	languageVersion: LanguageVersion!
}

"""
Entry into a list of unordered key-value pairs with unique keys
"""
type DictionaryEntryType {
	key: String!
	value: String!
}

"""
A dynamic configuration.
"""
enum DynamicConfig {
	BlockSignup
	DisableUserTracking
	DisableAnalyticsJob
	MaxAccessTokenTTL
	RejectIngestOnParserExceedingFraction
	QueryPartitionAutoBalance
	QueryCoordinatorMaxHeapFraction
	PruneCommunityLockedOrganizationsAfterHours
	PruneMissingTOSAcceptanceOrganizationsAfterHours
	DisableViewWithSameNameCleanup
	MaxIngestRequestSize
	JoinRowLimit
	JoinDefaultLimit
	SelfJoinLimit
	StateRowLimit
	AstDepthLimit
	AdHocTablesLimit
	QueryMemoryLimit
	LiveQueryMemoryLimit
	QueryCoordinatorMemoryLimit
	GroupDefaultLimit
	GroupMaxLimit
	RdnsDefaultLimit
	RdnsMaxLimit
	QueryResultRowCountLimit
	ParserThrottlingAllocationFactor
	UndersizedMergingRetentionPercentage
	StaticQueryFractionOfCores
	TargetMaxRateForDatasource
	DelayIngestResponseDueToIngestLagMaxFactor
	DelayIngestResponseDueToIngestLagThreshold
	DelayIngestResponseDueToIngestLagScale
	SampleIntervalForDatasourceRates
	FdrMaxNodesPerFeed
	BucketStorageWriteVersion
	BucketStorageKeySchemeVersion
	BucketStorageUploadInfrequentThresholdDays
	MinimumHumioVersion
	DebugAuditRequestTrace
	FlushSegmentsAndGlobalOnShutdown
	GracePeriodBeforeDeletingDeadEphemeralHostsMs
	FdrS3FileSizeMax
	S3ArchivingClusterWideStartFrom
	S3ArchivingClusterWideEndAt
	S3ArchivingClusterWideDisabled
	S3ArchivingClusterWideRegexForRepoName
	EnableDemoData
	MaxNumberOfOrganizations
	NumberOfDaysToRemoveStaleOrganizationsAfter
	IsAutomaticUpdateCheckingAllowed
	ExternalFunctionRequestResponseSizeLimitBytes
	ExternalFunctionRequestResponseEventCountLimit
	ReplaceANSIEscapeCodes
	DisableInconsistencyDetectionJob
	DeleteDuplicatedNameViewsAfterMerging
	MaxQueryPenaltyCreditForBlockedQueriesFactor
	MaxConcurrentQueriesOnWorker
	MaxQueryPollsForWorker
	MaxOpenSegmentsOnWorker
	IngestFeedAwsProcessingDownloadBufferSize
	IngestFeedAwsProcessingEventBufferSize
	IngestFeedAwsProcessingEventsPerBatch
	IngestFeedAwsDownloadMaxObjectSize
	IngestFeedGovernorGainPerCore
	IngestFeedGovernorCycleDuration
	IngestFeedGovernorIngestDelayLow
	IngestFeedGovernorIngestDelayHigh
	IngestFeedGovernorRateOverride
	IngestFeedMaxConcurrentPolls
	MaxCsvFileUploadSizeBytes
	MaxJsonFileUploadSizeBytes
	MatchFilesMaxHeapFraction
	LookupTableSyncAwaitSeconds
	GraphQLSelectionSizeLimit
	UnauthenticatedGraphQLSelectionSizeLimit
	QueryBlockMillisOnHighIngestDelay
	FileReplicationFactor
	QueryBacktrackingLimit
	GraphQlDirectivesAmountLimit
	TableCacheMemoryAllowanceFraction
	TableCacheMaxStorageFraction
	TableCacheMaxStorageFractionForIngestAndHttpOnly
}

"""
A key value pair of a dynamic config and the accompanying value.
"""
type DynamicConfigKeyValueType {
"""
The dynamic config key.
"""
	dynamicConfigKey: DynamicConfig!
"""
The dynamic config value.
"""
	dynamicConfigValue: String!
}

scalar Email

"""
Scope of feature flag enablement
"""
enum EnabledInScope {
	GlobalScope
	OrganizationScope
	UserScope
	Disabled
}

enum EntitiesPageDirection {
	Previous
	Next
}

input EntitiesPageInputType {
	cursor: String!
	direction: EntitiesPageDirection!
}

enum EntitySearchEntityType {
	Dashboard
	File
	Interaction
}

input EntitySearchInputType {
	searchTerm: String
	pageSize: Int
	paths: [String!]
	sortBy: [EntitySearchSortInfoType!]
	entityTypes: [EntitySearchEntityType!]!
}

union EntitySearchResultEntity =ViewInteractionEntry | FileEntry | DashboardEntry

input EntitySearchSortInfoType {
	name: String!
	order: EntitySearchSortOrderType!
}

enum EntitySearchSortOrderType {
	Descending
	Ascending
}

enum EnvironmentType {
	ON_PREM
	ON_CLOUD
	ON_COMMUNITY
}

"""
Usage information
"""
type EnvironmentVariableUsage {
"""
The source for this environment variable. "Environment": the value is from the environment, "Default": variable not found in the environment, but a default value is used, "Missing": no variable or default found
"""
	source: String!
"""
Value for this variable
"""
	value: String!
"""
Environment variable name
"""
	name: String!
}

"""
An event forwarder
"""
interface EventForwarder {
"""
An event forwarder
"""
	id: String!
"""
An event forwarder
"""
	name: String!
"""
An event forwarder
"""
	description: String!
"""
An event forwarder
"""
	enabled: Boolean!
}

"""
An event forwarder
"""
type EventForwarderForSelection {
"""
Id of the event forwarder
"""
	id: String!
"""
Name of the event forwarder
"""
	name: String!
"""
Description of the event forwarder
"""
	description: String!
	enabled: Boolean!
"""
The kind of event forwarder
"""
	kind: EventForwarderKind!
}

"""
The kind of an event forwarder
"""
enum EventForwarderKind {
	Kafka
}

"""
An event forwarding rule
"""
type EventForwardingRule {
"""
The unique id for the event forwarding rule
"""
	id: String!
"""
The query string for filtering and mapping the events to forward
"""
	queryString: String!
"""
The id of the event forwarder
"""
	eventForwarderId: String!
"""
The unix timestamp the event forwarder was created
"""
	createdAt: Long
	languageVersion: LanguageVersion!
}

"""
Fields that helps describe the status of eviction
"""
type EvictionStatus {
	currentlyUnderReplicatedBytes: Long!
	totalSegmentBytes: Long!
	isDigester: Boolean!
	bytesThatExistOnlyOnThisNode: Float!
}

"""
The specification of an external function.
"""
type ExternalFunctionSpecificationOutput {
"""
The name of the external function.
"""
	name: String!
"""
The URL for the external function.
"""
	procedureURL: String!
"""
The parameter specifications for the external function.
"""
	parameters: [ParameterSpecificationOutput!]!
"""
The description for the external function.
"""
	description: String!
"""
The kind of external function. This defines how the external function is executed.
"""
	kind: KindOutput!
}

"""
Information about an FDR feed.
"""
type FdrFeed {
"""
Id of the FDR feed.
"""
	id: String!
"""
Name of the FDR feed.
"""
	name: String!
"""
Description of the FDR feed.
"""
	description: String
"""
The id of the parser that is used to parse the FDR data.
"""
	parserId: String!
"""
AWS client id of the FDR feed.
"""
	clientId: String!
"""
AWS SQS queue url of the FDR feed.
"""
	sqsUrl: String!
"""
AWS S3 Identifier of the FDR feed.
"""
	s3Identifier: String!
"""
Is ingest from the FDR feed enabled?
"""
	enabled: Boolean!
}

"""
Administrator control for an FDR feed
"""
type FdrFeedControl {
"""
Id of the FDR feed.
"""
	id: String!
"""
Maximum number of nodes to poll FDR feed with
"""
	maxNodes: Int
"""
Maximum amount of files downloaded from s3 in parallel for a single node.
"""
	fileDownloadParallelism: Int
}

enum FeatureAnnouncement {
	AggregateAlertSearchPage
	AggregateAlertOverview
	FleetRemoteUpdatesAndGroups
	FilterMatchHighlighting
	OrganizationOwnedQueries
	Interactions
	FieldInteractions
	PuffinRebranding
	FetchMoreOnFieldsPanel
	ToolPanel
}

"""
Represents a feature flag.
"""
enum FeatureFlag {
"""
[PREVIEW: This functionality is still under development and can change without warning.] Export data to bucket storage.
"""
	ExportToBucket
"""
[PREVIEW: This functionality is still under development and can change without warning.] Enable repeating queries. Can be used instead of live queries for functions having limitations around live queries.
"""
	RepeatingQueries
"""
[PREVIEW: This functionality is still under development and can change without warning.] Enable custom ingest tokens not generated by LogScale.
"""
	CustomIngestTokens
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Enable permission tokens.
"""
	PermissionTokens
"""
[PREVIEW: This functionality is still under development and can change without warning.] Assign default roles for groups.
"""
	DefaultRolesForGroups
"""
[PREVIEW: This functionality is still under development and can change without warning.] Use new organization limits.
"""
	NewOrganizationLimits
"""
[PREVIEW: This functionality is still under development and can change without warning.] Authenticate cookies server-side.
"""
	CookieAuthServerSide
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Enable ArrayFunctions in query language.
"""
	ArrayFunctions
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Enable geography functions in query language.
"""
	GeographyFunctions
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Prioritize newer over older segments.
"""
	CachePolicies
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Enable searching across LogScale clusters.
"""
	MultiClusterSearch
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Enable subdomains for current cluster.
"""
	SubdomainForOrganizations
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Enable Humio Managed repositories. The customer is not permitted to change certain configurations in a LogScale Managed repository.
"""
	ManagedRepositories
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Allow users to configure FDR feeds for managed repositories
"""
	ManagedRepositoriesAllowFDRConfig
"""
[PREVIEW: This functionality is still under development and can change without warning.] The UsagePage shows data from ingestAfterFieldRemovalSize instead of segmentWriteBytes
"""
	UsagePageUsingIngestAfterFieldRemovalSize
"""
[PREVIEW: This functionality is still under development and can change without warning.] Enable falcon data connector
"""
	FalconDataConnector
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Flag for testing, does nothing
"""
	SleepFunction
"""
[PREVIEW: This functionality is still under development and can change without warning.] Enable login bridge
"""
	LoginBridge
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Enables download of macos installer for logcollector through fleet management
"""
	MacosInstallerForLogCollector
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Enables UsageJob to log average usage as part of usage log
"""
	LogAverageUsage
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Enables ephemeral hosts support for fleet management
"""
	FleetEphemeralHosts
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Enables fleet management collector metrics
"""
	FleetCollectorMetrics
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] No currentHosts writes for segments in buckets
"""
	NoCurrentsForBucketSegments
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Pre-merge mini-segments
"""
	PreMergeMiniSegments
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Use a new segment file format on write - not readable by older versions
"""
	WriteNewSegmentFileFormat
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Enables fleet management collector debug logging
"""
	FleetCollectorDebugLogging
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Enables LogScale Collector remote updates
"""
	FleetRemoteUpdates
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Enables alternate query merge target handling
"""
	AlternateQueryMergeTargetHandling
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Enables query optimizations for fleet management
"""
	FleetUseStaticQueries
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Enables labels for fleet management
"""
	FleetLabels
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Enables Field Aliasing
"""
	FieldAliasing
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] External Functions
"""
	ExternalFunctions
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Enable the LogScale Query Assistant
"""
	QueryAssistant
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Enable Flight Control support in cluster
"""
	FlightControl
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Enable organization level security policies. For instance the ability to only enable certain action types.
"""
	OrganizationSecurityPolicies
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Enables a limit on query backtracking
"""
	QueryBacktrackingLimit
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Adds a derived #repo.cid tag when searching in views or dataspaces within an organization with an associated CID
"""
	DerivedCidTag
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Live tables
"""
	LiveTables
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Enables the MITRE Detection Annotation function
"""
	MitreDetectionAnnotation
"""
[PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] Enables having multiple role bindings for a single view in the same group. This feature flag does nothing until min version is at least 1.150.0
"""
	MultipleViewRoleBindings
}

"""
Feature flags with details
"""
type FeatureFlagV2 {
	flag: FeatureFlag!
	description: String!
	experimental: Boolean!
}

type FieldAliasSchema {
	id: String!
	name: String!
	fields: [SchemaField!]!
	instances: [AliasMapping!]!
	version: String!
}

type FieldAliasSchemasInfo {
	schemas: [FieldAliasSchema!]!
	activeSchemaOnOrg: String
	activeSchemasOnViews: [ActiveSchemaOnView!]!
}

"""
Field condition comparison operator type
"""
enum FieldConditionOperatorType {
	Equal
	NotEqual
	Contains
	NotContains
	StartsWith
	EndsWith
	Present
	NotPresent
	Unknown
}

"""
Presentation preferences used when a field is added to table and event list widgets in the UI.
"""
type FieldConfiguration {
"""
The field the configuration is associated with.
"""
	fieldName: String!
"""
A JSON object containing the column properties applied to the column when it is added to a widget.
"""
	config: JSON!
}

"""
An assertion that an event output from a parser test case has an expected value for a given field.
"""
type FieldHasValue {
"""
Field to assert on.
"""
	fieldName: String!
"""
Value expected to be contained in the field.
"""
	expectedValue: String!
}

"""
A file upload to LogScale for use with the `match` query function. You can see them under the Files page in the UI.
"""
type File {
	contentHash: String!
	nameAndPath: FileNameAndPath!
	createdAt: DateTime!
	createdBy: String!
	modifiedAt: DateTime!
	fileSizeBytes: Long
	modifiedBy: String!
	packageId: VersionedPackageSpecifier
	package: PackageInstallation
"""
The view or repository for the file
"""
	view: PartialSearchDomain
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] Allowed asset actions
"""
	allowedActions: [AssetAction!]!
}

"""
A file asset
"""
type FileEntry {
	view: SearchDomain
	file: File!
}

"""
A field in a file and what value the field should have for a given entry to pass the filter.
"""
input FileFieldFilterType {
"""
A field in a file and what value the field should have for a given entry to pass the filter.
"""
	field: String!
"""
A field in a file and what value the field should have for a given entry to pass the filter.
"""
	values: [String!]!
}

type FileNameAndPath {
	name: String!
"""
Paths for files can be one of two types: absolute or relative.
Absolute paths start with a slash, and relative paths start without a slash, like Unix paths.

Every repository or view in the system is considered a "folder" in its own right,
meaning that every relative path is relative to the current view.
An absolute path points to something that can be addressed from any view,
and a relative path points to a file located inside the view.
If there is no path, it means the file is located at your current location.

"""
	path: String
}

"""
The config for lookup files.
"""
type FilesConfig {
	maxFileUploadSize: Int!
}

"""
A filter alert.
"""
type FilterAlert {
"""
Id of the filter alert.
"""
	id: String!
"""
Name of the filter alert.
"""
	name: String!
"""
Description of the filter alert.
"""
	description: String
"""
LogScale query to execute.
"""
	queryString: String!
"""
List of ids for actions to fire on query result.
"""
	actions: [Action!]!
"""
Labels attached to the filter alert.
"""
	labels: [String!]!
"""
Flag indicating whether the filter alert is enabled.
"""
	enabled: Boolean!
"""
Throttle time in seconds.
"""
	throttleTimeSeconds: Long
"""
A field to throttle on. Can only be set if throttleTimeSeconds is set.
"""
	throttleField: String
"""
Unix timestamp for last successful poll of the filter alert query. If this is not quite recent, then the alert might be having problems.
"""
	lastSuccessfulPoll: Long
"""
Unix timestamp for last execution of trigger.
"""
	lastTriggered: Long
"""
Unix timestamp for last error.
"""
	lastErrorTime: Long
"""
Last error encountered while running the filter alert.
"""
	lastError: String
"""
Last warnings encountered while running the filter alert.
"""
	lastWarnings: [String!]!
"""
YAML specification of the filter alert.
"""
	yamlTemplate: YAML!
"""
The id of the package that the alert was installed as part of.
"""
	packageId: VersionedPackageSpecifier
"""
The package that the alert was installed as part of.
"""
	package: PackageInstallation
"""
Ownership of the query run by this alert
"""
	queryOwnership: QueryOwnership!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] Allowed asset actions
"""
	allowedActions: [AssetAction!]!
}

"""
The default config for filter alerts.
"""
type FilterAlertConfig {
"""
Maximum trigger limit for filter alerts with one or more email actions.
"""
	filterAlertEmailTriggerLimit: Int!
"""
Maximum trigger limit for filter alerts with no email actions.
"""
	filterAlertNonEmailTriggerLimit: Int!
}

type FilterAlertTemplate {
	name: String!
	displayName: String!
	yamlTemplate: YAML!
	labels: [String!]!
}

enum FleetConfiguration__SortBy {
	Name
	ModifiedBy
	Instances
	Size
	LastModified
}

enum FleetGroups__SortBy {
	Filter
	WantedVersion
	Collectors
	Name
}

type FleetInstallationToken {
	token: String!
	name: String!
	assignedConfiguration: LogCollectorConfiguration
	installationCommands: LogCollectorInstallCommand!
}

enum FleetInstallationTokens__SortBy {
	Name
	ConfigName
}

enum Fleet__SortBy {
	Hostname
	System
	Version
	Ingest
	LastActivity
	ConfigName
	CpuAverage5Min
	MemoryMax5Min
	DiskMax5Min
	Change
}

"""
Settings for the Java Flight Recorder.
"""
type FlightRecorderSettings {
"""
True if OldObjectSample is enabled
"""
	oldObjectSampleEnabled: Boolean!
"""
The duration old object sampling will run for before dumping results and restarting
"""
	oldObjectSampleDurationMinutes: Long!
}

"""
Data for generating an unsaved aggregate alert object from a library package template
"""
input GenerateAggregateAlertFromPackageTemplateInput {
"""
Data for generating an unsaved aggregate alert object from a library package template
"""
	viewName: RepoOrViewName!
"""
Data for generating an unsaved aggregate alert object from a library package template
"""
	packageId: VersionedPackageSpecifier!
"""
Data for generating an unsaved aggregate alert object from a library package template
"""
	templateName: String!
}

"""
Data for generating an unsaved aggregate alert object from a yaml template
"""
input GenerateAggregateAlertFromTemplateInput {
"""
Data for generating an unsaved aggregate alert object from a yaml template
"""
	viewName: RepoOrViewName!
"""
Data for generating an unsaved aggregate alert object from a yaml template
"""
	yamlTemplate: YAML!
}

"""
Data for generating an unsaved alert object from a library package template
"""
input GenerateAlertFromPackageTemplateInput {
"""
Data for generating an unsaved alert object from a library package template
"""
	viewName: RepoOrViewName!
"""
Data for generating an unsaved alert object from a library package template
"""
	packageId: VersionedPackageSpecifier!
"""
Data for generating an unsaved alert object from a library package template
"""
	templateName: String!
}

"""
Data for generating an unsaved alert object from a yaml template
"""
input GenerateAlertFromTemplateInput {
"""
Data for generating an unsaved alert object from a yaml template
"""
	viewName: RepoOrViewName!
"""
Data for generating an unsaved alert object from a yaml template
"""
	yamlTemplate: YAML!
}

"""
Data for generating an unsaved filter alert object from a library package template
"""
input GenerateFilterAlertFromPackageTemplateInput {
"""
Data for generating an unsaved filter alert object from a library package template
"""
	viewName: RepoOrViewName!
"""
Data for generating an unsaved filter alert object from a library package template
"""
	packageId: VersionedPackageSpecifier!
"""
Data for generating an unsaved filter alert object from a library package template
"""
	templateName: String!
}

"""
Data for generating an unsaved filter alert object from a yaml template
"""
input GenerateFilterAlertFromTemplateInput {
"""
Data for generating an unsaved filter alert object from a yaml template
"""
	viewName: RepoOrViewName!
"""
Data for generating an unsaved filter alert object from a yaml template
"""
	yamlTemplate: YAML!
}

"""
Data for generating an unsaved parser object from a YAML template
"""
input GenerateParserFromTemplateInput {
"""
Data for generating an unsaved parser object from a YAML template
"""
	yamlTemplate: YAML!
}

"""
Data for generating an unsaved scheduled search object from a library package template.
"""
input GenerateScheduledSearchFromPackageTemplateInput {
"""
Data for generating an unsaved scheduled search object from a library package template.
"""
	viewName: RepoOrViewName!
"""
Data for generating an unsaved scheduled search object from a library package template.
"""
	packageId: VersionedPackageSpecifier!
"""
Data for generating an unsaved scheduled search object from a library package template.
"""
	templateName: String!
}

"""
Data for generating an unsaved scheduled search object from a yaml templat.
"""
input GenerateScheduledSearchFromTemplateInput {
"""
Data for generating an unsaved scheduled search object from a yaml templat.
"""
	viewName: RepoOrViewName!
"""
Data for generating an unsaved scheduled search object from a yaml templat.
"""
	yamlTemplate: YAML!
}

"""
The input required to get an external function specification.
"""
input GetExternalFunctionInput {
"""
The input required to get an external function specification.
"""
	name: String!
"""
The input required to get an external function specification.
"""
	view: String!
}

"""
A group.
"""
type Group {
	id: String!
	displayName: String!
	defaultQueryPrefix: String
	defaultRole: Role
	defaultSearchDomainCount: Int!
	lookupName: String
	searchDomainCount: Int!
	roles: [SearchDomainRole!]!
	searchDomainRoles(
		searchDomainId: String
	): [SearchDomainRole!]!
	searchDomainRolesByName(
		searchDomainName: String!
	): SearchDomainRole
	searchDomainRolesBySearchDomainName(
		searchDomainName: String!
	): [SearchDomainRole!]!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] Get asset permissions assigned to the group for the specific asset
"""
	assetPermissions(
"""
Id of the asset
"""
		assetId: String!
"""
Asset type
"""
		assetType: AssetPermissionsAssetType!
		searchDomainId: String
	): AssetPermissionsForGroup!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] Search for asset permissions for the group
"""
	searchAssetPermissions(
"""
Filter results based on this string
"""
		searchFilter: String
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
"""
The sort by options for asset permissions.
"""
		sortBy: SortBy
"""
Asset type
"""
		assetType: AssetPermissionsAssetType!
"""
List of search domain id's to search within
"""
		searchDomainIds: [String!]
"""
Include UpdateAsset and/or DeleteAsset permission assignments
"""
		permissions: AssetPermissionInputEnum
"""
If this is set to true, the search will also return all assets, that the group has not been assigned any permissions for
"""
		includeUnassignedAssets: Boolean
	): AssetPermissionSearchResultSet!
	systemRoles: [GroupSystemRole!]!
	organizationRoles: [GroupOrganizationRole!]!
	queryPrefixes(
		onlyIncludeRestrictiveQueryPrefixes: Boolean
		onlyForRoleWithId: String
	): [QueryPrefixes!]!
	userCount: Int!
	users: [User!]!
	searchUsers(
"""
Filter results based on this string
"""
		searchFilter: String
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
"""
The value to sort the result set by.
"""
		sortBy: OrderByUserField
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
	): UserResultSetType!
}

"""
Group to asset permissions assignments
"""
type GroupAssetPermissionAssignment {
	group: Group!
	assetPermissions: [AssetPermissionOutputEnum!]!
}

input GroupFilter {
	oldQuery: String
	newQuery: String!
}

type GroupFilterInfo {
	total: Int!
	added: Int!
	removed: Int!
	noChange: Int!
}

"""
The organization roles of the group.
"""
type GroupOrganizationRole {
	role: Role!
}

"""
A page of groups in an organization.
"""
type GroupPage {
	pageInfo: PageType!
	page: [Group!]!
}

"""
The groups query result set.
"""
type GroupResultSetType {
"""
The total number of matching results
"""
	totalResults: Int!
"""
The paginated result set
"""
	results: [Group!]!
}

"""
A group to role assignment
"""
type GroupRole {
	group: Group!
	role: Role!
}

"""
The role assigned to a group in a SearchDomain
"""
type GroupSearchDomainRole {
	role: Role!
	searchDomain: SearchDomain!
	group: Group!
}

"""
The system roles of the group.
"""
type GroupSystemRole {
	role: Role!
}

"""
Health status of the service
"""
type HealthStatus {
"""
The latest status from the service
"""
	status: String!
"""
The latest health status message from the service
"""
	message: String!
}

"""
Represents information about the LogScale instance.
"""
type HumioMetadata {
"""
Returns enabled features that are likely in beta.
"""
	isFeatureFlagEnabled(
		feature: FeatureFlag!
	): Boolean!
	externalPermissions: Boolean!
	version: String!
"""
[PREVIEW: Experimental field used to improve the user experience during cluster upgrades.] An indication whether or not the cluster is being updated. This is based off of differences in the cluster node versions.
"""
	isClusterBeingUpdated: Boolean!
"""
[PREVIEW: Experimental field used to improve the user experience during cluster upgrades.] The lowest detected node version in the cluster.
"""
	minimumNodeVersion: String!
	environment: EnvironmentType!
	clusterId: String!
	falconDataConnectorUrl: String
	regions: [RegionSelectData!]!
"""
[PREVIEW: Experimental feature, not ready for production.] List of supported AWS regions
"""
	awsRegions: [String!]!
"""
[PREVIEW: Experimental feature, not ready for production.] Cluster AWS IAM role arn (Amazon Resource Name) used to assume role for ingest feeds
"""
	ingestFeedAwsRoleArn: String
"""
[PREVIEW: Experimental feature, not ready for production.] Configuration status for AWS ingest feeds.
"""
	awsIngestFeedsConfigurationStatus: IngestFeedConfigurationStatus!
	sharedDashboardsEnabled: Boolean!
	personalUserTokensEnabled: Boolean!
	globalAllowListEmailActionsEnabled: Boolean!
	isAutomaticUpdateCheckingEnabled: Boolean!
"""
The authentication method used for the cluster node
"""
	authenticationMethod: AuthenticationMethod!
	organizationMultiMode: Boolean!
	organizationMode: OrganizationMode!
	sandboxesEnabled: Boolean!
	externalGroupSynchronization: Boolean!
	allowActionsNotUseProxy: Boolean!
	isUsingSmtp: Boolean!
	isPendingUsersEnabled: Boolean!
	scheduledSearchMaxBackfillLimit: Int
	isExternalManaged: Boolean!
	isApiExplorerEnabled: Boolean!
	isScheduledReportEnabled: Boolean!
	eulaUrl: String!
"""
The time in ms after which a repository has been marked for deletion it will no longer be restorable.
"""
	deleteBackupAfter: Long!
	maxCsvFileUploadSizeBytes: Long!
	maxJsonFileUploadSizeBytes: Long!
"""
The filter alert config.
"""
	filterAlertConfig: FilterAlertConfig!
"""
The lookup files config.
"""
	filesConfig: FilesConfig!
}

"""
A LogScale query
"""
type HumioQuery {
	languageVersion: LanguageVersion!
	queryString: String!
	arguments: [DictionaryEntryType!]!
	start: String!
	end: String!
	isLive: Boolean!
}

"""
An IP Filter
"""
type IPFilter {
"""
The unique id for the ip filter
"""
	id: String!
"""
The name for the ip filter
"""
	name: String!
"""
The ip filter
"""
	ipFilter: String!
}

type IdentityProviderAuth {
	id: String!
	name: String!
	authenticationMethod: AuthenticationMethodAuth!
}

"""
An Identity Provider
"""
interface IdentityProviderAuthentication {
"""
An Identity Provider
"""
	id: String!
"""
An Identity Provider
"""
	name: String!
"""
An Identity Provider
"""
	defaultIdp: Boolean!
"""
An Identity Provider
"""
	humioManaged: Boolean!
"""
An Identity Provider
"""
	lazyCreateUsers: Boolean!
"""
An Identity Provider
"""
	domains: [String!]!
"""
An Identity Provider
"""
	debug: Boolean!
}

type Ingest {
	currentBytes: Long!
	limit: UsageLimit!
}

"""
An ingest feed.
"""
type IngestFeed {
"""
Id of the ingest feed.
"""
	id: String!
"""
Name of the ingest feed.
"""
	name: String!
"""
Description of the ingest feed.
"""
	description: String
"""
Parser used to parse the ingest feed.
"""
	parser: Parser
"""
Is ingest from the ingest feed enabled?
"""
	enabled: Boolean!
"""
The source which this ingest feed will ingest from
"""
	source: IngestFeedSource!
"""
Unix timestamp for when this feed was created
"""
	createdAt: Long!
"""
Details about how the ingest feed is running
"""
	executionInfo: IngestFeedExecutionInfo
}

"""
How to authenticate to AWS.
"""
union IngestFeedAwsAuthentication =IngestFeedAwsAuthenticationIamRole

"""
IAM role authentication
"""
type IngestFeedAwsAuthenticationIamRole {
"""
Arn of the role to be assumed
"""
	roleArn: String!
"""
External Id to the role to be assumed
"""
	externalId: String!
}

"""
Compression scheme of the file.
"""
enum IngestFeedCompression {
	Auto
	Gzip
	None
}

"""
Represents the configuration status of the ingest feed feature on the cluster
"""
type IngestFeedConfigurationStatus {
	isConfigured: Boolean!
}

"""
Details about how the ingest feed is running
"""
type IngestFeedExecutionInfo {
"""
Unix timestamp of the latest activity for the feed
"""
	latestActivity: Long
"""
Details about the status of the ingest feed
"""
	statusMessage: IngestFeedStatus
}

"""
The preprocessing to apply to an ingest feed before parsing.
"""
union IngestFeedPreprocessing =IngestFeedPreprocessingSplitNewline | IngestFeedPreprocessingSplitAwsRecords

"""
The kind of preprocessing to do.
"""
enum IngestFeedPreprocessingKind {
"""
Interpret the input as AWS JSON record format and emit each record as an event
"""
	SplitAwsRecords
"""
Interpret the input as newline-delimited and emit each line as an event
"""
	SplitNewline
}

"""
Interpret the input as AWS JSON record format and emit each record as an event
"""
type IngestFeedPreprocessingSplitAwsRecords {
"""
The kind of preprocessing to do.
"""
	kind: IngestFeedPreprocessingKind!
}

"""
Interpret the input as newline-delimited and emit each line as an event
"""
type IngestFeedPreprocessingSplitNewline {
"""
The kind of preprocessing to do.
"""
	kind: IngestFeedPreprocessingKind!
}

"""
The ingest feed query result set
"""
type IngestFeedQueryResultSet {
"""
The total number of matching results
"""
	totalResults: Int!
"""
The paginated result set
"""
	results: [IngestFeed!]!
}

"""
An ingest feed that polls data from S3 and is notified via SQS
"""
type IngestFeedS3SqsSource {
"""
AWS SQS queue url.
"""
	sqsUrl: String!
"""
The preprocessing to apply to an ingest feed before parsing.
"""
	preprocessing: IngestFeedPreprocessing!
"""
How to authenticate to AWS.
"""
	awsAuthentication: IngestFeedAwsAuthentication!
"""
Compression scheme of the file.
"""
	compression: IngestFeedCompression!
"""
The AWS region to connect to.
"""
	region: String!
}

"""
The source from which to download from an ingest feed.
"""
union IngestFeedSource =IngestFeedS3SqsSource

"""
Details about the status of the ingest feed
"""
type IngestFeedStatus {
"""
Description of the problem with the ingest feed
"""
	problem: String!
"""
Terse description of the problem with the ingest feed
"""
	terseProblem: String
"""
Timestamp, in milliseconds, of when the status message was set
"""
	statusTimestamp: Long!
"""
Cause of the problem with the ingest feed
"""
	cause: IngestFeedStatusCause
}

"""
Details about the cause of the problem
"""
type IngestFeedStatusCause {
"""
Description of the cause of the problem
"""
	cause: String!
"""
Terse description of the cause of the problem
"""
	terseCause: String
}

enum IngestFeeds__SortBy {
	CreatedTimeStamp
	Name
}

enum IngestFeeds__Type {
	AwsS3Sqs
}

"""
Ingest Listeners listen on a port for UDP or TCP traffic, used with SysLog.
"""
type IngestListener {
	id: String!
	repository: Repository!
"""
The TCP/UDP port to listen to.
"""
	port: Int!
"""
The network protocol data is sent through.
"""
	protocol: IngestListenerProtocol!
"""
The charset used to decode the event stream. Available charsets depend on the JVM running the LogScale instance. Names and aliases can be found at http://www.iana.org/assignments/character-sets/character-sets.xhtml
"""
	charset: String!
"""
Specify which host should open the socket. By default this field is empty and all hosts will open a socket. This field can be used to select only one host to open the socket.
"""
	vHost: Int
	name: String!
"""
The ip address this listener will bind to. By default (leaving this field empty) it will bind to 0.0.0.0 - all interfaces. Using this field it is also possible to specify the address to bind to. In a cluster setup it is also possible to specify if only one machine should open a socket - The vhost field is used for that.
"""
	bindInterface: String!
"""
The parser configured to parse data for the listener. This returns null if the parser has been removed since the listener was created.
"""
	parser: Parser
}

"""
The network protocol a ingest listener uses.
"""
enum IngestListenerProtocol {
"""
UDP Protocol
"""
	UDP
"""
TCP Protocol
"""
	TCP
"""
Gelf over UDP Protocol
"""
	GELF_UDP
"""
Gelf over TCP Protocol
"""
	GELF_TCP
"""
Netflow over UDP
"""
	NETFLOW_UDP
}

"""
A cluster ingest partition. It assigns cluster nodes with the responsibility of ingesting data.
"""
type IngestPartition {
	id: Int!
"""
The ids of the node responsible executing real-time queries for the partition and writing events to time series. The list is ordered so that the first node is the primary node and the rest are followers ready to take over if the primary fails.
"""
	nodeIds: [Int!]!
}

"""
An API ingest token used for sending data to LogScale.
"""
type IngestToken {
	name: String!
	token: String!
	parser: Parser
}

"""
The status of an IOC database table
"""
type IocTableInfo {
"""
The name of the indicator type in this table
"""
	name: String!
	status: IocTableStatus!
"""
The number of milliseconds since epoch that the IOC database was last updated
"""
	lastUpdated: Long
"""
The number of indicators in the database
"""
	count: Int!
}

enum IocTableStatus {
	Unauthorized
	Unavailable
	Ok
}

"""
Represents information about the IP database used by LogScale
"""
type IpDatabaseInfo {
"""
The absolute file path of the file containing the database
"""
	dbFilePath: String!
"""
The update strategy used for the IP Database
"""
	updateStrategy: String!
"""
Metadata about the IP Database used by LogScale
"""
	metadata: IpDatabaseMetadata
}

"""
Represents metadata about the IP database used by LogScale
"""
type IpDatabaseMetadata {
"""
The type of database
"""
	type: String!
"""
The date on which the database was build
"""
	buildDate: DateTime!
"""
The description of the database
"""
	description: String!
"""
The md5 hash of the file containing the database
"""
	dbFileMd5: String!
}

scalar JSON

type KafkaClusterDescription {
	clusterID: String!
	nodes: [KafkaNode!]!
	controller: KafkaNode!
	logDirDescriptions: [KafkaLogDir!]!
	globalEventsTopic: KafkaTopicDescription!
	ingestTopic: KafkaTopicDescription!
	chatterTopic: KafkaTopicDescription!
}

type KafkaLogDir {
	nodeID: Int!
	path: String!
	error: String
	topicPartitions: [KafkaNodeTopicPartitionLogDescription!]!
}

type KafkaNode {
	id: Int!
	host: String
	port: Int!
	rack: String
}

type KafkaNodeTopicPartitionLogDescription {
	topicPartition: KafkaTopicPartition!
	offset: Long!
	size: Long!
	isFuture: Boolean!
}

type KafkaTopicConfig {
	key: String!
	value: String!
}

type KafkaTopicConfigs {
	configs: [KafkaTopicConfig!]!
	defaultConfigs: [KafkaTopicConfig!]!
}

type KafkaTopicDescription {
	name: String!
	config: KafkaTopicConfigs!
	partitions: [KafkaTopicPartitionDescription!]!
}

type KafkaTopicPartition {
	topic: String!
	partition: Int!
}

type KafkaTopicPartitionDescription {
	partition: Int!
	leader: Int!
	replicas: [Int!]!
	inSyncReplicas: [Int!]!
}

"""
The kind of the external function
"""
enum KindEnum {
	Source
	General
	Enrichment
}

"""
Defines how the external function is executed.
"""
type KindOutput {
"""
The name of the kind of external function.
"""
	name: KindEnum!
"""
The parameters that specify the key fields. Use for the 'Enrichment' functions.
"""
	parametersDefiningKeyFields: [String!]
"""
The names of the keys when they're returned from the external function. Use for the 'Enrichment' functions.
"""
	fixedKeyFields: [String!]
}

type LanguageVersion {
"""
If non-null, this is a version known by the current version of LogScale.
"""
	name: LanguageVersionEnum
"""
If non-null, this is a version stored by a future LogScale version.
"""
	futureName: String
"""
The language version.
"""
	version: LanguageVersionOutputType!
"""
If false, this version isn't recognized by the current version of LogScale.
It must have been stored by a future LogScale version.
This can happen if LogScale was upgraded, and subsequently downgraded (rolled back).
"""
	isKnown: Boolean!
}

"""
The version of the LogScale query language to use.
"""
enum LanguageVersionEnum {
	legacy
	xdr1
	xdrdetects1
	filteralert
	federated1
}

"""
A specific language version.
"""
input LanguageVersionInputType {
"""
A specific language version.
"""
	name: String!
}

"""
A specific language version.
"""
type LanguageVersionOutputType {
"""
The name of the language version. The name is case insensitive.
"""
	name: String!
}

"""
Represents information about the LogScale instance.
"""
interface License {
"""
Represents information about the LogScale instance.
"""
	expiresAt: DateTime!
"""
Represents information about the LogScale instance.
"""
	issuedAt: DateTime!
}

"""
A Limit added to the organization.
"""
type Limit {
"""
The limit name
"""
	limitName: String!
"""
If the limit allows logging in
"""
	allowLogin: Boolean!
"""
The daily ingest allowed for the limit
"""
	dailyIngest: Long!
"""
The retention in days allowed for the limit
"""
	retention: Int!
"""
If the limit allows self service
"""
	allowSelfService: Boolean!
"""
The deleted date for the limit
"""
	deletedDate: Long
}

"""
A Limit added to the organization.
"""
type LimitV2 {
"""
The id
"""
	id: String!
"""
The limit name
"""
	limitName: String!
"""
The display name of the limit
"""
	displayName: String!
"""
If the limit allows logging in
"""
	allowLogin: Boolean!
"""
The daily ingest allowed for the limit
"""
	dailyIngest: contractual!
"""
The amount of storage allowed for the limit
"""
	storageLimit: contractual!
"""
The data scanned measurement allowed for the limit
"""
	dataScannedLimit: contractual!
"""
The usage measurement type used for the limit
"""
	measurementPoint: Organizations__MeasurementType!
"""
The user seats allowed for the limit
"""
	userLimit: contractual!
"""
The number of repositories allowed for the limit
"""
	repoLimit: Int
"""
The retention in days for the limit, that's the contracted value
"""
	retention: Int!
"""
The max retention in days allowed for the limit, this can be greater than or equal to retention
"""
	maxRetention: Int!
"""
If the limit allows self service
"""
	allowSelfService: Boolean!
"""
The deleted date for the limit
"""
	deletedDate: Long
"""
The expiration date for the limit
"""
	expirationDate: Long
"""
If the limit is a trial
"""
	trial: Boolean!
"""
If the customer is allowed flight control
"""
	allowFlightControl: Boolean!
"""
Data type for the limit, all repositories linked to the limit will get this datatype logged in usage
"""
	dataType: String!
"""
Repositories attached to the limit
"""
	repositories: [Repository!]!
}

"""
All data related to a scheduled report accessible with a readonly scheduled report access token
"""
type LimitedScheduledReport {
"""
Id of the scheduled report.
"""
	id: String!
"""
Name of the scheduled report.
"""
	name: String!
"""
Description of the scheduled report.
"""
	description: String!
"""
Name of the dashboard referenced by the report.
"""
	dashboardName: String!
"""
Display name of the dashboard referenced by the report.
"""
	dashboardDisplayName: String!
"""
Shared time interval of the dashboard referenced by the report.
"""
	dashboardSharedTimeInterval: SharedDashboardTimeInterval
"""
Widgets of the dashboard referenced by the report.
"""
	dashboardWidgets: [Widget!]!
"""
Sections of the dashboard referenced by the report.
"""
	dashboardSections: [Section!]!
"""
The name of the repository or view queries are executed against.
"""
	repoOrViewName: RepoOrViewName!
"""
Layout of the scheduled report.
"""
	layout: ScheduledReportLayout!
"""
Timezone of the schedule. Examples include UTC, Europe/Copenhagen.
"""
	timeZone: String!
"""
List of parameter value configurations.
"""
	parameters: [ParameterValue!]!
}

"""
The status of a local cluster connection.
"""
type LocalClusterConnectionStatus implements ClusterConnectionStatus{
"""
Name of the local view
"""
	viewName: String
"""
Id of the connection
"""
	id: String
"""
Whether the connection is valid
"""
	isValid: Boolean!
"""
Errors if the connection is invalid
"""
	errorMessages: [ConnectionAspectErrorType!]!
}

"""
A fleet search result entry
"""
type LogCollector {
"""
If the collector is enrolled this is its id
"""
	id: String
"""
The hostname
"""
	hostname: String!
"""
The host system
"""
	system: String!
"""
Version
"""
	version: String!
"""
Last activity recorded
"""
	lastActivity: String!
"""
Ingest last 24h.
"""
	ingestLast24H: Long!
"""
Ip address
"""
	ipAddress: String
	logSources: [LogCollectorLogSource!]!
"""
Log collector machineId
"""
	machineId: String!
"""
contains the name of any manually assigned config
"""
	configName: String
"""
contains the id of any manually assigned config
"""
	configId: String
	configurations: [LogCollectorConfigInfo!]!
	errors: [String!]!
	cfgTestId: String
	cpuAverage5Min: Float
	memoryMax5Min: Long
	diskMax5Min: Float
	change: Changes
	groups: [LogCollectorGroup!]!
	wantedVersion: String
	debugLogging: LogCollectorDebugLogging
	timeOfUpdate: DateTime
	usesRemoteUpdate: Boolean!
	ephemeralTimeout: Int
	status: LogCollectorStatusType
	labels: [LogCollectorLabel!]!
}

type LogCollectorConfigInfo {
	id: String!
	name: String!
	group: LogCollectorGroup
	assignment: LogCollectorConfigurationAssignmentType!
}

"""
A configuration file for a log collector
"""
type LogCollectorConfiguration {
	id: String!
	name: String!
	yaml: String
	draft: String
	version: Int!
	yamlCharactersCount: Int!
	modifiedAt: DateTime!
	draftModifiedAt: DateTime
	modifiedBy: String!
	instances: Int!
	description: String
	isTestRunning: Boolean!
}

enum LogCollectorConfigurationAssignmentType {
	Group
	Manual
	Test
}

type LogCollectorConfigurationProblemAtPath {
	summary: String!
	details: String
	path: String!
	number: Int!
}

union LogCollectorDebugLogging =LogCollectorDebugLoggingStatic

type LogCollectorDebugLoggingStatic {
	url: String
	token: String!
	level: String!
	repository: String
}

"""
Details about a Log Collector
"""
type LogCollectorDetails {
"""
If the collector is enrolled this is its id
"""
	id: String
"""
The hostname
"""
	hostname: String!
"""
The host system
"""
	system: String!
"""
Version
"""
	version: String!
"""
Last activity recorded
"""
	lastActivity: String!
"""
Ip address
"""
	ipAddress: String
	logSources: [LogCollectorLogSource!]!
"""
Log collector machineId
"""
	machineId: String!
	configurations: [LogCollectorConfigInfo!]!
	errors: [String!]!
	cpuAverage5Min: Float
	memoryMax5Min: Long
	diskMax5Min: Float
	ephemeralTimeout: Int
	status: LogCollectorStatusType
}

type LogCollectorGroup {
	id: String!
	name: String!
	filter: String
	configurations: [LogCollectorConfiguration!]!
	collectorCount: Int
	wantedVersion: String
	onlyUsesRemoteUpdates: Boolean!
}

type LogCollectorInstallCommand {
	windowsCommand: String!
	linuxCommand: String!
	macosCommand: String!
}

"""
Provides information about an installer of the LogScale Collector.
"""
type LogCollectorInstaller {
"""
Installer file name
"""
	name: String!
"""
URL to fetch installer from
"""
	url: String!
"""
LogScale Collector version
"""
	version: String!
"""
Installer CPU architecture
"""
	architecture: String!
"""
Installer type (deb, rpm or msi)
"""
	type: String!
"""
Installer file size
"""
	size: Int!
"""
Config file example
"""
	configExample: String
"""
Icon file name
"""
	icon: String
}

type LogCollectorLabel {
	name: String!
	value: String!
}

type LogCollectorLogSource {
	sourceName: String!
	sourceType: String!
	sinkType: String!
	parser: String
	repository: String
}

type LogCollectorMergedConfiguration {
	problems: [LogCollectorConfigurationProblemAtPath!]!
	content: String!
}

enum LogCollectorStatusType {
	Error
	OK
}

type LoginBridge {
	name: String!
	issuer: String!
	description: String!
	remoteId: String!
	loginUrl: String!
	relayStateUUrl: String!
	samlEntityId: String!
	publicSamlCertificate: String!
	groupAttribute: String!
	organizationIdAttributeName: String!
	organizationNameAttributeName: String
	additionalAttributes: String
	groups: [String!]!
	allowedUsers: [User!]!
	generateUserName: Boolean!
	termsDescription: String!
	termsLink: String!
	showTermsAndConditions: Boolean!
"""
True if any user in this organization has logged in to CrowdStream via LogScale. Requires manage organizations permissions
"""
	anyUserAlreadyLoggedInViaLoginBridge: Boolean!
}

type LoginBridgeRequest {
	samlResponse: String!
	loginUrl: String!
	relayState: String!
}

type LookupFileTemplate {
	name: String!
	displayName: String!
	content: String!
}

scalar Markdown

"""
A place for LogScale to find packages.
"""
type Marketplace {
"""
Gets all categories in the marketplace.
"""
	categoryGroups: [MarketplaceCategoryGroup!]!
}

"""
A category that can be used to filter search results in the marketplace.
"""
type MarketplaceCategory {
"""
A display string for the category.
"""
	title: String!
"""
The id is used to filter the searches.
"""
	id: String!
}

"""
A grouping of categories that can be used to filter search results in the marketplace.
"""
type MarketplaceCategoryGroup {
"""
A display string for the category group.
"""
	title: String!
"""
The categories that are members of the group.
"""
	categories: [MarketplaceCategory!]!
}

type MonthlyIngest {
	monthly: [UsageOnDay!]!
}

"""
Query result for monthly ingest
"""
union MonthlyIngestQueryResult =QueryInProgress | MonthlyIngest

type MonthlyStorage {
	monthly: [StorageOnDay!]!
}

"""
Query result for monthly storage
"""
union MonthlyStorageQueryResult =QueryInProgress | MonthlyStorage

type NeverDashboardUpdateFrequency {
	name: String!
}

"""
Assignable node task.
"""
enum NodeTaskEnum {
	storage
	digest
	query
}

"""
A notification
"""
type Notification {
"""
The unique id for the notification
"""
	id: String!
"""
The title of the notification
"""
	title: String!
"""
The message for the notification
"""
	message: String!
"""
Whether the notification is dismissable
"""
	dismissable: Boolean!
"""
The severity of the notification
"""
	severity: NotificationSeverity!
"""
The type of the notification
"""
	type: NotificationTypes!
"""
Link accompanying the notification
"""
	link: String
"""
Description for the link
"""
	linkDescription: String
}

enum NotificationSeverity {
	Success
	Info
	Warning
	Error
}

enum NotificationTypes {
	Banner
	Announcement
	Bell
}

"""
Paginated response for notifications.
"""
type NotificationsResultSet {
"""
The total number of matching results
"""
	totalResults: Int!
"""
The paginated result set
"""
	results: [Notification!]!
}

type OidcIdentityProvider implements IdentityProviderAuthentication{
	id: String!
	name: String!
	clientId: String!
	clientSecret: String!
	domains: [String!]!
	issuer: String!
	tokenEndpointAuthMethod: String!
	userClaim: String!
	scopes: [String!]!
	userInfoEndpoint: String
	registrationEndpoint: String
	tokenEndpoint: String
	groupsClaim: String
	jwksEndpoint: String
	authenticationMethod: AuthenticationMethodAuth!
	authorizationEndpoint: String
	debug: Boolean!
	federatedIdp: String
	scopeClaim: String
	defaultIdp: Boolean!
	humioManaged: Boolean!
	lazyCreateUsers: Boolean!
}

type OnlyTotal {
	total: Int!
}

enum OrderBy {
	DESC
	ASC
}

"""
OrderByDirection
"""
enum OrderByDirection {
	DESC
	ASC
}

"""
OrderByUserField
"""
enum OrderByUserField {
	FULLNAME
	USERNAME
	DISPLAYNAME
}

input OrderByUserFieldInput {
	userField: OrderByUserField!
	order: OrderByDirection!
}

"""
An Organization
"""
type Organization {
"""
The unique id for the Organization
"""
	id: String!
"""
The CID corresponding to the organization
"""
	cid: String
"""
The name for the Organization
"""
	name: String!
"""
The description for the Organization, can be null
"""
	description: String
"""
Details about the organization
"""
	details: OrganizationDetails!
"""
Stats of the organization
"""
	stats: OrganizationStats!
"""
Organization configurations and settings
"""
	configs: OrganizationConfigs!
"""
Search domains in the organization
"""
	searchDomains: [SearchDomain!]!
"""
IP filter for readonly dashboard links
"""
	readonlyDashboardIPFilter: String
"""
Created date
"""
	createdAt: Long
"""
If the organization has been marked for deletion, this indicates the day it was deleted.
"""
	deletedAt: Long
"""
Trial started at
"""
	trialStartedAt: Long
"""
Public url for the Organization
"""
	publicUrl: String
"""
Ingest url for the Organization
"""
	ingestUrl: String
"""
Check if the current user has a given permission in the organization.
"""
	isActionAllowed(
"""
The action to check if a user is allowed to perform on an organization.
"""
		action: OrganizationAction!
	): Boolean!
"""
Limits assigned to the organization
"""
	limits: [Limit!]!
"""
Limits assigned to the organizations
"""
	limitsV2: [LimitV2!]!
	externalPermissions: Boolean!
	externalGroupSynchronization: Boolean!
"""
[PREVIEW: Cache policies are a limited feature and is subject to change] The default cache policy of this organization.
"""
	defaultCachePolicy: CachePolicy
}

"""
Actions a user may perform on an organization.
"""
enum OrganizationAction {
	AdministerPermissions
	CreateRepository
	CreateView
	ChangeReadOnlyDashboardFilter
	CreateUser
	ConfigureIdp
	ChangeSessions
	ChangeOrganizationSettings
	CreateTrialRepository
	UseCustomEmailTemplate
	ViewLoginBridge
	ViewUsage
	ConfigureIPFilters
	DeleteRepositoryOrView
	ChangeFleetManagement
	ViewFleetManagement
	UseRemoteUpdates
	UseFleetRemoteDebug
	UseFleetEphemeralHosts
	UseFleetStaticQueries
	UseFleetLabels
	ChangeTriggersToRunAsOtherUsers
	ChangeEventForwarders
	ViewRunningQueries
	BlockQueries
	AdministerTokens
	ManageUsers
	ViewIpFilters
	DownloadMacOsInstaller
	SecurityPoliciesEnabled
	ChangeSecurityPolicies
	QueryAssistant
	OrganizationQueryOwnershipEnabled
	UsePersonalToken
	ChangeExternalFunctions
	AddFederatedView
	ViewFalconDataConnectorUrl
	ManageSchemas
"""
[PREVIEW: This is a temporary value that will be removed again] 
"""
	ExternalFunctionsEnabled
	ViewOrganizationSettings
	ViewSecurityPolicies
	ViewSessionSettings
	ViewUsers
	ViewPermissions
	ViewIdp
	ViewOrganizationTokens
	ViewDeletedRepositoriesOrViews
	ViewEventForwarders
	ViewSchemas
}

"""
Configurations for the organization
"""
type OrganizationConfigs {
"""
Session settings
"""
	session: OrganizationSession!
"""
Social login settings
"""
	socialLogin: [SocialLoginSettings!]!
"""
Subdomain configuration for the organization
"""
	subdomains: SubdomainConfig
"""
Bucket storage configuration for the organization
"""
	bucketStorage: BucketStorageConfig
"""
Security policies for actions in the organization
"""
	actions: ActionSecurityPolicies
"""
Security policies for tokens in the organization
"""
	tokens: TokenSecurityPolicies
"""
Security policies for shared dashboard tokens in the organization
"""
	sharedDashboards: SharedDashboardsSecurityPolicies
"""
Login bridge
"""
	loginBridge: LoginBridge
"""
Whether the organization is currently blocking ingest
"""
	blockingIngest: Boolean!
"""
Default timezone to use for users without a default timezone set.
"""
	defaultTimeZone: String
}

"""
Details about the organization
"""
type OrganizationDetails {
"""
Notes of the organization (root only)
"""
	notes: String!
"""
Industry of the organization
"""
	industry: String!
"""
Industry of the organization
"""
	useCases: [Organizations__UseCases!]!
"""
Subscription of the organization
"""
	subscription: Organizations__Subscription!
"""
Trial end date of the organization if any
"""
	trialEndDate: Long
"""
Limits of the organization
"""
	limits: OrganizationLimits!
"""
The country of the organization
"""
	country: String!
"""
Determines whether an organization has access to IOCs (indicators of compromise)
"""
	iocAccess: Boolean
}

"""
Limits of the organization
"""
type OrganizationLimits {
"""
Daily ingest allowed
"""
	dailyIngest: Long!
"""
Days of retention allowed
"""
	retention: Int!
"""
Max amount of users allowed
"""
	users: Int!
"""
License expiration date
"""
	licenseExpirationDate: Long
"""
Whether self service is enabled for the Organization, allowing features like creating repositories and setting retention.
"""
	allowSelfService: Boolean!
"""
Last contract synchronization date
"""
	lastSyncDate: Long
"""
Whether the contract is missing for the organization. None for non accounts, true if account and has no contract and false if contract was found and used.
"""
	missingContract: Boolean
"""
Contract version
"""
	contractVersion: Organizations__ContractVersion!
}

"""
Organization management permissions
"""
enum OrganizationManagementPermission {
	ManageSpecificOrganizations
}

enum OrganizationMode {
	Single
	Multi
	MultiV2
}

"""
Organization permissions
"""
enum OrganizationPermission {
	ExportOrganization
	ChangeOrganizationPermissions
	ChangeIdentityProviders
	CreateRepository
	ManageUsers
	ViewUsage
	ChangeOrganizationSettings
	ChangeIPFilters
	ChangeSessions
	ChangeAllViewOrRepositoryPermissions
	IngestAcrossAllReposWithinOrganization
	DeleteAllRepositories
	DeleteAllViews
	ViewAllInternalNotifications
	ChangeFleetManagement
	ViewFleetManagement
	ChangeTriggersToRunAsOtherUsers
	MonitorQueries
	BlockQueries
	ChangeSecurityPolicies
	ChangeExternalFunctions
	ChangeFieldAliases
	ManageViewConnections
}

"""
An organization search result entry
"""
type OrganizationSearchResultEntry {
"""
The unique id for the Organization
"""
	organizationId: String!
"""
The name of the Organization
"""
	organizationName: String!
"""
The string matching the search
"""
	searchMatch: String!
"""
The id of the entity matched
"""
	entityId: String!
"""
The subscription type of the organization
"""
	subscription: Organizations__Subscription!
"""
The type of the search result match
"""
	type: Organizations__SearchEntryType!
"""
The amount of users in the organization
"""
	userCount: Int!
"""
The amount of repositories and views in the organization
"""
	viewCount: Int!
"""
The total data volume in bytes that the organization is currently using
"""
	byteVolume: Long!
"""
The end date of the trial if applicable
"""
	trialEndDate: Long
"""
The time when the organization was created
"""
	createdAt: Long!
"""
If the organization has been marked for deletion, this indicates the time when the organization was marked.
"""
	deletedAt: Long
"""
The relevant organization for the result
"""
	organization: Organization!
}

"""
An organization search result set
"""
type OrganizationSearchResultSet {
"""
The total number of matching results
"""
	totalResults: Int!
"""
The paginated result set
"""
	results: [OrganizationSearchResultEntry!]!
}

"""
Session configuration for the organization
"""
type OrganizationSession {
"""
The maximum time in ms the user is allowed to be inactive
"""
	maxInactivityPeriod: Long!
"""
The time in ms after which the user is forced to reauthenticate
"""
	forceReauthenticationAfter: Long!
}

"""
Stats of the organization
"""
type OrganizationStats {
"""
Total compressed data volume used by the organization
"""
	dataVolumeCompressed: Long!
"""
Total data volume used by the organization
"""
	dataVolume: Long!
"""
The total daily ingest of the organization
"""
	dailyIngest: Long!
"""
The number of users in the organization
"""
	userCount: Int!
}

enum OrganizationsLinks__SortBy {
	Cid
	OrgId
	Name
}

enum Organizations__ContractVersion {
	Unknown
	Version1
	Version2
}

enum Organizations__MeasurementType {
	SegmentWriteSize
	ProcessedEventsSize
}

enum Organizations__SearchEntryType {
	Organization
	Repository
	View
	User
}

enum Organizations__SortBy {
	UserCount
	Name
	Volume
	ViewCount
	Subscription
	CreatedAt
}

enum Organizations__Subscription {
	Paying
	Trial
	PreTrial
	PostTrial
	UnlimitedPoC
	ClusterOwner
	Complementary
	OnPremMonitor
	MissingTOSAcceptance
	CommunityLocked
	CommunityUnlocked
	Partner
	Internal
	Churned
	Unknown
}

enum Organizations__UseCases {
	Unknown
	IoT
	Security
	Operations
	ApplicationDevelopment
}

"""
A Humio package
"""
type Package2 {
	id: VersionedPackageSpecifier!
	scope: PackageScope!
	name: PackageName!
	version: PackageVersion!
	description: String
	iconUrl: UrlOrData
	author: PackageAuthor!
	contributors: [PackageAuthor!]!
	licenseUrl: URL!
	minHumioVersion: SemanticVersion!
	readme: Markdown
	dashboardTemplates: [DashboardTemplate!]!
	savedQueryTemplates: [SavedQueryTemplate!]!
	parserTemplates: [ParserTemplate!]!
	alertTemplates: [AlertTemplate!]!
	filterAlertTemplates: [FilterAlertTemplate!]!
	aggregateAlertTemplates: [AggregateAlertTemplate!]!
	lookupFileTemplates: [LookupFileTemplate!]!
	actionTemplates: [ActionTemplate!]!
	scheduledSearchTemplates: [ScheduledSearchTemplate!]!
	viewInteractionTemplates: [ViewInteractionTemplate!]!
	type: PackageType!
"""
The available versions of the package on the marketplace.
"""
	versionsOnMarketplace: [RegistryPackageVersionInfo!]!
}

"""
The author of a package.
"""
type PackageAuthor {
	name: String!
	email: Email
}

"""
A package installation.
"""
type PackageInstallation {
	id: VersionedPackageSpecifier!
	installedBy: UserAndTimestamp!
	updatedBy: UserAndTimestamp!
	source: PackageInstallationSourceType!
"""
Finds updates on a package. It also looks for updates on packages that were installed manually, in case e.g. test versions of a package have been distributed prior to the full release.
"""
	availableUpdate: PackageVersion
	package: Package2!
}

enum PackageInstallationSourceType {
	HumioHub
	ZipFile
}

scalar PackageName

"""
Information about a package that matches a search in a package registry.
"""
type PackageRegistrySearchResultItem {
	id: VersionedPackageSpecifier!
	description: String
	iconUrl: UrlOrData
	type: PackageType!
	installedVersion: VersionedPackageSpecifier
"""
True if the current version of LogScale supports the latest version of this package.
"""
	isLatestVersionSupported: Boolean!
"""
The version of LogScale required to run the latest version of this package.
"""
	minHumioVersionOfLatest: SemanticVersion!
}

scalar PackageScope

scalar PackageTag

enum PackageType {
	application
	library
}

scalar PackageVersion

type PageType {
	number: Int!
	totalNumberOfRows: Int!
	total: Int!
}

"""
The specification of a parameter
"""
type ParameterSpecificationOutput {
"""
The name of the parameter
"""
	name: String!
"""
The type of the parameter"
"""
	parameterType: ParameterTypeEnum!
"""
Restricts the smallest allowed value for parameters of type Long
"""
	minLong: Long
"""
Restricts the largest allowed value for parameters of type Long
"""
	maxLong: Long
"""
 Restricts the smallest allowed value for parameters of type Double
"""
	minDouble: Float
"""
Restricts the largest allowed value for parameters of type Double
"""
	maxDouble: Float
"""
Restricts the minimum number of allowed elements for parameters of type Array
"""
	minLength: Int
"""
Defines a default value of the parameter
"""
	defaultValue: [String!]
}

"""
The parameter types
"""
enum ParameterTypeEnum {
	Field
	String
	Long
	Double
	ArrayField
	ArrayString
	ArrayLong
	ArrayDouble
}

"""
Parameter value configuration.
"""
type ParameterValue {
"""
Id of the parameter.
"""
	id: String!
"""
Value of the parameter.
"""
	value: String!
}

"""
A configured parser for incoming data.
"""
type Parser {
"""
The id of the parser.
"""
	id: String!
"""
Name of the parser.
"""
	name: String!
"""
The full name of the parser including package information if part of an application.
"""
	displayName: String!
"""
The description of the parser.
"""
	description: String
	assetType: AssetType!
"""
True if the parser is one of LogScale's built-in parsers.
"""
	isBuiltIn: Boolean!
"""
The parser script that is executed for every incoming event.
"""
	script: String!
"""
The source code of the parser.
"""
	sourceCode: String!
	languageVersion: LanguageVersion!
"""
Fields that are used as tags.
"""
	fieldsToTag: [String!]!
"""
The fields to use as tags.
"""
	tagFields: [String!]!
"""
A list of fields that will be removed from the event before it's parsed. These fields will not be included when calculating usage.
"""
	fieldsToBeRemovedBeforeParsing: [String!]!
"""
A template that can be used to recreate the parser.
"""
	yamlTemplate: YAML!
"""
Saved test data (e.g. log lines) that you can use to test the parser.
"""
	testData: [String!]!
"""
Test cases that can be used to help verify that the parser works as expected.
"""
	testCases: [ParserTestCase!]!
	packageId: VersionedPackageSpecifier
	package: PackageInstallation
}

type ParserTemplate {
	name: String!
	displayName: String!
	yamlTemplate: String!
}

"""
A test case for a parser.
"""
type ParserTestCase {
"""
The event to parse and test on.
"""
	event: ParserTestEvent!
"""
Assertions on the shape of the test case output events. The list consists of key-value pairs to be treated as a map-construct, where the index of the output event is the key, and the assertions are the value.
"""
	outputAssertions: [ParserTestCaseAssertionsForOutput!]!
}

"""
Assertions on the shape of the given output event. It is a key-value pair, where the index of the output event is the key, and the assertions are the value.
"""
type ParserTestCaseAssertionsForOutput {
"""
The index of the output event which the assertions should apply to.
"""
	outputEventIndex: Int!
"""
Assertions on the shape of a given test case output event.
"""
	assertions: ParserTestCaseOutputAssertions!
}

"""
Assertions on the shape of a given test case output event.
"""
type ParserTestCaseOutputAssertions {
"""
Names of fields which should not be present on the output event.
"""
	fieldsNotPresent: [String!]!
"""
Names of fields and their expected value on the output event. These are key-value pairs, and should be treated as a map-construct.
"""
	fieldsHaveValues: [FieldHasValue!]!
}

"""
An event for a parser to parse during testing.
"""
type ParserTestEvent {
"""
The contents of the `@rawstring` field when the event begins parsing.
"""
	rawString: String!
}

"""
A subset of a view
"""
type PartialSearchDomain {
	id: String!
	name: String!
"""
Check if the current user is allowed to perform the given action on the view.
"""
	isActionAllowed(
"""
The action to check if a user is allowed to perform on a view.
"""
		action: ViewAction!
	): Boolean!
}

"""
A pending user. I.e. a user that was invited to join an organization.
"""
type PendingUser {
"""
The id or token for the pending user
"""
	id: String!
"""
Whether IDP is enabled for the organization
"""
	idp: Boolean!
"""
The time the pending user was created
"""
	createdAt: Long!
"""
The email of the user that invited the pending user
"""
	invitedByEmail: String!
"""
The name of the user that invited the pending user
"""
	invitedByName: String!
"""
The name of the organization the the pending user is about to join
"""
	orgName: String!
"""
The email of the pending user
"""
	newUserEmail: String!
"""
The current organization state for the user, if any.
"""
	pendingUserState: PendingUserState!
}

"""
The current organization state for the user.
"""
enum PendingUserState {
	NoOrganization
	SingleUserOrganization
	MultiUserOrganizationOnlyOwnerConflict
	MultiUserOrganizationNoConflict
	UserExistsNoOrganization
	UserExistsDeletedOrganization
}

"""
Permissions on a view
"""
enum Permission {
	ChangeUserAccess
"""
Permission to administer alerts, scheduled searches and actions
"""
	ChangeTriggersAndActions
"""
Permission to administer alerts and scheduled searches
"""
	ChangeTriggers
"""
Permission to administer actions
"""
	ChangeActions
	ChangeDashboards
	ChangeDashboardReadonlyToken
	ChangeFiles
	ChangeInteractions
	ChangeParsers
	ChangeSavedQueries
	ConnectView
	ChangeDataDeletionPermissions
	ChangeRetention
	ChangeDefaultSearchSettings
	ChangeS3ArchivingSettings
	DeleteDataSources
	DeleteRepositoryOrView
	DeleteEvents
	ReadAccess
	ChangeIngestTokens
	ChangePackages
	ChangeViewOrRepositoryDescription
	ChangeConnections
"""
Permission to administer event forwarding rules
"""
	EventForwarding
	QueryDashboard
	ChangeViewOrRepositoryPermissions
	ChangeFdrFeeds
	OrganizationOwnedQueries
	ReadExternalFunctions
	ChangeIngestFeeds
	ChangeScheduledReports
}

"""
The type of permission
"""
enum PermissionType {
	AssetPermission
	ViewPermission
	OrganizationPermission
	OrganizationManagementPermission
	SystemPermission
}

"""
Personal token for a user. The token will inherit the same permissions as the user.
"""
type PersonalUserToken implements Token{
"""
The id of the token.
"""
	id: String!
"""
The name of the token.
"""
	name: String!
"""
The time at which the token expires.
"""
	expireAt: Long
"""
The ip filter on the token.
"""
	ipFilter: String
"""
The ip filter on the token.
"""
	ipFilterV2: IPFilter
"""
The date the token was created.
"""
	createdAt: Long!
}

type Query {
"""
[PREVIEW: Experimental feature, not ready for production.] All actions, labels and packages used in alerts.
"""
	alertFieldValues(
"""
Arguments for alert field values query.
"""
		input: AlertFieldValuesInput!
	): AlertFieldValues!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] Get allowed asset actions for the logged in user on a specific asset
"""
	allowedAssetActions(
"""
Id of the asset
"""
		assetId: String!
"""
Asset type
"""
		assetType: AssetPermissionsAssetType!
"""
The name of the search domain that the asset belongs to
"""
		searchDomainName: String
	): [AssetAction!]!
"""
Analyze a query for certain properties
"""
	analyzeQuery(
		input: AnalyzeQueryArguments!
	): AnalyzeQueryInfo!
"""
Returns information about the IP ASN database used by the LogScale instance.
"""
	asnDatabaseInfo: IpDatabaseInfo!
"""
This fetches the list of blocked query patterns.
"""
	blockedQueries(
"""
Whether to return all blocked queries within the cluster. Requires the ManageCluster permission.
"""
		clusterWide: Boolean
	): [BlockedQuery!]!
"""
This is used to check if a given domain is valid.
"""
	checkDomain(
		domain: String!
	): Boolean!
"""
Validate a local cluster connection.
"""
	checkLocalClusterConnection(
"""
Data for checking a local cluster connection
"""
		input: CheckLocalClusterConnectionInput!
	): LocalClusterConnectionStatus!
"""
Validate a remote cluster connection.
"""
	checkRemoteClusterConnection(
"""
Data for checking a remote cluster connection
"""
		input: CheckRemoteClusterConnectionInput!
	): RemoteClusterConnectionStatus!
"""
[PREVIEW: Feature still in development] Get linked child organizations
"""
	childOrganizations(
		search: String
		skip: Int!
		limit: Int!
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
		sortBy: OrganizationsLinks__SortBy
	): ChildOrganizationsResultSet!
"""
This is used to retrieve information about a cluster.
"""
	cluster: Cluster!
"""
Return the cluster management settings for this LogScale cluster.
"""
	clusterManagementSettings: ClusterManagementSettings
"""
Concatenate multiple valid queries into a combined query.
"""
	concatenateQueries(
		input: ConcatenateQueriesArguments!
	): QueryConcatenationInfo!
"""
This returns the current authenticated user.
"""
	currentUser: User!
"""
This is used to retrieve a dashboard.
"""
	dashboardsPage(
		search: String
		pageNumber: Int!
		pageSize: Int!
	): DashboardPage!
"""
[PREVIEW: Internal debugging] For internal debugging
"""
	debugCache(
		searchKeys: [String!]!
	): String!
"""
This returns the current value for the dynamic configuration.
"""
	dynamicConfig(
		dynamicConfig: DynamicConfig!
	): String!
"""
Returns all dynamic configurations. Requires root access.
"""
	dynamicConfigs: [DynamicConfigKeyValueType!]!
"""
[PREVIEW: Under development] Get next and previous pages when querying assets across LogScale views and repositories. Requires the cursor from the entitiesSearch or entitiesPage response as well as a direction
"""
	entitiesPage(
"""
input parameters for the page
"""
		input: EntitiesPageInputType!
	): SearchResult!
"""
[PREVIEW: Under development] Query assets across LogScale views and repositories. Will only return the first page. The response includes a cursor that can be sent to entitiesPage to get next pages with the same parameters
"""
	entitiesSearch(
"""
input parameters for the search
"""
		input: EntitySearchInputType!
	): SearchResult!
"""
Get usage information around non-secret environment variables
"""
	environmentVariableUsage: [EnvironmentVariableUsage!]!
"""
This will list all of the event forwarders associated with an organization.
"""
	eventForwarders: [EventForwarder!]!
"""
This is used to determine if a given user has exceeded their query quota.
"""
	exceededQueryQuotas(
"""
Username of the user for which to retrieve exceeded Query Quotas
"""
		username: String!
	): [QueryQuotaExceeded!]!
"""
[PREVIEW: All flags should be considered as beta features. Enabling features that are marked as experimental is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.] List feature flags depending on filters and context
"""
	featureFlags(
"""
Include experimental features. Enabling experimental features are strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.
"""
		includeExperimentalFeatures: Boolean
"""
Filter defining for which scope feature flags should be returned
"""
		enabledInScopeFilter: EnabledInScope
	): [FeatureFlagV2!]!
"""
This can fetch the OIDC metadata from the discovery (.well-known/openid-configuration) endpoint provided.
"""
	fetchOIDCMetadataFromDiscoveryEndpoint(
"""
The .well-known OIDC endpoint.
"""
		discoveryEndpoint: String!
	): WellKnownEndpointDetails!
"""
This will fetch the SAML metadata from the discovery endpoint provided.
"""
	fetchSamlMetadataFromDiscoveryEndpoint(
"""
The SAML metadata endpoint.
"""
		discoveryEndpoint: String!
	): SamlMetadata!
"""
[PREVIEW: This functionality is still under development and can change without warning.] Retrieve the active schema and its field aliases on the given view.
"""
	fieldAliasSchemaOnView(
		repoOrViewName: String!
	): FieldAliasSchema
"""
[PREVIEW: This functionality is still under development and can change without warning.] Retrieve all schemas for field aliases
"""
	fieldAliasSchemas: FieldAliasSchemasInfo!
"""
This will find information on the identity provider.
"""
	findIdentityProvider(
		email: String!
	): IdentityProviderAuth!
"""
[PREVIEW: Under development.] 
"""
	fleetInstallationToken(
		id: String!
	): FleetInstallationToken
"""
[PREVIEW: Under development.] 
"""
	fleetInstallationTokens: [FleetInstallationToken!]!
"""
Return the Java Flight Recorder settings for the specified vhost.
"""
	flightRecorderSettings(
"""
The vhost to fetch settings for.
"""
		vhost: Int!
	): FlightRecorderSettings
"""
Generate an unsaved aggregate alert from a package alert template.
"""
	generateAggregateAlertFromPackageTemplate(
"""
Data for generating an unsaved aggregate alert object from a library package template
"""
		input: GenerateAggregateAlertFromPackageTemplateInput!
	): UnsavedAggregateAlert!
"""
Generate an unsaved aggregate alert from a yaml template.
"""
	generateAggregateAlertFromTemplate(
"""
Data for generating an unsaved aggregate alert object from a yaml template
"""
		input: GenerateAggregateAlertFromTemplateInput!
	): UnsavedAggregateAlert!
"""
Generate an unsaved alert from a package alert template.
"""
	generateAlertFromPackageTemplate(
"""
Data for generating an unsaved alert object from a library package template
"""
		input: GenerateAlertFromPackageTemplateInput!
	): UnsavedAlert!
"""
Generate an unsaved alert from a yaml template.
"""
	generateAlertFromTemplate(
"""
Data for generating an unsaved alert object from a yaml template
"""
		input: GenerateAlertFromTemplateInput!
	): UnsavedAlert!
"""
Generate an unsaved filter alert from a package alert template.
"""
	generateFilterAlertFromPackageTemplate(
"""
Data for generating an unsaved filter alert object from a library package template
"""
		input: GenerateFilterAlertFromPackageTemplateInput!
	): UnsavedFilterAlert!
"""
Generate an unsaved filter alert from a yaml template.
"""
	generateFilterAlertFromTemplate(
"""
Data for generating an unsaved filter alert object from a yaml template
"""
		input: GenerateFilterAlertFromTemplateInput!
	): UnsavedFilterAlert!
"""
Generate an unsaved parser from a YAML template.
"""
	generateParserFromTemplate(
"""
Data for generating an unsaved parser object from a YAML template
"""
		input: GenerateParserFromTemplateInput!
	): UnsavedParser!
"""
Generate an unsaved scheduled search from a package scheduled search template.
"""
	generateScheduledSearchFromPackageTemplate(
"""
Data for generating an unsaved scheduled search object from a library package template.
"""
		input: GenerateScheduledSearchFromPackageTemplateInput!
	): UnsavedScheduledSearch!
"""
Generate an unsaved scheduled search from a yaml template.
"""
	generateScheduledSearchFromTemplate(
"""
Data for generating an unsaved scheduled search object from a yaml templat.
"""
		input: GenerateScheduledSearchFromTemplateInput!
	): UnsavedScheduledSearch!
"""
[PREVIEW: Experimental prototype not ready for production use] Look up an external function specification.
"""
	getExternalFunction(
		input: GetExternalFunctionInput!
	): ExternalFunctionSpecificationOutput
"""
This is used to get content of a file.
"""
	getFileContent(
		name: String!
		fileName: String!
		offset: Int
		limit: Int
		filterString: String
	): UploadedFileSnapshot!
"""
[PREVIEW: Under development.] 
"""
	getLogCollectorDebugLogging: LogCollectorDebugLogging
"""
[PREVIEW: Under development.] 
"""
	getLogCollectorDetails(
		machineId: String!
	): LogCollectorDetails!
"""
[PREVIEW: Under development.] 
"""
	getLogCollectorInstanceDebugLogging(
		id: String!
	): LogCollectorDebugLogging
"""
[PREVIEW: Under development.] 
"""
	getLostCollectorDays: Int!
"""
Used to get information on a specified group.
"""
	group(
		groupId: String!
	): Group!
"""
Used to get information on groups by a given display name.
"""
	groupByDisplayName(
		displayName: String!
	): Group!
"""
All defined groups in an organization.
"""
	groupsPage(
		search: String
		pageNumber: Int!
		pageSize: Int!
		typeFilter: [PermissionType!]
	): GroupPage!
"""
This will check whether an organization has an organization root.
"""
	hasOrgRoot(
		orgId: String!
	): Boolean!
"""
This is used to get information on a specific identity provider.
"""
	identityProvider(
		id: String!
	): IdentityProviderAuthentication!
	identityProviders: [IdentityProviderAuthentication!]!
"""
This returns information about the license for the LogScale instance, if any license installed.
"""
	installedLicense: License
"""
Provides details for a specific package installed on a specific view.
"""
	installedPackage(
"""
The id of the package.
"""
		packageId: VersionedPackageSpecifier!
"""
The name of the view the package is installed in.
"""
		viewName: String!
	): PackageInstallation
"""
Used to get information on the IOC database used by the LogScale instance.
"""
	iocDatabaseInfo: CrowdStrikeIocStatus!
"""
This returns information about the IP location database used by the LogScale instance.
"""
	ipDatabaseInfo: IpDatabaseInfo!
"""
Returns a list of IP filters.
"""
	ipFilters: [IPFilter!]!
"""
This will return information about the Kafka cluster.
"""
	kafkaCluster: KafkaClusterDescription!
"""
[PREVIEW: Internal testing.] Used to get language restrictions for language version.
"""
	languageRestrictions(
		version: LanguageVersionEnum!
	): QueryLanguageRestriction!
"""
Used to list all notifications currently set in the system. This requires root access.
"""
	listNotifications: [Notification!]!
"""
[PREVIEW: Under development.] 
"""
	logCollectorConfiguration(
		id: String!
	): LogCollectorConfiguration!
"""
List available Log Collector installers.
"""
	logCollectorInstallers: [LogCollectorInstaller!]
"""
[PREVIEW: Under development.] 
"""
	logCollectorMergedConfiguration(
		configIds: [String!]!
	): LogCollectorMergedConfiguration!
"""
List versions available through Remote Update for the LogScale Collector
"""
	logCollectorVersionsAvailable: [String!]!
	loginBridgeRequest: LoginBridgeRequest!
	marketplace: Marketplace!
"""
This will return information about the LogScale instance
"""
	meta(
		url: String
	): HumioMetadata!
	oidcIdentityProvider(
		id: String!
	): OidcIdentityProvider!
"""
Get the current organization
"""
	organization: Organization!
"""
Get a pending user.
"""
	pendingUser(
		token: String!
	): PendingUser!
"""
Get a pending user.
"""
	pendingUsers(
		search: String
	): [PendingUser!]!
"""
Proxy query through a specific organization. Root operation.
"""
	proxyOrganization(
		organizationId: String!
	): Query!
"""
[PREVIEW: Internal testing.] 
"""
	queryAnalysis(
		queryString: String!
		languageVersion: LanguageVersionEnum!
		isLive: Boolean!
		viewName: String
	): queryAnalysis!
"""
[PREVIEW: in development.] Return the query assistance for the given search, as well as the assistant version.
"""
	queryAssistance(
"""
The search to assist with
"""
		search: String!
"""
Enable to remap often used fields to their LogScale equivalents
"""
		remapFields: Boolean!
	): QueryAssistantResult!
	queryQuotaDefaultSettings: [QueryQuotaIntervalSetting!]!
	queryQuotaUsage(
"""
Username of the user for which to retrieve status of Query Quotas
"""
		username: String!
	): [QueryQuotaUsage!]!
	queryQuotaUserSettings(
"""
If omitted, returns the Query Quota Settings for all users. If provided, returns the Query Quota Settings for that particular user.
"""
		username: String
	): [QueryQuotaUserSettings!]!
"""
Query search domains with organization filter
"""
	querySearchDomains(
"""
Filter results based on this string
"""
		searchFilter: String
"""
Choose to filter based on type of search domain
"""
		typeFilter: SearchDomainTypes!
		sortBy: Searchdomain__SortBy!
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
"""
Filter for deleted search domains. True will return deleted search domains and exclude regular search domains and requires that you have some permission that grants you access to delete search domains. False or nothing will return search domains that has not yet been deleted.
"""
		deleted: Boolean
		includeHidden: Boolean
"""
Filter results by name of connected limit. Search domains without a limit will be excluded
"""
		limitName: String
	): SearchDomainSearchResultSet!
"""
Fetch the list of active event redaction jobs.
"""
	redactEvents(
"""
The name of the repository to fetch pending event redactions for.
"""
		repositoryName: String!
	): [DeleteEvents!]!
	repositories(
"""
Include sandboxes for other users in the results set
"""
		includeSandboxes: Boolean
		includeHidden: Boolean
	): [Repository!]!
"""
Lookup a given repository by name.
"""
	repository(
"""
The name of the repository
"""
		name: String!
		includeHidden: Boolean
	): Repository!
"""
A given role.
"""
	role(
		roleId: String!
	): Role!
"""
All defined roles.
"""
	roles: [Role!]!
"""
All defined roles in org.
"""
	rolesInOrgForChangingUserAccess(
		searchDomainId: String!
	): [Role!]!
"""
Searchable paginated roles
"""
	rolesPage(
		search: String
		pageNumber: Int!
		pageSize: Int!
		typeFilter: [PermissionType!]
		includeHidden: Boolean
	): RolePage!
"""
Returns running queries.
"""
	runningQueries(
"""
Search term that is used to filter running queries based on query input
"""
		searchTerm: String
"""
Which field to use when sorting
"""
		sortField: SortField
		sortOrder: SortOrder
"""
Whether to return global results. Default=false. True requires system level access.
"""
		global: Boolean
	): RunningQueries!
	samlIdentityProvider(
		id: String!
	): SamlIdentityProvider!
	savedQuery(
		id: String!
	): SavedQuery!
"""
Get scheduled report information using a scheduled report access token.
"""
	scheduledReport: LimitedScheduledReport!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] Search asset permissions assigned to groups and/or users
"""
	searchAssetPermissions(
"""
Id of the asset
"""
		assetId: String!
"""
Asset type
"""
		assetType: AssetPermissionsAssetType!
"""
The name of the search domain to search within
"""
		searchDomainName: String
"""
Filter results based on this string
"""
		searchFilter: String
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
"""
List of user ids to limit the search to
"""
		userIds: [String!]
"""
List of group ids to limit the search to
"""
		groupIds: [String!]
	): AssetPermissionSearchResultSet!
	searchDomain(
		name: String!
	): SearchDomain!
	searchDomains(
		includeHidden: Boolean
	): [SearchDomain!]!
"""
Paged searchDomains.
"""
	searchDomainsPage(
		search: String
		includeHidden: Boolean
		pageNumber: Int!
		pageSize: Int!
	): SearchDomainPage!
"""
[PREVIEW: Under development.] Get paginated search results.
"""
	searchFleet(
		isLiveFilter: Boolean
		groupIdsFilter: [String!]
		changeFilter: Changes
		groupFilter: GroupFilter
		queryState: String
		inactiveFilter: Boolean
		statusFilter: SearchFleetStatusFilter
		testConfigIdFilter: String
		configIdFilter: String
"""
Filter results based on this string
"""
		searchFilter: String
		sortBy: Fleet__SortBy
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
	): SearchFleetUnion!
"""
[PREVIEW: Under development.] 
"""
	searchFleetInstallationTokens(
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
		sortBy: FleetInstallationTokens__SortBy
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
	): SearchFleetInstallationTokenResultSet!
"""
[PREVIEW: Under development.] Search log collector configurations.
"""
	searchLogCollectorConfigurations(
"""
Filter results based on this string
"""
		searchFilter: String
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
		sortBy: FleetConfiguration__SortBy
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
	): SearchLogCollectorConfigurationResultSet!
"""
[PREVIEW: Under development.] Search log collector configurations.
"""
	searchLogCollectorGroups(
"""
Filter results based on this string
"""
		searchFilter: String
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
		sortBy: FleetGroups__SortBy
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
	): SearchLogCollectorGroupsResultSet!
"""
Get paginated search results. (Root operation)
"""
	searchOrganizations(
"""
Filter results based on this string
"""
		searchFilter: String
		sortBy: Organizations__SortBy!
		typeFilter: [Organizations__SearchEntryType!]
		subscriptionFilter: [Organizations__Subscription!]
		includeDeletedFilter: Boolean
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
	): OrganizationSearchResultSet!
"""
[PREVIEW: Part of the ScheduledReports feature under development] Check the status for a specific typed service.
"""
	serviceStatus(
"""
The service type name of the service to get status for.
"""
		serviceType: String!
	): HealthStatus!
"""
[PREVIEW: Part of the ScheduledReports feature under development] Metadata from all registered services
"""
	servicesMetadata: [ServiceMetadata!]!
"""
Paginated search results for tokens
"""
	sessions(
"""
Filter results based on this string
"""
		searchFilter: String
		level: Sessions__Filter_Level
		sortBy: Sessions__SortBy
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
		onlyActiveSessions: Boolean
	): SessionQueryResultSet!
"""
Gets a shared dashboard by it's shared link token.
"""
	sharedDashboards(
		token: String!
	): SharedDashboard!
	starredDashboards: [Dashboard!]!
"""
[PREVIEW: Under development.] Token for fleet management.
"""
	tokenForFleetManagement: String!
"""
Paginated search results for tokens
"""
	tokens(
"""
Filter results based on this string
"""
		searchFilter: String
		typeFilter: [Tokens__Type!]
		parentEntityIdFilter: [String!]
		sortBy: Tokens__SortBy!
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
	): TokenQueryResultSet!
"""
[PREVIEW: BETA feature.] 
"""
	usage: UsageStats!
"""
A user in the system.
"""
	user(
		id: String!
	): User
"""
Requires manage cluster permission; Returns all users in the system.
"""
	users(
		orderBy: OrderByUserFieldInput
		search: String
	): [User!]!
	usersAndGroupsForChangingUserAccess(
		search: String
		searchDomainId: String!
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
	): UsersAndGroupsSearchResultSet!
"""
Requires either root access, org owner access or permission to manage users in at least one repository or view. Returns a page of all users in an organization.
"""
	usersPage(
		orderBy: OrderByUserFieldInput
		search: String
		pageNumber: Int!
		pageSize: Int!
	): UsersPage!
"""
Return users without organizations
"""
	usersWithoutOrganizations: [User!]!
"""
Validate the Access Token
"""
	validateAccessToken(
		accessToken: String!
	): String!
"""
Validate the Access Token
"""
	validateAccessTokenV2(
		accessToken: String!
	): AccessTokenValidatorResultType!
"""
[PREVIEW: Internal testing.] Check that a query compiles.
"""
	validateQuery(
		queryString: String!
		version: LanguageVersionEnum!
		isLive: Boolean
		arguments: [QueryArgument!]
	): QueryValidationResult!
"""
Validate the JWT Token
"""
	validateToken(
		jwtToken: String!
	): Boolean!
"""
The currently authenticated user's account.
"""
	viewer: Account!
"""
The currently authenticated user's account if any.
"""
	viewerOpt: Account
"""
[PREVIEW: Internal debugging tool, do not use without explicit instruction from support] Get the list of keys being used to select queries for tracing on workers.
"""
	workerQueryTracingState: WorkerQueryTracingState!
}

"""
An argument to a query
"""
input QueryArgument {
"""
An argument to a query
"""
	name: String!
"""
An argument to a query
"""
	value: String!
}

"""
An argument for a query.
"""
input QueryArgumentInputType {
"""
An argument for a query.
"""
	name: String!
"""
An argument for a query.
"""
	value: String!
}

"""
Either a successful assistance result, or an error
"""
union QueryAssistantAssistance =QueryAssistantSuccess | QueryAssistantError

type QueryAssistantDiagnostic {
	message: QueryAssistantDiagnosticMessage!
	position: QueryAssistantDiagnosticPosition
	severity: QueryAssistantDiagnosticSeverity!
}

type QueryAssistantDiagnosticMessage {
	what: String!
	terse: String!
	code: String!
}

type QueryAssistantDiagnosticPosition {
	column: Int!
	line: Int!
	beginOffset: Int!
	endOffset: Int!
	longString: String!
}

enum QueryAssistantDiagnosticSeverity {
	Hint
	Information
	Warning
	Error
}

type QueryAssistantError {
	error: String!
}

"""
An assistance result and a version of the query assistant
"""
type QueryAssistantResult {
"""
The assistant version.
"""
	version: String!
"""
The query assistance for the given search.
"""
	assistance: QueryAssistantAssistance!
}

type QueryAssistantSuccess {
	result: String!
	diagnostics: [QueryAssistantDiagnostic!]!
}

"""
An interaction for a query based widget
"""
type QueryBasedWidgetInteraction {
	name: String!
	titleTemplate: String
	conditions: [WidgetInteractionCondition!]!
	typeInfo: QueryBasedWidgetInteractionTypeInfo!
}

union QueryBasedWidgetInteractionTypeInfo =DashboardLinkInteraction | CustomLinkInteraction | SearchLinkInteraction | UpdateParametersInteraction

"""
Result of concatenating queries.
"""
type QueryConcatenationInfo {
	concatenatedQuery: String!
	validationResult: QueryValidationInfo!
}

"""
A diagnostic message from query validation.
"""
type QueryDiagnostic {
"""
[PREVIEW: Internal testing.] 
"""
	message: String!
"""
[PREVIEW: Internal testing.] 
"""
	code: String!
"""
[PREVIEW: Internal testing.] 
"""
	severity: Severity!
}

"""
Diagnostic information for a query.
"""
type QueryDiagnosticInfoOutputType {
"""
The diagnostic message.
"""
	message: String!
"""
The code for the diagnostic.
"""
	code: String!
"""
The severity of the diagnostic.
"""
	severity: String!
}

type QueryInProgress {
	queryId: String!
}

"""
Language restrictions for language version.
"""
type QueryLanguageRestriction {
	version: LanguageVersion!
	allowedFunctions: [String!]!
	enabled: Boolean!
}

"""
Query ownership
"""
interface QueryOwnership {
"""
Query ownership
"""
	id: String!
}

type QueryPrefixes {
	viewId: String!
	queryPrefix: String!
}

type QueryQuotaExceeded {
	kind: QueryQuotaMeasurementKind!
	resetsAt: Long!
}

enum QueryQuotaInterval {
	PerDay
	PerHour
	PerTenMinutes
	PerMinute
}

type QueryQuotaIntervalSetting {
	interval: QueryQuotaInterval!
	measurementKind: QueryQuotaMeasurementKind!
	value: Long
	valueKind: QueryQuotaIntervalSettingKind!
	source: QueryQuotaIntervalSettingSource!
}

enum QueryQuotaIntervalSettingKind {
	Limitless
	Limited
}

enum QueryQuotaIntervalSettingSource {
	Default
	UserSpecified
}

enum QueryQuotaMeasurementKind {
	StaticCost
	LiveCost
	QueryCount
}

type QueryQuotaUsage {
	interval: QueryQuotaInterval!
	queryCount: Int!
	staticCost: Long!
	liveCost: Long!
}

"""
Query Quota Settings for a particular user
"""
type QueryQuotaUserSettings {
"""
Username of the user for which these Query Quota Settings apply
"""
	username: String!
"""
List of the settings that apply
"""
	settings: [QueryQuotaIntervalSetting!]!
}

"""
Timestamp type to use for a query.
"""
enum QueryTimestampType {
"""
Use @timestamp for the query.
"""
	EventTimestamp
"""
Use @ingesttimestamp for the query.
"""
	IngestTimestamp
}

"""
Result of query validation.
"""
type QueryValidationInfo {
	isValid: Boolean!
	diagnostics: [QueryDiagnosticInfoOutputType!]!
}

"""
Result of validating a query.
"""
type QueryValidationResult {
"""
[PREVIEW: Internal testing.] 
"""
	isValid: Boolean!
"""
[PREVIEW: Internal testing.] 
"""
	diagnostics: [QueryDiagnostic!]!
}

type RealTimeDashboardUpdateFrequency {
	name: String!
}

"""
A map from reasons why a node might not be able to be unregistered safely, to the boolean value indicating whether a given reason applies to this node. For a node to be unregistered without any undue disruption, none of the reasons must apply.
"""
type ReasonsNodeCannotBeSafelyUnregistered {
	isAlive: Boolean!
	leadsDigest: Boolean!
	hasUnderReplicatedData: Boolean!
	hasDataThatExistsOnlyOnThisNode: Boolean!
}

type RecentQuery {
	languageVersion: LanguageVersion!
	query: HumioQuery!
	runAt: DateTime!
	widgetType: String
	widgetOptions: JSON
}

"""
Information about regions
"""
type RegionSelectData {
	name: String!
	url: String!
	iconUrl: String!
}

"""
Info about a version of a LogScale Package.
"""
type RegistryPackageVersionInfo {
"""
The package version
"""
	version: SemanticVersion!
"""
The minimum version of LogScale required to run the package.
"""
	minHumioVersion: SemanticVersion!
}

"""
The status of a remote cluster connection.
"""
type RemoteClusterConnectionStatus implements ClusterConnectionStatus{
"""
Name of the remote view
"""
	remoteViewName: String
"""
Software version of the remote view
"""
	remoteServerVersion: String
"""
Oldest server version that is protocol compatible with the remote server
"""
	remoteServerCompatVersion: String
"""
Id of the connection
"""
	id: String
"""
Whether the connection is valid
"""
	isValid: Boolean!
"""
Errors if the connection is invalid
"""
	errorMessages: [ConnectionAspectErrorType!]!
}

scalar RepoOrViewName

type RepositoriesUsageQueryResult {
"""
The total number of matching results
"""
	totalResults: Int!
"""
The paginated result set
"""
	results: [RepositoryUsageValue!]!
}

"""
Query result for repositories usage data
"""
union RepositoriesUsageQueryResultTypes =QueryInProgress | RepositoriesUsageQueryResult

enum RepositoriesUsageQuerySortBy {
	Name
	UsageValue
}

"""
A repository stores ingested data, configures parsers and data retention policies.
"""
type Repository implements SearchDomain{
"""
Repo Types are used for tracking trial status in LogScale Cloud setups.
"""
	type: RepositoryType!
"""
Repo data types are used for controlling the types of data are allowed in the repository.
"""
	dataType: RepositoryDataType!
"""
The limit attached to the repository.
"""
	limit: LimitV2
"""
The date and time in the future after which ingest for this repository will be re-enabled.
"""
	ingestBlock: DateTime
"""
Usage tag, used to group usage summary on repositories
"""
	usageTag: String
"""
Data sources where data is ingested from. E.g. This can be specific log files or services sending data to LogScale.
"""
	datasources: [Datasource!]!
"""
Total size the data. Size is measured as the size stored before compression and is thus the size of the internal format, not the data that was ingested.
"""
	uncompressedByteSize: Long!
"""
Total size of data. Size is measured as the size after compression.
"""
	compressedByteSize: Long!
"""
Total size the data, merged parts. Size is measured as the size stored before compression and is thus the size of the internal format, not the data that was ingested.
"""
	uncompressedByteSizeOfMerged: Long!
"""
Total size of data, merged parts. Size is measured as the size after compression.
"""
	compressedByteSizeOfMerged: Long!
"""
The timestamp of the latest ingested data, or null if the repository is empty.
"""
	timeOfLatestIngest: DateTime
"""
The maximum time (in days) to keep data. Data old than this will be deleted.
"""
	timeBasedRetention: Float
"""
Retention (in Gigabytes) based on the size of data when it arrives to LogScale, that is before parsing and compression. LogScale will keep `at most` this amount of data.
"""
	ingestSizeBasedRetention: Float
	ingestTokens: [IngestToken!]!
"""
Retention (in Gigabytes) based on the size of data when in storage, that is, after parsing and compression. LogScale will keep `at least` this amount of data, but as close to this number as possible.
"""
	storageSizeBasedRetention: Float
"""
Sets time (in days) to keep backups before they are deleted.
"""
	timeBasedBackupRetention: Float
"""
The ingest listeners configured for this repository.
"""
	ingestListeners: [IngestListener!]!
"""
Maximum number of auto shards created.
"""
	maxAutoShardCount: Int
"""
Configuration for S3 archiving. E.g. bucket name and region.
"""
	s3ArchivingConfiguration: S3Configuration
"""
[PREVIEW: Cache policies are a limited feature and is subject to change] The cache policy set on this repo.
"""
	cachePolicy: CachePolicy
"""
[PREVIEW: Cache policies are a limited feature and is subject to change] The cache policy of this repo that as will be applied.

This will apply the cache policy of the repo, org-wide default, or global
default. This will be (in order of precedence):
 1. The repo cache policy, if set.
 2. The organization-wide cache policy, if set.
 3. The global cache policy, if set.
 4. The default cache policy in which no segments are prioritized.

"""
	effectiveCachePolicy: CachePolicy!
"""
Tag grouping rules applied on the repository currently. Rules only apply to the tags they denote, and tags without rules do not have any grouping.
"""
	currentTagGroupings: [TagGroupingRule!]!
"""
The AWS External ID used when assuming roles in AWS on behalf of this repository.
"""
	awsExternalId: String!
"""
The event forwarding rules configured for the repository
"""
	eventForwardingRules: [EventForwardingRule!]!
"""
List event forwarders in the organization with only basic information
"""
	eventForwardersForSelection: [EventForwarderForSelection!]!
"""
A saved FDR feed.
"""
	fdrFeed(
"""
The id of the FDR feed to get.
"""
		id: String!
	): FdrFeed!
"""
Saved FDR Feeds
"""
	fdrFeeds: [FdrFeed!]!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] Administrator control for an FDR feed.
"""
	fdrFeedControl(
"""
The id of the FDR feed to get administrator control for.
"""
		id: String!
	): FdrFeedControl!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] Administrator controls for FDR feeds
"""
	fdrFeedControls: [FdrFeedControl!]!
"""
[PREVIEW: Experimental feature, not ready for production.] A saved Ingest feed.
"""
	ingestFeed(
"""
The id of the IngestFeed to get.
"""
		id: String!
	): IngestFeed!
"""
[PREVIEW: Experimental feature, not ready for production.] Saved ingest feeds
"""
	ingestFeeds(
"""
Filter results based on this string
"""
		searchFilter: String
"""
Type of ingest feed to filter
"""
		typeFilter: [IngestFeeds__Type!]
"""
Field which to sort the ingest feeds by
"""
		sortBy: IngestFeeds__SortBy!
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
	): IngestFeedQueryResultSet!
"""
A parser on the repository.
"""
	parser(
		id: String
"""
[DEPRECATED: Please use `id` instead. Will be removed in version 1.136]
"""
		name: String
	): Parser
"""
Saved parsers.
"""
	parsers: [Parser!]!
	id: String!
	name: RepoOrViewName!
	description: String
"""
The point in time the search domain was marked for deletion.
"""
	deletedDate: Long
"""
The point in time the search domain will not be restorable anymore.
"""
	permanentlyDeletedAt: Long
	isStarred: Boolean!
"""
Search limit in milliseconds, which searches should are limited to.
"""
	searchLimitedMs: Long
"""
Repositories not part of the search limitation.
"""
	reposExcludedInSearchLimit: [String!]!
"""
Returns a specific version of a package given a package version.
"""
	packageV2(
"""
The package id of the package to get.
"""
		packageId: VersionedPackageSpecifier!
	): Package2!
"""
[PREVIEW: This may be moved to the Package2 object.] The available versions of a package.
"""
	packageVersions(
		packageId: UnversionedPackageSpecifier!
	): [RegistryPackageVersionInfo!]!
"""
Returns a list of available packages that can be installed.
"""
	availablePackages(
"""
Filter input to limit the returned packages
"""
		filter: String
"""
Packages with any of these tags will be included. No filtering on tags.
"""
		tags: [PackageTag!]
"""
Packages with any of these categories will be included.
"""
		categories: [String!]
	): [PackageRegistrySearchResultItem!]!
"""
List packages installed on a specific view or repo.
"""
	installedPackages: [PackageInstallation!]!
	hasPackageInstalled(
		packageId: VersionedPackageSpecifier!
	): Boolean!
"""
Users who has access.
"""
	users: [User!]!
"""
Users or groups who has access.
"""
	usersAndGroups(
		search: String
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
	): UsersAndGroupsSearchResultSet!
"""
[PREVIEW] Search users with a given permission
"""
	usersV2(
"""
Search for a user whose email or name matches this search string
"""
		search: String
"""
Permission that the users must have on the search domain. Leave out to get users with any permission on the view
"""
		permissionFilter: Permission
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
	): Users!
"""
Groups with assigned roles.
"""
	groups: [Group!]!
	starredFields: [String!]!
	recentQueriesV2: [RecentQuery!]!
	automaticSearch: Boolean!
"""
Check if the current user is allowed to perform the given action on the view.
"""
	isActionAllowed(
"""
The action to check if a user is allowed to perform on a view.
"""
		action: ViewAction!
	): Boolean!
"""
Returns the all actions the user is allowed to perform on the view.
"""
	allowedViewActions: [ViewAction!]!
"""
The query prefix prepended to each search in this domain.
"""
	viewerQueryPrefix: String!
"""
All tags from all datasources.
"""
	tags: [String!]!
"""
All interactions defined on the view.
"""
	interactions: [ViewInteraction!]!
"""
A saved alert
"""
	alert(
		id: String!
	): Alert!
"""
Saved alerts.
"""
	alerts: [Alert!]!
"""
A saved dashboard.
"""
	dashboard(
		id: String!
	): Dashboard!
"""
All dashboards available on the view.
"""
	dashboards: [Dashboard!]!
"""
A saved filter alert
"""
	filterAlert(
		id: String!
	): FilterAlert!
"""
Saved filter alerts.
"""
	filterAlerts: [FilterAlert!]!
"""
A saved aggregate alert
"""
	aggregateAlert(
		id: String!
	): AggregateAlert!
"""
Saved aggregate alerts.
"""
	aggregateAlerts: [AggregateAlert!]!
"""
A saved scheduled search.
"""
	scheduledSearch(
"""
The id of the scheduled search to get.
"""
		id: String!
	): ScheduledSearch!
"""
Saved scheduled searches.
"""
	scheduledSearches: [ScheduledSearch!]!
"""
A saved action.
"""
	action(
"""
The id of the action to get.
"""
		id: String!
	): Action!
"""
A list of saved actions.
"""
	actions: [Action!]!
"""
A saved query.
"""
	savedQuery(
		id: String!
	): SavedQuery!
"""
Saved queries.
"""
	savedQueries: [SavedQuery!]!
	defaultQuery: SavedQuery
	files: [File!]!
	fileFieldSearch(
"""
Name of the csv or json file to retrieve the field entries from.
"""
		fileName: String!
"""
Name of the field in the file to return entries from.
"""
		fieldName: String!
"""
Text to filter values by prefix on.
"""
		prefixFilter: String
"""
The exact values that given fields should have for an entry to be part of the result.
"""
		valueFilters: [FileFieldFilterType!]!
"""
Names of the fields to include in the result.
"""
		fieldsToInclude: [String!]!
"""
Maximum number of values to retrieve from the file.
"""
		maxEntries: Int!
	): [[DictionaryEntryType!]!]!
"""
Saved scheduled reports.
"""
	scheduledReports: [ScheduledReport!]!
"""
Saved scheduled report.
"""
	scheduledReport(
"""
The id of the scheduled report to get.
"""
		id: String!
	): ScheduledReport
}

"""
The data type of a repository. Indicates which type of data the repository is restricted to - e.g. 'Falcon' for repository intended for Falcon data
"""
enum RepositoryDataType {
	FALCON
	ANYDATA
}

"""
The repository type of a repository
"""
enum RepositoryType {
	PERSONAL
	TRIAL
	DEFAULT
	SYSTEM
	MANAGED
}

type RepositoryUsageValue {
	name: String
	valueBytes: Long!
	percentage: Float!
	id: String!
}

type Role {
	id: String!
	displayName: String!
	color: String
	description: String
	viewPermissions: [Permission!]!
	systemPermissions: [SystemPermission!]!
	organizationPermissions: [OrganizationPermission!]!
	organizationManagementPermissions: [OrganizationManagementPermission!]!
	groupsCount: Int!
	usersCount: Int!
	users: [User!]!
	groupsV2(
		search: String
		userId: String
		searchInRoles: Boolean
		onlyIncludeGroupsWithRestrictiveQueryPrefix: Boolean
"""
The amount of results to return.
"""
		limit: Int
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
	): GroupResultSetType!
	groups: [Group!]!
}

"""
A page of roles.
"""
type RolePage {
	pageInfo: PageType!
	page: [Role!]!
}

"""
The roles query result set.
"""
type RolesResultSetType {
"""
The total number of matching results
"""
	totalResults: Int!
"""
The paginated result set
"""
	results: [Role!]!
}

"""
Queries that are currently being executed
"""
type RunningQueries {
"""
Number of milliseconds until next update is available
"""
	updateAvailableIn: Long!
"""
Total number of queries being executed
"""
	totalNumberOfQueries: Int!
"""
Total number of live queries being executed
"""
	totalNumberOfLiveQueries: Int!
"""
Total number of clients querying
"""
	totalNumberOfClients: Int!
"""
Total size of skipped bytes for all queries being executed
"""
	totalSkippedBytes: Long!
"""
Total size of included bytes for all queries being executed
"""
	totalIncludedBytes: Long!
"""
Total size of remaining bytes to be processed for all queries being executed
"""
	totalQueuedBytes: Long!
"""
Queries being executed, at most 1000 queries are returned.
"""
	queries: [RunningQuery!]!
}

"""
A query that is currently being executed.
"""
type RunningQuery {
	id: String!
	clients: [Client!]!
	initiatedBy: String
	isLive: Boolean!
	isHistoricDone: Boolean!
	queryInput: String!
	queryPrefix: String!
	coordinatorId: String!
	totalWork: Int!
	workDone: Int!
	view: String!
"""
The organization owning the query, if any.
"""
	organization: Organization
	timeInMillis: Long!
	timeQueuedInMillis: Long!
	isDashboard: Boolean!
	estimatedTotalBytes: Long!
	skippedBytes: Long!
	includedBytes: Long!
	processedEvents: Long!
"""
Static CPU time spent since query started
"""
	mapMillis: Float!
"""
Static CPU time spent the last 30 seconds
"""
	deltaMapMillis: Float!
"""
Live CPU time spent since query started
"""
	liveMillis: Float!
"""
Live CPU time spent the last 30 seconds
"""
	deltaLiveMillis: Float!
	mapAllocations: Long!
	liveAllocations: Long!
	reduceAllocations: Long!
	totalAllocations: Long!
	deltaTotalAllocations: Long!
	timeInterval: String!
	timeZoneOffSetMinutes: Int!
	queryArgs: String!
	status: String!
"""
Total cost calculation.
"""
	totalCost: Float!
"""
Live cost calculation
"""
	liveCost: Float!
"""
Static cost calculation
"""
	staticCost: Float!
"""
Total cost calculation last 30 seconds.
"""
	deltaTotalCost: Float!
"""
Live cost calculation last 30 seconds.
"""
	deltaLiveCost: Float!
"""
Static cost calculation last 30 seconds.
"""
	deltaStaticCost: Float!
}

"""
The format to store archived segments in on AWS S3.
"""
enum S3ArchivingFormat {
	RAW
	NDJSON
}

"""
Configuration for S3 archiving. E.g. bucket name and region.
"""
type S3Configuration {
"""
S3 bucket name for storing archived data. Example: acme-bucket.
"""
	bucket: String!
"""
The region the S3 bucket belongs to. Example: eu-central-1.
"""
	region: String!
"""
Do not archive logs older than this.
"""
	startFrom: DateTime
"""
Whether the archiving has been disabled.
"""
	disabled: Boolean
"""
The format to store the archived data in on S3.
"""
	format: S3ArchivingFormat
"""
Array of names of tag fields to use in that order in the output file names.
"""
	tagOrderInName: [String!]!
}

"""
A SAML Identity Provider
"""
type SamlIdentityProvider implements IdentityProviderAuthentication{
	id: String!
	name: String!
	domains: [String!]!
	groupMembershipAttribute: String
	idpCertificateInBase64: String!
	idpEntityId: String!
	signOnUrl: String!
	authenticationMethod: AuthenticationMethodAuth!
	userAttribute: String
	adminAttribute: String
	adminAttributeMatch: String
	defaultIdp: Boolean!
	humioManaged: Boolean!
	lazyCreateUsers: Boolean!
	debug: Boolean!
}

type SamlMetadata {
	entityID: String!
	signOnUrl: String!
	certificate: String!
}

"""
A query saved for later use.
"""
type SavedQuery {
"""
A YAML formatted string that describes the saved query.
"""
	templateYaml: String!
	id: String!
	name: String!
	displayName: String!
	description: String
	assetType: AssetType!
	query: HumioQuery!
	isStarred: Boolean!
	widgetType: String!
	options: JSON!
	packageId: VersionedPackageSpecifier
	package: PackageInstallation
"""
[PREVIEW: Saved query interactions feature is under preview] 
"""
	interactions: [QueryBasedWidgetInteraction!]!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] Allowed asset actions
"""
	allowedActions: [AssetAction!]!
}

type SavedQueryTemplate {
	name: String!
	displayName: String!
	yamlTemplate: String!
}

type ScannedData {
	currentBytes: Long!
	limit: UsageLimit!
}

"""
A scheduled report schedule properties
"""
type Schedule {
"""
Cron pattern describing the schedule to execute the report on.
"""
	cronExpression: String!
"""
Timezone of the schedule. Examples include UTC, Europe/Copenhagen.
"""
	timeZone: String!
"""
Start date of the active period of the schedule.
"""
	startDate: Long!
"""
Optional end date of the active period of the schedule.
"""
	endDate: Long
}

"""
Information about a scheduled report
"""
type ScheduledReport {
"""
Id of the scheduled report.
"""
	id: String!
"""
Name of the scheduled report.
"""
	name: String!
"""
Flag indicating whether a password is defined for the report.
"""
	isPasswordDefined: Boolean!
"""
Flag indicating whether the scheduled report is enabled.
"""
	enabled: Boolean!
"""
Status of the latest report execution.
"""
	status: String!
"""
Description of the scheduled report.
"""
	description: String!
"""
The id of the dashboard the report was created for.
"""
	dashboardId: String!
"""
The dashboard the report was created for.
"""
	dashboard: Dashboard!
"""
Unix timestamp for the last report execution. The timestamp only indicates an attempt, not if it was successful.
"""
	timeOfLastReportExecution: Long
"""
Unix timestamp for the next planned report execution.
"""
	timeOfNextPlannedReportExecution: Long
"""
Last errors encountered while generating the scheduled report.
"""
	lastExecutionErrors: [String!]!
"""
Last warnings encountered while generating the scheduled report.
"""
	lastExecutionWarnings: [String!]!
"""
User who created the report.
"""
	createdBy: User
"""
Date when the report was created.
"""
	creationDate: String!
"""
Start of the relative time interval for the dashboard.
"""
	timeIntervalStart: String
"""
The schedule to run the report by.
"""
	schedule: Schedule!
"""
Labels attached to the scheduled report.
"""
	labels: [String!]!
"""
List of parameter value configurations.
"""
	parameters: [ParameterValue!]!
"""
List of recipients who should receive an email with the generated report.
"""
	recipients: [String!]!
"""
Layout of the scheduled report.
"""
	layout: ScheduledReportLayout!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] Allowed asset actions
"""
	allowedActions: [AssetAction!]!
}

"""
Information about a scheduled report layout
"""
type ScheduledReportLayout {
"""
Paper size. Supported types are A4 and Letter.
"""
	paperSize: String!
"""
Paper orientation. Supported types are Landscape and Portrait.
"""
	paperOrientation: String!
"""
Paper layout. Supported types are List and Grid.
"""
	paperLayout: String!
"""
Flag indicating whether to show report description.
"""
	showDescription: Boolean
"""
Flag indicating whether to show title on frontpage.
"""
	showTitleFrontpage: Boolean!
"""
Flag indicating whether to show parameters.
"""
	showParameters: Boolean!
"""
Max number of rows to display in tables.
"""
	maxNumberOfRows: Int!
"""
Flag indicating whether to show title header.
"""
	showTitleHeader: Boolean!
"""
Flag indicating whether to show export date.
"""
	showExportDate: Boolean!
"""
Flag indicating whether to show footer page numbers.
"""
	footerShowPageNumbers: Boolean!
}

"""
Information about a scheduled search
"""
type ScheduledSearch {
"""
Id of the scheduled search.
"""
	id: String!
"""
Name of the scheduled search.
"""
	name: String!
"""
Description of the scheduled search.
"""
	description: String
"""
LogScale query to execute.
"""
	queryString: String!
"""
Start of the relative time interval for the query.
"""
	start: String!
"""
End of the relative time interval for the query.
"""
	end: String!
"""
Time zone of the schedule. Currently this field only supports UTC offsets like 'UTC', 'UTC-01' or 'UTC+12:45'.
"""
	timeZone: String!
"""
Cron pattern describing the schedule to execute the query on.
"""
	schedule: String!
"""
User-defined limit, which caps the number of missed searches to backfill, e.g. in the event of a shutdown.
"""
	backfillLimit: Int!
"""
Flag indicating whether the scheduled search is enabled.
"""
	enabled: Boolean!
"""
List of Ids for actions to fire on query result.
"""
	actions: [String!]!
"""
List of actions to fire on query result.
"""
	actionsV2: [Action!]!
"""
Id of user which the scheduled search is running as.
"""
	runAsUser: User
"""
Unix timestamp for when last query execution finished.
"""
	lastScheduledSearch: Long
"""
Unix timestamp for end of search interval for last query execution.
"""
	lastExecuted: Long
"""
Unix timestamp for end of search interval for last query execution that triggered.
"""
	lastTriggered: Long
"""
Unix timestamp for next planned search.
"""
	timeOfNextPlannedExecution: Long
"""
Last error encountered while running the search.
"""
	lastError: String
"""
Last warnings encountered while running the scheduled search.
"""
	lastWarnings: [String!]!
"""
Labels added to the scheduled search.
"""
	labels: [String!]!
"""
Flag indicating whether the calling user has 'starred' the scheduled search.
"""
	isStarred: Boolean!
"""
A template that can be used to recreate the scheduled search.
"""
	yamlTemplate: YAML!
	packageId: VersionedPackageSpecifier
	package: PackageInstallation
"""
Ownership of the query run by this scheduled search
"""
	queryOwnership: QueryOwnership!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] Allowed asset actions
"""
	allowedActions: [AssetAction!]!
}

type ScheduledSearchTemplate {
	name: String!
	displayName: String!
	yamlTemplate: String!
	labels: [String!]!
}

type SchemaField {
	name: String!
	description: String
}

"""
An asset permissions search result entry
"""
type SearchAssetPermissionsResultEntry {
"""
The unique id for the Asset
"""
	assetId: String!
"""
The name of the Asset
"""
	assetName: String!
"""
The type of the Asset
"""
	assetType: AssetPermissionsAssetType!
"""
The search domain that the asset belongs to
"""
	searchDomain: SearchDomain
"""
The asset permissions assigned to this asset
"""
	permissions: [AssetPermissionOutputEnum!]!
}

"""
Common interface for Repositories and Views.
"""
interface SearchDomain {
"""
Common interface for Repositories and Views.
"""
	id: String!
"""
Common interface for Repositories and Views.
"""
	name: RepoOrViewName!
"""
Common interface for Repositories and Views.
"""
	description: String
"""
Common interface for Repositories and Views.
"""
	deletedDate: Long
"""
Common interface for Repositories and Views.
"""
	permanentlyDeletedAt: Long
"""
Common interface for Repositories and Views.
"""
	isStarred: Boolean!
"""
Common interface for Repositories and Views.
"""
	searchLimitedMs: Long
"""
Common interface for Repositories and Views.
"""
	reposExcludedInSearchLimit: [String!]!
"""
Common interface for Repositories and Views.
"""
	packageV2(
		packageId: VersionedPackageSpecifier!
	): Package2!
"""
Common interface for Repositories and Views.
"""
	packageVersions(
		packageId: UnversionedPackageSpecifier!
	): [RegistryPackageVersionInfo!]!
"""
Common interface for Repositories and Views.
"""
	availablePackages(
		filter: String
		tags: [PackageTag!]
		categories: [String!]
	): [PackageRegistrySearchResultItem!]!
"""
Common interface for Repositories and Views.
"""
	installedPackages: [PackageInstallation!]!
"""
Common interface for Repositories and Views.
"""
	hasPackageInstalled(
		packageId: VersionedPackageSpecifier!
	): Boolean!
"""
Common interface for Repositories and Views.
"""
	users: [User!]!
"""
Common interface for Repositories and Views.
"""
	usersAndGroups(
		search: String
		skip: Int
		limit: Int
	): UsersAndGroupsSearchResultSet!
"""
Common interface for Repositories and Views.
"""
	usersV2(
		search: String
		permissionFilter: Permission
		skip: Int
		limit: Int
	): Users!
"""
Common interface for Repositories and Views.
"""
	groups: [Group!]!
"""
Common interface for Repositories and Views.
"""
	starredFields: [String!]!
"""
Common interface for Repositories and Views.
"""
	recentQueriesV2: [RecentQuery!]!
"""
Common interface for Repositories and Views.
"""
	automaticSearch: Boolean!
"""
Common interface for Repositories and Views.
"""
	isActionAllowed(
		action: ViewAction!
	): Boolean!
"""
Common interface for Repositories and Views.
"""
	allowedViewActions: [ViewAction!]!
"""
Common interface for Repositories and Views.
"""
	viewerQueryPrefix: String!
"""
Common interface for Repositories and Views.
"""
	tags: [String!]!
"""
Common interface for Repositories and Views.
"""
	interactions: [ViewInteraction!]!
"""
Common interface for Repositories and Views.
"""
	alert(
		id: String!
	): Alert!
"""
Common interface for Repositories and Views.
"""
	alerts: [Alert!]!
"""
Common interface for Repositories and Views.
"""
	dashboard(
		id: String!
	): Dashboard!
"""
Common interface for Repositories and Views.
"""
	dashboards: [Dashboard!]!
"""
Common interface for Repositories and Views.
"""
	filterAlert(
		id: String!
	): FilterAlert!
"""
Common interface for Repositories and Views.
"""
	filterAlerts: [FilterAlert!]!
"""
Common interface for Repositories and Views.
"""
	aggregateAlert(
		id: String!
	): AggregateAlert!
"""
Common interface for Repositories and Views.
"""
	aggregateAlerts: [AggregateAlert!]!
"""
Common interface for Repositories and Views.
"""
	scheduledSearch(
		id: String!
	): ScheduledSearch!
"""
Common interface for Repositories and Views.
"""
	scheduledSearches: [ScheduledSearch!]!
"""
Common interface for Repositories and Views.
"""
	action(
		id: String!
	): Action!
"""
Common interface for Repositories and Views.
"""
	actions: [Action!]!
"""
Common interface for Repositories and Views.
"""
	savedQuery(
		id: String!
	): SavedQuery!
"""
Common interface for Repositories and Views.
"""
	savedQueries: [SavedQuery!]!
"""
Common interface for Repositories and Views.
"""
	defaultQuery: SavedQuery
"""
Common interface for Repositories and Views.
"""
	files: [File!]!
"""
Common interface for Repositories and Views.
"""
	fileFieldSearch(
		fileName: String!
		fieldName: String!
		prefixFilter: String
		valueFilters: [FileFieldFilterType!]!
		fieldsToInclude: [String!]!
		maxEntries: Int!
	): [[DictionaryEntryType!]!]!
"""
Common interface for Repositories and Views.
"""
	scheduledReports: [ScheduledReport!]!
"""
Common interface for Repositories and Views.
"""
	scheduledReport(
		id: String!
	): ScheduledReport
}

"""
A page of searchDomains.
"""
type SearchDomainPage {
	pageInfo: PageType!
	page: [SearchDomain!]!
}

"""
The role assigned in a searchDomain.
"""
type SearchDomainRole {
	searchDomain: SearchDomain!
	role: Role!
}

"""
The search domain search result set
"""
type SearchDomainSearchResultSet {
"""
The total number of matching results
"""
	totalResults: Int!
"""
The paginated result set
"""
	results: [SearchDomain!]!
}

enum SearchDomainTypes {
	All
	Views
	Repository
}

"""
The fleet search has not finished yet
"""
type SearchFleetInProgress {
	queryState: String!
	totalResultsInfo: SearchFleetTotalResultInfo!
"""
The total number of matching results
"""
	totalResults: Int!
"""
The paginated result set
"""
	results: [LogCollector!]!
}

"""
A fleet installation token search result set
"""
type SearchFleetInstallationTokenResultSet {
"""
The total number of matching results
"""
	totalResults: Int!
"""
The paginated result set
"""
	results: [FleetInstallationToken!]!
}

"""
A fleet search result set
"""
type SearchFleetResultSet {
	queryState: String!
	totalResultsInfo: SearchFleetTotalResultInfo!
"""
The total number of matching results
"""
	totalResults: Int!
"""
The paginated result set
"""
	results: [LogCollector!]!
}

enum SearchFleetStatusFilter {
	Error
	OK
}

"""
Information about the returned result set.
"""
union SearchFleetTotalResultInfo =OnlyTotal | GroupFilterInfo

"""
Query result for search fleet
"""
union SearchFleetUnion =SearchFleetResultSet | SearchFleetInProgress

type SearchLinkInteraction {
	repoOrViewName: RepoOrViewName
	queryString: String!
	arguments: [DictionaryEntryType!]!
	openInNewTab: Boolean!
	useWidgetTimeWindow: Boolean!
}

"""
A log collector configuration search result set
"""
type SearchLogCollectorConfigurationResultSet {
"""
The total number of matching results
"""
	totalResults: Int!
"""
The paginated result set
"""
	results: [LogCollectorConfiguration!]!
}

"""
A log collector group search result set
"""
type SearchLogCollectorGroupsResultSet {
"""
The total number of matching results
"""
	totalResults: Int!
"""
The paginated result set
"""
	results: [LogCollectorGroup!]!
}

type SearchResult {
"""
The total number of results that matched the search query. Only [pageSize] elements will be returned.
"""
	totalResults: Int!
	data: [EntitySearchResultEntity!]!
	cursor: String
	hasNextPage: Boolean!
	hasPreviousPage: Boolean!
}

enum Searchdomain__SortBy {
	Name
	Volume
	DeletedAt
	LimitName
}

"""
A dashboard section.
"""
type Section {
	id: String!
	title: String
	description: String
	collapsed: Boolean!
	timeSelector: TimeInterval
	widgetIds: [String!]!
	order: Int!
}

scalar SemanticVersion

"""
Metadata about a registered service
"""
type ServiceMetadata {
"""
The name of the service
"""
	name: String!
"""
The type of the service
"""
	serviceType: String!
"""
The endpoint of the service
"""
	endpointUrl: String!
"""
The version of the service
"""
	version: String!
"""
The health status of the service
"""
	healthStatus: HealthStatus!
}

"""
An active session.
"""
type Session {
"""
The id of the session
"""
	id: String!
"""
Client info.
"""
	clientInfo: String!
"""
Approximate city from IP
"""
	city: String
"""
Country from IP
"""
	country: String
"""
The IP of the client when the session was created.
"""
	ip: String!
"""
The user that created the session.
"""
	user: User!
"""
The time at which the session was created.
"""
	createdAt: Long
"""
The time at which the session was last active.
"""
	lastActivityAt: Long
"""
If the session is the current session for the user.
"""
	isCurrentSession: Boolean!
}

"""
The session query result set
"""
type SessionQueryResultSet {
"""
The total number of matching results
"""
	totalResults: Int!
"""
The paginated result set
"""
	results: [Session!]!
}

enum Sessions__Filter_Level {
	Organization
	User
}

enum Sessions__SortBy {
	LastActivityTime
	LoginTime
	IPAddress
	Location
	ClientInfo
	User
}

"""
Output diagnostic from query validation.
"""
enum Severity {
	Error
	Warning
	Information
	Hint
}

"""
Represents information about a dashboard shared through a link.
"""
type SharedDashboard {
	id: String!
	name: String!
	displayName: String!
"""
The ip filter on the shared dashboard.
"""
	ipFilter: IPFilter
	sharedTimeInterval: SharedDashboardTimeInterval
"""
The name of the repository or view queries are executed against.
"""
	repoOrViewName: RepoOrViewName!
	widgets: [Widget!]!
	sections: [Section!]!
}

"""
Time Interval that is active on all dashboard widgets
"""
type SharedDashboardTimeInterval {
	isLive: Boolean!
	start: String!
	end: String!
}

"""
Security policies for shared dashboards in the organization
"""
type SharedDashboardsSecurityPolicies {
"""
Whether shared dashboard tokens are enabled
"""
	sharedDashboardsEnabled: Boolean!
"""
The IP filter that is enforced on all shared dashboards
"""
	enforceIpFilter: IPFilter
}

enum ShowTermsAndConditions {
	StandardMandatoryDoDNoticeAndConsent
	LogScaleEula
	None
}

enum SocialLoginField {
	AllowAll
	DenyAll
	AllowSelected
}

"""
Social login configuration for the organization
"""
type SocialLoginSettings {
"""
Social provider
"""
	provider: SocialProviderProfile!
"""
Filter
"""
	filter: SocialLoginField!
"""
Allowed users
"""
	allowList: [User!]!
}

enum SocialProviderProfile {
	Google
	Github
	Bitbucket
}

"""
The sort by options for asset permissions.
"""
enum SortBy {
	Name
	SearchDomain
	Permission
}

"""
Field to sort queries by
"""
enum SortField {
	InitiatedBy
	View
	Age
	Status
	DeltaTotalMemoryAllocation
	TotalMemoryAllocation
	DeltaLiveCPU
	TotalLiveCPU
	DeltaStaticCPU
	TotalStaticCPU
	DeltaStaticCost
	DeltaLiveCost
	DeltaTotalCost
	StaticCost
	LiveCost
	TotalCost
}

"""
Order to sort queries by
"""
enum SortOrder {
	Ascending
	Descending
}

"""
Returns a query that gives the underlying events for some specified fields. queryArguments are names of free variables in the query, prefixed with a ?.For example, 'foo=?bar | count()' has the queryArgument bar.
"""
type SourceEventsQueryResultType {
"""
[PREVIEW: Internal testing.] 
"""
	query: String
"""
[PREVIEW: Internal testing.] 
"""
	queryArguments: [String!]!
"""
[PREVIEW: Internal testing.] 
"""
	diagnostics: [QueryDiagnostic!]!
}

type StorageOnDay {
	date: DateTime!
	storageBytes: Long!
	limit: UsageLimit!
}

"""
A cluster storage partition. It assigns cluster nodes with the responsibility of storing a segment data.
"""
type StoragePartition {
	id: Int!
"""
A list of ids for the nodes responsible for the partition. The list is ordered so that the first node is the primary node and the rest are followers.
"""
	nodeIds: [Int!]!
}

type StoredData {
	currentBytes: Long!
	limit: UsageLimit!
}

"""
Subdomain configuration for the organization
"""
type SubdomainConfig {
"""
The primary subdomain of the organization
"""
	primarySubdomain: String!
"""
The secondary subdomains of the organization
"""
	secondarySubdomains: [String!]!
"""
EnforceSubdomain, if set to true the organization can only be accessed by the subdomain, otherwise it can also be accessed directly at the cluster domain url.
"""
	enforceSubdomains: Boolean!
}

type SuggestedAlertTypeInfo {
"""
The suggested alert type.
"""
	alertType: AlertType!
}

"""
Actions a user may perform on the system.
"""
enum SystemAction {
	ViewOrganizations
	AdministerSystemPermissions
	ChangeSubdomain
	ViewSubdomain
	DeleteOrganizations
	AdministerOrganizations
	AdministerCloud
	AdministerTokens
	AdministerCluster
	ChangeSharedFiles
}

"""
System permissions
"""
enum SystemPermission {
	ReadHealthCheck
	ViewOrganizations
	ManageOrganizations
	ImportOrganization
	DeleteOrganizations
	ChangeSystemPermissions
	ManageCluster
	IngestAcrossAllReposWithinCluster
	DeleteHumioOwnedRepositoryOrView
	ChangeUsername
	ChangeFeatureFlags
	ChangeSubdomains
	ListSubdomains
	PatchGlobal
	ChangeBucketStorage
	ManageOrganizationLinks
}

"""
A tag on a datasource.
"""
type Tag {
	key: String!
	value: String!
}

"""
Describes the number of groups that tag values get distributed into for a given tag.
"""
type TagGroupingRule {
	tagName: String!
	groupCount: Int!
}

type TagInfo {
	name: String!
	value: String!
}

"""
A time interval that represents either a fixed or relative time range.
"""
type TimeInterval {
	start: String!
	end: String!
}

"""
A token.
"""
interface Token {
"""
A token.
"""
	id: String!
"""
A token.
"""
	name: String!
"""
A token.
"""
	expireAt: Long
"""
A token.
"""
	ipFilter: String
"""
A token.
"""
	ipFilterV2: IPFilter
"""
A token.
"""
	createdAt: Long!
}

"""
The token query result set
"""
type TokenQueryResultSet {
"""
The total number of matching results
"""
	totalResults: Int!
"""
The paginated result set
"""
	results: [Token!]!
}

"""
Security policies for tokens in the organization
"""
type TokenSecurityPolicies {
"""
Whether personal user tokens are enabled
"""
	personalUserTokensEnabled: Boolean!
"""
Maximum time in ms a personal user token can be used before expiring (TTL)
"""
	personalUserTokensEnforceExpirationAfterMs: Long
"""
The IP filter that is enforced on all personal user tokens
"""
	personalUserTokensEnforceIpFilter: IPFilter
"""
Whether view permission tokens are enabled
"""
	viewPermissionTokensEnabled: Boolean!
"""
Maximum time in ms a view permission token can be used before expiring (TTL)
"""
	viewPermissionTokensEnforceExpirationAfterMs: Long
"""
The IP filter that is enforced on all view permission tokens
"""
	viewPermissionTokensEnforceIpFilter: IPFilter
"""
Whether it is allowed to change permissions on existing view permission tokens
"""
	viewPermissionTokensAllowPermissionUpdates: Boolean
"""
Whether organization permission tokens are enabled
"""
	organizationPermissionTokensEnabled: Boolean!
"""
Maximum time in ms a organization permission token can be used before expiring (TTL)
"""
	organizationPermissionTokensEnforceExpirationAfterMs: Long
"""
The IP filter that is enforced on all organization permission tokens
"""
	organizationPermissionTokensEnforceIpFilter: IPFilter
"""
Whether it is allowed to change permissions on existing organization permission tokens
"""
	organizationPermissionTokensAllowPermissionUpdates: Boolean
"""
Whether system permission tokens are enabled
"""
	systemPermissionTokensEnabled: Boolean!
"""
Maximum time in ms a system permission token can be used before expiring (TTL)
"""
	systemPermissionTokensEnforceExpirationAfterMs: Long
"""
The IP filter that is enforced on all system permission tokens
"""
	systemPermissionTokensEnforceIpFilter: IPFilter
"""
Whether it is allowed to change permissions on existing system permission tokens
"""
	systemPermissionTokensAllowPermissionUpdates: Boolean
}

enum Tokens__SortBy {
	ExpirationDate
	Name
}

enum Tokens__Type {
	ViewPermissionToken
	OrganizationPermissionToken
	OrganizationManagementPermissionToken
	SystemPermissionToken
}

"""
Trigger mode for an aggregate alert.
"""
enum TriggerMode {
"""
Wait for up to 20 minutes for a complete result before triggering.
"""
	CompleteMode
"""
Trigger immediately, even on incomplete results. If nothing to trigger on, wait for up to 20 minutes for there to be a result to trigger on.
"""
	ImmediateMode
}

scalar URL

enum UiTheme {
	Auto
	Dark
	Light
}

type UnlimitedUsage {
	unlimited: Boolean!
}

"""
An unsaved aggregate alert.
"""
type UnsavedAggregateAlert {
"""
Name of the aggregate alert.
"""
	name: String!
"""
Description of the aggregate alert.
"""
	description: String
"""
LogScale query to execute.
"""
	queryString: String!
"""
List of actions to fire on query result.
"""
	actions: [Action!]!
"""
Labels attached to the aggregate alert.
"""
	labels: [String!]!
"""
Flag indicating whether the aggregate alert is enabled.
"""
	enabled: Boolean!
"""
Throttle time in seconds.
"""
	throttleTimeSeconds: Long!
"""
A field to throttle on. Can only be set if throttleTimeSeconds is set.
"""
	throttleField: String
"""
Timestamp type to use for a query.
"""
	queryTimestampType: QueryTimestampType!
"""
Trigger mode used for triggering the alert.
"""
	triggerMode: TriggerMode!
"""
Search interval in seconds.
"""
	searchIntervalSeconds: Long!
}

"""
An unsaved alert.
"""
type UnsavedAlert {
"""
Name of the alert.
"""
	name: String!
"""
Description of the alert.
"""
	description: String
"""
LogScale query to execute.
"""
	queryString: String!
"""
Start of the relative time interval for the query.
"""
	queryStart: String!
"""
Throttle time in milliseconds.
"""
	throttleTimeMillis: Long!
"""
Field to throttle on.
"""
	throttleField: String
"""
List of ids for actions to fire on query result.
"""
	actions: [Action!]!
"""
Labels attached to the alert.
"""
	labels: [String!]!
"""
Flag indicating whether the alert is enabled.
"""
	enabled: Boolean!
}

"""
An unsaved filter alert.
"""
type UnsavedFilterAlert {
"""
Name of the filter alert.
"""
	name: String!
"""
Description of the filter alert.
"""
	description: String
"""
LogScale query to execute.
"""
	queryString: String!
"""
List of ids for actions to fire on query result.
"""
	actions: [Action!]!
"""
Labels attached to the filter alert.
"""
	labels: [String!]!
"""
Flag indicating whether the filter alert is enabled.
"""
	enabled: Boolean!
"""
Throttle time in seconds.
"""
	throttleTimeSeconds: Long
"""
A field to throttle on. Can only be set if throttleTimeSeconds is set.
"""
	throttleField: String
}

"""
The contents of a parser YAML template in structured form. The parser needs to be persisted before it can be deployed.
"""
type UnsavedParser {
"""
Name of the parser.
"""
	name: String!
"""
The parser script that is executed for every incoming event.
"""
	script: String!
"""
Fields that are used as tags.
"""
	fieldsToTag: [String!]!
"""
A list of fields that will be removed from the event before it's parsed. These fields will not be included when calculating usage.
"""
	fieldsToBeRemovedBeforeParsing: [String!]!
"""
Test cases that can be used to help verify that the parser works as expected.
"""
	testCases: [ParserTestCase!]!
}

"""
An unsaved scheduled search.
"""
type UnsavedScheduledSearch {
"""
Name of the scheduled search.
"""
	name: String!
"""
Description of the scheduled search.
"""
	description: String
"""
LogScale query to execute.
"""
	queryString: String!
"""
Start of the relative time interval for the query.
"""
	start: String!
"""
End of the relative time interval for the query.
"""
	end: String!
"""
Cron pattern describing the schedule to execute the query on.
"""
	schedule: String!
"""
Time zone of the schedule. Currently this field only supports UTC offsets like 'UTC', 'UTC-01' or 'UTC+12:45'.
"""
	timeZone: String!
"""
User-defined limit, which caps the number of missed searches to backfill, e.g. in the event of a shutdown.
"""
	backfillLimit: Int!
"""
List of Ids for actions to fire on query result.
"""
	actions: [Action!]!
"""
Labels attached to the scheduled search.
"""
	labels: [String!]!
"""
Flag indicating whether the scheduled search is enabled.
"""
	enabled: Boolean!
}

scalar UnversionedPackageSpecifier

type UpdateParametersInteraction {
	arguments: [DictionaryEntryType!]!
	useWidgetTimeWindow: Boolean!
}

"""
An uploaded file snapshot.
"""
type UploadedFileSnapshot {
	nameAndPath: FileNameAndPath!
	headers: [String!]!
	lines: [[String!]!]!
	totalLinesCount: Long!
	limit: Int!
	offset: Int!
	filterString: String
}

scalar UrlOrData

"""
Contractual usage limit. If you are above you should renegotiate your contract.
"""
union UsageLimit =UsageLimitDefined | UnlimitedUsage

type UsageLimitDefined {
	limit: Long!
}

type UsageOnDay {
	date: DateTime!
	ingestBytes: Long!
	averageIngestBytes: Long
	limit: UsageLimit!
}

type UsageStats {
"""
Current usage measurements and limits for ingest, storage, scanned data and users
"""
	currentStats(
		queryId: String
	): CurrentUsageQueryResult!
	monthlyIngest(
		month: Int!
		year: Int!
		queryId: String
	): MonthlyIngestQueryResult!
	monthlyStoredData(
		month: Int!
		year: Int!
		queryId: String
	): MonthlyStorageQueryResult!
	firstUsageTimeStamp: Long!
	repositoriesIngest(
		month: Int!
		year: Int!
		day: Int
"""
Filter results based on this string
"""
		searchFilter: String
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
		sortBy: RepositoriesUsageQuerySortBy!
		queryId: String
	): RepositoriesUsageQueryResultTypes!
	repositoriesStorage(
		month: Int!
		year: Int!
		day: Int
"""
Filter results based on this string
"""
		searchFilter: String
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
		sortBy: RepositoriesUsageQuerySortBy!
		queryId: String
	): RepositoriesUsageQueryResultTypes!
}

"""
A user profile.
"""
type User {
	id: String!
"""
fullName if present, otherwise username.
"""
	displayName: String!
	username: String!
	isRoot: Boolean!
	isOrgRoot: Boolean!
	fullName: String
	firstName: String
	lastName: String
	phoneNumber: String
	email: String
	picture: String
	createdAt: DateTime!
	countryCode: String
	stateCode: String
	company: String
	userOrGroupSearchDomainRoles(
		search: String
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
	): UserOrGroupSearchDomainRoleResultSet!
	groupSearchDomainRoles: [GroupSearchDomainRole!]!
	searchDomainRoles(
		searchDomainId: String
	): [SearchDomainRole!]!
	searchDomainRolesByName(
		searchDomainName: String!
	): SearchDomainRole
	searchDomainRolesBySearchDomainName(
		searchDomainName: String!
	): [SearchDomainRole!]!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] Get asset permissions assigned to the user for the specific asset
"""
	assetPermissions(
"""
Id of the asset
"""
		assetId: String!
"""
Asset type
"""
		assetType: AssetPermissionsAssetType!
"""
Search domain id
"""
		searchDomainId: String
	): AssetPermissionsForUser!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] Search for asset permissions for the user
"""
	searchAssetPermissions(
"""
Filter results based on this string
"""
		searchFilter: String
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
"""
The sort by options for asset permissions.
"""
		sortBy: SortBy
"""
Asset type
"""
		assetType: AssetPermissionsAssetType!
"""
List of search domain id's to search within
"""
		searchDomainIds: [String!]
"""
Include UpdateAsset and/or DeleteAsset permission assignments
"""
		permissions: AssetPermissionInputEnum
"""
If this is set to true, the search will also return all assets, that the user has not been assigned any permissions for
"""
		includeUnassignedAssets: Boolean
	): AssetPermissionSearchResultSet!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] The roles assigned to the user through a group.
"""
	rolesV2(
		search: String
		typeFilter: [PermissionType!]
"""
The amount of results to return.
"""
		limit: Int
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
		searchInGroups: Boolean
	): RolesResultSetType!
"""
[PREVIEW: Feature currently being iterated on. Changes may occur.] The groups the user is a member of.
"""
	groupsV2(
		search: String
		typeFilter: [PermissionType!]
"""
The amount of results to return.
"""
		limit: Int
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
		searchInRoles: Boolean
	): GroupResultSetType!
"""
The groups the user is a member of.
"""
	groups: [Group!]!
"""
Permissions of the user.
"""
	permissions(
"""
Exact name of the repo to find permissions for.
"""
		viewName: String
	): [UserPermissions!]!
"""
A page of user permissions.
"""
	permissionsPage(
		search: String
		pageNumber: Int!
		pageSize: Int!
	): UserPermissionsPage!
"""
Returns the actions the user is allowed to perform in the system.
"""
	allowedSystemActions: [SystemAction!]!
"""
Returns the actions the user is allowed to perform in the organization.
"""
	allowedOrganizationActions: [OrganizationAction!]!
}

type UserAndTimestamp {
	username: String!
	user: User
	timestamp: DateTime!
}

"""
A user or a group
"""
union UserOrGroup =Group | User

"""
A user or a group role
"""
union UserOrGroupSearchDomainRole =GroupSearchDomainRole | SearchDomainRole

"""
A page of users or group roles.
"""
type UserOrGroupSearchDomainRoleResultSet {
"""
The total number of matching results
"""
	totalResults: Int!
	results: [UserOrGroupSearchDomainRole!]!
}

"""
Permissions of the user.
"""
type UserPermissions {
	searchDomain: SearchDomain!
	queryPrefix: String!
	viewPermissions: [Permission!]!
}

"""
A page of user permissions.
"""
type UserPermissionsPage {
	pageInfo: PageType!
	page: [UserPermissions!]!
}

"""
The users query result set.
"""
type UserResultSetType {
"""
The total number of matching results
"""
	totalResults: Int!
"""
The paginated result set
"""
	results: [User!]!
}

type UserSettings {
	isCommunityMessageDismissed: Boolean!
	isGettingStartedMessageDismissed: Boolean!
	isWelcomeMessageDismissed: Boolean!
	isEventListOrderedWithNewestAtBottom: Boolean!
	isPackageDocsMessageDismissed: Boolean!
	isFieldPanelOpenByDefault: Boolean!
	isAutomaticSearchEnabled: Boolean!
	isDarkModeMessageDismissed: Boolean!
	uiTheme: UiTheme!
	starredDashboards: [String!]!
	starredSearchDomains: [String!]!
	starredAlerts: [String!]!
"""
[PREVIEW: We are iterating on our feature announcements, and may change this again] 
"""
	featureAnnouncementsToShow: [FeatureAnnouncement!]!
	isQuickStartCompleted: Boolean!
"""
Default timezone preference
"""
	defaultTimeZone: String
"""
[PREVIEW: Experimental user setting value for a feature which allow for automatic highlighting on the search page] 
"""
	isAutomaticHighlightingEnabled: Boolean!
	isResizableQueryFieldMessageDismissed: Boolean!
}

"""
A paginated set of users
"""
type Users {
"""
The total number of users
"""
	totalUsers: Int!
"""
The paginated set of users
"""
	users: [User!]!
}

"""
A page of users and groups.
"""
type UsersAndGroupsSearchResultSet {
"""
The total number of matching results
"""
	totalResults: Int!
	results: [UserOrGroup!]!
}

type UsersLimit {
	currentBytes: Int!
	limit: UsageLimit!
}

"""
A page of users.
"""
type UsersPage {
	pageInfo: PageType!
	page: [User!]!
}

scalar VersionedPackageSpecifier

"""
Represents information about a view, pulling data from one or several repositories.
"""
type View implements SearchDomain{
	connections: [ViewConnection!]!
	crossOrgConnections: [CrossOrgViewConnection!]!
"""
[PREVIEW: Experimental feature, not ready for production.] Cluster connections.
"""
	clusterConnections: [ClusterConnection!]!
"""
A specific connection.
"""
	clusterConnection(
"""
The id of the connection to get.
"""
		id: String!
	): ClusterConnection!
"""
[PREVIEW: Experimental feature, not ready for production.] Check all this search domain's cluster connections.
"""
	checkClusterConnections: [ClusterConnectionStatus!]!
"""
[PREVIEW: Experimental feature, not ready for production.] True if the view is federated, false otherwise.
"""
	isFederated: Boolean!
	id: String!
	name: RepoOrViewName!
	description: String
"""
The point in time the search domain was marked for deletion.
"""
	deletedDate: Long
"""
The point in time the search domain will not be restorable anymore.
"""
	permanentlyDeletedAt: Long
	isStarred: Boolean!
"""
Search limit in milliseconds, which searches should are limited to.
"""
	searchLimitedMs: Long
"""
Repositories not part of the search limitation.
"""
	reposExcludedInSearchLimit: [String!]!
"""
Returns a specific version of a package given a package version.
"""
	packageV2(
"""
The package id of the package to get.
"""
		packageId: VersionedPackageSpecifier!
	): Package2!
"""
[PREVIEW: This may be moved to the Package2 object.] The available versions of a package.
"""
	packageVersions(
		packageId: UnversionedPackageSpecifier!
	): [RegistryPackageVersionInfo!]!
"""
Returns a list of available packages that can be installed.
"""
	availablePackages(
"""
Filter input to limit the returned packages
"""
		filter: String
"""
Packages with any of these tags will be included. No filtering on tags.
"""
		tags: [PackageTag!]
"""
Packages with any of these categories will be included.
"""
		categories: [String!]
	): [PackageRegistrySearchResultItem!]!
"""
List packages installed on a specific view or repo.
"""
	installedPackages: [PackageInstallation!]!
	hasPackageInstalled(
		packageId: VersionedPackageSpecifier!
	): Boolean!
"""
Users who has access.
"""
	users: [User!]!
"""
Users or groups who has access.
"""
	usersAndGroups(
		search: String
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
	): UsersAndGroupsSearchResultSet!
"""
[PREVIEW] Search users with a given permission
"""
	usersV2(
"""
Search for a user whose email or name matches this search string
"""
		search: String
"""
Permission that the users must have on the search domain. Leave out to get users with any permission on the view
"""
		permissionFilter: Permission
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
	): Users!
"""
Groups with assigned roles.
"""
	groups: [Group!]!
	starredFields: [String!]!
	recentQueriesV2: [RecentQuery!]!
	automaticSearch: Boolean!
"""
Check if the current user is allowed to perform the given action on the view.
"""
	isActionAllowed(
"""
The action to check if a user is allowed to perform on a view.
"""
		action: ViewAction!
	): Boolean!
"""
Returns the all actions the user is allowed to perform on the view.
"""
	allowedViewActions: [ViewAction!]!
"""
The query prefix prepended to each search in this domain.
"""
	viewerQueryPrefix: String!
"""
All tags from all datasources.
"""
	tags: [String!]!
"""
All interactions defined on the view.
"""
	interactions: [ViewInteraction!]!
"""
A saved alert
"""
	alert(
		id: String!
	): Alert!
"""
Saved alerts.
"""
	alerts: [Alert!]!
"""
A saved dashboard.
"""
	dashboard(
		id: String!
	): Dashboard!
"""
All dashboards available on the view.
"""
	dashboards: [Dashboard!]!
"""
A saved filter alert
"""
	filterAlert(
		id: String!
	): FilterAlert!
"""
Saved filter alerts.
"""
	filterAlerts: [FilterAlert!]!
"""
A saved aggregate alert
"""
	aggregateAlert(
		id: String!
	): AggregateAlert!
"""
Saved aggregate alerts.
"""
	aggregateAlerts: [AggregateAlert!]!
"""
A saved scheduled search.
"""
	scheduledSearch(
"""
The id of the scheduled search to get.
"""
		id: String!
	): ScheduledSearch!
"""
Saved scheduled searches.
"""
	scheduledSearches: [ScheduledSearch!]!
"""
A saved action.
"""
	action(
"""
The id of the action to get.
"""
		id: String!
	): Action!
"""
A list of saved actions.
"""
	actions: [Action!]!
"""
A saved query.
"""
	savedQuery(
		id: String!
	): SavedQuery!
"""
Saved queries.
"""
	savedQueries: [SavedQuery!]!
	defaultQuery: SavedQuery
	files: [File!]!
	fileFieldSearch(
"""
Name of the csv or json file to retrieve the field entries from.
"""
		fileName: String!
"""
Name of the field in the file to return entries from.
"""
		fieldName: String!
"""
Text to filter values by prefix on.
"""
		prefixFilter: String
"""
The exact values that given fields should have for an entry to be part of the result.
"""
		valueFilters: [FileFieldFilterType!]!
"""
Names of the fields to include in the result.
"""
		fieldsToInclude: [String!]!
"""
Maximum number of values to retrieve from the file.
"""
		maxEntries: Int!
	): [[DictionaryEntryType!]!]!
"""
Saved scheduled reports.
"""
	scheduledReports: [ScheduledReport!]!
"""
Saved scheduled report.
"""
	scheduledReport(
"""
The id of the scheduled report to get.
"""
		id: String!
	): ScheduledReport
}

"""
Actions a user may perform on a view.
"""
enum ViewAction {
	ChangeConnections
	ChangeUserAccess
"""
Denotes if you can administer alerts, scheduled searches and actions
"""
	ChangeTriggersAndActions
"""
Denotes if you can administer alerts and scheduled searches
"""
	ChangeTriggers
"""
Denotes if you can administer actions
"""
	ChangeActions
	ChangeInteractions
	ChangeViewOrRepositoryDescription
	ChangeDashboards
	ChangeDashboardReadonlyToken
	ChangeFdrFeeds
	ChangeDataspaceKind
	ChangeFdrFeedControls
	ReadFdrFeeds
	ChangeIngestFeeds
	ChangeFiles
	ChangeParsers
	DeleteParsers
	ChangeSavedQueries
	ConnectView
	ConnectMultiClusterView
	ChangeDataDeletionPermissions
	ChangeRetention
	ChangeTimeBasedRetention
	ChangeSizeBasedRetention
	ChangeDefaultSearchSettings
	ChangeS3ArchivingSettings
	DeleteDataSources
	DeleteRepositoryOrView
	DeleteEvents
"""
Denotes if you can see log events
"""
	ReadEvents
	ChangeIngestTokens
	ChangePackages
"""
Denotes if you can administer event forwarding rules
"""
	EventForwarding
	ChangeIngestListeners
	ChangePermissionTokens
	ChangeIngestBlocking
	ChangeFieldsToBeRemovedBeforeParsing
	ExportQueryResults
	ChangeOrganizationOwnedQueries
	ReadExternalFunctions
	ChangeScheduledReports
}

"""
Represents the connection between a view and an underlying repository.
"""
type ViewConnection {
"""
The underlying repository
"""
	repository: Repository!
"""
The filter applied to all results from the repository.
"""
	filter: String!
	languageVersion: LanguageVersion!
}

"""
An interaction available across search and dashboards
"""
type ViewInteraction {
	id: String!
	name: String!
	displayName: String!
	description: String
	assetType: AssetType!
	packageId: VersionedPackageSpecifier
	package: PackageInstallation
}

"""
A defined view interaction
"""
type ViewInteractionEntry {
	id: String!
	view: SearchDomain!
	interaction: QueryBasedWidgetInteraction!
	packageId: VersionedPackageSpecifier
	package: PackageInstallation
}

type ViewInteractionTemplate {
	name: String!
	displayName: String!
	yamlTemplate: String!
}

type WellKnownEndpointDetails {
	issuer: String!
	authorizationEndpoint: String
	jwksEndpoint: String
	registrationEndpoint: String
	tokenEndpoint: String
	tokenEndpointAuthMethod: String!
	userInfoEndpoint: String
}

"""
A dashboard widget.
"""
interface Widget {
"""
A dashboard widget.
"""
	id: String!
"""
A dashboard widget.
"""
	title: String!
"""
A dashboard widget.
"""
	description: String
"""
A dashboard widget.
"""
	x: Int!
"""
A dashboard widget.
"""
	y: Int!
"""
A dashboard widget.
"""
	width: Int!
"""
A dashboard widget.
"""
	height: Int!
}

type WidgetInteractionCondition {
	fieldName: String!
	operator: FieldConditionOperatorType!
	argument: String!
}

"""
A key being traced by worker query tracing.
"""
type WorkerQueryTracingItem {
	key: String!
	expiry: Long!
}

"""
The state of worker query tracing.
"""
type WorkerQueryTracingState {
	items: [WorkerQueryTracingItem!]!
}

scalar YAML

"""
Common interface for contractual parts of the limit
"""
interface contractual {
"""
Common interface for contractual parts of the limit
"""
	includeUsage: Boolean!
}

type drilldowns {
"""
[PREVIEW: Internal testing.] Get the query that returns the underlying events for the given fields.
"""
	sourceEventsForFieldsQuery(
		fields: [String!]!
	): SourceEventsQueryResultType!
}

"""
A namespace for various query analyses and transformations.
"""
type queryAnalysis {
	drilldowns: drilldowns!
"""
Checks if a query is fit for use for a filter alert
"""
	isValidFilterAlertQuery(
		viewName: String!
	): Boolean!
"""
The query contains an aggregator
"""
	isAggregate: Boolean!
"""
The query does not contain a join-like function
"""
	isSinglePhase: Boolean!
"""
The query string up to the first aggregator
"""
	filterPart: String!
}

"""
The `BigDecimal` scalar type represents signed fractional values with arbitrary precision.
"""
scalar BigDecimal

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values. BigInt can represent arbitrary big values.
"""
scalar BigInt

"""
The `Boolean` scalar type represents `true` or `false`.
"""
scalar Boolean

"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_754).
"""
scalar Float

"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int

"""
The `Long` scalar type represents non-fractional signed whole numeric values. Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String


# Fetched from version 1.154.0--build-1810--sha-eebd9d5d384aeb5d20f7a012d51fa7c64a07417e