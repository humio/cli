"""
Directs the executor to include this field or fragment only when the `if` argument is true.
"""
directive @include(
"""
Included when true.
"""
	if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip(
"""
Included when true.
"""
	if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"""
Marks an element of a GraphQL schema as no longer supported.
"""
directive @deprecated(
"""
Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted in [Markdown](https://daringfireball.net/projects/markdown/).
"""
	reason: String
) on ENUM_VALUE | FIELD_DEFINITION

"""
Marks the stability level of the field or enum value.
"""
directive @stability(
	level: StabilityLevel!
) on ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION

"""
Data for updating action security policies
"""
input ActionSecurityPoliciesInput {
"""
Data for updating action security policies
"""
	emailActionEnabled: Boolean!
"""
Data for updating action security policies
"""
	emailActionRecipientAllowList: [String!]
"""
Data for updating action security policies
"""
	repoActionEnabled: Boolean!
"""
Data for updating action security policies
"""
	opsGenieActionEnabled: Boolean!
"""
Data for updating action security policies
"""
	pagerDutyActionEnabled: Boolean!
"""
Data for updating action security policies
"""
	slackSingleChannelActionEnabled: Boolean!
"""
Data for updating action security policies
"""
	slackMultiChannelActionEnabled: Boolean!
"""
Data for updating action security policies
"""
	uploadFileActionEnabled: Boolean!
"""
Data for updating action security policies
"""
	victorOpsActionEnabled: Boolean!
"""
Data for updating action security policies
"""
	webhookActionEnabled: Boolean!
"""
Data for updating action security policies
"""
	webhookActionUrlAllowList: [String!]
}

input ActorInput {
	actorType: ActorType!
	actorId: String!
}

"""
The different types of actors that can be assigned permissions.
"""
enum ActorType {
	User
	Group
	Token
}

"""
Data for adding a label to an alert
"""
input AddAlertLabel {
"""
Data for adding a label to an alert
"""
	viewName: String!
"""
Data for adding a label to an alert
"""
	id: String!
"""
Data for adding a label to an alert
"""
	label: String!
}

"""
Input object for field addFieldAliasMapping
"""
input AddAliasMappingInput {
"""
Input object for field addFieldAliasMapping
"""
	schemaId: String!
"""
Input object for field addFieldAliasMapping
"""
	aliasMapping: AliasMappingInput!
}

input AddCrossOrganizationViewConnectionFiltersInput {
	name: String!
	connections: [CrossOrganizationViewConnectionInputModel!]!
}

type AddGroupMutation {
"""
Stability: Long-term
"""
	group: Group!
}

"""
Input data to create an ingest token
"""
input AddIngestTokenV3Input {
"""
Input data to create an ingest token
"""
	repositoryName: String!
"""
Input data to create an ingest token
"""
	name: String!
"""
Input data to create an ingest token
"""
	parser: String
"""
Input data to create an ingest token
"""
	customToken: String
}

"""
Data for adding a label to a scheduled search
"""
input AddLabelScheduledSearch {
"""
Data for adding a label to a scheduled search
"""
	viewName: String!
"""
Data for adding a label to a scheduled search
"""
	id: String!
"""
Data for adding a label to a scheduled search
"""
	label: String!
}

input AddLimitInput {
	limitName: String!
	allowLogin: Boolean!
	dailyIngest: Long!
	retention: Int!
	allowSelfService: Boolean!
	expiration: Long
	contractVersion: Organizations__ContractVersion
	userLimit: Int
}

input AddLimitV2Input {
	limitName: String!
	allowLogin: Boolean!
	dailyIngest: Long
	dailyIngestContractualType: Organizations__ContractualType!
	storageContractualType: Organizations__ContractualType!
	dailyScanContractualType: Organizations__ContractualType!
	measurementType: Organizations__MeasurementType!
	dailyScan: Long
	retention: Int!
	maxRetention: Int!
	allowSelfService: Boolean!
	expiration: Long
	userLimit: Int
	dateType: String!
	trial: Boolean!
	allowFlightControl: Boolean!
	repositoryLimit: Int
}

type AddRecentQuery {
"""
Stability: Long-term
"""
	recentQueries: [RecentQuery!]!
}

input AddRecentQueryInput {
	viewName: String!
	queryArguments: [InputDictionaryEntry!]!
	queryString: String!
	start: String!
	end: String!
	isLive: Boolean!
	widgetType: String
	options: JSON
}

input AddRoleInput {
	displayName: String!
	viewPermissions: [Permission!]!
	color: String
	systemPermissions: [SystemPermission!]
	organizationPermissions: [OrganizationPermission!]
	objectAction: ObjectAction
	organizationManagementPermissions: [OrganizationManagementPermission!]
}

type AddRoleMutation {
"""
Stability: Long-term
"""
	role: Role!
}

"""
Data for adding a star to a scheduled search
"""
input AddStarScheduledSearch {
"""
Data for adding a star to a scheduled search
"""
	viewName: String!
"""
Data for adding a star to a scheduled search
"""
	id: String!
}

"""
Data for adding a star to an alert
"""
input AddStarToAlert {
"""
Data for adding a star to an alert
"""
	viewName: String!
"""
Data for adding a star to an alert
"""
	id: String!
}

input AddStarToFieldInput {
	fieldName: String!
	searchDomainName: String!
}

type AddStarToFieldMutation {
"""
Stability: Long-term
"""
	starredFields: [String!]!
}

input AddStarToQueryInput {
	savedQueryId: String!
	searchDomainName: String!
}

input AddSubdomainInput {
	subdomain: String!
}

"""
Data for adding to the blocklist
"""
input AddToBlocklistByIdInput {
"""
Data for adding to the blocklist
"""
	pattern: String!
"""
Data for adding to the blocklist
"""
	type: BlockedQueryMatcherType!
"""
Data for adding to the blocklist
"""
	viewId: String
"""
Data for adding to the blocklist
"""
	clusterWide: Boolean
}

"""
Data for adding to the blocklist
"""
input AddToBlocklistInput {
"""
Data for adding to the blocklist
"""
	pattern: String!
"""
Data for adding to the blocklist
"""
	type: BlockedQueryMatcherType!
"""
Data for adding to the blocklist
"""
	viewName: String
"""
Data for adding to the blocklist
"""
	clusterWide: Boolean
}

input AddUserInput {
	username: String!
	company: String
	isRoot: Boolean
	firstName: String
	lastName: String
	fullName: String
	picture: String
	email: String
	countryCode: String
	stateCode: String
}

input AddUserInputV2 {
	username: String!
	company: String
	isRoot: Boolean
	firstName: String
	lastName: String
	fullName: String
	picture: String
	email: String
	countryCode: String
	stateCode: String
	sendInvite: Boolean
	verificationToken: String
	isOrgOwner: Boolean
}

input AddUsersToGroupInput {
	users: [String!]!
	groupId: String!
}

type AddUsersToGroupMutation {
"""
Stability: Long-term
"""
	group: Group!
}

input AliasInfoInput {
	source: String!
	alias: String!
}

"""
Input object for creating a new alias mapping.
"""
input AliasMappingInput {
"""
Input object for creating a new alias mapping.
"""
	name: String!
"""
Input object for creating a new alias mapping.
"""
	tags: [TagsInput!]!
"""
Input object for creating a new alias mapping.
"""
	aliases: [AliasInfoInput!]!
"""
Input object for creating a new alias mapping.
"""
	originalFieldsToKeep: [String!]
}

input AnalyticsBrowser {
	info: AnalyticsBrowserInfo!
	isChrome: Boolean!
	isChromeHeadless: Boolean!
	isEdge: Boolean!
	isFirefox: Boolean!
	isIE: Boolean!
	isSafari: Boolean!
}

input AnalyticsBrowserInfo {
	name: String
	version: String
	major: String
}

input AnalyticsDevice {
	info: AnalyticsDeviceInfo!
	isConsole: Boolean!
	isDesktop: Boolean!
	isMobile: Boolean!
	isTablet: Boolean!
}

input AnalyticsDeviceInfo {
	model: String
	type: String
	vendor: String
}

input AnalyticsEngine {
	info: AnalyticsInfo!
	isWebkit: Boolean!
}

input AnalyticsFeature {
	name: String!
	value: Boolean!
}

input AnalyticsInfo {
	name: String!
	version: String!
}

input AnalyticsLog {
	category: String!
	action: String!
	message: String
}

input AnalyticsLogWithTimestamp {
	eventId: String!
	timestamp: Long!
	route: String!
	action: String!
	system: String!
	arguments: [String!]!
	feature: String
	features: [AnalyticsFeature!]!
	context: String!
	metrics: AnalyticsMetrics!
	userAgent: AnalyticsUserAgent!
}

input AnalyticsMetrics {
	fps: Int!
}

input AnalyticsOS {
	info: AnalyticsInfo!
	isAndroid: Boolean!
	isIOS: Boolean!
	isLinux: Boolean!
	isMacOS: Boolean!
	isWindows: Boolean!
}

input AnalyticsUserAgent {
	browser: AnalyticsBrowser!
	device: AnalyticsDevice!
	engine: AnalyticsEngine!
	os: AnalyticsOS!
}

"""
The type of archiving to reset. Defaults to RepoOnly
"""
enum ArchivalKind {
"""
Reset only the repo archiving
"""
	RepoOnly
"""
Reset only the cluster wide archiving
"""
	ClusterWideOnly
"""
Reset all the the archiving types
"""
	All
}

input ArgumentInput {
	key: String!
	value: String!
}

"""
A gap in th array. Null values represent missing bounds
"""
type ArrayGap {
"""
Array gap starts at this index (inclusive)
Stability: Preview
"""
	startsAtIndex: Int!
"""
Array gap ends at this index (exclusive)
Stability: Preview
"""
	endsAtIndex: Int!
}

"""
Array gaps identified for a given prefix
"""
type ArrayWithGap {
"""
Prefix that represents a field up until the point at which a gap was identified. For instance, the field `a[0].b[1]` would give the prefix `a[0].b` as the gap occurs when indexing `b` with `1`. For `a[1].b[0]` we would get the prefix `a`.
Stability: Preview
"""
	lastValidPrefix: String!
"""
Gaps identified for array prefix
Stability: Preview
"""
	gaps: [ArrayGap!]!
}

"""
Different ways in which an assertion may fail.
"""
union AssertionFailureOnField =FieldUnexpectedlyPresent | FieldHadUnexpectedValue | FieldHadConflictingAssertions | AssertionOnFieldWasOrphaned

"""
This occurs when an assertion was set to run on some output event that wasn't produced by the parser. That is, the assertion may be set to run on output event number 2, but the parser only produced one event.
"""
type AssertionOnFieldWasOrphaned {
"""
Field being asserted on.
Stability: Long-term
"""
	fieldName: String!
}

input AssignOrganizationManagementRoleToGroupInput {
	groupId: String!
	roleId: String!
	organizationIds: [String!]!
}

type AssignOrganizationManagementRoleToGroupMutation {
"""
Stability: Long-term
"""
	group: GroupOrganizationManagementRole!
}

input AssignOrganizationRoleToGroupInput {
	groupId: String!
	roleId: String!
}

type AssignOrganizationRoleToGroupMutation {
"""
Stability: Long-term
"""
	group: GroupOrganizationRole!
}

"""
Input data to assign a parser to an ingest token
"""
input AssignParserToIngestTokenInputV2 {
"""
Input data to assign a parser to an ingest token
"""
	repositoryName: String!
"""
Input data to assign a parser to an ingest token
"""
	tokenName: String!
"""
Input data to assign a parser to an ingest token
"""
	parser: String!
}

input AssignRoleToGroupInput {
	viewId: String!
	groupId: String!
	roleId: String!
	overrideExistingAssignmentsForView: Boolean
}

type AssignRoleToGroupMutation {
"""
Stability: Long-term
"""
	group: SearchDomainRole!
}

input AssignSystemRoleToGroupInput {
	groupId: String!
	roleId: String!
}

type AssignSystemRoleToGroupMutation {
"""
Stability: Long-term
"""
	group: GroupSystemRole!
}

input AssignUserRolesInSearchDomainInput {
	searchDomainId: String!
	roleAssignments: [UserRoleAssignmentInput!]!
}

"""
Authentication through Auth0.
"""
type Auth0Authentication implements AuthenticationMethod{
"""
Stability: Long-term
"""
	auth0Domain: String!
"""
Stability: Long-term
"""
	clientId: String!
"""
Stability: Long-term
"""
	allowSignup: Boolean!
"""
Stability: Long-term
"""
	redirectUrl: String!
"""
The display name of the authentication method.
Stability: Long-term
"""
	name: String!
}

"""
Payload for specifying targets for batch updating query ownership
"""
input BatchUpdateQueryOwnershipInput {
"""
Payload for specifying targets for batch updating query ownership
"""
	targetType: QueryOwnership_SelectionTargetType!
"""
Payload for specifying targets for batch updating query ownership
"""
	ids: [String!]!
}

type BlockIngestMutation {
"""
Stability: Short-term
"""
	repository: Repository!
}

input BlockIngestOnOrgInput {
	blockIngest: Boolean!
}

type BooleanResultType {
"""
Stability: Long-term
"""
	result: Boolean!
}

"""
By proxy authentication. Authentication is provided by proxy.
"""
type ByProxyAuthentication implements AuthenticationMethod{
"""
Stability: Long-term
"""
	name: String!
}

"""
A policy for choosing which segments to cache on local disk when overcommiting
local storage with bucket storage.

This can be used to protect certain repositories for local storage, such that
searching other repositories does not evict them.

A cache policy in LogScale divides segments into prioritized and non-prioritized
segments. When segments needs to be evicted from local storage, we always try
evicting non-prioritized segments before prioritized segments.

A cache policy can be set either on one of three levels (in order of precedence):
 - Repo
 - Org
 - Globally

 When determining the cache policy for a repo we first check if there is a cache
 policy set on the repo. If none is set on the repo, we check the the org. If none
 is set there either we check the global setting.

"""
input CachePolicyInput {
"""
A policy for choosing which segments to cache on local disk when overcommiting
local storage with bucket storage.

This can be used to protect certain repositories for local storage, such that
searching other repositories does not evict them.

A cache policy in LogScale divides segments into prioritized and non-prioritized
segments. When segments needs to be evicted from local storage, we always try
evicting non-prioritized segments before prioritized segments.

A cache policy can be set either on one of three levels (in order of precedence):
 - Repo
 - Org
 - Globally

 When determining the cache policy for a repo we first check if there is a cache
 policy set on the repo. If none is set on the repo, we check the the org. If none
 is set there either we check the global setting.

"""
	prioritizeMillis: Long
}

input CancelRedactEventsInput {
	repositoryName: String!
	redactionTaskId: String!
}

"""
Data for clearing the error on an aggregate alert.
"""
input ClearErrorOnAggregateAlertInput {
"""
Data for clearing the error on an aggregate alert.
"""
	viewName: RepoOrViewName!
"""
Data for clearing the error on an aggregate alert.
"""
	id: String!
}

"""
Data for clearing the error on an alert
"""
input ClearErrorOnAlertInput {
"""
Data for clearing the error on an alert
"""
	viewName: String!
"""
Data for clearing the error on an alert
"""
	id: String!
}

"""
Data for clearing the error on a filter alert
"""
input ClearErrorOnFilterAlertInput {
"""
Data for clearing the error on a filter alert
"""
	viewName: RepoOrViewName!
"""
Data for clearing the error on a filter alert
"""
	id: String!
}

"""
Data for clearing the error on a scheduled search
"""
input ClearErrorOnScheduledSearchInput {
"""
Data for clearing the error on a scheduled search
"""
	viewName: String!
"""
Data for clearing the error on a scheduled search
"""
	id: String!
}

input ClearFieldConfigurationsInput {
	viewOrRepositoryName: String!
}

input ClearRecentQueriesInput {
	viewOrRepositoryName: String!
}

"""
Data for clearing the search limit on a search domain.
"""
input ClearSearchLimitForSearchDomain {
"""
Data for clearing the search limit on a search domain.
"""
	id: String!
}

"""
Input data to clone an existing parser
"""
input CloneParserInput {
"""
Input data to clone an existing parser
"""
	newParserName: String!
"""
Input data to clone an existing parser
"""
	repositoryName: String!
"""
Input data to clone an existing parser
"""
	parserIdToClone: String!
}

"""
Whether a column has been added or removed at the given index
"""
input ColumnChange {
"""
Whether a column has been added or removed at the given index
"""
	changeKind: ColumnChangeKind!
"""
Whether a column has been added or removed at the given index
"""
	index: Int!
}

enum ColumnChangeKind {
	Remove
	Add
}

input ConflictResolutionConfiguration {
	entityType: AssetType!
	entityName: String!
	conflictResolution: MergeStrategy!
}

type CopyDashboardMutation {
"""
Stability: Long-term
"""
	dashboard: Dashboard!
}

type CreateActionFromPackageTemplateMutation {
"""
Stability: Long-term
"""
	action: Action!
}

"""
Data for creating an action from a yaml template
"""
input CreateActionFromTemplateInput {
"""
Data for creating an action from a yaml template
"""
	viewName: RepoOrViewName!
"""
Data for creating an action from a yaml template
"""
	name: String!
"""
Data for creating an action from a yaml template
"""
	yamlTemplate: YAML!
}

"""
Data for creating an aggregate alert.
"""
input CreateAggregateAlert {
"""
Data for creating an aggregate alert.
"""
	viewName: RepoOrViewName!
"""
Data for creating an aggregate alert.
"""
	name: String!
"""
Data for creating an aggregate alert.
"""
	description: String
"""
Data for creating an aggregate alert.
"""
	queryString: String!
"""
Data for creating an aggregate alert.
"""
	actionIdsOrNames: [String!]!
"""
Data for creating an aggregate alert.
"""
	labels: [String!]
"""
Data for creating an aggregate alert.
"""
	enabled: Boolean
"""
Data for creating an aggregate alert.
"""
	throttleTimeSeconds: Long!
"""
Data for creating an aggregate alert.
"""
	throttleField: String
"""
Data for creating an aggregate alert.
"""
	searchIntervalSeconds: Long!
"""
Data for creating an aggregate alert.
"""
	queryTimestampType: QueryTimestampType!
"""
Data for creating an aggregate alert.
"""
	triggerMode: TriggerMode
"""
Data for creating an aggregate alert.
"""
	runAsUserId: String
"""
Data for creating an aggregate alert.
"""
	queryOwnershipType: QueryOwnershipType!
}

"""
Data for creating an alert
"""
input CreateAlert {
"""
Data for creating an alert
"""
	viewName: String!
"""
Data for creating an alert
"""
	name: String!
"""
Data for creating an alert
"""
	description: String
"""
Data for creating an alert
"""
	queryString: String!
"""
Data for creating an alert
"""
	queryStart: String!
"""
Data for creating an alert
"""
	throttleTimeMillis: Long!
"""
Data for creating an alert
"""
	throttleField: String
"""
Data for creating an alert
"""
	runAsUserId: String
"""
Data for creating an alert
"""
	enabled: Boolean
"""
Data for creating an alert
"""
	actions: [String!]!
"""
Data for creating an alert
"""
	labels: [String!]
"""
Data for creating an alert
"""
	queryOwnershipType: QueryOwnershipType
}

type CreateAlertFromPackageTemplateMutation {
"""
Stability: Long-term
"""
	alert: Alert!
}

"""
Data for creating an alert from a yaml template
"""
input CreateAlertFromTemplateInput {
"""
Data for creating an alert from a yaml template
"""
	viewName: RepoOrViewName!
"""
Data for creating an alert from a yaml template
"""
	name: String!
"""
Data for creating an alert from a yaml template
"""
	yamlTemplate: YAML!
}

"""
Data for creating an ingest feed that uses AWS S3 and SQS
"""
input CreateAwsS3SqsIngestFeed {
"""
Data for creating an ingest feed that uses AWS S3 and SQS
"""
	repositoryName: RepoOrViewName!
"""
Data for creating an ingest feed that uses AWS S3 and SQS
"""
	name: String!
"""
Data for creating an ingest feed that uses AWS S3 and SQS
"""
	description: String
"""
Data for creating an ingest feed that uses AWS S3 and SQS
"""
	parser: String!
"""
Data for creating an ingest feed that uses AWS S3 and SQS
"""
	authentication: IngestFeedAwsAuthenticationInput!
"""
Data for creating an ingest feed that uses AWS S3 and SQS
"""
	sqsUrl: String!
"""
Data for creating an ingest feed that uses AWS S3 and SQS
"""
	region: String!
"""
Data for creating an ingest feed that uses AWS S3 and SQS
"""
	enabled: Boolean!
"""
Data for creating an ingest feed that uses AWS S3 and SQS
"""
	preprocessing: IngestFeedPreprocessingInput!
"""
Data for creating an ingest feed that uses AWS S3 and SQS
"""
	compression: IngestFeedCompression!
}

input CreateCrossOrgViewInput {
	name: String!
	connections: [CrossOrganizationViewConnectionInputModel!]!
}

input CreateCustomLinkInteractionInput {
	path: String!
	customLinkInteractionInput: CustomLinkInteractionInput!
}

type CreateDashboardFromPackageTemplateMutation {
"""
Stability: Long-term
"""
	dashboard: Dashboard!
}

"""
Data for creating a dashboard from a yaml specification.
"""
input CreateDashboardFromTemplateV2Input {
"""
Data for creating a dashboard from a yaml specification.
"""
	viewName: RepoOrViewName!
"""
Data for creating a dashboard from a yaml specification.
"""
	name: String!
"""
Data for creating a dashboard from a yaml specification.
"""
	yamlTemplate: YAML!
}

input CreateDashboardInput {
	searchDomainName: String!
	name: String!
	labels: [String!]
	widgets: [WidgetInput!]
	sections: [SectionInput!]
	links: [LinkInput!]
	defaultFilterId: String
	filters: [FilterInput!]
	parameters: [ParameterInput!]
	description: String
	updateFrequency: DashboardUpdateFrequencyInput
	series: [SeriesConfigInput!]
}

input CreateDashboardLinkInteractionInput {
	path: String!
	dashboardLinkInteractionInput: DashboardLinkInteractionInput!
}

type CreateDashboardMutation {
"""
Stability: Long-term
"""
	dashboard: Dashboard!
}

"""
Data for creating an email action
"""
input CreateEmailAction {
"""
Data for creating an email action
"""
	viewName: String!
"""
Data for creating an email action
"""
	name: String!
"""
Data for creating an email action
"""
	recipients: [String!]!
"""
Data for creating an email action
"""
	subjectTemplate: String
"""
Data for creating an email action
"""
	bodyTemplate: String
"""
Data for creating an email action
"""
	useProxy: Boolean!
"""
Data for creating an email action
"""
	attachCsv: Boolean
}

"""
Data for creating an event forwarding rule
"""
input CreateEventForwardingRule {
"""
Data for creating an event forwarding rule
"""
	repoName: String!
"""
Data for creating an event forwarding rule
"""
	queryString: String!
"""
Data for creating an event forwarding rule
"""
	eventForwarderId: String!
"""
Data for creating an event forwarding rule
"""
	languageVersion: LanguageVersionEnum
}

"""
Data for creating an FDR feed
"""
input CreateFdrFeed {
"""
Data for creating an FDR feed
"""
	repositoryName: String!
"""
Data for creating an FDR feed
"""
	name: String!
"""
Data for creating an FDR feed
"""
	description: String
"""
Data for creating an FDR feed
"""
	parser: String!
"""
Data for creating an FDR feed
"""
	clientId: String!
"""
Data for creating an FDR feed
"""
	clientSecret: String!
"""
Data for creating an FDR feed
"""
	sqsUrl: String!
"""
Data for creating an FDR feed
"""
	s3Identifier: String!
"""
Data for creating an FDR feed
"""
	enabled: Boolean
}

input CreateFieldAliasSchemaFromTemplateInput {
	yamlTemplate: String!
	name: String!
}

input CreateFieldAliasSchemaInput {
	name: String!
	fields: [SchemaFieldInput!]!
	aliasMappings: [AliasMappingInput!]
}

"""
Data for creating a filter alert
"""
input CreateFilterAlert {
"""
Data for creating a filter alert
"""
	viewName: RepoOrViewName!
"""
Data for creating a filter alert
"""
	name: String!
"""
Data for creating a filter alert
"""
	description: String
"""
Data for creating a filter alert
"""
	queryString: String!
"""
Data for creating a filter alert
"""
	actionIdsOrNames: [String!]!
"""
Data for creating a filter alert
"""
	labels: [String!]
"""
Data for creating a filter alert
"""
	enabled: Boolean
"""
Data for creating a filter alert
"""
	throttleTimeSeconds: Long
"""
Data for creating a filter alert
"""
	throttleField: String
"""
Data for creating a filter alert
"""
	runAsUserId: String
"""
Data for creating a filter alert
"""
	queryOwnershipType: QueryOwnershipType!
}

"""
Data for creating a LogScale repository action
"""
input CreateHumioRepoAction {
"""
Data for creating a LogScale repository action
"""
	viewName: String!
"""
Data for creating a LogScale repository action
"""
	name: String!
"""
Data for creating a LogScale repository action
"""
	ingestToken: String!
}

"""
Input data to create an ingest listener
"""
input CreateIngestListenerV3Input {
"""
Input data to create an ingest listener
"""
	repositoryName: String!
"""
Input data to create an ingest listener
"""
	port: Int!
"""
Input data to create an ingest listener
"""
	protocol: IngestListenerProtocol!
"""
Input data to create an ingest listener
"""
	vHost: Int
"""
Input data to create an ingest listener
"""
	name: String!
"""
Input data to create an ingest listener
"""
	bindInterface: String!
"""
Input data to create an ingest listener
"""
	parser: String!
"""
Input data to create an ingest listener
"""
	charset: String!
}

"""
Data for creating a Kafka event forwarder
"""
input CreateKafkaEventForwarder {
"""
Data for creating a Kafka event forwarder
"""
	name: String!
"""
Data for creating a Kafka event forwarder
"""
	description: String!
"""
Data for creating a Kafka event forwarder
"""
	properties: String!
"""
Data for creating a Kafka event forwarder
"""
	topic: String!
"""
Data for creating a Kafka event forwarder
"""
	enabled: Boolean
}

"""
Data for creating a local multi-cluster connection
"""
input CreateLocalClusterConnectionInput {
"""
Data for creating a local multi-cluster connection
"""
	multiClusterViewName: String!
"""
Data for creating a local multi-cluster connection
"""
	targetViewName: String!
"""
Data for creating a local multi-cluster connection
"""
	tags: [ClusterConnectionInputTag!]
"""
Data for creating a local multi-cluster connection
"""
	queryPrefix: String
}

"""
Data for creating an OpsGenie action
"""
input CreateOpsGenieAction {
"""
Data for creating an OpsGenie action
"""
	viewName: String!
"""
Data for creating an OpsGenie action
"""
	name: String!
"""
Data for creating an OpsGenie action
"""
	apiUrl: String!
"""
Data for creating an OpsGenie action
"""
	genieKey: String!
"""
Data for creating an OpsGenie action
"""
	useProxy: Boolean!
}

"""
The specification of an external function.
"""
input CreateOrUpdateExternalFunctionInput {
"""
The specification of an external function.
"""
	name: String!
"""
The specification of an external function.
"""
	procedureURL: String!
"""
The specification of an external function.
"""
	parameters: [ParameterSpecificationInput!]!
"""
The specification of an external function.
"""
	description: String!
"""
The specification of an external function.
"""
	kind: KindInput!
}

input CreateOrganizationPermissionTokenInput {
	name: String!
	expireAt: Long
	ipFilterId: String
	permissions: [OrganizationPermission!]!
}

input CreateOrganizationPermissionsTokenV2Input {
	name: String!
	expireAt: Long
	ipFilterId: String
	organizationPermissions: [OrganizationPermission!]!
}

"""
The organization permissions token and its associated metadata.
"""
type CreateOrganizationPermissionsTokenV2Output {
"""
The organization permissions token.
Stability: Long-term
"""
	token: String!
"""
Metadata about the token.
Stability: Long-term
"""
	tokenMetadata: OrganizationPermissionsToken!
}

"""
Data for creating a PagerDuty action.
"""
input CreatePagerDutyAction {
"""
Data for creating a PagerDuty action.
"""
	viewName: String!
"""
Data for creating a PagerDuty action.
"""
	name: String!
"""
Data for creating a PagerDuty action.
"""
	severity: String!
"""
Data for creating a PagerDuty action.
"""
	routingKey: String!
"""
Data for creating a PagerDuty action.
"""
	useProxy: Boolean!
}

type CreateParserFromPackageTemplateMutation {
"""
Stability: Long-term
"""
	parser: Parser!
}

"""
Data for creating a parser from a yaml template
"""
input CreateParserFromTemplateInput {
"""
Data for creating a parser from a yaml template
"""
	viewName: RepoOrViewName!
"""
Data for creating a parser from a yaml template
"""
	name: String!
"""
Data for creating a parser from a yaml template
"""
	yamlTemplate: YAML!
}

input CreateParserInput {
	name: String!
	testData: [String!]!
	sourceCode: String!
	repositoryName: String!
	tagFields: [String!]!
	force: Boolean!
	languageVersion: LanguageVersionEnum
}

"""
Input for creating a parser.
"""
input CreateParserInputV2 {
"""
Input for creating a parser.
"""
	name: String!
"""
Input for creating a parser.
"""
	script: String!
"""
Input for creating a parser.
"""
	testCases: [ParserTestCaseInput!]!
"""
Input for creating a parser.
"""
	repositoryName: RepoOrViewName!
"""
Input for creating a parser.
"""
	fieldsToTag: [String!]!
"""
Input for creating a parser.
"""
	fieldsToBeRemovedBeforeParsing: [String!]!
"""
Input for creating a parser.
"""
	allowOverwritingExistingParser: Boolean
"""
Input for creating a parser.
"""
	languageVersion: LanguageVersionInputType
}

type CreateParserMutation {
"""
Stability: Long-term
"""
	parser: Parser!
}

input CreatePersonalUserTokenInput {
	expireAt: Long
	ipFilterId: String
}

"""
The personal user token and its associated metadata.
"""
type CreatePersonalUserTokenV2Output {
"""
The personal user token.
Stability: Long-term
"""
	token: String!
"""
Metadata about the token.
Stability: Long-term
"""
	tokenMetadata: PersonalUserToken!
}

"""
Data for creating a post message Slack action.
"""
input CreatePostMessageSlackAction {
"""
Data for creating a post message Slack action.
"""
	viewName: String!
"""
Data for creating a post message Slack action.
"""
	name: String!
"""
Data for creating a post message Slack action.
"""
	apiToken: String!
"""
Data for creating a post message Slack action.
"""
	channels: [String!]!
"""
Data for creating a post message Slack action.
"""
	fields: [SlackFieldEntryInput!]!
"""
Data for creating a post message Slack action.
"""
	useProxy: Boolean!
}

"""
Data for creating a remote cluster connection
"""
input CreateRemoteClusterConnectionInput {
"""
Data for creating a remote cluster connection
"""
	multiClusterViewName: String!
"""
Data for creating a remote cluster connection
"""
	publicUrl: String!
"""
Data for creating a remote cluster connection
"""
	token: String!
"""
Data for creating a remote cluster connection
"""
	tags: [ClusterConnectionInputTag!]
"""
Data for creating a remote cluster connection
"""
	queryPrefix: String
}

type CreateRepositoryMutation {
"""
Stability: Long-term
"""
	repository: Repository!
}

type CreateSavedQueryFromPackageTemplateMutation {
"""
Stability: Long-term
"""
	savedQuery: SavedQuery!
}

input CreateSavedQueryInput {
	name: String!
	viewName: String!
	queryString: String!
	start: String
	end: String
	isLive: Boolean
	widgetType: String
	options: String
	dashboardLinkInteractions: [DashboardLinkInteractionInput!]
	customLinkInteractions: [CustomLinkInteractionInput!]
	searchLinkInteractions: [SearchLinkInteractionInput!]
	updateParametersInteractions: [UpdateParametersInteractionInput!]
}

type CreateSavedQueryPayload {
"""
Stability: Long-term
"""
	savedQuery: SavedQuery!
}

"""
Data for creating a scheduled report.
"""
input CreateScheduledReportInput {
"""
Data for creating a scheduled report.
"""
	viewName: String!
"""
Data for creating a scheduled report.
"""
	name: String!
"""
Data for creating a scheduled report.
"""
	password: String
"""
Data for creating a scheduled report.
"""
	enabled: Boolean!
"""
Data for creating a scheduled report.
"""
	description: String!
"""
Data for creating a scheduled report.
"""
	dashboardId: String!
"""
Data for creating a scheduled report.
"""
	timeIntervalFrom: String
"""
Data for creating a scheduled report.
"""
	schedule: CreateScheduledReportScheduleInput!
"""
Data for creating a scheduled report.
"""
	labels: [String!]!
"""
Data for creating a scheduled report.
"""
	parameters: [CreateScheduledReportParameterValueInput!]!
"""
Data for creating a scheduled report.
"""
	recipients: [String!]!
"""
Data for creating a scheduled report.
"""
	layout: CreateScheduledReportLayoutInput!
}

"""
Layout of the scheduled report.
"""
input CreateScheduledReportLayoutInput {
"""
Layout of the scheduled report.
"""
	paperSize: String!
"""
Layout of the scheduled report.
"""
	paperOrientation: String!
"""
Layout of the scheduled report.
"""
	paperLayout: String!
"""
Layout of the scheduled report.
"""
	showDescription: Boolean!
"""
Layout of the scheduled report.
"""
	showTitleFrontpage: Boolean!
"""
Layout of the scheduled report.
"""
	showParameters: Boolean!
"""
Layout of the scheduled report.
"""
	maxNumberOfRows: Int!
"""
Layout of the scheduled report.
"""
	showTitleHeader: Boolean!
"""
Layout of the scheduled report.
"""
	showExportDate: Boolean!
"""
Layout of the scheduled report.
"""
	footerShowPageNumbers: Boolean!
}

"""
List of parameter value configurations.
"""
input CreateScheduledReportParameterValueInput {
"""
List of parameter value configurations.
"""
	id: String!
"""
List of parameter value configurations.
"""
	value: String!
}

"""
The schedule to run the report by.
"""
input CreateScheduledReportScheduleInput {
"""
The schedule to run the report by.
"""
	cronExpression: String!
"""
The schedule to run the report by.
"""
	timeZone: String!
"""
The schedule to run the report by.
"""
	startDate: Long!
"""
The schedule to run the report by.
"""
	endDate: Long
}

"""
Data for creating a scheduled search
"""
input CreateScheduledSearch {
"""
Data for creating a scheduled search
"""
	viewName: String!
"""
Data for creating a scheduled search
"""
	name: String!
"""
Data for creating a scheduled search
"""
	description: String
"""
Data for creating a scheduled search
"""
	queryString: String!
"""
Data for creating a scheduled search
"""
	queryStart: String!
"""
Data for creating a scheduled search
"""
	queryEnd: String!
"""
Data for creating a scheduled search
"""
	schedule: String!
"""
Data for creating a scheduled search
"""
	timeZone: String!
"""
Data for creating a scheduled search
"""
	backfillLimit: Int!
"""
Data for creating a scheduled search
"""
	enabled: Boolean
"""
Data for creating a scheduled search
"""
	actions: [String!]!
"""
Data for creating a scheduled search
"""
	labels: [String!]
"""
Data for creating a scheduled search
"""
	runAsUserId: String
"""
Data for creating a scheduled search
"""
	queryOwnershipType: QueryOwnershipType
}

"""
Data for creating a scheduled search from a yaml template.
"""
input CreateScheduledSearchFromTemplateInput {
"""
Data for creating a scheduled search from a yaml template.
"""
	viewName: RepoOrViewName!
"""
Data for creating a scheduled search from a yaml template.
"""
	name: String!
"""
Data for creating a scheduled search from a yaml template.
"""
	yamlTemplate: YAML!
}

"""
Data for creating a scheduled search
"""
input CreateScheduledSearchV2 {
"""
Data for creating a scheduled search
"""
	viewName: String!
"""
Data for creating a scheduled search
"""
	name: String!
"""
Data for creating a scheduled search
"""
	description: String
"""
Data for creating a scheduled search
"""
	queryString: String!
"""
Data for creating a scheduled search
"""
	searchIntervalSeconds: Long!
"""
Data for creating a scheduled search
"""
	searchIntervalOffsetSeconds: Long
"""
Data for creating a scheduled search
"""
	maxWaitTimeSeconds: Long
"""
Data for creating a scheduled search
"""
	schedule: String!
"""
Data for creating a scheduled search
"""
	timeZone: String!
"""
Data for creating a scheduled search
"""
	backfillLimit: Int
"""
Data for creating a scheduled search
"""
	enabled: Boolean
"""
Data for creating a scheduled search
"""
	actionIdsOrNames: [String!]!
"""
Data for creating a scheduled search
"""
	labels: [String!]
"""
Data for creating a scheduled search
"""
	runAsUserId: String
"""
Data for creating a scheduled search
"""
	queryOwnershipType: QueryOwnershipType!
"""
Data for creating a scheduled search
"""
	queryTimestampType: QueryTimestampType!
}

input CreateSearchLinkInteractionInput {
	path: String!
	searchLinkInteractionInput: SearchLinkInteractionInput!
}

"""
Data for creating a Slack action.
"""
input CreateSlackAction {
"""
Data for creating a Slack action.
"""
	viewName: String!
"""
Data for creating a Slack action.
"""
	name: String!
"""
Data for creating a Slack action.
"""
	url: String!
"""
Data for creating a Slack action.
"""
	fields: [SlackFieldEntryInput!]!
"""
Data for creating a Slack action.
"""
	useProxy: Boolean!
}

input CreateSystemPermissionTokenInput {
	name: String!
	expireAt: Long
	ipFilterId: String
	permissions: [SystemPermission!]!
}

input CreateSystemPermissionTokenV2Input {
	name: String!
	expireAt: Long
	ipFilterId: String
	systemPermissions: [SystemPermission!]!
}

"""
The system permissions token and its associated metadata.
"""
type CreateSystemPermissionsTokenV2Output {
"""
The system permissions token.
Stability: Long-term
"""
	token: String!
"""
Metadata about the token.
Stability: Long-term
"""
	tokenMetadata: SystemPermissionsToken!
}

"""
Data for creating an upload file action.
"""
input CreateUploadFileAction {
"""
Data for creating an upload file action.
"""
	viewName: String!
"""
Data for creating an upload file action.
"""
	name: String!
"""
Data for creating an upload file action.
"""
	fileName: String!
}

"""
Data for creating a VictorOps action.
"""
input CreateVictorOpsAction {
"""
Data for creating a VictorOps action.
"""
	viewName: String!
"""
Data for creating a VictorOps action.
"""
	name: String!
"""
Data for creating a VictorOps action.
"""
	messageType: String!
"""
Data for creating a VictorOps action.
"""
	notifyUrl: String!
"""
Data for creating a VictorOps action.
"""
	useProxy: Boolean!
}

input CreateViewPermissionsTokenInput {
	name: String!
	expireAt: Long
	ipFilterId: String
	viewIds: [String!]!
	permissions: [Permission!]!
}

input CreateViewPermissionsTokenV2Input {
	name: String!
	expireAt: Long
	ipFilterId: String
	viewIds: [String!]!
	viewPermissions: [Permission!]!
	assetPermissionAssignments: [ViewPermissionsTokenAssetPermissionAssignmentInput!]
}

"""
The view permissions token and its associated metadata.
"""
type CreateViewPermissionsTokenV2Output {
"""
The view permissions token.
Stability: Long-term
"""
	token: String!
"""
Metadata about the token.
Stability: Long-term
"""
	tokenMetadata: ViewPermissionsToken!
}

"""
Data for creating a webhook action.
"""
input CreateWebhookAction {
"""
Data for creating a webhook action.
"""
	viewName: String!
"""
Data for creating a webhook action.
"""
	name: String!
"""
Data for creating a webhook action.
"""
	url: String!
"""
Data for creating a webhook action.
"""
	method: String!
"""
Data for creating a webhook action.
"""
	headers: [HttpHeaderEntryInput!]!
"""
Data for creating a webhook action.
"""
	bodyTemplate: String!
"""
Data for creating a webhook action.
"""
	ignoreSSL: Boolean!
"""
Data for creating a webhook action.
"""
	useProxy: Boolean!
}

input CrossOrganizationViewConnectionInputModel {
	repoName: String!
	filter: String!
	organizationId: String!
}

input CustomLinkInteractionInput {
	name: String!
	titleTemplate: String
	urlTemplate: String!
	openInNewTab: Boolean!
	urlEncodeArgs: Boolean
	fieldInteractionConditions: [FieldInteractionConditionInput!]
}

input DashboardLinkInteractionInput {
	name: String!
	titleTemplate: String
	arguments: [ArgumentInput!]!
	dashboardId: String
	dashboardName: String
	dashboardRepoOrViewName: RepoOrViewName
	packageSpecifier: UnversionedPackageSpecifier
	openInNewTab: Boolean!
	useWidgetTimeWindow: Boolean!
	fieldInteractionConditions: [FieldInteractionConditionInput!]
}

"""
The frequency at which a dashboard updates its results.
"""
enum DashboardUpdateFrequency {
	RealTime
	Never
}

input DashboardUpdateFrequencyInput {
	updateFrequencyType: DashboardUpdateFrequency!
}

"""
Data for deleting an action.
"""
input DeleteAction {
"""
Data for deleting an action.
"""
	viewName: String!
"""
Data for deleting an action.
"""
	id: String!
}

"""
Data for deleting an aggregate alert.
"""
input DeleteAggregateAlert {
"""
Data for deleting an aggregate alert.
"""
	viewName: RepoOrViewName!
"""
Data for deleting an aggregate alert.
"""
	id: String!
}

"""
Data for deleting an alert
"""
input DeleteAlert {
"""
Data for deleting an alert
"""
	viewName: String!
"""
Data for deleting an alert
"""
	id: String!
}

"""
Data for deleting a cluster connection
"""
input DeleteClusterConnectionInput {
"""
Data for deleting a cluster connection
"""
	multiClusterViewName: String!
"""
Data for deleting a cluster connection
"""
	connectionId: String!
}

input DeleteDashboardInput {
	id: String!
}

"""
The data for deleting a dashboard
"""
input DeleteDashboardInputV2 {
"""
The data for deleting a dashboard
"""
	viewId: String!
"""
The data for deleting a dashboard
"""
	dashboardId: String!
}

type DeleteDashboardMutation {
"""
Stability: Long-term
"""
	dashboard: Dashboard!
}

"""
Data for deleting an event forwarder
"""
input DeleteEventForwarderInput {
"""
Data for deleting an event forwarder
"""
	id: String!
}

"""
Data for deleting an event forwarding rule
"""
input DeleteEventForwardingRule {
"""
Data for deleting an event forwarding rule
"""
	repoName: String!
"""
Data for deleting an event forwarding rule
"""
	id: String!
}

"""
Data for deleting an FDR feed
"""
input DeleteFdrFeed {
"""
Data for deleting an FDR feed
"""
	repositoryName: String!
"""
Data for deleting an FDR feed
"""
	id: String!
}

input DeleteFieldAliasSchema {
	schemaId: String!
}

"""
Data for deleting a filter alert
"""
input DeleteFilterAlert {
"""
Data for deleting a filter alert
"""
	viewName: RepoOrViewName!
"""
Data for deleting a filter alert
"""
	id: String!
}

"""
Data for deleting an ingest feed
"""
input DeleteIngestFeed {
"""
Data for deleting an ingest feed
"""
	repositoryName: RepoOrViewName!
"""
Data for deleting an ingest feed
"""
	id: String!
}

input DeleteInteractionInput {
	path: String!
	id: String!
}

input DeleteParserInput {
	id: String!
	repositoryName: RepoOrViewName!
}

input DeleteSavedQueryInput {
	id: String!
	viewName: String!
}

"""
Data for deleting a scheduled report.
"""
input DeleteScheduledReportInput {
"""
Data for deleting a scheduled report.
"""
	viewName: String!
"""
Data for deleting a scheduled report.
"""
	id: String!
}

"""
Data for deleting a scheduled search
"""
input DeleteScheduledSearch {
"""
Data for deleting a scheduled search
"""
	viewName: String!
"""
Data for deleting a scheduled search
"""
	id: String!
}

input DeleteSearchDomainByIdInput {
	id: String!
	deleteMessage: String
}

"""
Data for disabling an aggregate alert.
"""
input DisableAggregateAlert {
"""
Data for disabling an aggregate alert.
"""
	viewName: RepoOrViewName!
"""
Data for disabling an aggregate alert.
"""
	id: String!
}

"""
Data for disabling an alert
"""
input DisableAlert {
"""
Data for disabling an alert
"""
	viewName: RepoOrViewName!
"""
Data for disabling an alert
"""
	id: String!
}

"""
Data for disabling an event forwarder
"""
input DisableEventForwarderInput {
"""
Data for disabling an event forwarder
"""
	id: String!
}

input DisableFieldAliasSchemaOnOrgInput {
	schemaId: String!
}

input DisableFieldAliasSchemaOnViewInput {
	viewName: String!
	schemaId: String!
}

input DisableFieldAliasSchemaOnViewsInput {
	schemaId: String!
	viewNames: [String!]!
}

"""
Data for disabling a filter alert
"""
input DisableFilterAlert {
"""
Data for disabling a filter alert
"""
	viewName: RepoOrViewName!
"""
Data for disabling a filter alert
"""
	id: String!
}

"""
Data for disabling access to IOCs (indicators of compromise) for an organization
"""
input DisableOrganizationIocAccess {
"""
Data for disabling access to IOCs (indicators of compromise) for an organization
"""
	organizationId: String!
}

"""
Data for disabling a scheduled report.
"""
input DisableScheduledReportInput {
"""
Data for disabling a scheduled report.
"""
	viewName: String!
"""
Data for disabling a scheduled report.
"""
	id: String!
}

"""
Data for disabling a scheduled search
"""
input DisableStarScheduledSearch {
"""
Data for disabling a scheduled search
"""
	viewName: String!
"""
Data for disabling a scheduled search
"""
	id: String!
}

input DynamicConfigInputObject {
	config: DynamicConfig!
	value: String!
}

"""
An email action.
"""
type EmailAction implements Action{
"""
List of email addresses to send an email to.
Stability: Long-term
"""
	recipients: [String!]!
"""
Subject of the email. Can be templated with values from the result.
Stability: Long-term
"""
	subjectTemplate: String
"""
Body of the email. Can be templated with values from the result.
Stability: Long-term
"""
	bodyTemplate: String
"""
Defines whether the action should use the configured proxy to make web requests.
Stability: Long-term
"""
	useProxy: Boolean!
"""
Whether the result set should be attached as a CSV file.
Stability: Long-term
"""
	attachCsv: Boolean!
"""
The name of the action.
Stability: Long-term
"""
	name: String!
"""
The display name of the action.
Stability: Long-term
"""
	displayName: String!
"""
The id of the action.
Stability: Long-term
"""
	id: String!
"""
A template that can be used to recreate the action.
Stability: Long-term
"""
	yamlTemplate: YAML!
"""
Stability: Long-term
"""
	packageId: VersionedPackageSpecifier
"""
The package, if any, which the action is part of.
Stability: Long-term
"""
	package: PackageInstallation
"""
False if this type of action is disabled because of a security policy, true otherwise
Stability: Long-term
"""
	isAllowedToRun: Boolean!
"""
True if this action is used by triggers, where the query is run by the organization. If true, then the OrganizationOwnedQueries permission is required to edit the action.
Stability: Long-term
"""
	requiresOrganizationOwnedQueriesPermissionToEdit: Boolean!
"""
Allowed asset actions
Stability: Preview
"""
	allowedActions: [AssetAction!]!
"""
The resource identifier for this action.
Stability: Short-term
"""
	resource: String!
}

"""
Data for enabling an aggregate alert.
"""
input EnableAggregateAlert {
"""
Data for enabling an aggregate alert.
"""
	viewName: RepoOrViewName!
"""
Data for enabling an aggregate alert.
"""
	id: String!
}

"""
Data for enabling an alert
"""
input EnableAlert {
"""
Data for enabling an alert
"""
	viewName: RepoOrViewName!
"""
Data for enabling an alert
"""
	id: String!
}

"""
Data for enabling an event forwarder
"""
input EnableEventForwarderInput {
"""
Data for enabling an event forwarder
"""
	id: String!
}

input EnableFieldAliasSchemaOnOrgInput {
	schemaId: String!
}

input EnableFieldAliasSchemaOnViewsInput {
	viewNames: [String!]!
	schemaId: String!
}

"""
Data for enabling a filter alert
"""
input EnableFilterAlert {
"""
Data for enabling a filter alert
"""
	viewName: RepoOrViewName!
"""
Data for enabling a filter alert
"""
	id: String!
}

"""
Data for enabling access to IOCs (indicators of compromise) for an organization
"""
input EnableOrganizationIocAccess {
"""
Data for enabling access to IOCs (indicators of compromise) for an organization
"""
	organizationId: String!
}

"""
Data for enabling a scheduled report.
"""
input EnableScheduledReportInput {
"""
Data for enabling a scheduled report.
"""
	viewName: String!
"""
Data for enabling a scheduled report.
"""
	id: String!
}

"""
Data for enabling a scheduled search
"""
input EnableStarScheduledSearch {
"""
Data for enabling a scheduled search
"""
	viewName: String!
"""
Data for enabling a scheduled search
"""
	id: String!
}

input EnableWorkerQueryTracingInputType {
	quotaKey: String!
	expiry: DateTime!
}

"""
Enable or disable language restrictions
"""
input EnabledInput {
"""
Enable or disable language restrictions
"""
	version: LanguageVersionEnum!
"""
Enable or disable language restrictions
"""
	enabled: Boolean!
}

input EnforceSubdomainsInput {
	enforce: Boolean!
}

"""
Information about an enrolled collector
"""
type EnrolledCollector {
"""
Stability: Short-term
"""
	id: String!
"""
Stability: Short-term
"""
	configId: String
"""
Stability: Short-term
"""
	machineId: String!
}

"""
Enterprise only authentication.
"""
type EnterpriseOnlyAuthentication implements AuthenticationMethod{
"""
Stability: Long-term
"""
	name: String!
}

"""
A single field in an event with a name and a value
"""
type EventField {
"""
The name of the field
Stability: Long-term
"""
	fieldName: String!
"""
The value of the field
Stability: Long-term
"""
	value: String!
}

"""
A single field in an event with a key and a value
"""
type Field {
"""
The key of the field
Stability: Long-term
"""
	key: String!
"""
The value of the field
Stability: Long-term
"""
	value: String!
}

input FieldConfigurationInput {
	viewId: String!
	fieldName: String!
	json: JSON!
}

"""
Assertion results can be uniquely identified by the output event index and the field name they operate on. So if the same field on the same event has multiple assertions attached, this failure is produced.
"""
type FieldHadConflictingAssertions {
"""
Field being asserted on.
Stability: Long-term
"""
	fieldName: String!
}

"""
An assertion was made that a field had some value, and this assertion failed due to an unexpected value for the field.
"""
type FieldHadUnexpectedValue {
"""
Field being asserted on.
Stability: Long-term
"""
	fieldName: String!
"""
Value that was asserted to be contained in the field.
Stability: Long-term
"""
	expectedValue: String!
"""
The actual value of the field. Note that this is null in the case where the field wasn't present at all.
Stability: Long-term
"""
	actualValue: String
}

"""
Asserts that a given field has an expected value after having been parsed.
"""
input FieldHasValueInput {
"""
Asserts that a given field has an expected value after having been parsed.
"""
	fieldName: String!
"""
Asserts that a given field has an expected value after having been parsed.
"""
	expectedValue: String!
}

input FieldInteractionConditionInput {
	fieldName: String!
	operator: FieldConditionOperatorType!
	argument: String!
}

"""
An assertion was made that a field should not be present, and this assertion failed.
"""
type FieldUnexpectedlyPresent {
"""
Field being asserted on.
Stability: Long-term
"""
	fieldName: String!
"""
The value that the field contained.
Stability: Long-term
"""
	actualValue: String!
}

"""
A dashboard parameter where suggestions are taken from uploaded files.
"""
type FileDashboardParameter implements DashboardParameter{
"""
The name of the file to perform lookups in.
Stability: Long-term
"""
	fileName: String!
"""
The column where the value of suggestions are taken from,
Stability: Long-term
"""
	valueColumn: String!
"""
The column where the label of suggestions are taken from,
Stability: Long-term
"""
	labelColumn: String
"""
Fields and values, where an entry in a file must match one of the given values for each field.
Stability: Long-term
"""
	valueFilters: [FileParameterValueFilter!]!
"""
Regex patterns used to block parameter input.
Stability: Long-term
"""
	invalidInputPatterns: [String!]
"""
Message when parameter input is blocked.
Stability: Long-term
"""
	invalidInputMessage: String
"""
The ID of the parameter.
Stability: Long-term
"""
	id: String!
"""
The label or 'name' displayed next to the input for the variable to make it more human-readable.
Stability: Long-term
"""
	label: String!
"""
The value assigned to the parameter on dashboard load, if no other value is specified.
Stability: Long-term
"""
	defaultValueV2: String
"""
A number that determines the order in which parameters are displayed on a dashboard. If null, the parameter is ordered after other parameters in alphanumerical order.
Stability: Long-term
"""
	order: Int
"""
A number that determines the width of a parameter.
Stability: Long-term
"""
	width: Int
}

"""
A filter to reduce entries from files down to those with a matching value in the field.
"""
type FileParameterValueFilter {
"""
Stability: Long-term
"""
	field: String!
"""
Stability: Long-term
"""
	values: [String!]!
}

input FilterInput {
	id: String!
	name: String!
	prefix: String!
}

"""
A dashboard parameter with a fixed list of values to select from.
"""
type FixedListDashboardParameter implements DashboardParameter{
"""
Stability: Long-term
"""
	values: [FixedListParameterOption!]!
"""
The ID of the parameter.
Stability: Long-term
"""
	id: String!
"""
The label or 'name' displayed next to the input for the variable to make it more human-readable.
Stability: Long-term
"""
	label: String!
"""
The value assigned to the parameter on dashboard load, if no other value is specified.
Stability: Long-term
"""
	defaultValueV2: String
"""
A number that determines the order in which parameters are displayed on a dashboard. If null, the parameter is ordered after other parameters in alphanumerical order.
Stability: Long-term
"""
	order: Int
"""
A number that determines the width of a parameter.
Stability: Long-term
"""
	width: Int
}

"""
An option in a fixed list parameter.
"""
type FixedListParameterOption {
"""
Stability: Long-term
"""
	label: String!
"""
Stability: Long-term
"""
	value: String!
}

type FleetConfigurationTest {
"""
Stability: Short-term
"""
	collectorIds: [String!]!
"""
Stability: Short-term
"""
	configId: String!
}

"""
A dashboard parameter without restrictions or suggestions.
"""
type FreeTextDashboardParameter implements DashboardParameter{
"""
Regex patterns used to block parameter input.
Stability: Long-term
"""
	invalidInputPatterns: [String!]
"""
Message when parameter input is blocked.
Stability: Long-term
"""
	invalidInputMessage: String
"""
The ID of the parameter.
Stability: Long-term
"""
	id: String!
"""
The label or 'name' displayed next to the input for the variable to make it more human-readable.
Stability: Long-term
"""
	label: String!
"""
The value assigned to the parameter on dashboard load, if no other value is specified.
Stability: Long-term
"""
	defaultValueV2: String
"""
A number that determines the order in which parameters are displayed on a dashboard. If null, the parameter is ordered after other parameters in alphanumerical order.
Stability: Long-term
"""
	order: Int
"""
A number that determines the width of a parameter.
Stability: Long-term
"""
	width: Int
}

"""
Input list of function names
"""
input FunctionListInput {
"""
Input list of function names
"""
	version: LanguageVersionEnum!
"""
Input list of function names
"""
	functions: [String!]!
}

"""
The organization management roles of the group.
"""
type GroupOrganizationManagementRole {
"""
Stability: Long-term
"""
	role: Role!
}

input GroupRoleAssignment {
	groupId: String!
	roleId: String!
}

"""
A http request header.
"""
type HttpHeaderEntry {
"""
Key of a http(s) header.
Stability: Long-term
"""
	header: String!
"""
Value of a http(s) header.
Stability: Long-term
"""
	value: String!
}

"""
Http(s) Header entry.
"""
input HttpHeaderEntryInput {
"""
Http(s) Header entry.
"""
	header: String!
"""
Http(s) Header entry.
"""
	value: String!
}

"""
A LogScale repository action.
"""
type HumioRepoAction implements Action{
"""
Humio ingest token for the dataspace that the action should ingest into.
Stability: Long-term
"""
	ingestToken: String!
"""
The name of the action.
Stability: Long-term
"""
	name: String!
"""
The display name of the action.
Stability: Long-term
"""
	displayName: String!
"""
The id of the action.
Stability: Long-term
"""
	id: String!
"""
A template that can be used to recreate the action.
Stability: Long-term
"""
	yamlTemplate: YAML!
"""
Stability: Long-term
"""
	packageId: VersionedPackageSpecifier
"""
The package, if any, which the action is part of.
Stability: Long-term
"""
	package: PackageInstallation
"""
False if this type of action is disabled because of a security policy, true otherwise
Stability: Long-term
"""
	isAllowedToRun: Boolean!
"""
True if this action is used by triggers, where the query is run by the organization. If true, then the OrganizationOwnedQueries permission is required to edit the action.
Stability: Long-term
"""
	requiresOrganizationOwnedQueriesPermissionToEdit: Boolean!
"""
Allowed asset actions
Stability: Preview
"""
	allowedActions: [AssetAction!]!
"""
The resource identifier for this action.
Stability: Short-term
"""
	resource: String!
}

input IPFilterIdInput {
	id: String!
}

input IPFilterInput {
	name: String!
	ipFilter: String!
}

input IPFilterUpdateInput {
	id: String!
	name: String
	ipFilter: String
}

type Ignored implements contractual{
"""

Stability: Long-term
"""
	includeUsage: Boolean!
}

"""
How to authenticate to AWS.
"""
input IngestFeedAwsAuthenticationInput {
"""
How to authenticate to AWS.
"""
	kind: IngestFeedAwsAuthenticationKind!
"""
How to authenticate to AWS.
"""
	roleArn: String
}

"""
The kind of AWS authentication to use.
"""
enum IngestFeedAwsAuthenticationKind {
"""
IAM role authentication
"""
	IamRole
}

"""
The preprocessing to apply to an ingest feed before parsing.
"""
input IngestFeedPreprocessingInput {
"""
The preprocessing to apply to an ingest feed before parsing.
"""
	kind: IngestFeedPreprocessingKind!
}

input IngestPartitionInput {
	id: Int!
	nodeIds: [Int!]!
}

input InputData {
	id: String!
}

input InputDictionaryEntry {
	key: String!
	value: String!
}

input InstallPackageFromRegistryInput {
	viewName: RepoOrViewName!
	packageId: VersionedPackageSpecifier!
	queryOwnershipType: QueryOwnershipType
}

type InstallPackageFromRegistryResult {
"""
Stability: Long-term
"""
	package: Package2!
}

type InstallPackageFromZipResult {
"""
Stability: Long-term
"""
	wasSuccessful: Boolean!
}

type InteractionId {
"""
Stability: Long-term
"""
	id: String!
}

"""
A Kafka event forwarder
"""
type KafkaEventForwarder implements EventForwarder{
"""
The Kafka topic the events should be forwarded to
Stability: Long-term
"""
	topic: String!
"""
The Kafka producer configuration used to forward events in the form of properties (x.y.z=abc). See https://library.humio.com/humio-server/ingesting-data-event-forwarders.html#kafka-configuration.
Stability: Long-term
"""
	properties: String!
"""
Id of the event forwarder
Stability: Long-term
"""
	id: String!
"""
Name of the event forwarder
Stability: Long-term
"""
	name: String!
"""
Description of the event forwarder
Stability: Long-term
"""
	description: String!
"""
Is the event forwarder enabled
Stability: Long-term
"""
	enabled: Boolean!
}

"""
Defines how the external function is executed.
"""
input KindInput {
"""
Defines how the external function is executed.
"""
	name: KindEnum!
"""
Defines how the external function is executed.
"""
	parametersDefiningKeyFields: [String!]
"""
Defines how the external function is executed.
"""
	fixedKeyFields: [String!]
}

type Limited implements contractual{
"""

Stability: Long-term
"""
	limit: Long!
"""

Stability: Long-term
"""
	includeUsage: Boolean!
}

input LinkInput {
	name: String!
	token: String!
}

"""
A widget that lists links to other dashboards.
"""
type LinkWidget implements Widget{
"""
Stability: Preview
"""
	labels: [String!]!
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	title: String!
"""
Stability: Long-term
"""
	description: String
"""
Stability: Long-term
"""
	x: Int!
"""
Stability: Long-term
"""
	y: Int!
"""
Stability: Long-term
"""
	width: Int!
"""
Stability: Long-term
"""
	height: Int!
}

"""
A local cluster connection.
"""
type LocalClusterConnection implements ClusterConnection{
"""
Id of the local view to connect with
Stability: Short-term
"""
	targetViewId: String!
"""
Name of the local view to connect with
Stability: Short-term
"""
	targetViewName: RepoOrViewName!
"""
Stability: Short-term
"""
	targetViewType: LocalTargetType!
"""
Id of the connection
Stability: Short-term
"""
	id: String!
"""
Cluster identity of the connection
Stability: Short-term
"""
	clusterId: String!
"""
Cluster connection tags
Stability: Short-term
"""
	tags: [ClusterConnectionTag!]!
"""
Cluster connection query prefix
Stability: Short-term
"""
	queryPrefix: String!
}

"""
Indicates whether the target of a local cluster connection is a view or a repo
"""
enum LocalTargetType {
	View
	Repo
}

input LoginBridgeInput {
	name: String!
	description: String!
	issuer: String!
	remoteId: String!
	loginUrl: String!
	relayStateUrl: String!
	samlEntityId: String!
	privateSamlCertificate: String!
	publicSamlCertificate: String!
	allowedUsers: [String!]!
	groupAttribute: String!
	groups: [String!]!
	organizationIdAttributeName: String!
	additionalAttributes: String
	organizationNameAttribute: String
	generateUserName: Boolean!
	termsDescription: String!
	termsLink: String!
}

input LoginBridgeUpdateInput {
	name: String
	description: String
	issuer: String
	remoteId: String
	loginUrl: String
	relayStateUrl: String
	samlEntityId: String
	privateSamlCertificate: String
	publicSamlCertificate: String
	allowedUsers: [String!]
	groupAttribute: String
	groups: [String!]
	organizationIdAttributeName: String
	additionalAttributes: String
	organizationNameAttribute: String
	generateUserName: Boolean
	termsDescription: String
	termsLink: String
}

input MarkLimitDeletedInput {
	limitName: String!
	deleted: Boolean!
}

enum MergeStrategy {
	Theirs
	Ours
}

input MigrateLimitsInput {
	createLogLimit: Boolean!
	defaultLimit: String
}

"""
Modified by a supporter
"""
type ModifiedInfoSupporter implements ModifiedInfo{
"""
Timestamp of when the asset was last modified
Stability: Long-term
"""
	modifiedAt: Long!
}

"""
Modified using a token
"""
type ModifiedInfoToken implements ModifiedInfo{
"""
Id of the token used to modify the asset.
Stability: Long-term
"""
	tokenId: String!
"""
Timestamp of when the asset was last modified
Stability: Long-term
"""
	modifiedAt: Long!
}

"""
Modified by a user
"""
type ModifiedInfoUser implements ModifiedInfo{
"""
User who modified the asset. If null, the user is deleted.
Stability: Long-term
"""
	user: User
"""
Timestamp of when the asset was last modified
Stability: Long-term
"""
	modifiedAt: Long!
}

type Mutation {
"""
Will clear the search limit and excluded repository making future searches done on this view behave normally, i.e. having no search time-limit applied
Stability: Preview
"""
	ClearSearchLimitForSearchDomain(
"""
Data for clearing the search limit on a search domain.
"""
		input: ClearSearchLimitForSearchDomain!
	): View!
"""
Will update search limit, which will restrict future searches to the specified limit, a list of repository names can be supplied and will not be restricted by this limit.
Stability: Preview
"""
	SetSearchLimitForSearchDomain(
"""
Data for updating search limit on a search domain.
"""
		input: SetSearchLimitForSearchDomain!
	): View!
"""
Client accepts LogScale's Terms and Conditions without providing any additional info
Stability: Long-term
"""
	acceptTermsAndConditions: Account!
"""
Activates a user account supplying additional personal info. By activating the account the client accepts LogScale's Terms and Conditions: https://www.humio.com/terms-and-conditions
Stability: Long-term
"""
	activateAccount(
"""
The first name of the user.
"""
		firstName: String!
"""
The last name of the user.
"""
		lastName: String!
"""
The email address of the user.
"""
		email: String!
"""
The name of company the user represents or is associated with.
"""
		company: String!
"""
The two letter ISO 3166-1 Alpha-2 country code for the country where the company is located.
"""
		countryCode: String!
"""
Optional country subdivision following ISO 3166-2.
"""
		stateCode: String
"""
Optional zip code. Required for community mode.
"""
		zip: String
"""
Optional phone number. Required for community mode.
"""
		phoneNumber: String
		utmParams: UtmParams
	): Account!
"""
Add a label to an alert.
Stability: Long-term
"""
	addAlertLabelV2(
"""
Data for adding a label to an alert
"""
		input: AddAlertLabel!
	): Alert!
"""
Stability: Preview
"""
	addCrossOrgViewConnections(
		input: AddCrossOrganizationViewConnectionFiltersInput!
	): View!
"""
Add a new filter to a dashboard's list of filters.
Stability: Long-term
"""
	addDashboardFilter(
		name: String!
		prefixFilter: String!
		id: String!
		searchDomainName: String!
	): Dashboard!
"""
Add a label to a dashboard.
Stability: Long-term
"""
	addDashboardLabel(
		id: String!
		label: String!
	): Dashboard!
"""
Adds a field alias mapping to an existing schema. Returns the ID of the alias mapping if created successfully.
Stability: Long-term
"""
	addFieldAliasMapping(
		input: AddAliasMappingInput!
	): String!
"""
Enable functions for use with specified language version.
Stability: Preview
"""
	addFunctionsToAllowList(
		input: FunctionListInput!
	): Boolean!
"""
Creates a new group.
Stability: Long-term
"""
	addGroup(
		displayName: String!
		lookupName: String
	): AddGroupMutation!
"""
Create a new Ingest API Token.
Stability: Long-term
"""
	addIngestTokenV3(
		input: AddIngestTokenV3Input!
	): IngestToken!
"""
Add a Limit to the given organization
"""
	addLimit(
		input: AddLimitInput!
	): Boolean!
"""
Add a Limit to the given organization
Stability: Long-term
"""
	addLimitV2(
		input: AddLimitV2Input!
	): LimitV2!
"""
Stability: Long-term
"""
	addLoginBridgeAllowedUsers(
		userID: String!
	): LoginBridge!
"""
Add or update default Query Quota Settings
Stability: Short-term
"""
	addOrUpdateQueryQuotaDefaultSettings(
		input: QueryQuotaDefaultSettingsInput!
	): QueryQuotaDefaultSettings!
"""
Add or update existing Query Quota User Settings
Stability: Short-term
"""
	addOrUpdateQueryQuotaUserSettings(
		input: QueryQuotaUserSettingsInput!
	): QueryQuotaUserSettings!
"""
Adds a query to the list of recent queries. The query is a JSON encoded query and visualization structure produced by the UI.
Stability: Long-term
"""
	addRecentQuery(
		input: AddRecentQueryInput!
	): AddRecentQuery!
"""
Add a label to a scheduled search.
Stability: Long-term
"""
	addScheduledSearchLabel(
"""
Data for adding a label to a scheduled search
"""
		input: AddLabelScheduledSearch!
	): ScheduledSearch!
"""
Add a star to an alert.
"""
	addStarToAlertV2(
"""
Data for adding a star to an alert
"""
		input: AddStarToAlert!
	): Alert!
"""
Add a star to a dashboard.
Stability: Long-term
"""
	addStarToDashboard(
		id: String!
	): Dashboard!
"""
Stability: Long-term
"""
	addStarToField(
		input: AddStarToFieldInput!
	): AddStarToFieldMutation!
"""
Add a star to a scheduled search.
"""
	addStarToScheduledSearch(
"""
Data for adding a star to a scheduled search
"""
		input: AddStarScheduledSearch!
	): ScheduledSearch!
"""
Add a star to a repository or view.
Stability: Long-term
"""
	addStarToSearchDomain(
		name: String!
	): SearchDomain!
"""
Adds a subdomain to the organization. Becomes primary subdomain if no primary has been set, and secondary otherwise
Stability: Preview
"""
	addSubdomain(
		input: AddSubdomainInput!
	): Organization!
"""
Blocklist a query based on a pattern based on a regex or exact match.
Stability: Long-term
"""
	addToBlocklist(
"""
Data for adding to the blocklist
"""
		input: AddToBlocklistInput!
	): [BlockedQuery!]!
"""
Blocklist a query based on a pattern based on a regex or exact match.
Stability: Long-term
"""
	addToBlocklistById(
"""
Data for adding to the blocklist
"""
		input: AddToBlocklistByIdInput!
	): [BlockedQuery!]!
"""
Stability: Long-term
"""
	addToLogCollectorConfigurationTest(
		configId: String!
		collectorIds: [String!]!
	): FleetConfigurationTest!
"""
Add or invite a user. Calling this with an invitation token, will activate the account. By activating the account the client accepts LogScale's Terms and Conditions: https://www.humio.com/terms-and-conditions
Stability: Long-term
"""
	addUserV2(
		input: AddUserInputV2!
	): userOrPendingUser!
"""
Adds users to an existing group.
Stability: Long-term
"""
	addUsersToGroup(
		input: AddUsersToGroupInput!
	): AddUsersToGroupMutation!
"""
Stability: Short-term
"""
	assignLogCollectorConfiguration(
		configId: String
		id: String!
	): Boolean!
"""
Stability: Short-term
"""
	assignLogCollectorsToConfiguration(
		configId: String
		ids: [String!]
	): [EnrolledCollector!]!
"""
Assigns an organization management role to a group for the provided organizations.
Stability: Preview
"""
	assignOrganizationManagementRoleToGroup(
		input: AssignOrganizationManagementRoleToGroupInput!
	): AssignOrganizationManagementRoleToGroupMutation!
"""
Assigns an organization role to a group.
Stability: Long-term
"""
	assignOrganizationRoleToGroup(
		input: AssignOrganizationRoleToGroupInput!
	): AssignOrganizationRoleToGroupMutation!
"""
Assign an ingest token to be associated with a parser.
Stability: Long-term
"""
	assignParserToIngestTokenV2(
		input: AssignParserToIngestTokenInputV2!
	): IngestToken!
"""
Assigns permissions to users or groups for resource.
Stability: Preview
"""
	assignPermissionsForResources(
		input: [PermissionAssignmentInputType!]!
	): [UserOrGroup!]!
"""
Assigns a role to a group for a given view. If called with overrideExistingAssignmentsForView=false, this mutation can assign multiple roles for the same view. Calling with overrideExistingAssignmentsForView=false is thus only available if the MultipleViewRoleBindings feature is enabled.
Stability: Long-term
"""
	assignRoleToGroup(
		input: AssignRoleToGroupInput!
	): AssignRoleToGroupMutation!
"""
Assigns a system role to a group.
Stability: Long-term
"""
	assignSystemRoleToGroup(
		input: AssignSystemRoleToGroupInput!
	): AssignSystemRoleToGroupMutation!
"""
Assign node tasks. This is not a replacement, but will add to the existing assigned node tasks. Returns the set of assigned tasks after the assign operation has completed.
Stability: Short-term
"""
	assignTasks(
"""
ID of the node to assign node tasks to.
"""
		nodeID: Int!
"""
List of tasks to assign.
"""
		tasks: [NodeTaskEnum!]!
	): [NodeTaskEnum!]!
"""
Assigns roles for the user in the search domain. This mutation allows assigning multiple roles for the same view and is thus dependent on the MultipleViewRoleBindings feature being enabled.
Stability: Preview
"""
	assignUserRolesInSearchDomain(
		input: AssignUserRolesInSearchDomainInput!
	): [User!]!
"""
Batch update query ownership to run queries on behalf of the organization for triggers and shared dashboards.
Stability: Long-term
"""
	batchUpdateQueryOwnership(
		input: BatchUpdateQueryOwnershipInput!
	): Boolean!
"""
Block ingest to the specified repository for a number of seconds (at most 1 year) into the future
Stability: Short-term
"""
	blockIngest(
		repositoryName: String!
		seconds: Int!
	): BlockIngestMutation!
"""
Set whether the organization is blocking ingest and dataspaces are pausing ingest
Stability: Long-term
"""
	blockIngestOnOrg(
		input: BlockIngestOnOrgInput!
	): Organization!
"""
Cancel a previously submitted redaction. Returns true if the redaction was cancelled, false otherwise. Cancellation is best effort. If some events have already been redacted, they are not restored.
Stability: Long-term
"""
	cancelRedactEvents(
		input: CancelRedactEventsInput!
	): Boolean!
"""
Updates the user and group role assignments in the search domain.
Stability: Long-term
"""
	changeUserAndGroupRolesForSearchDomain(
		searchDomainId: String!
		groups: [GroupRoleAssignment!]!
		users: [UserRoleAssignment!]!
	): [UserOrGroup!]!
"""
Set CID of provisioned organization
Stability: Short-term
"""
	clearCid: Organization!
"""
Clear the error status on an aggregate alert. The status will be updated if the error reoccurs.
Stability: Long-term
"""
	clearErrorOnAggregateAlert(
"""
Data for clearing the error on an aggregate alert.
"""
		input: ClearErrorOnAggregateAlertInput!
	): AggregateAlert!
"""
Clear the error status on an alert. The status will be updated if the error reoccurs.
Stability: Long-term
"""
	clearErrorOnAlert(
"""
Data for clearing the error on an alert
"""
		input: ClearErrorOnAlertInput!
	): Alert!
"""
Clear the error status on a filter alert. The status will be updated if the error reoccurs.
Stability: Long-term
"""
	clearErrorOnFilterAlert(
"""
Data for clearing the error on a filter alert
"""
		input: ClearErrorOnFilterAlertInput!
	): FilterAlert!
"""
Clear the error status on a scheduled search. The status will be updated if the error reoccurs.
Stability: Long-term
"""
	clearErrorOnScheduledSearch(
"""
Data for clearing the error on a scheduled search
"""
		input: ClearErrorOnScheduledSearchInput!
	): ScheduledSearch!
"""
Clears UI configurations for all fields for the current user
Stability: Long-term
"""
	clearFieldConfigurations(
		input: ClearFieldConfigurationsInput!
	): Boolean!
"""
Clear recent queries for current user on a given view or repository.
Stability: Long-term
"""
	clearRecentQueries(
		input: ClearRecentQueriesInput!
	): Boolean!
"""
Create a clone of an existing parser.
Stability: Long-term
"""
	cloneParser(
		input: CloneParserInput!
	): Parser!
"""
Unregisters a node from the cluster.
Stability: Long-term
"""
	clusterUnregisterNode(
"""
Force removal of the node. I hope you know what you are doing!
"""
		force: Boolean!
"""
ID of the node to unregister.
"""
		nodeID: Int!
	): UnregisterNodeMutation!
"""
Create a clone of a dashboard.
Stability: Long-term
"""
	copyDashboard(
		id: String!
"""
The name of the repository or view where the dashboard to be copied to.
"""
		targetSearchDomainName: String
"""
The name of the repository or view where the dashboard to be copied from.
"""
		sourceSearchDomainName: String!
"""
The name the copied dashboard should have.
"""
		name: String!
	): CopyDashboardMutation!
"""
Create an action from a package action template.
Stability: Long-term
"""
	createActionFromPackageTemplate(
"""
The name of the view the package is installed in.
"""
		viewName: String!
"""
The id of the package to fetch the action template from.
"""
		packageId: VersionedPackageSpecifier!
"""
The name of the action template in the package.
"""
		actionTemplateName: String!
"""
The name of the new action to create.
"""
		overrideName: String
	): CreateActionFromPackageTemplateMutation!
"""
Create an action from yaml template
Stability: Long-term
"""
	createActionFromTemplate(
"""
Data for creating an action from a yaml template
"""
		input: CreateActionFromTemplateInput!
	): Action!
"""
Create an aggregate alert.
Stability: Long-term
"""
	createAggregateAlert(
"""
Data for creating an aggregate alert.
"""
		input: CreateAggregateAlert!
	): AggregateAlert!
"""
Create an alert.
Stability: Long-term
"""
	createAlert(
"""
Data for creating an alert
"""
		input: CreateAlert!
	): Alert!
"""
Create an alert from a package alert template.
"""
	createAlertFromPackageTemplate(
"""
The name of the view or repo the package is installed in.
"""
		searchDomainName: String!
"""
The id of the package to fetch the alert template from.
"""
		packageId: VersionedPackageSpecifier!
"""
The name of the alert template in the package.
"""
		alertTemplateName: String!
"""
The name of the new alert to create.
"""
		alertName: String!
	): CreateAlertFromPackageTemplateMutation!
"""
Create an alert from yaml template
"""
	createAlertFromTemplate(
"""
Data for creating an alert from a yaml template
"""
		input: CreateAlertFromTemplateInput!
	): Alert!
"""
Create an ingest feed that uses AWS S3 and SQS
Stability: Long-term
"""
	createAwsS3SqsIngestFeed(
"""
Data for creating an ingest feed that uses AWS S3 and SQS
"""
		input: CreateAwsS3SqsIngestFeed!
	): IngestFeed!
"""
Stability: Preview
"""
	createCrossOrgView(
		input: CreateCrossOrgViewInput!
	): View!
"""
Create a custom link interaction.
Stability: Long-term
"""
	createCustomLinkInteraction(
		input: CreateCustomLinkInteractionInput!
	): InteractionId!
"""
Create a dashboard.
Stability: Long-term
"""
	createDashboard(
		input: CreateDashboardInput!
	): CreateDashboardMutation!
"""
Create a dashboard from a package dashboard template.
Stability: Long-term
"""
	createDashboardFromPackageTemplate(
"""
The name of the view the package is installed in.
"""
		viewName: String!
"""
The id of the package to fetch the dashboard template from.
"""
		packageId: VersionedPackageSpecifier!
"""
The name of the dashboard template in the package.
"""
		dashboardTemplateName: String!
"""
The name of the new dashboard to create.
"""
		overrideName: String
	): CreateDashboardFromPackageTemplateMutation!
"""
Create a dashboard from a yaml specification.
Stability: Long-term
"""
	createDashboardFromTemplateV2(
"""
Data for creating a dashboard from a yaml specification.
"""
		input: CreateDashboardFromTemplateV2Input!
	): Dashboard!
"""
Create a dashboard link interaction.
Stability: Long-term
"""
	createDashboardLinkInteraction(
		input: CreateDashboardLinkInteractionInput!
	): InteractionId!
"""
Gets or create a new demo data view.
Stability: Short-term
"""
	createDemoDataRepository(
		demoDataType: String!
	): Repository!
"""
Create an email action.
Stability: Long-term
"""
	createEmailAction(
"""
Data for creating an email action
"""
		input: CreateEmailAction!
	): EmailAction!
"""
Create an organization. Root operation.
Stability: Long-term
"""
	createEmptyOrganization(
		name: String!
		description: String
		organizationId: String
		subdomain: String
		cid: String
	): Organization!
"""
Create an event forwarding rule on a repository and return it
Stability: Long-term
"""
	createEventForwardingRule(
"""
Data for creating an event forwarding rule
"""
		input: CreateEventForwardingRule!
	): EventForwardingRule!
"""
Create an FDR feed
Stability: Long-term
"""
	createFdrFeed(
"""
Data for creating an FDR feed
"""
		input: CreateFdrFeed!
	): FdrFeed!
"""
Creates a schema. If another schema already exists with the same name, then this overwrites it.
Stability: Long-term
"""
	createFieldAliasSchema(
		input: CreateFieldAliasSchemaInput!
	): FieldAliasSchema!
"""
Creates a field aliasing schema from a YAML file
Stability: Preview
"""
	createFieldAliasSchemaFromTemplate(
		input: CreateFieldAliasSchemaFromTemplateInput!
	): FieldAliasSchema!
"""
Create a filter alert.
Stability: Long-term
"""
	createFilterAlert(
"""
Data for creating a filter alert
"""
		input: CreateFilterAlert!
	): FilterAlert!
"""
Stability: Long-term
"""
	createFleetInstallToken(
		name: String!
		configId: String
	): FleetInstallationToken!
"""
Create a LogScale repository action.
Stability: Long-term
"""
	createHumioRepoAction(
"""
Data for creating a LogScale repository action
"""
		input: CreateHumioRepoAction!
	): HumioRepoAction!
"""
Create a new IP filter.
Stability: Long-term
"""
	createIPFilter(
		input: IPFilterInput!
	): IPFilter!
"""
Create a new ingest listener.
Stability: Long-term
"""
	createIngestListenerV3(
		input: CreateIngestListenerV3Input!
	): IngestListener!
"""
Create a Kafka event forwarder and return it
Stability: Long-term
"""
	createKafkaEventForwarder(
"""
Data for creating a Kafka event forwarder
"""
		input: CreateKafkaEventForwarder!
	): KafkaEventForwarder!
"""
Create a cluster connection to a local view.
Stability: Short-term
"""
	createLocalClusterConnection(
"""
Data for creating a local multi-cluster connection
"""
		input: CreateLocalClusterConnectionInput!
	): LocalClusterConnection!
"""
Creates a log collector configuration.
Stability: Short-term
"""
	createLogCollectorConfiguration(
		name: String!
		draft: String
	): LogCollectorConfiguration!
"""
Stability: Short-term
"""
	createLogCollectorGroup(
		name: String!
		filter: String
		configIds: [String!]
	): LogCollectorGroup!
"""
Create a lookup file from a package lookup file template.
Stability: Long-term
"""
	createLookupFileFromPackageTemplate(
"""
The name of the view the package is installed in.
"""
		viewName: RepoOrViewName!
"""
The id of the package to fetch the lookup file template from.
"""
		packageId: VersionedPackageSpecifier!
"""
The filename of the lookup file template in the package.
"""
		lookupFileTemplateName: String!
"""
The name of the new lookup file to create.
"""
		overrideName: String
	): FileNameAndPath!
"""
Create an OpsGenie action.
Stability: Long-term
"""
	createOpsGenieAction(
"""
Data for creating an OpsGenie action
"""
		input: CreateOpsGenieAction!
	): OpsGenieAction!
	createOrUpdateCrossOrganizationView(
		name: String!
		limitIds: [String!]!
		filter: String
		repoFilters: [RepoFilterInput!]
	): View!
"""
Creates or updates an external function specification.
Stability: Preview
"""
	createOrUpdateExternalFunction(
		input: CreateOrUpdateExternalFunctionInput!
	): ExternalFunctionSpecificationOutput!
"""
Create a organization permissions token for organizational-level access.
Stability: Long-term
"""
	createOrganizationPermissionsToken(
		input: CreateOrganizationPermissionTokenInput!
	): String!
"""
Creates an organization permissions token with the specified permissions.
Stability: Long-term
"""
	createOrganizationPermissionsTokenV2(
		input: CreateOrganizationPermissionsTokenV2Input!
	): CreateOrganizationPermissionsTokenV2Output!
"""
Create a metric view, usage view and log view for each organization. (Root operation)
Stability: Long-term
"""
	createOrganizationsViews(
		includeDebugView: Boolean
		specificOrganization: String
	): Boolean!
"""
Create a PagerDuty action.
Stability: Long-term
"""
	createPagerDutyAction(
"""
Data for creating a PagerDuty action.
"""
		input: CreatePagerDutyAction!
	): PagerDutyAction!
"""
Create a parser.
"""
	createParser(
		input: CreateParserInput!
	): CreateParserMutation!
"""
Create a parser from a package parser template.
Stability: Long-term
"""
	createParserFromPackageTemplate(
"""
The name of the view the package is installed in.
"""
		viewName: String!
"""
The id of the package to fetch the parser template from.
"""
		packageId: VersionedPackageSpecifier!
"""
The name of the parser template in the package.
"""
		parserTemplateName: String!
"""
The name of the new parser to create.
"""
		overrideName: String
	): CreateParserFromPackageTemplateMutation!
"""
Create a parser from a yaml specification
Stability: Long-term
"""
	createParserFromTemplate(
"""
Data for creating a parser from a yaml template
"""
		input: CreateParserFromTemplateInput!
	): Parser!
"""
Create a parser.
Stability: Long-term
"""
	createParserV2(
		input: CreateParserInputV2!
	): Parser!
"""
Create a personal user token for the user. It will inherit the same permissions as the user.
Stability: Long-term
"""
	createPersonalUserToken(
		input: CreatePersonalUserTokenInput!
	): String!
"""
Create a personal user token for the user. It will inherit the same permissions as the user.
Stability: Long-term
"""
	createPersonalUserTokenV2(
		input: CreatePersonalUserTokenInput!
	): CreatePersonalUserTokenV2Output!
"""
Create a new sharable link to a dashboard.
Stability: Long-term
"""
	createReadonlyToken(
		id: String!
		name: String!
		ipFilterId: String
"""
Ownership of the queries run by this shared dashboard. If value is User, ownership wil be based the calling user
"""
		queryOwnershipType: QueryOwnershipType
	): DashboardLink!
"""
Create a cluster connection to a remote view.
Stability: Short-term
"""
	createRemoteClusterConnection(
"""
Data for creating a remote cluster connection
"""
		input: CreateRemoteClusterConnectionInput!
	): RemoteClusterConnection!
"""
Create a new repository.
Stability: Short-term
"""
	createRepository(
		name: String!
		description: String
		retentionInMillis: Long
		retentionInIngestSizeBytes: Long
		retentionInStorageSizeBytes: Long
		organizationId: String
		type: RepositoryType
		repositoryId: String
		dataType: RepositoryDataType
"""
The limit the repository should be attached to, only a cloud feature. If not specified a default will be found and used
"""
		limitId: String
	): CreateRepositoryMutation!
"""
Adds a role. Only usable if roles are not managed externally, e.g. in LDAP.
Stability: Long-term
"""
	createRole(
		input: AddRoleInput!
	): AddRoleMutation!
"""
Create a saved query.
Stability: Long-term
"""
	createSavedQuery(
		input: CreateSavedQueryInput!
	): CreateSavedQueryPayload!
"""
Create a saved query from a package saved query template.
Stability: Long-term
"""
	createSavedQueryFromPackageTemplate(
"""
The name of the view the package is installed in.
"""
		viewName: String!
"""
The id of the package to fetch the saved query template from.
"""
		packageId: VersionedPackageSpecifier!
"""
The name of the saved query template in the package.
"""
		savedQueryTemplateName: String!
"""
The name of the new saved query to create.
"""
		overrideName: String
	): CreateSavedQueryFromPackageTemplateMutation!
"""
Create a scheduled report.
Stability: Long-term
"""
	createScheduledReport(
"""
Data for creating a scheduled report.
"""
		input: CreateScheduledReportInput!
	): ScheduledReport!
"""
Create a scheduled search.
"""
	createScheduledSearch(
"""
Data for creating a scheduled search
"""
		input: CreateScheduledSearch!
	): ScheduledSearch!
"""
Create a scheduled search from a package scheduled search template.
"""
	createScheduledSearchFromPackageTemplate(
"""
The name of the view or repo the package is installed in.
"""
		searchDomainName: RepoOrViewName!
"""
The id of the package to fetch the scheduled search template from.
"""
		packageId: VersionedPackageSpecifier!
"""
The name of the scheduled search template in the package.
"""
		scheduledSearchTemplateName: String!
"""
The name of the new scheduled search to create.
"""
		scheduledSearchName: String!
	): ScheduledSearch!
"""
Create a scheduled search from a yaml specification.
"""
	createScheduledSearchFromTemplate(
"""
Data for creating a scheduled search from a yaml template.
"""
		input: CreateScheduledSearchFromTemplateInput!
	): ScheduledSearch!
"""
Create a scheduled search.
Stability: Long-term
"""
	createScheduledSearchV2(
"""
Data for creating a scheduled search
"""
		input: CreateScheduledSearchV2!
	): ScheduledSearch!
"""
Create a search link interaction.
Stability: Long-term
"""
	createSearchLinkInteraction(
		input: CreateSearchLinkInteractionInput!
	): InteractionId!
"""
Create a Slack action.
Stability: Long-term
"""
	createSlackAction(
"""
Data for creating a Slack action.
"""
		input: CreateSlackAction!
	): SlackAction!
"""
Create a post message Slack action.
Stability: Long-term
"""
	createSlackPostMessageAction(
"""
Data for creating a post message Slack action.
"""
		input: CreatePostMessageSlackAction!
	): SlackPostMessageAction!
"""
Create a system permissions token for system-level access.
Stability: Long-term
"""
	createSystemPermissionsToken(
		input: CreateSystemPermissionTokenInput!
	): String!
"""
Creates a system permissions token with the specified permissions.
Stability: Long-term
"""
	createSystemPermissionsTokenV2(
		input: CreateSystemPermissionTokenV2Input!
	): CreateSystemPermissionsTokenV2Output!
"""
Create an upload file action.
Stability: Long-term
"""
	createUploadFileAction(
"""
Data for creating an upload file action.
"""
		input: CreateUploadFileAction!
	): UploadFileAction!
"""
Create a VictorOps action.
Stability: Long-term
"""
	createVictorOpsAction(
"""
Data for creating a VictorOps action.
"""
		input: CreateVictorOpsAction!
	): VictorOpsAction!
"""
Create a new view.
Stability: Long-term
"""
	createView(
		name: String!
		description: String
		connections: [ViewConnectionInput!]
		federatedViews: [String!]
		isFederated: Boolean
	): View!
"""
Create a view permission token. The permissions will take effect across all the views.
Stability: Long-term
"""
	createViewPermissionsToken(
		input: CreateViewPermissionsTokenInput!
	): String!
"""
Creates a view permissions token with the specified permissions on the views specified in the 'viewIds' field.
Stability: Long-term
"""
	createViewPermissionsTokenV2(
		input: CreateViewPermissionsTokenV2Input!
	): CreateViewPermissionsTokenV2Output!
"""
Create a webhook action.
Stability: Long-term
"""
	createWebhookAction(
"""
Data for creating a webhook action.
"""
		input: CreateWebhookAction!
	): WebhookAction!
"""
Delete an action.
Stability: Long-term
"""
	deleteAction(
"""
Data for deleting an action.
"""
		input: DeleteAction!
	): Boolean!
"""
Delete an aggregate alert.
Stability: Long-term
"""
	deleteAggregateAlert(
"""
Data for deleting an aggregate alert.
"""
		input: DeleteAggregateAlert!
	): Boolean!
"""
Delete an alert.
Stability: Long-term
"""
	deleteAlert(
"""
Data for deleting an alert
"""
		input: DeleteAlert!
	): Boolean!
"""
Delete a cluster connection from a view.
Stability: Short-term
"""
	deleteClusterConnection(
"""
Data for deleting a cluster connection
"""
		input: DeleteClusterConnectionInput!
	): Boolean!
"""
Delete a dashboard.
Stability: Long-term
"""
	deleteDashboard(
		input: DeleteDashboardInput!
	): DeleteDashboardMutation!
"""
Delete a dashboard by looking up the view with the given viewId and then the dashboard in the view with the given dashboardId.
Stability: Long-term
"""
	deleteDashboardV2(
		input: DeleteDashboardInputV2!
	): SearchDomain!
"""
Delete an event forwarder
Stability: Long-term
"""
	deleteEventForwarder(
"""
Data for deleting an event forwarder
"""
		input: DeleteEventForwarderInput!
	): Boolean!
"""
Delete an event forwarding rule on a repository
Stability: Long-term
"""
	deleteEventForwardingRule(
"""
Data for deleting an event forwarding rule
"""
		input: DeleteEventForwardingRule!
	): Boolean!
"""
Deletes a given external function specification.
Stability: Preview
"""
	deleteExternalFunction(
		input: deleteExternalFunctionInput!
	): Boolean!
"""
Delete an FDR feed
Stability: Long-term
"""
	deleteFdrFeed(
"""
Data for deleting an FDR feed
"""
		input: DeleteFdrFeed!
	): Boolean!
"""
Delete a feature flag.
Stability: Short-term
"""
	deleteFeatureFlag(
		feature: String!
	): Boolean!
"""
Deletes an alias mapping.
Stability: Long-term
"""
	deleteFieldAliasSchema(
		input: DeleteFieldAliasSchema!
	): Boolean!
"""
Delete a filter alert.
Stability: Long-term
"""
	deleteFilterAlert(
"""
Data for deleting a filter alert
"""
		input: DeleteFilterAlert!
	): Boolean!
"""
Stability: Long-term
"""
	deleteFleetInstallToken(
		token: String!
	): Boolean!
"""
Delete IP filter.
Stability: Long-term
"""
	deleteIPFilter(
		input: IPFilterIdInput!
	): Boolean!
"""
For deleting an identity provider. Root operation.
Stability: Long-term
"""
	deleteIdentityProvider(
		id: String!
	): Boolean!
"""
Delete an ingest feed
Stability: Long-term
"""
	deleteIngestFeed(
"""
Data for deleting an ingest feed
"""
		input: DeleteIngestFeed!
	): Boolean!
"""
Delete an ingest listener.
Stability: Long-term
"""
	deleteIngestListener(
		id: String!
	): BooleanResultType!
"""
Delete an interaction.
Stability: Long-term
"""
	deleteInteraction(
		input: DeleteInteractionInput!
	): Boolean!
"""
Stability: Long-term
"""
	deleteLogCollectorConfiguration(
		configId: String!
		versionId: Int!
	): Boolean!
"""
Stability: Long-term
"""
	deleteLogCollectorGroup(
		id: String!
	): Boolean!
"""
Stability: Preview
"""
	deleteLostCollectors(
		dryRun: Boolean!
		days: Int!
	): Int!
"""
Delete notification from the system. Requires root.
Stability: Long-term
"""
	deleteNotification(
		notificationId: String!
	): Boolean!
"""
Delete a parser.
Stability: Long-term
"""
	deleteParser(
		input: DeleteParserInput!
	): BooleanResultType!
"""
Remove a shared link to a dashboard.
Stability: Long-term
"""
	deleteReadonlyToken(
		id: String!
		token: String!
	): BooleanResultType!
"""
Deletes a saved query.
Stability: Long-term
"""
	deleteSavedQuery(
		input: DeleteSavedQueryInput!
	): BooleanResultType!
"""
Delete a scheduled report.
Stability: Long-term
"""
	deleteScheduledReport(
		input: DeleteScheduledReportInput!
	): Boolean!
"""
Delete a scheduled search.
Stability: Long-term
"""
	deleteScheduledSearch(
"""
Data for deleting a scheduled search
"""
		input: DeleteScheduledSearch!
	): Boolean!
"""
Delete a repository or view.
Stability: Long-term
"""
	deleteSearchDomain(
		name: String!
		deleteMessage: String
	): BooleanResultType!
"""
Delete a repository or view.
Stability: Long-term
"""
	deleteSearchDomainById(
		input: DeleteSearchDomainByIdInput!
	): Boolean!
"""
Delete a token
Stability: Long-term
"""
	deleteToken(
		input: InputData!
	): Boolean!
"""
Disable an aggregate alert.
Stability: Long-term
"""
	disableAggregateAlert(
"""
Data for disabling an aggregate alert.
"""
		input: DisableAggregateAlert!
	): Boolean!
"""
Disable an alert.
Stability: Long-term
"""
	disableAlert(
"""
Data for disabling an alert
"""
		input: DisableAlert!
	): Boolean!
"""
Disables the archiving job for the repository.
Stability: Short-term
"""
	disableArchiving(
		repositoryName: String!
	): BooleanResultType!
"""
Removes demo view.
Stability: Short-term
"""
	disableDemoDataForUser: Boolean!
"""
Disables an event forwarder
Stability: Long-term
"""
	disableEventForwarder(
"""
Data for disabling an event forwarder
"""
		input: DisableEventForwarderInput!
	): Boolean!
"""
Disable a feature.
Stability: Short-term
"""
	disableFeature(
		feature: FeatureFlag!
	): Boolean!
"""
Disable a feature for a specific organization.
Stability: Short-term
"""
	disableFeatureForOrg(
		orgId: String!
		feature: FeatureFlag!
	): Boolean!
"""
Disable a feature for a specific user.
Stability: Short-term
"""
	disableFeatureForUser(
		feature: FeatureFlag!
		userId: String!
	): Boolean!
"""
Disables the schema on this organization.
Stability: Long-term
"""
	disableFieldAliasSchemaOnOrg(
		input: DisableFieldAliasSchemaOnOrgInput!
	): Boolean!
"""
Disables the schema on the given view or repository.
Stability: Long-term
"""
	disableFieldAliasSchemaOnView(
		input: DisableFieldAliasSchemaOnViewInput!
	): Boolean!
"""
Disables the schema on the given views or repositories.
Stability: Preview
"""
	disableFieldAliasSchemaOnViews(
		input: DisableFieldAliasSchemaOnViewsInput!
	): Boolean!
"""
Disable a filter alert.
Stability: Long-term
"""
	disableFilterAlert(
"""
Data for disabling a filter alert
"""
		input: DisableFilterAlert!
	): Boolean!
"""
Stability: Short-term
"""
	disableLogCollectorDebugLogging: Boolean!
"""
Stability: Short-term
"""
	disableLogCollectorInstanceDebugLogging(
		id: String!
	): Boolean!
"""
Disable access to IOCs (indicators of compromise) for an organization. (Requires Organization Manager Permission)
Stability: Short-term
"""
	disableOrganizationIocAccess(
"""
Data for disabling access to IOCs (indicators of compromise) for an organization
"""
		input: DisableOrganizationIocAccess!
	): Organization!
"""
Disable a scheduled report.
Stability: Long-term
"""
	disableScheduledReport(
		input: DisableScheduledReportInput!
	): Boolean!
"""
Disable execution of a scheduled search.
Stability: Long-term
"""
	disableScheduledSearch(
"""
Data for disabling a scheduled search
"""
		input: DisableStarScheduledSearch!
	): ScheduledSearch!
"""
Disable query tracing on worker nodes for queries with the given quota key
Stability: Preview
"""
	disableWorkerQueryTracing(
"""
The quota key to disable tracing for
"""
		quotaKey: String!
	): Boolean!
"""
Dismiss notification for specific user, if allowed by notification type.
Stability: Long-term
"""
	dismissNotification(
		notificationId: String!
	): Boolean!
"""
Enable an aggregate alert.
Stability: Long-term
"""
	enableAggregateAlert(
"""
Data for enabling an aggregate alert.
"""
		input: EnableAggregateAlert!
	): Boolean!
"""
Enable an alert.
Stability: Long-term
"""
	enableAlert(
"""
Data for enabling an alert
"""
		input: EnableAlert!
	): Boolean!
"""
Enables the archiving job for the repository.
Stability: Short-term
"""
	enableArchiving(
		repositoryName: String!
	): BooleanResultType!
"""
Gets or create a new demo data view.
Stability: Short-term
"""
	enableDemoDataForUser(
		demoDataType: String!
	): View!
"""
Enables an event forwarder
Stability: Long-term
"""
	enableEventForwarder(
"""
Data for enabling an event forwarder
"""
		input: EnableEventForwarderInput!
	): Boolean!
"""
Enable a feature.
Stability: Short-term
"""
	enableFeature(
		feature: FeatureFlag!
"""
Enable feature flag regardless of verification result
"""
		skipVerification: Boolean
	): Boolean!
"""
Enable a feature for a specific organization.
Stability: Short-term
"""
	enableFeatureForOrg(
		orgId: String!
		feature: FeatureFlag!
"""
Enable feature flag regardless of verification result
"""
		skipVerification: Boolean
	): Boolean!
"""
Enable a feature for a specific user.
Stability: Short-term
"""
	enableFeatureForUser(
		feature: FeatureFlag!
		userId: String!
"""
Enable feature flag regardless of verification result
"""
		skipVerification: Boolean
	): Boolean!
"""
Enables the schema on this organization. Field alias mappings in this schema will be active during search across all views and repositories within this org.
Stability: Long-term
"""
	enableFieldAliasSchemaOnOrg(
		input: EnableFieldAliasSchemaOnOrgInput!
	): Boolean!
"""
Enables the schema on the given list of views or repositories.
Field alias mappings in this schema will be active during search within this view or repository.
If at least one view fails to be enabled on the given view, then no changes are performed on any of the views.
Stability: Long-term
"""
	enableFieldAliasSchemaOnViews(
		input: EnableFieldAliasSchemaOnViewsInput!
	): Boolean!
"""
Enable a filter alert.
Stability: Long-term
"""
	enableFilterAlert(
"""
Data for enabling a filter alert
"""
		input: EnableFilterAlert!
	): Boolean!
"""
Stability: Short-term
"""
	enableLogCollectorDebugLogging(
		url: String
		token: String!
		level: String!
		repository: String
	): Boolean!
"""
Stability: Short-term
"""
	enableLogCollectorInstanceDebugLogging(
		id: String!
		url: String
		token: String!
		level: String!
		repositoryName: String
	): Boolean!
"""
Enable access to IOCs (indicators of compromise) for an organization. (Requires Organization Manager Permission).
Stability: Short-term
"""
	enableOrganizationIocAccess(
"""
Data for enabling access to IOCs (indicators of compromise) for an organization
"""
		input: EnableOrganizationIocAccess!
	): Organization!
"""
Enable a scheduled report.
Stability: Long-term
"""
	enableScheduledReport(
		input: EnableScheduledReportInput!
	): Boolean!
"""
Enable execution of a scheduled search.
Stability: Long-term
"""
	enableScheduledSearch(
"""
Data for enabling a scheduled search
"""
		input: EnableStarScheduledSearch!
	): ScheduledSearch!
"""
Enable query tracing on worker nodes for queries with the given quota key
Stability: Preview
"""
	enableWorkerQueryTracing(
		input: EnableWorkerQueryTracingInputType!
	): Boolean!
"""
Extend a Cloud Trial. (Requires Root Permissions)
Stability: Short-term
"""
	extendCloudTrial(
		organizationId: String!
		days: Int!
	): Boolean!
"""
Set the primary bucket target for the organization.
Stability: Long-term
"""
	findOrCreateBucketStorageEntity(
		organizationId: String!
	): Int!
"""
Configures GCS archiving for a repository. E.g. bucket.
Stability: Preview
"""
	gcsConfigureArchiving(
		repositoryName: String!
		bucket: String!
		format: ArchivingFormat!
		tagOrderInName: [String!]
		startFromDateTime: DateTime
	): BooleanResultType!
"""
Installs a package in a specific view.
Stability: Long-term
"""
	installPackageFromRegistryV2(
		InstallPackageFromRegistryInput: InstallPackageFromRegistryInput!
	): InstallPackageFromRegistryResult!
"""
Installs a package from file provided in multipart/form-data (name=file) in a specific view.
Stability: Long-term
"""
	installPackageFromZip(
"""
The name of the view the package is installed in.
"""
		viewName: String!
"""
Overwrite existing installed package
"""
		overwrite: Boolean
"""
Ownership of the queries run by the triggers (e.g. alerts and scheduled searches) that are installed as part of this package. If value is User, ownership will be based on the calling user.
"""
		queryOwnershipType: QueryOwnershipType
	): InstallPackageFromZipResult!
"""

Stability: Short-term
"""
	killQuery(
		viewName: String!
		pattern: String!
	): BooleanResultType!
"""
Enable a or disable language restrictions for specified version.
Stability: Preview
"""
	languageRestrictionsEnable(
		input: EnabledInput!
	): Boolean!
"""
Stability: Preview
"""
	linkChildOrganization(
		childId: String!
	): OrganizationLink!
"""
Log UI Action.
Stability: Short-term
"""
	logAnalytics(
		input: AnalyticsLog!
	): Boolean!
"""
Log UI Action.
Stability: Preview
"""
	logAnalyticsBatch(
		input: [AnalyticsLogWithTimestamp!]!
	): Boolean!
"""
Logs a service level indicator to the humio repo with #kind=frontend.
Stability: Preview
"""
	logFrontendServiceLevelIndicators(
		input: [ServiceLevelIndicatorLogArg!]!
	): Boolean!
"""
Logs out of a users session.
Stability: Long-term
"""
	logoutOfSession: Boolean!
"""
Set a limits deleted mark
"""
	markLimitDeleted(
		input: MarkLimitDeletedInput!
	): Boolean!
"""
Migrate all organizations to the new Limits model (requires root).
Stability: Long-term
"""
	migrateToNewLimits(
		input: MigrateLimitsInput!
	): Boolean!
"""
For setting up a new Azure AD OIDC idp. Root operation.
Stability: Long-term
"""
	newAzureAdOidcIdentityProvider(
		name: String!
		tenantId: String!
		clientID: String!
		clientSecret: String!
		domains: [String!]!
		enableDebug: Boolean
		scopeClaim: String
	): OidcIdentityProvider!
"""
Create new file
Stability: Long-term
"""
	newFile(
		fileName: String!
		name: String!
	): UploadedFileSnapshot!
"""
For setting up a new OIDC idp. Root operation.
Stability: Long-term
"""
	newOIDCIdentityProvider(
		input: OidcConfigurationInput!
	): OidcIdentityProvider!
"""
Stability: Long-term
"""
	newSamlIdentityProvider(
"""
Optional specify the ID externally (root only)
"""
		id: String
		name: String!
		signOnUrl: String!
		idpCertificateInBase64: String!
		idpEntityId: String!
		domains: [String!]!
		groupMembershipAttribute: String
		userAttribute: String
		enableDebug: Boolean
"""
Only used internal
"""
		adminAttribute: String
"""
Only used internal
"""
		adminAttributeMatch: String
"""
If multiple Idp's are defined the default idp is used whenever redirecting to login
"""
		defaultIdp: Boolean
"""
Only used internal
"""
		humioOwned: Boolean
"""
Lazy create users during login
"""
		lazyCreateUsers: Boolean
"""
An alternative certificate to be used for IdP signature validation. Useful for handling certificate rollover
"""
		alternativeIdpCertificateInBase64: String
	): SamlIdentityProvider!
"""
Create notification. Required permissions depends on targets.
 Examples:
 mutation{notify(Target:Group, ids: ["GroupId1", "GroupId2"],...)} #Notify users in group1 and group2
 mutation{notify(Target:OrgRoot, ids: ["OrgId1", "OrgId2"],...)} # Notify org roots in org1 and org2
 mutation{notify(Target:Root,...)} #Notify all root users
 mutation{notify(Target:All,...)} # Notify all users
 mutation{notify(Target:All,["UserId1", "UserId2", "UserId3"],...)} #Notify user 1, 2 & 3

Stability: Long-term
"""
	notify(
		input: NotificationInput!
	): Notification!
"""
Override whether feature should be rolled out.
Stability: Short-term
"""
	overrideRolledOutFeatureFlag(
		feature: FeatureFlag!
		rollOut: Boolean!
	): Boolean!
"""
Proxy mutation through a specific organization. Root operation.
Stability: Long-term
"""
	proxyOrganization(
		organizationId: String!
	): Organization!
"""
Updates a log collector configuration.
Stability: Short-term
"""
	publishLogCollectorConfiguration(
		id: String!
		yaml: String
		currentVersion: Int!
	): LogCollectorConfiguration!
"""
Recover the organization with the given id.
Stability: Short-term
"""
	recoverOrganization(
		organizationId: String!
	): Organization!
"""
Redact events matching a certain query within a certain time interval. Returns the id of the submitted redaction task
Stability: Long-term
"""
	redactEvents(
		input: RedactEventsInputType!
	): String!
"""
Force a refresh of the ClusterManagementStats cache and return reasonsNodeCannotBeSafelyUnregistered for the specified node.
Stability: Preview
"""
	refreshClusterManagementStats(
"""
Id of the node for which refreshed data must be retrieved.
"""
		nodeId: Int!
	): RefreshClusterManagementStatsMutation!
"""
Refresh the list of regions
Stability: Short-term
"""
	refreshRegions: Boolean!
"""
Remove a label from an alert.
Stability: Long-term
"""
	removeAlertLabelV2(
"""
Data for removing a label from an alert
"""
		input: RemoveAlertLabel!
	): Alert!
"""
Stability: Preview
"""
	removeCrossOrgViewConnections(
		input: RemoveCrossOrgViewConnectionsInput!
	): View!
"""
Remove a filter from a dashboard's list of filters.
Stability: Long-term
"""
	removeDashboardFilter(
		id: String!
		filterId: String!
	): Dashboard!
"""
Remove a label from a dashboard.
Stability: Long-term
"""
	removeDashboardLabel(
		id: String!
		label: String!
	): Dashboard!
"""
Gets or create a new demo data view.
Stability: Short-term
"""
	removeDemoDataRepository(
		demoDataType: String!
	): Boolean!
"""
Removes a field alias mapping to an existing schema.
Stability: Long-term
"""
	removeFieldAliasMapping(
		input: RemoveAliasMappingInput!
	): Boolean!
"""
Remove file
Stability: Long-term
"""
	removeFile(
		fileName: String!
		name: String!
	): BooleanResultType!
"""
Remove an item on the query blocklist.
Stability: Long-term
"""
	removeFromBlocklist(
"""
Data for removing a blocklist entry
"""
		input: RemoveFromBlocklistInput!
	): Boolean!
"""
Stability: Short-term
"""
	removeFromLogCollectorConfigurationTest(
		configId: String!
		collectorIds: [String!]!
	): FleetConfigurationTest!
"""
Disable functions for use with specified language version.
Stability: Preview
"""
	removeFunctionsFromAllowList(
		input: FunctionListInput!
	): Boolean!
"""
Removes the global default cache policy
Stability: Preview
"""
	removeGlobalDefaultCachePolicy: Boolean!
"""
Removes a group. Only usable if roles are not managed externally, e.g. in LDAP.
Stability: Long-term
"""
	removeGroup(
		groupId: String!
	): RemoveGroupMutation!
"""
Remove an Ingest Token.
Stability: Long-term
"""
	removeIngestToken(
"""
The name of the repository to remove the ingest token from.
"""
		repositoryName: String!
"""
The name of the token to delete.
"""
		name: String!
	): BooleanResultType!
"""
Remove a limit in the given organization
"""
	removeLimit(
		input: RemoveLimitInput!
	): Boolean!
"""
Remove a limit with id in the given organization
Stability: Short-term
"""
	removeLimitWithId(
		limitId: String!
	): Boolean!
"""
Stability: Long-term
"""
	removeLoginBridge: Boolean!
"""
Stability: Long-term
"""
	removeLoginBridgeAllowedUsers(
		userID: String!
	): LoginBridge!
"""
Removes the default cache policy of the current organization.
Stability: Preview
"""
	removeOrgDefaultCachePolicy: Boolean!
"""
Remove the organization with the given id (needs to be the same organization ID as the requesting user is in).
Stability: Short-term
"""
	removeOrganization(
		organizationId: String!
	): Boolean!
"""
Remove the bucket config for the organization.
Stability: Long-term
"""
	removeOrganizationBucketConfig: Organization!
"""
Remove a parser.
"""
	removeParser(
		input: RemoveParserInput!
	): RemoveParserMutation!
"""
Stability: Short-term
"""
	removeQueryQuotaDefaultSettings: Boolean!
"""
Stability: Short-term
"""
	removeQueryQuotaUserSettings(
		username: String!
	): Boolean!
"""
Removes the cache policy of a repository
Stability: Preview
"""
	removeRepoCachePolicy(
"""
Data to remove a repository cache policy
"""
		input: RemoveRepoCachePolicyInput!
	): Boolean!
"""
Removes a role. Only usable if roles are not managed externally, e.g. in LDAP.
Stability: Long-term
"""
	removeRole(
		roleId: String!
	): BooleanResultType!
"""
Remove a label from a scheduled search.
Stability: Long-term
"""
	removeScheduledSearchLabel(
"""
Data for removing a label
"""
		input: RemoveLabelScheduledSearch!
	): ScheduledSearch!
"""
Removes a secondary subdomain from the organization
Stability: Preview
"""
	removeSecondarySubdomain(
		input: RemoveSecondarySubdomainInput!
	): Organization!
"""
Temporary mutation to remove all size based retention for all organizations.
"""
	removeSizeBasedRetentionForAllOrganizations: [String!]!
"""
Remove a star from an alert.
"""
	removeStarFromAlertV2(
"""
Data for removing a star from an alert
"""
		input: RemoveStarFromAlert!
	): Alert!
"""
Remove a star from a dashboard.
Stability: Long-term
"""
	removeStarFromDashboard(
		id: String!
	): Dashboard!
"""
Stability: Long-term
"""
	removeStarFromField(
		input: RemoveStarToFieldInput!
	): RemoveStarToFieldMutation!
"""
Remove a star from a scheduled search.
"""
	removeStarFromScheduledSearch(
"""
Data for removing a star
"""
		input: RemoveStarScheduledSearch!
	): ScheduledSearch!
"""
Remove a star from a repository or view.
Stability: Long-term
"""
	removeStarFromSearchDomain(
		name: String!
	): SearchDomain!
"""
Remove the subdomain settings for the organization.
Stability: Preview
"""
	removeSubdomainSettings: Organization!
"""
Remove a user.
Stability: Long-term
"""
	removeUser(
		input: RemoveUserInput!
	): RemoveUserMutation!
"""
Remove a user.
Stability: Long-term
"""
	removeUserById(
		input: RemoveUserByIdInput!
	): RemoveUserByIdMutation!
"""
Removes users from an existing group.
Stability: Long-term
"""
	removeUsersFromGroup(
		input: RemoveUsersFromGroupInput!
	): RemoveUsersFromGroupMutation!
"""
Rename a dashboard.
Stability: Long-term
"""
	renameDashboard(
		id: String!
		name: String!
	): Dashboard!
"""
Rename a Repository or View.
Stability: Long-term
"""
	renameSearchDomain(
"""
Old name for Repository or View
"""
		name: String!
"""
New name for Repository or View. Note that this changes the URLs for accessing the Repository or View.
"""
		renameTo: String!
	): SearchDomain!
"""
Rename a Repository or View.
Stability: Long-term
"""
	renameSearchDomainById(
		input: RenameSearchDomainByIdInput!
	): SearchDomain!
"""
Stability: Long-term
"""
	renameWidget(
		id: String!
		widgetId: String!
		title: String!
	): Dashboard!
"""
Resend an invite to a pending user.
Stability: Long-term
"""
	resendInvitation(
		input: TokenInput!
	): Boolean!
"""
Resets the flight recorder settings to default for the given vhost
Stability: Preview
"""
	resetFlightRecorderSettings(
"""
The vhost to change the settings for.
"""
		vhost: Int!
	): Boolean!
"""
Sets the quota and rate to the given value or resets it to defaults
Stability: Long-term
"""
	resetQuota(
"""
Data for resetting quota
"""
		input: ResetQuotaInput!
	): Boolean!
"""
Stability: Short-term
"""
	resetToFactorySettings: Account!
"""
Mark all segment files as unarchived.
Stability: Short-term
"""
	restartArchiving(
		repositoryName: String!
		archivalKind: ArchivalKind
	): BooleanResultType!
"""
Restore a deleted search domain.
Stability: Preview
"""
	restoreDeletedSearchDomain(
		input: RestoreDeletedSearchDomainInput!
	): SearchDomain!
"""
Resubmit marketo lead. Requires root level privileges and an organization owner in the organization (the lead).
Stability: Long-term
"""
	resubmitMarketoLead(
		input: ResubmitMarketoLeadData!
	): Boolean!
"""
Revoke a pending user. Once revoked, the invitation link sent to the user becomes invalid.
Stability: Long-term
"""
	revokePendingUser(
		input: TokenInput!
	): Boolean!
"""
Revoke the specified session. Can be a single session, all sessions for a user or all sessions in an organization.
Stability: Long-term
"""
	revokeSession(
		input: RevokeSessionInput!
	): Boolean!
"""
Rollback the organization with the given id.
Stability: Short-term
"""
	rollbackOrganization(
		organizationId: String!
	): Boolean!
"""
Rotate a token
Stability: Long-term
"""
	rotateToken(
		input: RotateTokenInputData!
	): String!
"""
This is used to initiate a global consistency check on a cluster. Returns the checkId of the consistency check run
Stability: Preview
"""
	runGlobalConsistencyCheck: String!
"""
Manually start the organization inconsistency job. This job will check for inconsistencies like orphaned entities, references to non-existent entities. The job can be run in a dry-run mode that only logs what would have happened.
Stability: Preview
"""
	runInconsistencyCheck(
		input: RunInconsistencyCheckInput!
	): String!
"""
Configures S3 archiving for a repository. E.g. bucket and region.
Stability: Short-term
"""
	s3ConfigureArchiving(
		repositoryName: String!
		bucket: String!
		region: String!
		format: S3ArchivingFormat!
		tagOrderInName: [String!]
		startFromDateTime: DateTime
		roleArn: String
	): BooleanResultType!
"""
Disables the archiving job for the repository.
Stability: Short-term
"""
	s3DisableArchiving(
		repositoryName: String!
	): BooleanResultType!
"""
Enables the archiving job for the repository.
Stability: Short-term
"""
	s3EnableArchiving(
		repositoryName: String!
	): BooleanResultType!
"""
Mark all segment files as unarchived.
Stability: Short-term
"""
	s3ResetArchiving(
		repositoryName: String!
		archivalKind: ArchivalKind
	): BooleanResultType!
"""
Scheduled report result failed.
Stability: Long-term
"""
	scheduledReportResultFailed(
		input: ScheduledReportResultFailedInput!
	): Boolean!
"""
Scheduled report result succeeded.
Stability: Long-term
"""
	scheduledReportResultSucceeded(
		input: ScheduledReportResultSucceededInput!
	): Boolean!
"""
Set to true to allow moving existing segments between nodes to achieve a better data distribution
Stability: Short-term
"""
	setAllowRebalanceExistingSegments(
"""
true if the cluster should allow moving existing segments between nodes to achieve a better data distribution
"""
		allowRebalanceExistingSegments: Boolean!
	): Boolean!
"""
Set whether or not to allow updating the desired digesters automatically
Stability: Short-term
"""
	setAllowUpdateDesiredDigesters(
"""
Whether or not to allow updating the desired digesters automatically
"""
		allowUpdateDesiredDigesters: Boolean!
	): Boolean!
"""
Automatically search when arriving at the search page
Stability: Long-term
"""
	setAutomaticSearching(
		name: String!
		automaticSearch: Boolean!
	): setAutomaticSearching!
"""
Set CID of provisioned organization
Stability: Short-term
"""
	setCid(
		cid: String!
	): Organization!
"""
Set a duration from now, until which this host will be considered alive by LogScale, even when it's offline.
"""
	setConsideredAliveFor(
"""
ID of the node to consider alive.
"""
		nodeID: Int!
"""
Amount of millis that the node will be considered alive for (from now).
"""
		aliveForMillis: Long
	): DateTime
"""
Set a time in the future, until which this host will be considered alive by LogScale, even when it's offline.
"""
	setConsideredAliveUntil(
"""
ID of the node to consider alive.
"""
		nodeID: Int!
"""
Time in the future
"""
		aliveUntil: DateTime
	): DateTime
"""
Mark a filter as the default for a dashboard. This filter will automatically be active when the dashboard is opened.
Stability: Long-term
"""
	setDefaultDashboardFilter(
		id: String!
		filterId: String
	): Dashboard!
"""
Set the query that should be loaded on entering the search page in a specific view.
Stability: Long-term
"""
	setDefaultSavedQuery(
		input: SetDefaultSavedQueryInput!
	): BooleanResultType!
"""
Sets the digest replication factor to the supplied value
Stability: Short-term
"""
	setDigestReplicationFactor(
"""
The replication factor for segments newly written to digest nodes. Applies until the segments are moved to storage nodes.
"""
		digestReplicationFactor: Int!
	): Int!
"""
Set a dynamic config. Requires root level access.
Stability: Short-term
"""
	setDynamicConfig(
		input: DynamicConfigInputObject!
	): Boolean!
"""
Configures whether subdomains are enforced for the organization
Stability: Preview
"""
	setEnforceSubdomains(
		input: EnforceSubdomainsInput!
	): Organization!
"""
Save UI styling and other properties for a field. These will be used whenever that field is added to a table or event list in LogScale's UI.
Stability: Long-term
"""
	setFieldConfiguration(
		input: FieldConfigurationInput!
	): Boolean!
"""
Sets the global default cache policy. This policy will be applied to a repo if neither a repo or org cache policy is set.
Stability: Preview
"""
	setGlobalDefaultCachePolicy(
"""
Data to set a global default cache policy
"""
		input: SetGlobalDefaultCachePolicyInput!
	): Boolean!
"""
Toggle whether the specified host should be prepared for eviction from the cluster. If preparing for eviction, the cluster will attempt to move data and work away from the host.
Stability: Short-term
"""
	setIsBeingEvicted(
"""
ID of the node to set the isBeingEvicted flag for.
"""
		vhost: Int!
"""
Eviction flag indicating whether a node should be prepared for eviction from the cluster.
"""
		isBeingEvicted: Boolean!
	): Boolean!
"""
Remove a limit in the given organization
Stability: Long-term
"""
	setLimitDisplayName(
		input: SetLimitDisplayNameInput!
	): Boolean!
"""
Stability: Long-term
"""
	setLoginBridge(
		input: LoginBridgeInput!
	): LoginBridge!
"""
Stability: Long-term
"""
	setLoginBridgeTermsState(
		accepted: Boolean!
	): LoginBridge!
"""
Stability: Short-term
"""
	setLostCollectorDays(
		days: Int
	): Boolean!
"""
Sets the percentage of all hosts relevant to a particular cluster rebalance operation that need to be alive before we allow the system to automatically execute the operation to the supplied value. Cluster rebalance operations currently include reassigning digest work, and moving existing segments to balance disk usage.
Stability: Short-term
"""
	setMinHostAlivePercentageToEnableClusterRebalancing(
"""
Percentage of all hosts relevant to a particular cluster rebalance operation that need to be alive before we allow the system to automatically execute the operation. Cluster rebalance operations currently include reassigning digest work, and moving existing segments to balance disk usage. Must be between 0 and 100, both inclusive
"""
		minHostAlivePercentageToEnableClusterRebalancing: Int!
	): Int!
"""
Sets the starting read offset for the given ingest partition.
Stability: Preview
"""
	setOffsetForDatasourcesOnPartition(
"""
Data for setting offset for datasources on partition type.
"""
		input: SetOffsetForDatasourcesOnPartitionInput!
	): Boolean!
"""
Sets the duration old object sampling will run for before dumping results and restarting
Stability: Preview
"""
	setOldObjectSampleDurationMinutes(
"""
The vhost to change the setting for.
"""
		vhost: Int!
"""
The duration old object sampling will run for before dumping results and restarting
"""
		oldObjectSampleDurationMinutes: Long!
	): Long!
"""
Toggles the OldObjectSample event on or off
Stability: Preview
"""
	setOldObjectSampleEnabled(
"""
The vhost to change the setting for.
"""
		vhost: Int!
"""
true to enable the OldObjectSample event
"""
		oldObjectSampleEnabled: Boolean!
	): Boolean!
"""
Sets the default cache policy of the current organization. This policy will be applied to repos within the current organizatio if a repo cache policy is set.
Stability: Preview
"""
	setOrgDefaultCachePolicy(
"""
Data to set a organization default cache policy
"""
		input: SetOrgDefaultCachePolicyInput!
	): Boolean!
"""
Set the primary bucket target for the organization.
Stability: Long-term
"""
	setOrganizationBucket1(
		targetBucketId1: String!
	): Organization!
"""
Set the secondary bucket target for the organization.
Stability: Long-term
"""
	setOrganizationBucket2(
		targetBucketId2: String!
	): Organization!
"""
Set the primary domain for the organization. If a primary domain is already set the existing primary domain is converted to a secondary domain
Stability: Preview
"""
	setPrimarySubdomain(
		input: SetPrimarySubdomainInput!
	): Organization!
"""
Sets the cache policy of a repository.
Stability: Preview
"""
	setRepoCachePolicy(
"""
Data to set a repo cache policy
"""
		input: SetRepoCachePolicyInput!
	): Boolean!
"""
Sets the segment replication factor to the supplied value
Stability: Short-term
"""
	setSegmentReplicationFactor(
"""
replication factor for segment storage
"""
		segmentReplicationFactor: Int!
	): Int!
"""
Set the subdomain settings for an organization. This overrides previously configured settings
Stability: Preview
"""
	setSubdomainSettings(
		input: SetSubdomainSettingsInput!
	): Organization!
"""
Set current tag groupings for a repository.
Stability: Long-term
"""
	setTagGroupings(
"""
The name of the repository on which to apply the new tag groupings.
"""
		repositoryName: String!
"""
The tag groupings to set for the repository.
"""
		tagGroupings: [TagGroupingRuleInput!]!
	): [TagGroupingRule!]!
"""
Stability: Short-term
"""
	setWantedLogCollectorVersion(
		id: String!
		version: String
		timeOfUpdate: DateTime
	): Boolean!
"""
Star a saved query in user settings.
Stability: Long-term
"""
	starQuery(
		input: AddStarToQueryInput!
	): BooleanResultType!
"""
Stability: Short-term
"""
	startLogCollectorConfigurationTest(
		configId: String!
		collectorIds: [String!]!
	): FleetConfigurationTest!
"""
Stops all running queries including streaming queries
Stability: Short-term
"""
	stopAllQueries(
"""
Input to stopping queries.
"""
		input: StopQueriesInput
	): Boolean!
"""
Stops all historical queries, ignores live and streaming queries
Stability: Short-term
"""
	stopHistoricalQueries(
"""
Input to stopping queries.
"""
		input: StopQueriesInput
	): Boolean!
"""
Stability: Short-term
"""
	stopLogCollectorConfigurationTest(
		configId: String!
	): FleetConfigurationTest!
"""
Stops all streaming queries
Stability: Short-term
"""
	stopStreamingQueries(
"""
Input to stopping queries.
"""
		input: StopQueriesInput
	): Boolean!
"""
Tests whether the Iam role is setup correctly and that there is a connection to the SQS queue.
Stability: Long-term
"""
	testAwsS3SqsIngestFeed(
"""
Data for testing an ingest feed that uses AWS S3 and SQS
"""
		input: TestAwsS3SqsIngestFeed!
	): Boolean!
"""
Test an email action
Stability: Long-term
"""
	testEmailAction(
"""
Data for testing an email action
"""
		input: TestEmailAction!
	): TestResult!
"""
Test an FDR feed.
Stability: Long-term
"""
	testFdrFeed(
"""
Data for testing an FDR feed.
"""
		input: TestFdrFeed!
	): TestFdrResult!
"""
Test a Humio repo action.
Stability: Long-term
"""
	testHumioRepoAction(
"""
Data for testing a Humio repo action
"""
		input: TestHumioRepoAction!
	): TestResult!
"""
Test that a Kafka event forwarder can connect to the specified Kafka server and topic.
Note that this may create the topic on the broker if the Kafka broker is configured to automatically create
topics.
Stability: Long-term
"""
	testKafkaEventForwarderV2(
"""
Data for testing a Kafka event forwarder
"""
		input: TestKafkaEventForwarder!
	): TestResult!
"""
Test an OpsGenie action.
Stability: Long-term
"""
	testOpsGenieAction(
"""
Data for testing an OpsGenie action
"""
		input: TestOpsGenieAction!
	): TestResult!
"""
Test a PagerDuty action.
Stability: Long-term
"""
	testPagerDutyAction(
"""
Data for testing a PagerDuty action.
"""
		input: TestPagerDutyAction!
	): TestResult!
"""
Test a parser on some test events. If the parser fails to run, an error is returned. Otherwise, a list of results, one for each test event, is returned.
"""
	testParser(
		input: TestParserInputV2!
	): TestParserResultV2!
"""
Test a parser on some test cases.
Stability: Long-term
"""
	testParserV2(
		input: ParserTestRunInput!
	): ParserTestRunOutput!
"""
Test a Slack action.
Stability: Long-term
"""
	testSlackAction(
"""
Data for testing a Slack action.
"""
		input: TestSlackAction!
	): TestResult!
"""
Test a post message Slack action.
Stability: Long-term
"""
	testSlackPostMessageAction(
"""
Data for testing a post message Slack action.
"""
		input: TestPostMessageSlackAction!
	): TestResult!
"""
Test an upload file action
Stability: Long-term
"""
	testUploadFileAction(
"""
Data for testing an upload file action.
"""
		input: TestUploadFileAction!
	): TestResult!
"""
Test a VictorOps action.
Stability: Long-term
"""
	testVictorOpsAction(
"""
Data for testing a VictorOps action.
"""
		input: TestVictorOpsAction!
	): TestResult!
"""
Test a webhook action.
Stability: Long-term
"""
	testWebhookAction(
"""
Data for testing a webhook action.
"""
		input: TestWebhookAction!
	): TestResult!
"""
Will attempt to trigger a poll on an ingest feed.
Stability: Long-term
"""
	triggerPollIngestFeed(
"""
Data for trigger polling an ingest feed
"""
		input: TriggerPollIngestFeed!
	): Boolean!
"""
Un-associates a token with its currently assigned parser.
Stability: Long-term
"""
	unassignIngestToken(
"""
The name of the repository the ingest token belongs to.
"""
		repositoryName: String!
"""
The name of the token.
"""
		tokenName: String!
	): UnassignIngestTokenMutation!
"""
Removes the organization management role assigned to the group for the provided organizations.
Stability: Preview
"""
	unassignOrganizationManagementRoleFromGroup(
		input: UnassignOrganizationManagementRoleFromGroupInput!
	): UnassignOrganizationManagementRoleFromGroup!
"""
Removes the organization role assigned to the group.
Stability: Long-term
"""
	unassignOrganizationRoleFromGroup(
		input: RemoveOrganizationRoleFromGroupInput!
	): UnassignOrganizationRoleFromGroup!
"""
Removes the role assigned to the group for a given view.
Stability: Long-term
"""
	unassignRoleFromGroup(
		input: RemoveRoleFromGroupInput!
	): UnassignRoleFromGroup!
"""
Removes the system role assigned to the group.
Stability: Long-term
"""
	unassignSystemRoleFromGroup(
		input: RemoveSystemRoleFromGroupInput!
	): UnassignSystemRoleFromGroup!
"""
Unassign node tasks. Returns the set of assigned tasks after the unassign operation has completed.
Stability: Short-term
"""
	unassignTasks(
"""
ID of the node to assign node tasks to.
"""
		nodeID: Int!
"""
List of tasks to unassign.
"""
		tasks: [NodeTaskEnum!]!
	): [NodeTaskEnum!]!
"""
Unassigns role(s) for user in the search domain.
Stability: Long-term
"""
	unassignUserRoleForSearchDomain(
		userId: String!
		searchDomainId: String!
"""
If specified, only unassigns the role with the specified id. If not specified, unassigns all user roles for the user in the search domain.
"""
		roleId: String
	): User!
"""
Unblock ingest to the specified repository. (Requires ManageCluster Permission)
Stability: Long-term
"""
	unblockIngest(
		repositoryName: String!
	): UnblockIngestMutation!
"""
Stability: Long-term
"""
	unenrollLogCollectors(
		ids: [String!]
	): [EnrolledCollector!]!
"""
Uninstalls a package from a specific view.
Stability: Long-term
"""
	uninstallPackage(
"""
The id of the package to uninstall.
"""
		packageId: UnversionedPackageSpecifier!
"""
The name of the view the package to uninstall is installed in.
"""
		viewName: String!
	): BooleanResultType!
"""
Stability: Preview
"""
	unlinkChildOrganization(
		childId: String!
	): Boolean!
"""
Unset a dynamic config. Requires Manage Cluster permission.
Stability: Short-term
"""
	unsetDynamicConfig(
		input: UnsetDynamicConfigInputObject!
	): Boolean!
"""
Unset the secondary bucket target for the organization.
Stability: Long-term
"""
	unsetOrganizationBucket2: Organization!
"""
Unstar a saved query in user settings.
Stability: Long-term
"""
	unstarQuery(
		input: RemoveStarFromQueryInput!
	): SavedQueryStarredUpdate!
"""
Update the action security policies for the organization
Stability: Long-term
"""
	updateActionSecurityPolicies(
		input: ActionSecurityPoliciesInput!
	): Organization!
"""
Update an aggregate alert.
Stability: Long-term
"""
	updateAggregateAlert(
"""
Data for updating an aggregate alert.
"""
		input: UpdateAggregateAlert!
	): AggregateAlert!
"""
Update an alert.
Stability: Long-term
"""
	updateAlert(
"""
Data for updating an alert
"""
		input: UpdateAlert!
	): Alert!
"""
Update an ingest feed, which uses AWS S3 and SQS
Stability: Long-term
"""
	updateAwsS3SqsIngestFeed(
"""
Data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
"""
		input: UpdateAwsS3SqsIngestFeed!
	): IngestFeed!
"""
Stability: Preview
"""
	updateCrossOrgViewConnectionFilters(
		input: UpdateCrossOrganizationViewConnectionFiltersInput!
	): View!
"""
Update a custom link interaction.
Stability: Long-term
"""
	updateCustomLinkInteraction(
		input: UpdateCustomLinkInteractionInput!
	): InteractionId!
"""
Update a dashboard.
Stability: Long-term
"""
	updateDashboard(
		input: UpdateDashboardInput!
	): UpdateDashboardMutation!
"""
Update a dashboard filter.
Stability: Long-term
"""
	updateDashboardFilter(
		id: String!
		filterId: String!
		name: String!
		prefixFilter: String!
	): Dashboard!
"""
Update a dashboard link interaction.
Stability: Long-term
"""
	updateDashboardLinkInteraction(
		input: UpdateDashboardLinkInteractionInput!
	): InteractionId!
"""
Update a dashboard token to run as another user
Stability: Long-term
"""
	updateDashboardToken(
		viewId: String!
"""
Deprecated in favor of queryOwnershipType. If field is set to anything else than the calling user id, an exception will be thrown.
"""
		userId: String
		dashboardToken: String!
"""
Ownership of the query run by this shared dashboard. If value is User, ownership will be based on the calling user.
"""
		queryOwnershipType: QueryOwnershipType
	): View!
"""
Updates the default queryprefix for a group.
Stability: Long-term
"""
	updateDefaultQueryPrefix(
		input: UpdateDefaultQueryPrefixInput!
	): UpdateDefaultQueryPrefixMutation!
"""
Updates the default role for a group.
Stability: Long-term
"""
	updateDefaultRole(
		input: UpdateDefaultRoleInput!
	): updateDefaultRoleMutation!
"""
Stability: Long-term
"""
	updateDescriptionForSearchDomain(
		name: String!
		newDescription: String!
	): UpdateDescriptionMutation!
"""
Updates a log collector configuration.
Stability: Short-term
"""
	updateDraftLogCollectorConfiguration(
		id: String!
		draft: String
	): LogCollectorConfiguration!
"""
Update an email action.
Stability: Long-term
"""
	updateEmailAction(
"""
Data for updating an email action.
"""
		input: UpdateEmailAction!
	): EmailAction!
"""
Update an event forwarding rule on a repository and return it
Stability: Long-term
"""
	updateEventForwardingRule(
"""
Data for updating an event forwarding rule
"""
		input: UpdateEventForwardingRule!
	): EventForwardingRule!
"""
Update an FDR feed with the supplied changes. Note that the input fields to this method, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
Stability: Long-term
"""
	updateFdrFeed(
"""
Data for updating an FDR feed. Note that the fields, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
"""
		input: UpdateFdrFeed!
	): FdrFeed!
"""
FDR feed administrator control update
Stability: Long-term
"""
	updateFdrFeedControl(
"""
Data for updating the administrator control of an FDR feed.
"""
		input: UpdateFdrFeedControl!
	): FdrFeedControl!
"""
Updates an alias mapping on a schema.
Stability: Long-term
"""
	updateFieldAliasMapping(
		input: UpdateFieldAliasMappingInput!
	): String!
"""
Updates an existing schema.
Stability: Long-term
"""
	updateFieldAliasSchema(
		input: UpdateFieldAliasSchemaInput!
	): FieldAliasSchema!
"""
Change file
Stability: Long-term
"""
	updateFile(
		fileName: String!
		name: String!
"""
The rows within the offset and limit. They will overwrite all existing rows that are also within the offset and limit.
"""
		changedRows: [[String!]!]!
"""
Table headers
"""
		headers: [String!]!
"""
List of column changes that will be applied to all rows in the file. Ordering is important, as the first change in the list will be executed first, and the next change will be executed on the resulting rows.
"""
		columnChanges: [ColumnChange!]!
"""
Used to find when to stop replacing rows, by adding the limit to the offset. If no offset is given, the file will be truncated to match the updated rows.
"""
		limit: Int
"""
Starting index to replace the old rows with the updated ones. It does not take into account the header row.
"""
		offset: Int
	): UploadedFileSnapshot!
"""
Update a filter alert.
Stability: Long-term
"""
	updateFilterAlert(
"""
Data for updating a filter alert
"""
		input: UpdateFilterAlert!
	): FilterAlert!
"""
Stability: Short-term
"""
	updateFleetInstallTokenConfigId(
		token: String!
		configId: String
	): FleetInstallationToken!
"""
Stability: Long-term
"""
	updateFleetInstallTokenName(
		token: String!
		name: String!
	): FleetInstallationToken!
"""
Updates the group.
Stability: Long-term
"""
	updateGroup(
		input: UpdateGroupInput!
	): UpdateGroupMutation!
"""
Update a LogScale repository action.
Stability: Long-term
"""
	updateHumioRepoAction(
"""
Data for updating a LogScale repository action.
"""
		input: UpdateHumioRepoAction!
	): HumioRepoAction!
"""
Update IP filter.
Stability: Long-term
"""
	updateIPFilter(
		input: IPFilterUpdateInput!
	): IPFilter!
"""
Update an ingest listener.
Stability: Long-term
"""
	updateIngestListenerV3(
		input: UpdateIngestListenerV3Input!
	): IngestListener!
"""
Sets the ingest partition scheme of the LogScale cluster. Requires ManageCluster permission. Be aware that the ingest partition scheme is normally automated, and changes will be overwritten by the automation. This mutation should generally not be used unless the automation is temporarily disabled.
Stability: Short-term
"""
	updateIngestPartitionScheme(
"""
The list of ingest partitions. If partitions are missing in the input, they are left unchanged.
"""
		partitions: [IngestPartitionInput!]!
	): BooleanResultType!
"""
Update a Kafka event forwarder and return it
Stability: Long-term
"""
	updateKafkaEventForwarder(
"""
Data for updating a Kafka event forwarder
"""
		input: UpdateKafkaEventForwarder!
	): KafkaEventForwarder!
"""
Update the license key for the LogScale cluster. If there is an existing license on this cluster this operation requires permission to manage cluster.
Stability: Long-term
"""
	updateLicenseKey(
		license: String!
	): License!
"""
Update the limit with the given name, only the arguments defined will be updated
"""
	updateLimit(
		input: UpdateLimitInput!
	): Boolean!
"""
Update the limit with the given name, only the arguments defined will be updated
Stability: Long-term
"""
	updateLimitV2(
		input: UpdateLimitInputV2!
	): LimitV2!
"""
Update a cluster connection to a local view.
Stability: Short-term
"""
	updateLocalClusterConnection(
"""
Data for updating a local cluster connection
"""
		input: UpdateLocalClusterConnectionInput!
	): LocalClusterConnection!
"""
Stability: Short-term
"""
	updateLogCollectorConfigurationDescription(
		configId: String!
		description: String
	): LogCollectorConfiguration!
"""
Stability: Short-term
"""
	updateLogCollectorConfigurationName(
		configId: String!
		name: String!
	): LogCollectorConfiguration!
"""
Stability: Short-term
"""
	updateLogCollectorGroupConfigIds(
		id: String!
		configIds: [String!]
	): LogCollectorGroup!
"""
Stability: Short-term
"""
	updateLogCollectorGroupFilter(
		id: String!
		filter: String
	): LogCollectorGroup!
"""
Stability: Long-term
"""
	updateLogCollectorGroupName(
		id: String!
		name: String!
	): LogCollectorGroup!
"""
Stability: Short-term
"""
	updateLogCollectorGroupWantedVersion(
		id: String!
		wantedVersion: String
	): LogCollectorGroup!
"""
Stability: Long-term
"""
	updateLoginBridge(
		input: LoginBridgeUpdateInput!
	): LoginBridge!
"""
Override the globally configured maximum number of auto shards.
Stability: Long-term
"""
	updateMaxAutoShardCount(
		repositoryName: String!
"""
New override value. Set to zero to remove current override.
"""
		maxAutoShardCount: Int!
	): Repository!
"""
Override the globally configured maximum size of ingest requests.
Stability: Long-term
"""
	updateMaxIngestRequestSize(
		repositoryName: String!
"""
New override value. Set to zero to remove current override.
"""
		maxIngestRequestSize: Int!
	): Repository!
"""
Stability: Long-term
"""
	updateOIDCIdentityProvider(
		input: UpdateOidcConfigurationInput!
	): OidcIdentityProvider!
"""
Update an OpsGenie action.
Stability: Long-term
"""
	updateOpsGenieAction(
"""
Data for updating an OpsGenie action
"""
		input: UpdateOpsGenieAction!
	): OpsGenieAction!
"""
For manually fixing bad references. Root operation.
Stability: Preview
"""
	updateOrganizationForeignKey(
		id: String!
		foreignType: Organizations__ForeignType!
		operation: Organizations__Operation!
	): Organization!
"""
Update information about the organization
Stability: Short-term
"""
	updateOrganizationInfo(
		name: String!
		countryCode: String!
		industry: String!
		useCases: [Organizations__UseCases!]!
	): Organization!
"""
For manually updating contract limits. System operation.
Stability: Short-term
"""
	updateOrganizationLimits(
		input: OrganizationLimitsInput!
	): Organization!
"""
Update mutability of the organization
"""
	updateOrganizationMutability(
		organizationId: String!
		blockIngest: Boolean!
		readonly: Boolean!
	): Organization!
"""
Update a note for a given organization. Requires root.
Stability: Short-term
"""
	updateOrganizationNotes(
		notes: String!
	): Boolean!
"""
Update the permissions of an organization permission token.
Stability: Long-term
"""
	updateOrganizationPermissionsTokenPermissions(
		input: UpdateOrganizationPermissionsTokenPermissionsInput!
	): String!
"""
Update an users organizations root state
Stability: Short-term
"""
	updateOrganizationRoot(
		userId: String!
		organizationRoot: Boolean!
	): Organization!
"""
Update the subscription of the organization. Root operation.
Stability: Short-term
"""
	updateOrganizationSubscription(
		input: UpdateSubscriptionInputObject!
	): Organization!
"""
Updates a package in a specific view.
Stability: Long-term
"""
	updatePackageFromRegistryV2(
		UpdatePackageFromRegistryInput: UpdatePackageFromRegistryInput!
	): PackageUpdateResult!
"""
Updates a package from file provided in multipart/form-data (name=file) in a specific view.
Stability: Long-term
"""
	updatePackageFromZip(
"""
The name of the view the package is installed in.
"""
		viewName: String!
"""
how to handle conflicts
"""
		conflictResolutions: [ConflictResolutionConfiguration!]!
"""
Ownership of the queries run by the triggers (e.g. alerts and scheduled searches) that are installed as part of this package. If value is User, ownership will be based on the calling user.
"""
		queryOwnershipType: QueryOwnershipType
	): BooleanResultType!
"""
Update a PagerDuty action.
Stability: Long-term
"""
	updatePagerDutyAction(
"""
Data for updating a PagerDuty action
"""
		input: UpdatePagerDutyAction!
	): PagerDutyAction!
"""
Update a parser.
"""
	updateParser(
		input: UpdateParserInput!
	): UpdateParserMutation!
"""
Update a parser. Only the provided fields are updated on the parser, and the remaining fields not provided are unchanged.
Stability: Long-term
"""
	updateParserV2(
		input: UpdateParserInputV2!
	): Parser!
"""
Update the viewers profile.
Stability: Long-term
"""
	updateProfile(
		firstName: String
		lastName: String
	): Account!
"""
Updates queryprefix for a group in a view.
Stability: Long-term
"""
	updateQueryPrefix(
		input: UpdateQueryPrefixInput!
	): UpdateQueryPrefixMutation!
"""
Update the readonly dashboard ip filter
Stability: Long-term
"""
	updateReadonlyDashboardIPFilter(
		ipFilter: String
	): Boolean!
"""
Update a cluster connection to a remote view.
Stability: Short-term
"""
	updateRemoteClusterConnection(
"""
Data for updating a remote cluster connection
"""
		input: UpdateRemoteClusterConnectionInput!
	): RemoteClusterConnection!
"""
Change the data type of a repository.
Stability: Short-term
"""
	updateRepositoryDataType(
		input: UpdateRepoDataTypeInputObject!
	): Boolean!
"""
Change the limit id of a repository.
Stability: Short-term
"""
	updateRepositoryLimitId(
		input: UpdateRepoLimitIdInputObject!
	): Boolean!
"""
Change the type of a repository. Only useful in Cloud setups.
Stability: Long-term
"""
	updateRepositoryType(
		name: String!
		type: String!
	): BooleanResultType!
"""
Change the usage tag of a repository.
Stability: Short-term
"""
	updateRepositoryUsageTag(
		name: String!
		usageTag: String!
	): Boolean!
"""
Update the retention policy of a repository.
Stability: Long-term
"""
	updateRetention(
"""
The name of the repository to change retention for.
"""
		repositoryName: String!
"""
The maximum time (in days) to keep data. Data old than this will be deleted.
"""
		timeBasedRetention: Float
"""
Sets retention (in gigabytes) based on the size of data when it arrives to LogScale, that is before parsing and compression. LogScale will keep `at most` this amount of data.
"""
		ingestSizeBasedRetention: Float
"""
Sets retention (in gigabytes) based on the size of data when it is stored in LogScale, that is after parsing and compression. LogScale will keep `at most` this amount of data.
"""
		storageSizeBasedRetention: Float
"""
Sets time (in days) to keep backups before they are deleted.
"""
		timeBasedBackupRetention: Float
	): UpdateRetentionMutation!
"""
Stability: Long-term
"""
	updateRole(
		input: UpdateRoleInput!
	): UpdateRoleMutation!
"""
Stability: Long-term
"""
	updateSamlIdentityProvider(
		id: String!
		name: String!
		signOnUrl: String!
		idpCertificateInBase64: String!
		idpEntityId: String!
		domains: [String!]!
		groupMembershipAttribute: String
		userAttribute: String
		enableDebug: Boolean
"""
Only used internal
"""
		adminAttribute: String
"""
Only used internal
"""
		adminAttributeMatch: String
"""
If multiple Idp's are defined the default idp is used whenever redirecting to login
"""
		defaultIdp: Boolean
"""
Only used internal
"""
		humioOwned: Boolean
"""
Lazy create users during login
"""
		lazyCreateUsers: Boolean
"""
An alternative certificate to be used for IdP signature validation. Useful for handling certificate rollover
"""
		alternativeIdpCertificateInBase64: String
	): SamlIdentityProvider!
"""
Updates a saved query.
Stability: Long-term
"""
	updateSavedQuery(
		input: UpdateSavedQueryInput!
	): UpdateSavedQueryPayload!
"""
Update a scheduled report. Only the supplied property values are updated.
Stability: Long-term
"""
	updateScheduledReport(
		input: UpdateScheduledReportInput!
	): ScheduledReport!
"""
Update a scheduled search.
"""
	updateScheduledSearch(
"""
Data for updating a scheduled search
"""
		input: UpdateScheduledSearch!
	): ScheduledSearch!
"""
Update a scheduled search.
Stability: Long-term
"""
	updateScheduledSearchV2(
"""
Data for updating a scheduled search
"""
		input: UpdateScheduledSearchV2!
	): ScheduledSearch!
"""
Update a search link interaction.
Stability: Long-term
"""
	updateSearchLinkInteraction(
		input: UpdateSearchLinkInteractionInput!
	): InteractionId!
"""
Update session settings for the organization.
Stability: Short-term
"""
	updateSessionSettings(
		input: SessionInput!
	): Organization!
"""
Set flags for UI states and help messages.
Stability: Preview
"""
	updateSettings(
		isWelcomeMessageDismissed: Boolean
		isGettingStartedMessageDismissed: Boolean
		isCommunityMessageDismissed: Boolean
		isPackageDocsMessageDismissed: Boolean
		isEventListOrderedWithNewestAtBottom: Boolean
		isFieldPanelOpenByDefault: Boolean
		automaticallySearch: Boolean
		automaticallyHighlighting: Boolean
		uiTheme: UiTheme
		isDarkModeMessageDismissed: Boolean
		isResizableQueryFieldMessageDismissed: Boolean
		featureAnnouncementsToDismiss: [FeatureAnnouncement!]
		defaultTimeZone: String
	): UserSettings!
"""
Update the shared dashboards security policies for the organization. Updating the policies will update or delete all existing tokens that do not fit into the changes. For instance, enforcing an IP filter will set the IP filter on all shared dashboard tokens. Disabling shared dashboard tokens, will delete all shared dashboard tokens.
Stability: Long-term
"""
	updateSharedDashboardsSecurityPolicies(
		input: SharedDashboardsSecurityPoliciesInput!
	): Organization!
"""
Update a Slack action.
Stability: Long-term
"""
	updateSlackAction(
"""
Data for updating a Slack action
"""
		input: UpdateSlackAction!
	): SlackAction!
"""
Update a post-message Slack action.
Stability: Long-term
"""
	updateSlackPostMessageAction(
"""
Data for updating a post-message Slack action
"""
		input: UpdatePostMessageSlackAction!
	): SlackPostMessageAction!
"""
Update the social login options for the organization
Stability: Preview
"""
	updateSocialLoginSettings(
		input: [SocialLoginSettingsInput!]!
	): Organization!
"""
Update the permissions of a system permission token.
Stability: Long-term
"""
	updateSystemPermissionsTokenPermissions(
		input: UpdateSystemPermissionsTokenPermissionsInput!
	): String!
"""
Update the token security policies for the organization. Updating the policies will update or delete all existing tokens that do not fit into the changes. For instance, enforcing an IP filter for personal user tokens will set the IP filter on all tokens of that type. Disabling a token type, will delete all tokens of that type. Finally setting an enforce expiration after will set that on all tokens that are above the interval and keep their current expiration if inside the interval. Tokens below the expiration will be deleted.
Stability: Long-term
"""
	updateTokenSecurityPolicies(
		input: TokenSecurityPoliciesInput!
	): Organization!
"""
Update an upload file action.
Stability: Long-term
"""
	updateUploadFileAction(
"""
Data for updating an upload file action.
"""
		input: UpdateUploadFileAction!
	): UploadFileAction!
"""
Updates a user. Requires Root Permission.
Stability: Long-term
"""
	updateUser(
		input: AddUserInput!
	): UpdateUserMutation!
"""
Updates a user.
Stability: Long-term
"""
	updateUserById(
		input: UpdateUserByIdInput!
	): UpdateUserByIdMutation!
"""
Update user default settings for the organization.
Stability: Short-term
"""
	updateUserDefaultSettings(
		input: UserDefaultSettingsInput!
	): Organization!
"""
Update a VictorOps action.
Stability: Long-term
"""
	updateVictorOpsAction(
"""
Data for updating a VictorOps action.
"""
		input: UpdateVictorOpsAction!
	): VictorOpsAction!
"""
Update a view.
Stability: Long-term
"""
	updateView(
		viewName: String!
		connections: [ViewConnectionInput!]!
	): View!
"""
Update the permissions of a view permission token.
Stability: Long-term
"""
	updateViewPermissionsTokenPermissions(
		input: UpdateViewPermissionsTokenPermissionsInput!
	): String!
"""
Update a webhook action.
Stability: Long-term
"""
	updateWebhookAction(
"""
Data for updating a webhook action
"""
		input: UpdateWebhookAction!
	): WebhookAction!
"""
Upgrade the account.
Stability: Long-term
"""
	upgradeAccount(
		input: UpgradeAccountData!
	): Boolean!
}

"""
This authentication type can be used to use LogScale without authentication. This should only be considered for testing and development purposes, it is not recommended for production systems and prevents LogScale from doing proper Audit Logging.
"""
type NoAuthentication implements AuthenticationMethod{
"""
Stability: Preview
"""
	name: String!
}

"""
A widget get text, links, etc.
"""
type NoteWidget implements Widget{
"""
Stability: Long-term
"""
	backgroundColor: String
"""
Stability: Long-term
"""
	textColor: String
"""
Stability: Long-term
"""
	text: String!
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	title: String!
"""
Stability: Long-term
"""
	description: String
"""
Stability: Long-term
"""
	x: Int!
"""
Stability: Long-term
"""
	y: Int!
"""
Stability: Long-term
"""
	width: Int!
"""
Stability: Long-term
"""
	height: Int!
}

input NotificationInput {
	message: String!
	target: Targets!
	ids: [String!]
	title: String!
	dismissable: Boolean!
	severity: NotificationSeverity!
	link: String
	linkDescription: String
	notificationType: NotificationTypes!
}

"""
Authentication through OAuth Identity Providers.
"""
type OAuthAuthentication implements AuthenticationMethod{
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	uiLoginFlow: Boolean!
"""
Stability: Long-term
"""
	google: OAuthProvider
"""
Stability: Long-term
"""
	github: OAuthProvider
"""
Stability: Long-term
"""
	bitbucket: OAuthProvider
"""
Stability: Long-term
"""
	oidc: OIDCProvider
}

"""
An OAuth Identity Provider.
"""
type OAuthProvider {
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	clientId: String!
"""
Stability: Long-term
"""
	redirectUrl: String!
}

"""
An OIDC identity provider
"""
type OIDCProvider {
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	clientId: String!
"""
Stability: Long-term
"""
	redirectUrl: String!
"""
Stability: Long-term
"""
	authorizationEndpoint: String
"""
Stability: Long-term
"""
	serviceName: String
"""
Stability: Long-term
"""
	scopes: [String!]!
"""
Stability: Long-term
"""
	federatedIdp: String
}

enum ObjectAction {
	Unknown
	ReadOnlyAndHidden
	ReadWriteAndVisible
}

input OidcConfigurationInput {
	name: String!
	clientID: String!
	clientSecret: String!
	issuer: String!
	tokenEndpointAuthMethod: String!
	authorizationEndpoint: String!
	tokenEndpoint: String
	userInfoEndpoint: String
	registrationEndpoint: String
	groupsClaim: String
	JWKSEndpoint: String
	domains: [String!]!
	scopes: [String!]!
	userClaim: String
	enableDebug: Boolean!
	defaultIdp: Boolean
	humioOwned: Boolean
	lazyCreateUsers: Boolean
	federatedIdp: String
	scopeClaim: String
}

type OidcIdentityProviderAuth implements AuthenticationMethodAuth{
"""
Stability: Long-term
"""
	redirectUrl: String!
"""
Stability: Long-term
"""
	authType: String!
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	scopes: [String!]!
"""
Stability: Long-term
"""
	serviceName: String!
"""
Stability: Long-term
"""
	authorizeEndpoint: String!
"""
Stability: Long-term
"""
	clientId: String!
"""
Stability: Long-term
"""
	federatedIdp: String
}

"""
Represents information about a LogScale License.
"""
type OnPremLicense implements License{
"""
The time at which the license expires.
Stability: Long-term
"""
	expiresAt: DateTime!
"""
The time at which the license was issued.
Stability: Long-term
"""
	issuedAt: DateTime!
"""
license id.
Stability: Long-term
"""
	uid: String!
"""
The maximum number of user accounts allowed in LogScale. Unlimited if undefined.
Stability: Long-term
"""
	maxUsers: Int
"""
The name of the entity the license was issued to.
Stability: Long-term
"""
	owner: String!
"""
Indicates whether the license allows running LogScale as a SaaS platform.
Stability: Long-term
"""
	isSaaS: Boolean!
"""
Indicates whether the license is an OEM license.
Stability: Long-term
"""
	isOem: Boolean!
}

"""
An OpsGenie action
"""
type OpsGenieAction implements Action{
"""
OpsGenie webhook url to send the request to.
Stability: Long-term
"""
	apiUrl: String!
"""
Key to authenticate with OpsGenie.
Stability: Long-term
"""
	genieKey: String!
"""
Defines whether the action should use the configured proxy to make web requests.
Stability: Long-term
"""
	useProxy: Boolean!
"""
The name of the action.
Stability: Long-term
"""
	name: String!
"""
The display name of the action.
Stability: Long-term
"""
	displayName: String!
"""
The id of the action.
Stability: Long-term
"""
	id: String!
"""
A template that can be used to recreate the action.
Stability: Long-term
"""
	yamlTemplate: YAML!
"""
Stability: Long-term
"""
	packageId: VersionedPackageSpecifier
"""
The package, if any, which the action is part of.
Stability: Long-term
"""
	package: PackageInstallation
"""
False if this type of action is disabled because of a security policy, true otherwise
Stability: Long-term
"""
	isAllowedToRun: Boolean!
"""
True if this action is used by triggers, where the query is run by the organization. If true, then the OrganizationOwnedQueries permission is required to edit the action.
Stability: Long-term
"""
	requiresOrganizationOwnedQueriesPermissionToEdit: Boolean!
"""
Allowed asset actions
Stability: Preview
"""
	allowedActions: [AssetAction!]!
"""
The resource identifier for this action.
Stability: Short-term
"""
	resource: String!
}

input OrganizationLimitsInput {
	ingest: Long!
	retention: Int!
	users: Int!
	expiration: Long!
	allowSelfService: Boolean
	contractVersion: Organizations__ContractVersion
}

"""
A link between two organizations
"""
type OrganizationLink {
"""
Stability: Preview
"""
	parentOrganization: Organization!
"""
Stability: Preview
"""
	childOrganization: Organization!
}

"""
Query running with organization based ownership
"""
type OrganizationOwnership implements QueryOwnership{
"""
Organization owning and running the query
Stability: Long-term
"""
	organization: Organization!
"""
Id of organization owning and running the query
Stability: Long-term
"""
	id: String!
}

"""
Organization permissions token. The token allows the caller to work with organization-level permissions.
"""
type OrganizationPermissionsToken implements Token{
"""
The set of permissions on the token
Stability: Long-term
"""
	permissions: [String!]!
"""
The id of the token.
Stability: Long-term
"""
	id: String!
"""
The name of the token.
Stability: Long-term
"""
	name: String!
"""
The time at which the token expires.
Stability: Long-term
"""
	expireAt: Long
"""
The ip filter on the token.
Stability: Long-term
"""
	ipFilter: String
"""
The ip filter on the token.
Stability: Long-term
"""
	ipFilterV2: IPFilter
"""
The date the token was created.
Stability: Long-term
"""
	createdAt: Long!
}

enum Organizations__ContractualType {
	Limited
	Unlimited
	Ignored
}

enum Organizations__ForeignType {
	Unknown
	Role
	Group
	Idp
	View
	User
}

enum Organizations__Operation {
	Remove
	Add
}

"""
An event produced by a parser in a test run
"""
type OutputEvent {
"""
The fields of the event
Stability: Long-term
"""
	fields: [EventField!]!
}

type PackageUpdateResult {
"""
Stability: Long-term
"""
	package: Package2!
}

"""
A PagerDuty action.
"""
type PagerDutyAction implements Action{
"""
Severity level to give to the message.
Stability: Long-term
"""
	severity: String!
"""
Routing key to authenticate with PagerDuty.
Stability: Long-term
"""
	routingKey: String!
"""
Defines whether the action should use the configured proxy to make web requests.
Stability: Long-term
"""
	useProxy: Boolean!
"""
The name of the action.
Stability: Long-term
"""
	name: String!
"""
The display name of the action.
Stability: Long-term
"""
	displayName: String!
"""
The id of the action.
Stability: Long-term
"""
	id: String!
"""
A template that can be used to recreate the action.
Stability: Long-term
"""
	yamlTemplate: YAML!
"""
Stability: Long-term
"""
	packageId: VersionedPackageSpecifier
"""
The package, if any, which the action is part of.
Stability: Long-term
"""
	package: PackageInstallation
"""
False if this type of action is disabled because of a security policy, true otherwise
Stability: Long-term
"""
	isAllowedToRun: Boolean!
"""
True if this action is used by triggers, where the query is run by the organization. If true, then the OrganizationOwnedQueries permission is required to edit the action.
Stability: Long-term
"""
	requiresOrganizationOwnedQueriesPermissionToEdit: Boolean!
"""
Allowed asset actions
Stability: Preview
"""
	allowedActions: [AssetAction!]!
"""
The resource identifier for this action.
Stability: Short-term
"""
	resource: String!
}

input ParameterFilePropertiesInput {
	fileName: String!
	valueColumn: String!
	labelColumn: String
	valueFilters: [ParameterFileValueFilter!]!
	invalidInputPatterns: [String!]
	invalidInputMessage: String
}

input ParameterFileValueFilter {
	field: String!
	values: [String!]!
}

input ParameterFixedListOption {
	label: String!
	value: String!
}

input ParameterFixedListPropertiesInput {
	values: [ParameterFixedListOption!]!
}

input ParameterFreeTextPropertiesInput {
	invalidInputPatterns: [String!]
	invalidInputMessage: String
}

input ParameterInput {
	id: String!
	label: String!
	defaultValue: String
	order: Int
	width: Int
	freeTextOptions: ParameterFreeTextPropertiesInput
	queryOptions: ParameterQueryPropertiesInput
	fixedListOptions: ParameterFixedListPropertiesInput
	fileOptions: ParameterFilePropertiesInput
	isMultiParam: Boolean
	defaultMultiValues: [String!]
}

"""
A widget that contains dashboard parameters.
"""
type ParameterPanel implements Widget{
"""
Stability: Long-term
"""
	parameterIds: [String!]!
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	title: String!
"""
Stability: Long-term
"""
	description: String
"""
Stability: Long-term
"""
	x: Int!
"""
Stability: Long-term
"""
	y: Int!
"""
Stability: Long-term
"""
	width: Int!
"""
Stability: Long-term
"""
	height: Int!
}

input ParameterQueryPropertiesInput {
	queryString: String!
	timeWindow: String!
	optionValueField: String!
	optionLabelField: String!
	useDashboardTimeIfSet: Boolean!
	invalidInputPatterns: [String!]
	invalidInputMessage: String
}

"""
The specification of a parameter
"""
input ParameterSpecificationInput {
"""
The specification of a parameter
"""
	name: String!
"""
The specification of a parameter
"""
	parameterType: ParameterTypeEnum!
"""
The specification of a parameter
"""
	minLong: Long
"""
The specification of a parameter
"""
	maxLong: Long
"""
The specification of a parameter
"""
	minDouble: Float
"""
The specification of a parameter
"""
	maxDouble: Float
"""
The specification of a parameter
"""
	minLength: Int
"""
The specification of a parameter
"""
	defaultValue: [String!]
}

"""
The result of parsing a single test event
"""
type ParseEventResult {
"""
The status of parsing the test event
"""
	status: ParseEventStatus!
"""
A potential error message
"""
	errorMessage: String
"""
The parsed events. Can be empty if the test was dropped by the parser or contain one or more events
"""
	events: [ParsedEvent!]!
}

"""
Staus of parsing a test event
"""
enum ParseEventStatus {
"""
The event was parsed successfully
"""
	success
"""
There was an error parsing the event
"""
	parseError
"""
There was an error extracting a timestamp from the event
"""
	timestampError
}

"""
A parsed event
"""
type ParsedEvent {
"""
The fields of the event
"""
	fields: [Field!]!
}

"""
Assertions on the shape of a given test case output event. It is a key-pair value, where the index of the output event is the key, and the assertions are the value.
"""
input ParserTestCaseAssertionsForOutputInput {
"""
Assertions on the shape of a given test case output event. It is a key-pair value, where the index of the output event is the key, and the assertions are the value.
"""
	outputEventIndex: Int!
"""
Assertions on the shape of a given test case output event. It is a key-pair value, where the index of the output event is the key, and the assertions are the value.
"""
	assertions: ParserTestCaseOutputAssertionsInput!
}

"""
Contains any test failures that relates to a specific output event. This is a key-value pair, where the index of the output event is the key, and the failures are the value.
"""
type ParserTestCaseFailuresForOutput {
"""
The index of the output event which these failures pertain to. Note that there may be failures pointing to non-existing output events, if e.g. an assertion was made on an output event which was not produced.
Stability: Long-term
"""
	outputEventIndex: Int!
"""
Failures for the output event.
Stability: Long-term
"""
	failures: ParserTestCaseOutputFailures!
}

"""
A test case for a parser.
"""
input ParserTestCaseInput {
"""
A test case for a parser.
"""
	event: ParserTestEventInput!
"""
A test case for a parser.
"""
	outputAssertions: [ParserTestCaseAssertionsForOutputInput!]
}

"""
Assertions on the shape of a given test case output event.
"""
input ParserTestCaseOutputAssertionsInput {
"""
Assertions on the shape of a given test case output event.
"""
	fieldsNotPresent: [String!]
"""
Assertions on the shape of a given test case output event.
"""
	fieldsHaveValues: [FieldHasValueInput!]
}

"""
Failures for an output event.
"""
type ParserTestCaseOutputFailures {
"""
Any errors produced by the parser when creating an output event.
Stability: Long-term
"""
	parsingErrors: [String!]!
"""
Any assertion failures on the given output event. Note that all assertion failures can be uniquely identified by the output event index and the field name they operate on.
Stability: Long-term
"""
	assertionFailuresOnFields: [AssertionFailureOnField!]!
"""
Fields where the name begins with `#` even though they are not a tag. In LogScale, field names beginning with `#` are treated specially, and should only be constructed through the tagging mechanism. Fields which do begin with `#`, but are not proper tags, will be effectively unsearchable.
Stability: Preview
"""
	falselyTaggedFields: [String!]!
"""
Any arrays with gaps in them. That is, if the fields `a[0]` and `a[2]` exist on an event, but not `a[1]`, we consider the array `a` to have a gap. This means LogScale will not include the `a[2]` field when doing array-based searches, since it considers `a[0]` to be the last element of the array.
Stability: Preview
"""
	arraysWithGaps: [ArrayWithGap!]!
"""
Returns violations of a schema, given that a schema has been provided in the request.
Stability: Preview
"""
	schemaViolations: [SchemaViolation!]!
}

"""
The output for parsing and verifying a test case
"""
type ParserTestCaseResult {
"""
The events produced by the parser. Contains zero to many events, as a parser can both drop events, or produce multiple output events from a single input.
Stability: Long-term
"""
	outputEvents: [OutputEvent!]!
"""
Any failures produced during testing. If the list is empty, the test case can be considered to have passed. If the list contains elements, they are key-value pairs to be treated as a map-construct, where the index of the output event is the key, and the failures are the value.
Stability: Long-term
"""
	outputFailures: [ParserTestCaseFailuresForOutput!]!
}

"""
An event for a parser to parse during testing.
"""
input ParserTestEventInput {
"""
An event for a parser to parse during testing.
"""
	rawString: String!
}

"""
A parser test result, where an unexpected error occurred during parsing.
"""
type ParserTestRunAborted {
"""
Stability: Long-term
"""
	errorMessage: String!
}

"""
A parser test result, where all test cases were parsed and assertions run. Each result is given in the same order as the test cases were put in, so they can be matched by index.
"""
type ParserTestRunCompleted {
"""
The results for running each test case.
Stability: Long-term
"""
	results: [ParserTestCaseResult!]!
}

"""
Input for testing a parser
"""
input ParserTestRunInput {
"""
Input for testing a parser
"""
	repositoryName: RepoOrViewName!
"""
Input for testing a parser
"""
	parserName: String!
"""
Input for testing a parser
"""
	script: String!
"""
Input for testing a parser
"""
	fieldsToTag: [String!]!
"""
Input for testing a parser
"""
	fieldsToBeRemovedBeforeParsing: [String!]!
"""
Input for testing a parser
"""
	testCases: [ParserTestCaseInput!]!
"""
Input for testing a parser
"""
	languageVersion: LanguageVersionInputType
"""
Input for testing a parser
"""
	schema: YAML
}

"""
The output of running all the parser test cases.
"""
union ParserTestRunOutput =ParserTestRunCompleted | ParserTestRunAborted

input PermissionAssignmentInputType {
	actor: ActorInput!
	resource: String!
	permissionSet: PermissionSetInput!
	queryPrefix: String
}

input PermissionSetInput {
	permissionSetType: PermissionSetType!
	values: [String!]!
}

"""
The different ways to specify a set of permissions.
"""
enum PermissionSetType {
"""
Permission set is expressed directly as a list of permissions
"""
	Direct
"""
Permission set is expressed as a list of role Ids
"""
	RoleId
"""
Permission set is expressed as a list of role names each matching one of values defined in the ReadonlyDefaultRole enum.
"""
	ReadonlyDefaultRole
}

enum Purposes {
	MSP
	ITOps
	IOT
	SecOps
	DevOps
}

"""
A dashboard parameter where suggestions are sourced from query results from LogScale.
"""
type QueryBasedDashboardParameter implements DashboardParameter{
"""
The LogScale query executed to find suggestions for the parameter value.
Stability: Long-term
"""
	queryString: String!
"""
The time window (relative to now) in which LogScale will search for suggestions. E.g. 24h or 30d.
Stability: Long-term
"""
	timeWindow: String!
"""
The field in the result set used as the 'value' of the suggestions.
Stability: Long-term
"""
	optionValueField: String!
"""
The field in the result set used as the 'label' (the text in the dropdown) of the suggestions.
Stability: Long-term
"""
	optionLabelField: String!
"""
If true, the parameters search time window will automatically change to match the dashboard's global time when active.
Stability: Long-term
"""
	useDashboardTimeIfSet: Boolean!
"""
Regex patterns used to block parameter input.
Stability: Long-term
"""
	invalidInputPatterns: [String!]
"""
Message when parameter input is blocked.
Stability: Long-term
"""
	invalidInputMessage: String
"""
The ID of the parameter.
Stability: Long-term
"""
	id: String!
"""
The label or 'name' displayed next to the input for the variable to make it more human-readable.
Stability: Long-term
"""
	label: String!
"""
The value assigned to the parameter on dashboard load, if no other value is specified.
Stability: Long-term
"""
	defaultValueV2: String
"""
A number that determines the order in which parameters are displayed on a dashboard. If null, the parameter is ordered after other parameters in alphanumerical order.
Stability: Long-term
"""
	order: Int
"""
A number that determines the width of a parameter.
Stability: Long-term
"""
	width: Int
}

"""
A widget with a visualization of a query result.
"""
type QueryBasedWidget implements Widget{
"""
Stability: Long-term
"""
	queryString: String!
"""
Stability: Long-term
"""
	start: String!
"""
Stability: Long-term
"""
	end: String!
"""
Stability: Long-term
"""
	isLive: Boolean!
"""
Stability: Long-term
"""
	widgetType: String!
"""
An optional JSON value containing styling and other settings for the widget. This is solely used by the UI.
Stability: Long-term
"""
	options: JSON
"""
Stability: Long-term
"""
	interactions: [QueryBasedWidgetInteraction!]!
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	title: String!
"""
Stability: Long-term
"""
	description: String
"""
Stability: Long-term
"""
	x: Int!
"""
Stability: Long-term
"""
	y: Int!
"""
Stability: Long-term
"""
	width: Int!
"""
Stability: Long-term
"""
	height: Int!
}

"""
The type of query ownership
"""
enum QueryOwnershipType {
"""
Queries run on behalf of user
"""
	User
"""
Queries run on behalf of the organization
"""
	Organization
}

"""
The target type to select
"""
enum QueryOwnership_SelectionTargetType {
"""
A single trigger or shared dashboard
"""
	PersistentQuery
"""
All triggers and shared dashboard connected to this view
"""
	View
"""
All triggers and shared dashboards within the organization
"""
	Organization
}

"""
Default Query Quota Settings for users which have not had specific settings assigned
"""
type QueryQuotaDefaultSettings {
"""
List of the rules that apply
Stability: Short-term
"""
	settings: [QueryQuotaIntervalSetting!]!
}

input QueryQuotaDefaultSettingsInput {
	settings: [QueryQuotaIntervalSettingInput!]!
}

input QueryQuotaIntervalSettingInput {
	interval: QueryQuotaInterval!
	measurementKind: QueryQuotaMeasurementKind!
	value: Long
	valueKind: QueryQuotaIntervalSettingKind!
}

input QueryQuotaUserSettingsInput {
	username: String!
	settings: [QueryQuotaIntervalSettingInput!]!
}

input RedactEventsInputType {
	repositoryName: String!
	start: DateTime!
	end: DateTime!
	query: String!
	userMessage: String
}

type RefreshClusterManagementStatsMutation {
"""
Stability: Preview
"""
	reasonsNodeCannotBeSafelyUnregistered: ReasonsNodeCannotBeSafelyUnregistered!
}

"""
A remote cluster connection.
"""
type RemoteClusterConnection implements ClusterConnection{
"""
Public URL of the remote cluster to connect with
Stability: Short-term
"""
	publicUrl: String!
"""
Id of the connection
Stability: Short-term
"""
	id: String!
"""
Cluster identity of the connection
Stability: Short-term
"""
	clusterId: String!
"""
Cluster connection tags
Stability: Short-term
"""
	tags: [ClusterConnectionTag!]!
"""
Cluster connection query prefix
Stability: Short-term
"""
	queryPrefix: String!
}

"""
Data for removing a label from an alert
"""
input RemoveAlertLabel {
"""
Data for removing a label from an alert
"""
	viewName: String!
"""
Data for removing a label from an alert
"""
	id: String!
"""
Data for removing a label from an alert
"""
	label: String!
}

"""
Input object for field removeFieldAliasMapping
"""
input RemoveAliasMappingInput {
"""
Input object for field removeFieldAliasMapping
"""
	schemaId: String!
"""
Input object for field removeFieldAliasMapping
"""
	aliasMappingId: String!
}

input RemoveCrossOrgViewConnectionModel {
	repoName: String!
	organizationId: String!
}

input RemoveCrossOrgViewConnectionsInput {
	name: String!
	connectionsToRemove: [RemoveCrossOrgViewConnectionModel!]!
}

"""
Data for removing a blocklist entry
"""
input RemoveFromBlocklistInput {
"""
Data for removing a blocklist entry
"""
	id: String!
}

type RemoveGroupMutation {
"""
Stability: Long-term
"""
	group: Group!
}

"""
Data for removing a label
"""
input RemoveLabelScheduledSearch {
"""
Data for removing a label
"""
	viewName: String!
"""
Data for removing a label
"""
	id: String!
"""
Data for removing a label
"""
	label: String!
}

input RemoveLimitInput {
	limitName: String!
}

input RemoveOrganizationRoleFromGroupInput {
	groupId: String!
	roleId: String!
}

input RemoveParserInput {
	id: String!
	repositoryName: String!
}

type RemoveParserMutation {
"""
Stability: Long-term
"""
	parser: Parser!
}

"""
Data to remove a repository cache policy
"""
input RemoveRepoCachePolicyInput {
"""
Data to remove a repository cache policy
"""
	repositoryName: String!
}

input RemoveRoleFromGroupInput {
	viewId: String!
	groupId: String!
	roleId: String!
}

input RemoveSecondarySubdomainInput {
	subdomain: String!
}

"""
Data for removing a star from an alert
"""
input RemoveStarFromAlert {
"""
Data for removing a star from an alert
"""
	viewName: String!
"""
Data for removing a star from an alert
"""
	id: String!
}

input RemoveStarFromQueryInput {
	savedQueryId: String!
	searchDomainName: String!
}

"""
Data for removing a star
"""
input RemoveStarScheduledSearch {
"""
Data for removing a star
"""
	viewName: String!
"""
Data for removing a star
"""
	id: String!
}

input RemoveStarToFieldInput {
	fieldName: String!
	searchDomainName: String!
}

type RemoveStarToFieldMutation {
"""
Stability: Long-term
"""
	starredFields: [String!]!
}

input RemoveSystemRoleFromGroupInput {
	groupId: String!
	roleId: String!
}

input RemoveUserByIdInput {
	id: String!
}

type RemoveUserByIdMutation {
"""
Stability: Long-term
"""
	user: User!
}

input RemoveUserInput {
	username: String!
}

type RemoveUserMutation {
"""
Stability: Long-term
"""
	user: User!
}

input RemoveUsersFromGroupInput {
	users: [String!]!
	groupId: String!
}

type RemoveUsersFromGroupMutation {
"""
Stability: Long-term
"""
	group: Group!
}

input RenameSearchDomainByIdInput {
	id: String!
	newName: String!
	renameMessage: String
}

input RepoFilterInput {
	name: String!
	filter: String!
}

"""
Data for a reported warning or error.
"""
input ReportErrorInput {
"""
Data for a reported warning or error.
"""
	errorType: String!
"""
Data for a reported warning or error.
"""
	errorMessage: String!
}

"""
Data for resetting quota
"""
input ResetQuotaInput {
"""
Data for resetting quota
"""
	newQuota: Long
"""
Data for resetting quota
"""
	newRate: Long
}

input RestoreDeletedSearchDomainInput {
	id: String!
	fallbackLimitId: String
}

input ResubmitMarketoLeadData {
	utmParams: UtmParams
	zip: String
}

input RevokeSessionInput {
	id: String!
	revocationType: SessionRevocation__Type!
}

input RotateTokenInputData {
	id: String!
}

input RunInconsistencyCheckInput {
	dryRun: Boolean!
}

"""
This authentication type implements the SAML 2.0 Web Browser SSO Profile.
"""
type SAMLAuthentication implements AuthenticationMethod{
"""
Stability: Long-term
"""
	name: String!
}

type SamlIdentityProviderAuth implements AuthenticationMethodAuth{
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	authType: String!
}

type SavedQueryIsStarred {
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	isStarred: Boolean!
}

type SavedQueryStarredUpdate {
"""
Stability: Long-term
"""
	savedQuery: SavedQueryIsStarred!
}

"""
Data for reporting a failed report generation attempt.
"""
input ScheduledReportResultFailedInput {
"""
Data for reporting a failed report generation attempt.
"""
	reportErrors: [ReportErrorInput!]!
}

"""
Data for reporting a successful report generation attempt.
"""
input ScheduledReportResultSucceededInput {
"""
Data for reporting a successful report generation attempt.
"""
	filename: String!
}

input SchemaFieldInput {
	name: String!
	description: String
}

"""
Violations detected against the provided schema
"""
type SchemaViolation {
"""
The name of the field on which the violation was detected
Stability: Preview
"""
	fieldName: String!
"""
Error message for the violation
Stability: Preview
"""
	errorMessage: String!
}

input SearchLinkInteractionInput {
	name: String!
	titleTemplate: String
	repoOrViewName: RepoOrViewName
	queryString: String!
	isLive: Boolean!
	arguments: [ArgumentInput!]!
	openInNewTab: Boolean!
	useWidgetTimeWindow: Boolean!
	fieldInteractionConditions: [FieldInteractionConditionInput!]
}

input SectionInput {
	id: String!
	title: String
	description: String
	collapsed: Boolean!
	timeSelector: TimeIntervalInput
	widgetIds: [String!]!
	order: Int!
}

input SeriesConfigInput {
	name: String!
	title: String
	color: String
}

input ServiceLevelIndicatorLogArg {
	frontendVersion: String!
	content: JSON!
}

input SessionInput {
	maxInactivityPeriod: Long!
	forceReauthenticationAfter: Long!
}

enum SessionRevocation__Type {
	Organization
	User
	Session
}

input SetDefaultSavedQueryInput {
	savedQueryId: String
	viewName: String!
}

"""
Data to set a global default cache policy
"""
input SetGlobalDefaultCachePolicyInput {
"""
Data to set a global default cache policy
"""
	policy: CachePolicyInput!
}

input SetLimitDisplayNameInput {
	limitName: String!
	displayName: String
}

"""
Data for setting offset for datasources on partition type.
"""
input SetOffsetForDatasourcesOnPartitionInput {
"""
Data for setting offset for datasources on partition type.
"""
	offset: Long!
"""
Data for setting offset for datasources on partition type.
"""
	partition: Int!
}

"""
Data to set a organization default cache policy
"""
input SetOrgDefaultCachePolicyInput {
"""
Data to set a organization default cache policy
"""
	policy: CachePolicyInput!
}

input SetPrimarySubdomainInput {
	subdomain: String!
}

"""
Data to set a repo cache policy
"""
input SetRepoCachePolicyInput {
"""
Data to set a repo cache policy
"""
	repositoryName: String!
"""
Data to set a repo cache policy
"""
	policy: CachePolicyInput!
}

"""
Data for updating search limit on a search domain.
"""
input SetSearchLimitForSearchDomain {
"""
Data for updating search limit on a search domain.
"""
	id: String!
"""
Data for updating search limit on a search domain.
"""
	searchLimitMs: Long!
"""
Data for updating search limit on a search domain.
"""
	excludedRepoIds: [String!]!
}

input SetSubdomainSettingsInput {
	primarySubdomain: String!
	secondarySubdomains: [String!]
	enforceSubdomains: Boolean!
}

"""
Data for updating shared dashboards security policies
"""
input SharedDashboardsSecurityPoliciesInput {
"""
Data for updating shared dashboards security policies
"""
	sharedDashboardsEnabled: Boolean!
"""
Data for updating shared dashboards security policies
"""
	enforceIpFilterId: String
}

"""
A Slack action
"""
type SlackAction implements Action{
"""
Slack webhook url to send the request to.
Stability: Long-term
"""
	url: String!
"""
Fields to include within the Slack message. Can be templated with values from the result.
Stability: Long-term
"""
	fields: [SlackFieldEntry!]!
"""
Defines whether the action should use the configured proxy to make web requests.
Stability: Long-term
"""
	useProxy: Boolean!
"""
The name of the action.
Stability: Long-term
"""
	name: String!
"""
The display name of the action.
Stability: Long-term
"""
	displayName: String!
"""
The id of the action.
Stability: Long-term
"""
	id: String!
"""
A template that can be used to recreate the action.
Stability: Long-term
"""
	yamlTemplate: YAML!
"""
Stability: Long-term
"""
	packageId: VersionedPackageSpecifier
"""
The package, if any, which the action is part of.
Stability: Long-term
"""
	package: PackageInstallation
"""
False if this type of action is disabled because of a security policy, true otherwise
Stability: Long-term
"""
	isAllowedToRun: Boolean!
"""
True if this action is used by triggers, where the query is run by the organization. If true, then the OrganizationOwnedQueries permission is required to edit the action.
Stability: Long-term
"""
	requiresOrganizationOwnedQueriesPermissionToEdit: Boolean!
"""
Allowed asset actions
Stability: Preview
"""
	allowedActions: [AssetAction!]!
"""
The resource identifier for this action.
Stability: Short-term
"""
	resource: String!
}

"""
Field entry in a Slack message
"""
type SlackFieldEntry {
"""
Key of a Slack field.
Stability: Long-term
"""
	fieldName: String!
"""
Value of a Slack field.
Stability: Long-term
"""
	value: String!
}

"""
Slack message field entry.
"""
input SlackFieldEntryInput {
"""
Slack message field entry.
"""
	fieldName: String!
"""
Slack message field entry.
"""
	value: String!
}

"""
A slack post-message action.
"""
type SlackPostMessageAction implements Action{
"""
Api token to authenticate with Slack.
Stability: Long-term
"""
	apiToken: String!
"""
List of Slack channels to message.
Stability: Long-term
"""
	channels: [String!]!
"""
Fields to include within the Slack message. Can be templated with values from the result.
Stability: Long-term
"""
	fields: [SlackFieldEntry!]!
"""
Defines whether the action should use the configured proxy to make web requests.
Stability: Long-term
"""
	useProxy: Boolean!
"""
The name of the action.
Stability: Long-term
"""
	name: String!
"""
The display name of the action.
Stability: Long-term
"""
	displayName: String!
"""
The id of the action.
Stability: Long-term
"""
	id: String!
"""
A template that can be used to recreate the action.
Stability: Long-term
"""
	yamlTemplate: YAML!
"""
Stability: Long-term
"""
	packageId: VersionedPackageSpecifier
"""
The package, if any, which the action is part of.
Stability: Long-term
"""
	package: PackageInstallation
"""
False if this type of action is disabled because of a security policy, true otherwise
Stability: Long-term
"""
	isAllowedToRun: Boolean!
"""
True if this action is used by triggers, where the query is run by the organization. If true, then the OrganizationOwnedQueries permission is required to edit the action.
Stability: Long-term
"""
	requiresOrganizationOwnedQueriesPermissionToEdit: Boolean!
"""
Allowed asset actions
Stability: Preview
"""
	allowedActions: [AssetAction!]!
"""
The resource identifier for this action.
Stability: Short-term
"""
	resource: String!
}

input SocialLoginSettingsInput {
	socialProviderProfile: SocialProviderProfile!
	filter: SocialLoginField!
	allowList: [String!]!
}

type Stability {
"""
Stability: Long-term
"""
	level: StabilityLevel!
}

"""
How stable a field or enum value is.
"""
enum StabilityLevel {
"""
This part of the API is still under development and can change without warning.
"""
	Preview
"""
This part of the API is short-term stable which means that breaking changes will be announced 12 weeks in advance, except in extraordinary situations like security issues.
"""
	ShortTerm
"""
This part of the API is long-term stable which means that breaking changes will be announced 1 year in advance, except in extraordinary situations like security issues.
"""
	LongTerm
}

input StopQueriesInput {
	clusterWide: Boolean
}

"""
System permissions token. The token allows the caller to work with system-level permissions.
"""
type SystemPermissionsToken implements Token{
"""
The set of permissions on the token
Stability: Long-term
"""
	permissions: [String!]!
"""
The id of the token.
Stability: Long-term
"""
	id: String!
"""
The name of the token.
Stability: Long-term
"""
	name: String!
"""
The time at which the token expires.
Stability: Long-term
"""
	expireAt: Long
"""
The ip filter on the token.
Stability: Long-term
"""
	ipFilter: String
"""
The ip filter on the token.
Stability: Long-term
"""
	ipFilterV2: IPFilter
"""
The date the token was created.
Stability: Long-term
"""
	createdAt: Long!
}

"""
The grouping rule for a given tag.
"""
input TagGroupingRuleInput {
"""
The grouping rule for a given tag.
"""
	tagName: String!
"""
The grouping rule for a given tag.
"""
	groupCount: Int!
}

input TagsInput {
	name: String!
	value: String!
}

enum Targets {
	All
	Group
	Root
	OrgRoot
}

"""
Data for testing an ingest feed that uses AWS S3 and SQS
"""
input TestAwsS3SqsIngestFeed {
"""
Data for testing an ingest feed that uses AWS S3 and SQS
"""
	repositoryName: RepoOrViewName!
"""
Data for testing an ingest feed that uses AWS S3 and SQS
"""
	authentication: IngestFeedAwsAuthenticationInput!
"""
Data for testing an ingest feed that uses AWS S3 and SQS
"""
	sqsUrl: String!
"""
Data for testing an ingest feed that uses AWS S3 and SQS
"""
	region: String!
}

"""
Data for testing an email action
"""
input TestEmailAction {
"""
Data for testing an email action
"""
	viewName: String!
"""
Data for testing an email action
"""
	name: String!
"""
Data for testing an email action
"""
	recipients: [String!]!
"""
Data for testing an email action
"""
	subjectTemplate: String
"""
Data for testing an email action
"""
	bodyTemplate: String
"""
Data for testing an email action
"""
	useProxy: Boolean!
"""
Data for testing an email action
"""
	attachCsv: Boolean
"""
Data for testing an email action
"""
	triggerName: String!
"""
Data for testing an email action
"""
	eventData: String!
}

"""
Collection of errors, which occurred during test.
"""
type TestFdrErrorResult {
"""
List of test errors.
Stability: Long-term
"""
	errors: [error!]!
}

"""
Data for testing an FDR feed.
"""
input TestFdrFeed {
"""
Data for testing an FDR feed.
"""
	repositoryName: String!
"""
Data for testing an FDR feed.
"""
	feedId: String
"""
Data for testing an FDR feed.
"""
	clientId: String
"""
Data for testing an FDR feed.
"""
	clientSecret: String
"""
Data for testing an FDR feed.
"""
	sqsUrl: String
"""
Data for testing an FDR feed.
"""
	s3Identifier: String
}

"""
An error, which occurred when making a request towards an AWS resource.
"""
type TestFdrRequestError {
"""
Name of the AWS resource, which the request was made towards.
Stability: Long-term
"""
	resourceName: String!
"""
Message specifying the request error.
Stability: Long-term
"""
	message: String!
}

"""
Result of testing an FDR feed.
"""
union TestFdrResult =TestFdrErrorResult | TestFdrSuccessResult

"""
Test was a success.
"""
type TestFdrSuccessResult {
"""
This field is always 'true'
Stability: Long-term
"""
	result: Boolean!
}

"""
A validation error related to a particular input field.
"""
type TestFdrValidationError {
"""
Name of the field, which the error relates to.
Stability: Long-term
"""
	fieldName: String!
"""
Message specifying the validation error.
Stability: Long-term
"""
	message: String!
}

"""
Data for testing a Humio repo action
"""
input TestHumioRepoAction {
"""
Data for testing a Humio repo action
"""
	viewName: String!
"""
Data for testing a Humio repo action
"""
	name: String!
"""
Data for testing a Humio repo action
"""
	ingestToken: String!
"""
Data for testing a Humio repo action
"""
	triggerName: String!
"""
Data for testing a Humio repo action
"""
	eventData: String!
}

"""
Data for testing a Kafka event forwarder
"""
input TestKafkaEventForwarder {
"""
Data for testing a Kafka event forwarder
"""
	name: String!
"""
Data for testing a Kafka event forwarder
"""
	description: String!
"""
Data for testing a Kafka event forwarder
"""
	properties: String!
"""
Data for testing a Kafka event forwarder
"""
	topic: String!
"""
Data for testing a Kafka event forwarder
"""
	enabled: Boolean
}

"""
Data for testing an OpsGenie action
"""
input TestOpsGenieAction {
"""
Data for testing an OpsGenie action
"""
	viewName: String!
"""
Data for testing an OpsGenie action
"""
	name: String!
"""
Data for testing an OpsGenie action
"""
	apiUrl: String!
"""
Data for testing an OpsGenie action
"""
	genieKey: String!
"""
Data for testing an OpsGenie action
"""
	useProxy: Boolean!
"""
Data for testing an OpsGenie action
"""
	triggerName: String!
"""
Data for testing an OpsGenie action
"""
	eventData: String!
}

"""
Data for testing a PagerDuty action.
"""
input TestPagerDutyAction {
"""
Data for testing a PagerDuty action.
"""
	viewName: String!
"""
Data for testing a PagerDuty action.
"""
	name: String!
"""
Data for testing a PagerDuty action.
"""
	severity: String!
"""
Data for testing a PagerDuty action.
"""
	routingKey: String!
"""
Data for testing a PagerDuty action.
"""
	useProxy: Boolean!
"""
Data for testing a PagerDuty action.
"""
	triggerName: String!
"""
Data for testing a PagerDuty action.
"""
	eventData: String!
}

"""
An error occurred while running the parser and no events were parsed
"""
type TestParserErrorResult {
"""
An error message
"""
	errorMessage: String!
}

"""
Input for testing a parser
"""
input TestParserInputV2 {
"""
Input for testing a parser
"""
	repositoryName: String!
"""
Input for testing a parser
"""
	parserId: String!
"""
Input for testing a parser
"""
	parserName: String!
"""
Input for testing a parser
"""
	parserScript: String!
"""
Input for testing a parser
"""
	testData: [String!]!
}

"""
The result of running the parser on all the test events
"""
union TestParserResultV2 =TestParserSuccessResultV2 | TestParserErrorResult

"""
The parser produced results for each test event
"""
type TestParserSuccessResultV2 {
"""
The results of parsing the test events
"""
	results: [ParseEventResult!]!
}

"""
Data for testing a post message Slack action.
"""
input TestPostMessageSlackAction {
"""
Data for testing a post message Slack action.
"""
	viewName: String!
"""
Data for testing a post message Slack action.
"""
	name: String!
"""
Data for testing a post message Slack action.
"""
	apiToken: String!
"""
Data for testing a post message Slack action.
"""
	channels: [String!]!
"""
Data for testing a post message Slack action.
"""
	fields: [SlackFieldEntryInput!]!
"""
Data for testing a post message Slack action.
"""
	useProxy: Boolean!
"""
Data for testing a post message Slack action.
"""
	triggerName: String!
"""
Data for testing a post message Slack action.
"""
	eventData: String!
}

"""
The result of the test
"""
type TestResult {
"""
True if the test was a success, false otherwise
Stability: Long-term
"""
	success: Boolean!
"""
A message explaining the test result
Stability: Long-term
"""
	message: String!
}

"""
Data for testing a Slack action.
"""
input TestSlackAction {
"""
Data for testing a Slack action.
"""
	viewName: String!
"""
Data for testing a Slack action.
"""
	name: String!
"""
Data for testing a Slack action.
"""
	url: String!
"""
Data for testing a Slack action.
"""
	fields: [SlackFieldEntryInput!]!
"""
Data for testing a Slack action.
"""
	useProxy: Boolean!
"""
Data for testing a Slack action.
"""
	triggerName: String!
"""
Data for testing a Slack action.
"""
	eventData: String!
}

"""
Data for testing an upload file action.
"""
input TestUploadFileAction {
"""
Data for testing an upload file action.
"""
	viewName: String!
"""
Data for testing an upload file action.
"""
	name: String!
"""
Data for testing an upload file action.
"""
	fileName: String!
"""
Data for testing an upload file action.
"""
	triggerName: String!
"""
Data for testing an upload file action.
"""
	eventData: String!
}

"""
Data for testing a VictorOps action.
"""
input TestVictorOpsAction {
"""
Data for testing a VictorOps action.
"""
	viewName: String!
"""
Data for testing a VictorOps action.
"""
	name: String!
"""
Data for testing a VictorOps action.
"""
	messageType: String!
"""
Data for testing a VictorOps action.
"""
	notifyUrl: String!
"""
Data for testing a VictorOps action.
"""
	useProxy: Boolean!
"""
Data for testing a VictorOps action.
"""
	triggerName: String!
"""
Data for testing a VictorOps action.
"""
	eventData: String!
}

"""
Data for testing a webhook action.
"""
input TestWebhookAction {
"""
Data for testing a webhook action.
"""
	viewName: String!
"""
Data for testing a webhook action.
"""
	name: String!
"""
Data for testing a webhook action.
"""
	url: String!
"""
Data for testing a webhook action.
"""
	method: String!
"""
Data for testing a webhook action.
"""
	headers: [HttpHeaderEntryInput!]!
"""
Data for testing a webhook action.
"""
	bodyTemplate: String!
"""
Data for testing a webhook action.
"""
	ignoreSSL: Boolean!
"""
Data for testing a webhook action.
"""
	useProxy: Boolean!
"""
Data for testing a webhook action.
"""
	triggerName: String!
"""
Data for testing a webhook action.
"""
	eventData: String!
}

input TimeIntervalInput {
	start: String!
	end: String!
}

input TokenInput {
	token: String!
}

"""
Data for updating token security policies
"""
input TokenSecurityPoliciesInput {
"""
Data for updating token security policies
"""
	personalUserTokensEnabled: Boolean!
"""
Data for updating token security policies
"""
	personalUserTokensEnforceExpirationAfterMs: Long
"""
Data for updating token security policies
"""
	personalUserTokensEnforceIpFilterId: String
"""
Data for updating token security policies
"""
	viewPermissionTokensEnabled: Boolean!
"""
Data for updating token security policies
"""
	viewPermissionTokensEnforceExpirationAfterMs: Long
"""
Data for updating token security policies
"""
	viewPermissionTokensEnforceIpFilterId: String
"""
Data for updating token security policies
"""
	viewPermissionTokensAllowPermissionUpdates: Boolean!
"""
Data for updating token security policies
"""
	organizationPermissionTokensEnabled: Boolean!
"""
Data for updating token security policies
"""
	organizationPermissionTokensEnforceExpirationAfterMs: Long
"""
Data for updating token security policies
"""
	organizationPermissionTokensEnforceIpFilterId: String
"""
Data for updating token security policies
"""
	organizationPermissionTokensAllowPermissionUpdates: Boolean!
"""
Data for updating token security policies
"""
	systemPermissionTokensEnabled: Boolean
"""
Data for updating token security policies
"""
	systemPermissionTokensEnforceExpirationAfterMs: Long
"""
Data for updating token security policies
"""
	systemPermissionTokensEnforceIpFilterId: String
"""
Data for updating token security policies
"""
	systemPermissionTokensAllowPermissionUpdates: Boolean
}

"""
Represents information about an on-going trial of LogScale.
"""
type TrialLicense implements License{
"""
The time at which the trial ends.
Stability: Long-term
"""
	expiresAt: DateTime!
"""
The time at which the trial started.
Stability: Long-term
"""
	issuedAt: DateTime!
}

"""
Data for trigger polling an ingest feed
"""
input TriggerPollIngestFeed {
"""
Data for trigger polling an ingest feed
"""
	repositoryName: RepoOrViewName!
"""
Data for trigger polling an ingest feed
"""
	id: String!
}

type UnassignIngestTokenMutation {
"""
Stability: Long-term
"""
	repository: Repository!
}

type UnassignOrganizationManagementRoleFromGroup {
"""
Stability: Preview
"""
	group: Group!
}

input UnassignOrganizationManagementRoleFromGroupInput {
	groupId: String!
	roleId: String!
	organizationIds: [String!]!
}

type UnassignOrganizationRoleFromGroup {
"""
Stability: Long-term
"""
	group: Group!
}

type UnassignRoleFromGroup {
"""
Stability: Long-term
"""
	group: Group!
}

type UnassignSystemRoleFromGroup {
"""
Stability: Long-term
"""
	group: Group!
}

type UnblockIngestMutation {
"""
Stability: Long-term
"""
	repository: Repository!
}

"""
A widget that represents an unknown widget type.
"""
type UnknownWidget implements Widget{
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	title: String!
"""
Stability: Long-term
"""
	description: String
"""
Stability: Long-term
"""
	x: Int!
"""
Stability: Long-term
"""
	y: Int!
"""
Stability: Long-term
"""
	width: Int!
"""
Stability: Long-term
"""
	height: Int!
}

type Unlimited implements contractual{
"""

Stability: Long-term
"""
	includeUsage: Boolean!
}

type UnregisterNodeMutation {
"""
Stability: Long-term
"""
	cluster: Cluster!
}

input UnsetDynamicConfigInputObject {
	config: DynamicConfig!
}

"""
Data for updating an aggregate alert.
"""
input UpdateAggregateAlert {
"""
Data for updating an aggregate alert.
"""
	viewName: RepoOrViewName!
"""
Data for updating an aggregate alert.
"""
	id: String!
"""
Data for updating an aggregate alert.
"""
	name: String!
"""
Data for updating an aggregate alert.
"""
	description: String
"""
Data for updating an aggregate alert.
"""
	queryString: String!
"""
Data for updating an aggregate alert.
"""
	actionIdsOrNames: [String!]!
"""
Data for updating an aggregate alert.
"""
	labels: [String!]!
"""
Data for updating an aggregate alert.
"""
	enabled: Boolean!
"""
Data for updating an aggregate alert.
"""
	throttleTimeSeconds: Long!
"""
Data for updating an aggregate alert.
"""
	throttleField: String
"""
Data for updating an aggregate alert.
"""
	searchIntervalSeconds: Long!
"""
Data for updating an aggregate alert.
"""
	queryTimestampType: QueryTimestampType!
"""
Data for updating an aggregate alert.
"""
	triggerMode: TriggerMode!
"""
Data for updating an aggregate alert.
"""
	runAsUserId: String
"""
Data for updating an aggregate alert.
"""
	queryOwnershipType: QueryOwnershipType!
}

"""
Data for updating an alert
"""
input UpdateAlert {
"""
Data for updating an alert
"""
	viewName: String!
"""
Data for updating an alert
"""
	id: String!
"""
Data for updating an alert
"""
	name: String!
"""
Data for updating an alert
"""
	description: String
"""
Data for updating an alert
"""
	queryString: String!
"""
Data for updating an alert
"""
	queryStart: String!
"""
Data for updating an alert
"""
	throttleTimeMillis: Long!
"""
Data for updating an alert
"""
	throttleField: String
"""
Data for updating an alert
"""
	runAsUserId: String
"""
Data for updating an alert
"""
	enabled: Boolean!
"""
Data for updating an alert
"""
	actions: [String!]!
"""
Data for updating an alert
"""
	labels: [String!]!
"""
Data for updating an alert
"""
	queryOwnershipType: QueryOwnershipType
}

"""
Data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
"""
input UpdateAwsS3SqsIngestFeed {
"""
Data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
"""
	repositoryName: RepoOrViewName!
"""
Data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
"""
	id: String!
"""
Data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
"""
	name: String
"""
Data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
"""
	description: UpdateIngestFeedDescription
"""
Data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
"""
	parser: String
"""
Data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
"""
	authentication: IngestFeedAwsAuthenticationInput
"""
Data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
"""
	sqsUrl: String
"""
Data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
"""
	region: String
"""
Data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
"""
	enabled: Boolean
"""
Data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
"""
	preprocessing: IngestFeedPreprocessingInput
"""
Data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
"""
	compression: IngestFeedCompression
}

input UpdateCrossOrganizationViewConnectionFiltersInput {
	name: String!
	connectionsToUpdate: [CrossOrganizationViewConnectionInputModel!]!
}

input UpdateCustomLinkInteractionInput {
	path: String!
	interactionId: String!
	customLinkInteractionInput: CustomLinkInteractionInput!
}

input UpdateDashboardInput {
	id: String!
	name: String
	labels: [String!]
	widgets: [WidgetInput!]
	sections: [SectionInput!]
	links: [LinkInput!]
	defaultFilterId: String
	filters: [FilterInput!]
	parameters: [ParameterInput!]
	description: String
	timeJumpSizeInMs: Int
	updateFrequency: DashboardUpdateFrequencyInput
	defaultSharedTimeStart: String
	defaultSharedTimeEnd: String
	defaultSharedTimeEnabled: Boolean
	series: [SeriesConfigInput!]
}

input UpdateDashboardLinkInteractionInput {
	path: String!
	interactionId: String!
	dashboardLinkInteractionInput: DashboardLinkInteractionInput!
}

type UpdateDashboardMutation {
"""
Stability: Long-term
"""
	dashboard: Dashboard!
}

input UpdateDefaultQueryPrefixInput {
	queryPrefix: String
	groupId: String!
}

type UpdateDefaultQueryPrefixMutation {
"""
Stability: Long-term
"""
	group: Group!
}

input UpdateDefaultRoleInput {
	roleId: String
	groupId: String!
}

"""
Type for updating the description. If the description should be cleared, supply an `UpdateDescription` object with no value or a `null` value. If the description should be changed, supply an `UpdateDescription`object with the desired value.
"""
input UpdateDescription {
"""
Type for updating the description. If the description should be cleared, supply an `UpdateDescription` object with no value or a `null` value. If the description should be changed, supply an `UpdateDescription`object with the desired value.
"""
	value: String
}

type UpdateDescriptionMutation {
"""
Stability: Long-term
"""
	description: String!
}

"""
Data for updating an email action.
"""
input UpdateEmailAction {
"""
Data for updating an email action.
"""
	viewName: String!
"""
Data for updating an email action.
"""
	id: String!
"""
Data for updating an email action.
"""
	name: String!
"""
Data for updating an email action.
"""
	recipients: [String!]!
"""
Data for updating an email action.
"""
	subjectTemplate: String
"""
Data for updating an email action.
"""
	bodyTemplate: String
"""
Data for updating an email action.
"""
	useProxy: Boolean!
"""
Data for updating an email action.
"""
	attachCsv: Boolean
}

"""
Data for updating an event forwarding rule
"""
input UpdateEventForwardingRule {
"""
Data for updating an event forwarding rule
"""
	repoName: String!
"""
Data for updating an event forwarding rule
"""
	id: String!
"""
Data for updating an event forwarding rule
"""
	queryString: String!
"""
Data for updating an event forwarding rule
"""
	eventForwarderId: String!
"""
Data for updating an event forwarding rule
"""
	languageVersion: LanguageVersionEnum
}

"""
Data for updating an FDR feed. Note that the fields, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
"""
input UpdateFdrFeed {
"""
Data for updating an FDR feed. Note that the fields, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
"""
	repositoryName: String!
"""
Data for updating an FDR feed. Note that the fields, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
"""
	id: String!
"""
Data for updating an FDR feed. Note that the fields, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
"""
	name: String
"""
Data for updating an FDR feed. Note that the fields, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
"""
	description: UpdateDescription
"""
Data for updating an FDR feed. Note that the fields, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
"""
	parser: String
"""
Data for updating an FDR feed. Note that the fields, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
"""
	clientId: String
"""
Data for updating an FDR feed. Note that the fields, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
"""
	clientSecret: String
"""
Data for updating an FDR feed. Note that the fields, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
"""
	sqsUrl: String
"""
Data for updating an FDR feed. Note that the fields, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
"""
	s3Identifier: String
"""
Data for updating an FDR feed. Note that the fields, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
"""
	enabled: Boolean
}

"""
Data for updating the administrator control of an FDR feed.
"""
input UpdateFdrFeedControl {
"""
Data for updating the administrator control of an FDR feed.
"""
	repositoryName: String!
"""
Data for updating the administrator control of an FDR feed.
"""
	id: String!
"""
Data for updating the administrator control of an FDR feed.
"""
	maxNodes: UpdateLong
"""
Data for updating the administrator control of an FDR feed.
"""
	fileDownloadParallelism: UpdateLong
}

"""
Input object for field updateFieldAliasMapping
"""
input UpdateFieldAliasMappingInput {
"""
Input object for field updateFieldAliasMapping
"""
	schemaId: String!
"""
Input object for field updateFieldAliasMapping
"""
	aliasMappingId: String!
"""
Input object for field updateFieldAliasMapping
"""
	name: String
"""
Input object for field updateFieldAliasMapping
"""
	tags: [TagsInput!]
"""
Input object for field updateFieldAliasMapping
"""
	aliases: [AliasInfoInput!]
"""
Input object for field updateFieldAliasMapping
"""
	originalFieldsToKeep: [String!]
}

"""
Input object for field updateFieldAliasSchema
"""
input UpdateFieldAliasSchemaInput {
"""
Input object for field updateFieldAliasSchema
"""
	id: String!
"""
Input object for field updateFieldAliasSchema
"""
	name: String
"""
Input object for field updateFieldAliasSchema
"""
	fields: [SchemaFieldInput!]
"""
Input object for field updateFieldAliasSchema
"""
	aliasMappings: [AliasMappingInput!]
}

"""
Data for updating a filter alert
"""
input UpdateFilterAlert {
"""
Data for updating a filter alert
"""
	viewName: RepoOrViewName!
"""
Data for updating a filter alert
"""
	id: String!
"""
Data for updating a filter alert
"""
	name: String!
"""
Data for updating a filter alert
"""
	description: String
"""
Data for updating a filter alert
"""
	queryString: String!
"""
Data for updating a filter alert
"""
	actionIdsOrNames: [String!]!
"""
Data for updating a filter alert
"""
	labels: [String!]!
"""
Data for updating a filter alert
"""
	enabled: Boolean!
"""
Data for updating a filter alert
"""
	throttleTimeSeconds: Long
"""
Data for updating a filter alert
"""
	throttleField: String
"""
Data for updating a filter alert
"""
	runAsUserId: String
"""
Data for updating a filter alert
"""
	queryOwnershipType: QueryOwnershipType!
}

input UpdateGroupInput {
	groupId: String!
	displayName: String
	lookupName: String
}

type UpdateGroupMutation {
"""
Stability: Long-term
"""
	group: Group!
}

"""
Data for updating a LogScale repository action.
"""
input UpdateHumioRepoAction {
"""
Data for updating a LogScale repository action.
"""
	viewName: String!
"""
Data for updating a LogScale repository action.
"""
	id: String!
"""
Data for updating a LogScale repository action.
"""
	name: String!
"""
Data for updating a LogScale repository action.
"""
	ingestToken: String!
}

"""
Type for updating the description. If the description should be cleared, supply an `UpdateDescription` object with no value or a `null` value. If the description should be changed, supply an `UpdateDescription`object with the desired value.
"""
input UpdateIngestFeedDescription {
"""
Type for updating the description. If the description should be cleared, supply an `UpdateDescription` object with no value or a `null` value. If the description should be changed, supply an `UpdateDescription`object with the desired value.
"""
	description: String
}

"""
Input data to update an ingest listener
"""
input UpdateIngestListenerV3Input {
"""
Input data to update an ingest listener
"""
	id: String!
"""
Input data to update an ingest listener
"""
	repositoryName: String!
"""
Input data to update an ingest listener
"""
	port: Int!
"""
Input data to update an ingest listener
"""
	protocol: IngestListenerProtocol!
"""
Input data to update an ingest listener
"""
	vHost: Int
"""
Input data to update an ingest listener
"""
	name: String!
"""
Input data to update an ingest listener
"""
	bindInterface: String!
"""
Input data to update an ingest listener
"""
	parser: String!
"""
Input data to update an ingest listener
"""
	charset: String!
}

"""
Data for updating a Kafka event forwarder
"""
input UpdateKafkaEventForwarder {
"""
Data for updating a Kafka event forwarder
"""
	id: String!
"""
Data for updating a Kafka event forwarder
"""
	name: String!
"""
Data for updating a Kafka event forwarder
"""
	description: String!
"""
Data for updating a Kafka event forwarder
"""
	properties: String!
"""
Data for updating a Kafka event forwarder
"""
	topic: String!
"""
Data for updating a Kafka event forwarder
"""
	enabled: Boolean
}

input UpdateLimitInput {
	limitName: String!
	allowLogin: Boolean
	dailyIngest: Long
	retention: Int
	allowSelfService: Boolean
	expiration: Long
	contractVersion: Organizations__ContractVersion
	userLimit: Int
}

input UpdateLimitInputV2 {
	id: String!
	name: String
	allowLogin: Boolean
	dailyIngest: Long
	dailyIngestContractualType: Organizations__ContractualType
	storageContractualType: Organizations__ContractualType
	dailyScanContractualType: Organizations__ContractualType
	measurementType: Organizations__MeasurementType
	dailyScan: Long
	retention: Int
	maxRetention: Int
	allowSelfService: Boolean
	expiration: Long
	userLimit: Int
	dateType: String
	trial: Boolean
	allowFlightControl: Boolean
	repositoryLimit: Int
}

"""
Data for updating a local cluster connection
"""
input UpdateLocalClusterConnectionInput {
"""
Data for updating a local cluster connection
"""
	multiClusterViewName: String!
"""
Data for updating a local cluster connection
"""
	connectionId: String!
"""
Data for updating a local cluster connection
"""
	targetViewName: String
"""
Data for updating a local cluster connection
"""
	tags: [ClusterConnectionInputTag!]
"""
Data for updating a local cluster connection
"""
	queryPrefix: String
}

"""
If the value should be cleared, supply an `UpdateLong` object the with no value or a `null` value. If the setting should be changed, supply a `UpdateLong` object with the desired value.
"""
input UpdateLong {
"""
If the value should be cleared, supply an `UpdateLong` object the with no value or a `null` value. If the setting should be changed, supply a `UpdateLong` object with the desired value.
"""
	value: Int
}

input UpdateOidcConfigurationInput {
	id: String!
	name: String!
	clientID: String!
	clientSecret: String!
	issuer: String!
	tokenEndpointAuthMethod: String!
	authorizationEndpoint: String!
	tokenEndpoint: String
	userInfoEndpoint: String
	registrationEndpoint: String
	groupsClaim: String
	JWKSEndpoint: String
	domains: [String!]!
	scopes: [String!]!
	userClaim: String!
	enableDebug: Boolean!
	defaultIdp: Boolean
	humioOwned: Boolean
	lazyCreateUsers: Boolean
	federatedIdp: String
	scopeClaim: String
}

"""
Data for updating an OpsGenie action
"""
input UpdateOpsGenieAction {
"""
Data for updating an OpsGenie action
"""
	viewName: String!
"""
Data for updating an OpsGenie action
"""
	id: String!
"""
Data for updating an OpsGenie action
"""
	name: String!
"""
Data for updating an OpsGenie action
"""
	apiUrl: String!
"""
Data for updating an OpsGenie action
"""
	genieKey: String!
"""
Data for updating an OpsGenie action
"""
	useProxy: Boolean!
}

input UpdateOrganizationPermissionsTokenPermissionsInput {
	id: String!
	permissions: [OrganizationPermission!]!
}

input UpdatePackageFromRegistryInput {
	viewName: RepoOrViewName!
	packageId: VersionedPackageSpecifier!
	conflictResolutions: [ConflictResolutionConfiguration!]!
	queryOwnershipType: QueryOwnershipType
}

"""
Data for updating a PagerDuty action
"""
input UpdatePagerDutyAction {
"""
Data for updating a PagerDuty action
"""
	viewName: String!
"""
Data for updating a PagerDuty action
"""
	id: String!
"""
Data for updating a PagerDuty action
"""
	name: String!
"""
Data for updating a PagerDuty action
"""
	severity: String!
"""
Data for updating a PagerDuty action
"""
	routingKey: String!
"""
Data for updating a PagerDuty action
"""
	useProxy: Boolean!
}

input UpdateParametersInteractionInput {
	name: String!
	titleTemplate: String
	arguments: [ArgumentInput!]!
	useWidgetTimeWindow: Boolean!
	fieldInteractionConditions: [FieldInteractionConditionInput!]
}

"""
Input for updating a parser.
"""
input UpdateParserInput {
"""
Input for updating a parser.
"""
	repositoryName: String
"""
Input for updating a parser.
"""
	id: String
"""
Input for updating a parser.
"""
	name: String
"""
Input for updating a parser.
"""
	testData: [String!]
"""
Input for updating a parser.
"""
	sourceCode: String
"""
Input for updating a parser.
"""
	tagFields: [String!]
"""
Input for updating a parser.
"""
	fieldsToBeRemovedBeforeParsing: [String!]
"""
Input for updating a parser.
"""
	languageVersion: LanguageVersionEnum
}

"""
Input for updating a parser.
"""
input UpdateParserInputV2 {
"""
Input for updating a parser.
"""
	repositoryName: RepoOrViewName!
"""
Input for updating a parser.
"""
	id: String!
"""
Input for updating a parser.
"""
	name: String
"""
Input for updating a parser.
"""
	script: UpdateParserScriptInput
"""
Input for updating a parser.
"""
	testCases: [ParserTestCaseInput!]
"""
Input for updating a parser.
"""
	fieldsToTag: [String!]
"""
Input for updating a parser.
"""
	fieldsToBeRemovedBeforeParsing: [String!]
}

type UpdateParserMutation {
"""
Stability: Long-term
"""
	parser: Parser!
}

"""
Input for updating the parser script.
"""
input UpdateParserScriptInput {
"""
Input for updating the parser script.
"""
	script: String!
"""
Input for updating the parser script.
"""
	languageVersion: LanguageVersionInputType
}

"""
Data for updating a post-message Slack action
"""
input UpdatePostMessageSlackAction {
"""
Data for updating a post-message Slack action
"""
	viewName: String!
"""
Data for updating a post-message Slack action
"""
	id: String!
"""
Data for updating a post-message Slack action
"""
	name: String!
"""
Data for updating a post-message Slack action
"""
	apiToken: String!
"""
Data for updating a post-message Slack action
"""
	channels: [String!]!
"""
Data for updating a post-message Slack action
"""
	fields: [SlackFieldEntryInput!]!
"""
Data for updating a post-message Slack action
"""
	useProxy: Boolean!
}

input UpdateQueryPrefixInput {
	queryPrefix: String!
	viewId: String!
	groupId: String!
}

type UpdateQueryPrefixMutation {
"""
Stability: Long-term
"""
	group: Group!
}

"""
Data for updating a remote cluster connection
"""
input UpdateRemoteClusterConnectionInput {
"""
Data for updating a remote cluster connection
"""
	multiClusterViewName: String!
"""
Data for updating a remote cluster connection
"""
	connectionId: String!
"""
Data for updating a remote cluster connection
"""
	publicUrl: String
"""
Data for updating a remote cluster connection
"""
	token: String
"""
Data for updating a remote cluster connection
"""
	tags: [ClusterConnectionInputTag!]
"""
Data for updating a remote cluster connection
"""
	queryPrefix: String
}

input UpdateRepoDataTypeInputObject {
	dataspaceId: String!
	repoDataType: RepositoryDataType!
}

input UpdateRepoLimitIdInputObject {
	dataspaceId: String!
	limitId: String!
}

type UpdateRetentionMutation {
"""
Stability: Long-term
"""
	repository: SearchDomain!
}

input UpdateRoleInput {
	roleId: String!
	displayName: String!
	viewPermissions: [Permission!]!
	description: String
	color: String
	systemPermissions: [SystemPermission!]
	organizationPermissions: [OrganizationPermission!]
	objectAction: ObjectAction
	organizationManagementPermissions: [OrganizationManagementPermission!]
}

type UpdateRoleMutation {
"""
Stability: Long-term
"""
	role: Role!
}

input UpdateSavedQueryInput {
	id: String!
	name: String
	viewName: String!
	queryString: String
	start: String
	end: String
	isLive: Boolean
	widgetType: String
	options: String
	dashboardLinkInteractions: [DashboardLinkInteractionInput!]
	customLinkInteractions: [CustomLinkInteractionInput!]
	searchLinkInteractions: [SearchLinkInteractionInput!]
	updateParametersInteractions: [UpdateParametersInteractionInput!]
}

type UpdateSavedQueryPayload {
"""
Stability: Long-term
"""
	savedQuery: SavedQuery!
}

"""
Data for updating a scheduled report.
"""
input UpdateScheduledReportInput {
"""
Data for updating a scheduled report.
"""
	viewName: String!
"""
Data for updating a scheduled report.
"""
	id: String!
"""
Data for updating a scheduled report.
"""
	name: String
"""
Data for updating a scheduled report.
"""
	password: String
"""
Data for updating a scheduled report.
"""
	enabled: Boolean
"""
Data for updating a scheduled report.
"""
	description: String
"""
Data for updating a scheduled report.
"""
	dashboardId: String
"""
Data for updating a scheduled report.
"""
	timeIntervalFrom: String
"""
Data for updating a scheduled report.
"""
	schedule: UpdateScheduledReportScheduleInput
"""
Data for updating a scheduled report.
"""
	labels: [String!]
"""
Data for updating a scheduled report.
"""
	parameters: [UpdateScheduledReportParameterValueInput!]
"""
Data for updating a scheduled report.
"""
	recipients: [String!]
"""
Data for updating a scheduled report.
"""
	layout: UpdateScheduledReportLayoutInput
}

"""
Layout of the scheduled report.
"""
input UpdateScheduledReportLayoutInput {
"""
Layout of the scheduled report.
"""
	paperSize: String
"""
Layout of the scheduled report.
"""
	paperOrientation: String
"""
Layout of the scheduled report.
"""
	paperLayout: String
"""
Layout of the scheduled report.
"""
	showDescription: Boolean
"""
Layout of the scheduled report.
"""
	showTitleFrontpage: Boolean
"""
Layout of the scheduled report.
"""
	showParameters: Boolean
"""
Layout of the scheduled report.
"""
	maxNumberOfRows: Int
"""
Layout of the scheduled report.
"""
	showTitleHeader: Boolean
"""
Layout of the scheduled report.
"""
	showExportDate: Boolean
"""
Layout of the scheduled report.
"""
	footerShowPageNumbers: Boolean
}

"""
List of parameter value configurations.
"""
input UpdateScheduledReportParameterValueInput {
"""
List of parameter value configurations.
"""
	id: String!
"""
List of parameter value configurations.
"""
	value: String!
}

"""
The schedule to run the report by.
"""
input UpdateScheduledReportScheduleInput {
"""
The schedule to run the report by.
"""
	cronExpression: String!
"""
The schedule to run the report by.
"""
	timeZone: String!
"""
The schedule to run the report by.
"""
	startDate: Long!
"""
The schedule to run the report by.
"""
	endDate: Long
}

"""
Data for updating a scheduled search
"""
input UpdateScheduledSearch {
"""
Data for updating a scheduled search
"""
	viewName: String!
"""
Data for updating a scheduled search
"""
	id: String!
"""
Data for updating a scheduled search
"""
	name: String!
"""
Data for updating a scheduled search
"""
	description: String
"""
Data for updating a scheduled search
"""
	queryString: String!
"""
Data for updating a scheduled search
"""
	queryStart: String!
"""
Data for updating a scheduled search
"""
	queryEnd: String!
"""
Data for updating a scheduled search
"""
	schedule: String!
"""
Data for updating a scheduled search
"""
	timeZone: String!
"""
Data for updating a scheduled search
"""
	backfillLimit: Int!
"""
Data for updating a scheduled search
"""
	enabled: Boolean!
"""
Data for updating a scheduled search
"""
	actions: [String!]!
"""
Data for updating a scheduled search
"""
	labels: [String!]!
"""
Data for updating a scheduled search
"""
	runAsUserId: String
"""
Data for updating a scheduled search
"""
	queryOwnershipType: QueryOwnershipType
}

"""
Data for updating a scheduled search
"""
input UpdateScheduledSearchV2 {
"""
Data for updating a scheduled search
"""
	viewName: String!
"""
Data for updating a scheduled search
"""
	id: String!
"""
Data for updating a scheduled search
"""
	name: String!
"""
Data for updating a scheduled search
"""
	description: String
"""
Data for updating a scheduled search
"""
	queryString: String!
"""
Data for updating a scheduled search
"""
	schedule: String!
"""
Data for updating a scheduled search
"""
	timeZone: String!
"""
Data for updating a scheduled search
"""
	searchIntervalSeconds: Long!
"""
Data for updating a scheduled search
"""
	searchIntervalOffsetSeconds: Long
"""
Data for updating a scheduled search
"""
	maxWaitTimeSeconds: Long
"""
Data for updating a scheduled search
"""
	queryTimestampType: QueryTimestampType!
"""
Data for updating a scheduled search
"""
	backfillLimit: Int
"""
Data for updating a scheduled search
"""
	enabled: Boolean!
"""
Data for updating a scheduled search
"""
	actionIdsOrNames: [String!]!
"""
Data for updating a scheduled search
"""
	labels: [String!]!
"""
Data for updating a scheduled search
"""
	runAsUserId: String
"""
Data for updating a scheduled search
"""
	queryOwnershipType: QueryOwnershipType!
}

input UpdateSearchLinkInteractionInput {
	path: String!
	interactionId: String!
	searchLinkInteractionInput: SearchLinkInteractionInput!
}

"""
Data for updating a Slack action
"""
input UpdateSlackAction {
"""
Data for updating a Slack action
"""
	viewName: String!
"""
Data for updating a Slack action
"""
	id: String!
"""
Data for updating a Slack action
"""
	name: String!
"""
Data for updating a Slack action
"""
	url: String!
"""
Data for updating a Slack action
"""
	fields: [SlackFieldEntryInput!]!
"""
Data for updating a Slack action
"""
	useProxy: Boolean!
}

input UpdateSubscriptionInputObject {
	subscription: Organizations__Subscription!
	trialDays: Int
}

input UpdateSystemPermissionsTokenPermissionsInput {
	id: String!
	permissions: [SystemPermission!]!
}

"""
Data for updating an upload file action.
"""
input UpdateUploadFileAction {
"""
Data for updating an upload file action.
"""
	viewName: String!
"""
Data for updating an upload file action.
"""
	id: String!
"""
Data for updating an upload file action.
"""
	name: String!
"""
Data for updating an upload file action.
"""
	fileName: String!
}

input UpdateUserByIdInput {
	userId: String!
	company: String
	isRoot: Boolean
	username: String
	firstName: String
	lastName: String
	fullName: String
	picture: String
	email: String
	countryCode: String
	stateCode: String
}

type UpdateUserByIdMutation {
"""
Stability: Long-term
"""
	user: User!
}

type UpdateUserMutation {
"""
Stability: Long-term
"""
	user: User!
}

"""
Data for updating a VictorOps action.
"""
input UpdateVictorOpsAction {
"""
Data for updating a VictorOps action.
"""
	viewName: String!
"""
Data for updating a VictorOps action.
"""
	id: String!
"""
Data for updating a VictorOps action.
"""
	name: String!
"""
Data for updating a VictorOps action.
"""
	messageType: String!
"""
Data for updating a VictorOps action.
"""
	notifyUrl: String!
"""
Data for updating a VictorOps action.
"""
	useProxy: Boolean!
}

input UpdateViewPermissionsTokenPermissionsInput {
	id: String!
	permissions: [Permission!]!
}

"""
Data for updating a webhook action
"""
input UpdateWebhookAction {
"""
Data for updating a webhook action
"""
	viewName: String!
"""
Data for updating a webhook action
"""
	id: String!
"""
Data for updating a webhook action
"""
	name: String!
"""
Data for updating a webhook action
"""
	url: String!
"""
Data for updating a webhook action
"""
	method: String!
"""
Data for updating a webhook action
"""
	headers: [HttpHeaderEntryInput!]!
"""
Data for updating a webhook action
"""
	bodyTemplate: String!
"""
Data for updating a webhook action
"""
	ignoreSSL: Boolean!
"""
Data for updating a webhook action
"""
	useProxy: Boolean!
}

input UpgradeAccountData {
	lastName: String!
	company: String!
	email: String!
	firstName: String
	purpose: Purposes
	phoneNumber: String
	countryCode: String
	stateCode: String
	comment: String
}

"""
An upload file action.
"""
type UploadFileAction implements Action{
"""
File name for the uploaded file.
Stability: Long-term
"""
	fileName: String!
"""
The name of the action.
Stability: Long-term
"""
	name: String!
"""
The display name of the action.
Stability: Long-term
"""
	displayName: String!
"""
The id of the action.
Stability: Long-term
"""
	id: String!
"""
A template that can be used to recreate the action.
Stability: Long-term
"""
	yamlTemplate: YAML!
"""
Stability: Long-term
"""
	packageId: VersionedPackageSpecifier
"""
The package, if any, which the action is part of.
Stability: Long-term
"""
	package: PackageInstallation
"""
False if this type of action is disabled because of a security policy, true otherwise
Stability: Long-term
"""
	isAllowedToRun: Boolean!
"""
True if this action is used by triggers, where the query is run by the organization. If true, then the OrganizationOwnedQueries permission is required to edit the action.
Stability: Long-term
"""
	requiresOrganizationOwnedQueriesPermissionToEdit: Boolean!
"""
Allowed asset actions
Stability: Preview
"""
	allowedActions: [AssetAction!]!
"""
The resource identifier for this action.
Stability: Short-term
"""
	resource: String!
}

"""
Asset actions given by direct user assignments for a specific asset
"""
type UserAssetActionsBySource implements AssetActionsBySource{
"""
Stability: Preview
"""
	user: User!
"""
Asset actions granted because user is root.
Stability: Preview
"""
	assetActionsGrantedBecauseUserIsRoot: [AssetAction!]!
"""
List of roles assigned to the user or group and the asset actions they allow
Stability: Preview
"""
	assetActionsByRoles: [AssetActionsByRole!]!
"""
Asset permissions assigned directly to the user or group
Stability: Preview
"""
	directlyAssigned: DirectlyAssignedAssetPermissions!
}

input UserDefaultSettingsInput {
	defaultTimeZone: String
}

"""
Query running with user based ownership
"""
type UserOwnership implements QueryOwnership{
"""
User owning and running the query. If null, then the user doesn't exist anymore.
Stability: Long-term
"""
	user: User
"""
Id of user owning and running the query
Stability: Long-term
"""
	id: String!
}

input UserRoleAssignment {
	userId: String!
	roleId: String!
}

input UserRoleAssignmentInput {
	userId: String!
	roleIds: [String!]!
}

"""
Username and password authentication. The underlying authentication mechanism is configured by the server, e.g. LDAP.
"""
type UsernameAndPasswordAuthentication implements AuthenticationMethod{
"""
Stability: Long-term
"""
	name: String!
}

input UtmParams {
	campaign: String!
	content: String!
	medium: String!
	source: String!
	term: String!
}

"""
A VictorOps action.
"""
type VictorOpsAction implements Action{
"""
Type of the VictorOps message to make.
Stability: Long-term
"""
	messageType: String!
"""
VictorOps webhook url to send the request to.
Stability: Long-term
"""
	notifyUrl: String!
"""
Defines whether the action should use the configured proxy to make web requests.
Stability: Long-term
"""
	useProxy: Boolean!
"""
The name of the action.
Stability: Long-term
"""
	name: String!
"""
The display name of the action.
Stability: Long-term
"""
	displayName: String!
"""
The id of the action.
Stability: Long-term
"""
	id: String!
"""
A template that can be used to recreate the action.
Stability: Long-term
"""
	yamlTemplate: YAML!
"""
Stability: Long-term
"""
	packageId: VersionedPackageSpecifier
"""
The package, if any, which the action is part of.
Stability: Long-term
"""
	package: PackageInstallation
"""
False if this type of action is disabled because of a security policy, true otherwise
Stability: Long-term
"""
	isAllowedToRun: Boolean!
"""
True if this action is used by triggers, where the query is run by the organization. If true, then the OrganizationOwnedQueries permission is required to edit the action.
Stability: Long-term
"""
	requiresOrganizationOwnedQueriesPermissionToEdit: Boolean!
"""
Allowed asset actions
Stability: Preview
"""
	allowedActions: [AssetAction!]!
"""
The resource identifier for this action.
Stability: Short-term
"""
	resource: String!
}

"""
The repositories this view will read from.
"""
input ViewConnectionInput {
"""
The repositories this view will read from.
"""
	repositoryName: String!
"""
The repositories this view will read from.
"""
	filter: String!
"""
The repositories this view will read from.
"""
	languageVersion: LanguageVersionEnum
}

"""
View permissions token. The token allows the caller to work with the same set of view-level permissions across multiple views.
"""
type ViewPermissionsToken implements Token{
"""
The set of permissions on the token
Stability: Long-term
"""
	permissions: [String!]!
"""
The set of views on the token. Will only list the views the user has access to.
Stability: Long-term
"""
	views: [SearchDomain!]!
"""
The permissions assigned to the token for individual view assets.
Stability: Preview
"""
	searchAssetPermissions(
"""
Filter results based on this string
"""
		searchFilter: String
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
"""
The sort by options for assets. Asset name is default
"""
		sortBy: SortBy
"""
List of asset types
"""
		assetTypes: [AssetPermissionsAssetType!]
"""
List of search domain id's to search within. Null or empty list is interpreted as all search domains
"""
		searchDomainIds: [String!]
"""
Include Read, Update and/or Delete permission assignments. The filter will accept all assets if the argument Null or the empty list.
"""
		permissions: [AssetAction!]
	): AssetPermissionSearchResultSet!
"""
The id of the token.
Stability: Long-term
"""
	id: String!
"""
The name of the token.
Stability: Long-term
"""
	name: String!
"""
The time at which the token expires.
Stability: Long-term
"""
	expireAt: Long
"""
The ip filter on the token.
Stability: Long-term
"""
	ipFilter: String
"""
The ip filter on the token.
Stability: Long-term
"""
	ipFilterV2: IPFilter
"""
The date the token was created.
Stability: Long-term
"""
	createdAt: Long!
}

input ViewPermissionsTokenAssetPermissionAssignmentInput {
	assetResourceIdentifier: String!
	permissions: [AssetPermission!]!
}

"""
A webhook action
"""
type WebhookAction implements Action{
"""
Method to use for the request.
Stability: Long-term
"""
	method: String!
"""
Url to send the http(s) request to.
Stability: Long-term
"""
	url: String!
"""
Headers of the http(s) request.
Stability: Long-term
"""
	headers: [HttpHeaderEntry!]!
"""
Body of the http(s) request. Can be templated with values from the result.
Stability: Long-term
"""
	bodyTemplate: String!
"""
Flag indicating whether SSL should be ignored for the request.
Stability: Long-term
"""
	ignoreSSL: Boolean!
"""
Defines whether the action should use the configured proxy to make web requests.
Stability: Long-term
"""
	useProxy: Boolean!
"""
The name of the action.
Stability: Long-term
"""
	name: String!
"""
The display name of the action.
Stability: Long-term
"""
	displayName: String!
"""
The id of the action.
Stability: Long-term
"""
	id: String!
"""
A template that can be used to recreate the action.
Stability: Long-term
"""
	yamlTemplate: YAML!
"""
Stability: Long-term
"""
	packageId: VersionedPackageSpecifier
"""
The package, if any, which the action is part of.
Stability: Long-term
"""
	package: PackageInstallation
"""
False if this type of action is disabled because of a security policy, true otherwise
Stability: Long-term
"""
	isAllowedToRun: Boolean!
"""
True if this action is used by triggers, where the query is run by the organization. If true, then the OrganizationOwnedQueries permission is required to edit the action.
Stability: Long-term
"""
	requiresOrganizationOwnedQueriesPermissionToEdit: Boolean!
"""
Allowed asset actions
Stability: Preview
"""
	allowedActions: [AssetAction!]!
"""
The resource identifier for this action.
Stability: Short-term
"""
	resource: String!
}

input WidgetInput {
	id: String!
	title: String!
	description: String
	x: Int!
	y: Int!
	width: Int!
	height: Int!
	queryOptions: WidgetQueryPropertiesInput
	noteOptions: WidgetNotePropertiesInput
	linkOptions: WidgetLinkPropertiesInput
	parameterPanelOptions: WidgetParameterPanelPropertiesInput
}

input WidgetLinkPropertiesInput {
	labels: [String!]!
}

input WidgetNotePropertiesInput {
	text: String!
	backgroundColor: String
	textColor: String
}

input WidgetParameterPanelPropertiesInput {
	parameterIds: [String!]!
}

input WidgetQueryPropertiesInput {
	queryString: String!
	start: String!
	end: String!
	widgetType: String!
	options: String
	dashboardLinkInteractions: [DashboardLinkInteractionInput!]
	customLinkInteractions: [CustomLinkInteractionInput!]
	searchLinkInteractions: [SearchLinkInteractionInput!]
	updateParametersInteractions: [UpdateParametersInteractionInput!]
}

"""
The input required to delete an external function specification.
"""
input deleteExternalFunctionInput {
"""
The input required to delete an external function specification.
"""
	name: String!
}

"""
FDR test errors
"""
union error =TestFdrValidationError | TestFdrRequestError

type setAutomaticSearching {
"""
Stability: Long-term
"""
	automaticSearch: Boolean!
}

type updateDefaultRoleMutation {
"""
Stability: Long-term
"""
	group: Group!
}

"""
A user or pending user, depending on whether an invitation was sent
"""
union userOrPendingUser =User | PendingUser

type AccessTokenValidatorResultType {
"""
Stability: Long-term
"""
	sessionId: String
"""
Stability: Long-term
"""
	showTermsAndConditions: ShowTermsAndConditions
}

"""
A user account.
"""
type Account {
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	enabledFeaturesForAccount: [FeatureFlag!]!
"""
Stability: Long-term
"""
	username: String!
"""
Stability: Long-term
"""
	isRoot: Boolean!
"""
Stability: Long-term
"""
	isOrganizationRoot: Boolean!
"""
Stability: Long-term
"""
	fullName: String
"""
Stability: Long-term
"""
	firstName: String
"""
Stability: Long-term
"""
	lastName: String
"""
Stability: Long-term
"""
	phoneNumber: String
"""
Stability: Long-term
"""
	email: String
"""
Stability: Long-term
"""
	picture: String
"""
Stability: Long-term
"""
	settings: UserSettings!
"""
Stability: Long-term
"""
	createdAt: DateTime!
"""
Stability: Long-term
"""
	countryCode: String
"""
Stability: Long-term
"""
	stateCode: String
"""
Stability: Long-term
"""
	company: String
"""
Stability: Long-term
"""
	canCreateCloudTrialRepo: Boolean!
"""
Stability: Long-term
"""
	isCloudProAccount: Boolean!
"""
Stability: Long-term
"""
	canCreateRepo: Boolean!
"""
Stability: Long-term
"""
	externalPermissions: Boolean!
"""
Stability: Long-term
"""
	externalGroupSynchronization: Boolean!
"""
Stability: Long-term
"""
	currentOrganization: Organization!
"""
Stability: Long-term
"""
	announcement: Notification
"""
Stability: Preview
"""
	notificationsV2(
		typeFilter: [NotificationTypes!]
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
	): NotificationsResultSet!
"""
Stability: Long-term
"""
	token: PersonalUserToken
"""
Stability: Long-term
"""
	fieldConfigurations(
		viewName: String!
	): [FieldConfiguration!]!
}

"""
An action that can be invoked from a trigger.
"""
interface Action {
"""
An action that can be invoked from a trigger.
"""
	name: String!
"""
An action that can be invoked from a trigger.
"""
	displayName: String!
"""
An action that can be invoked from a trigger.
"""
	id: String!
"""
An action that can be invoked from a trigger.
"""
	yamlTemplate: YAML!
"""
An action that can be invoked from a trigger.
"""
	packageId: VersionedPackageSpecifier
"""
An action that can be invoked from a trigger.
"""
	package: PackageInstallation
"""
An action that can be invoked from a trigger.
"""
	isAllowedToRun: Boolean!
"""
An action that can be invoked from a trigger.
"""
	requiresOrganizationOwnedQueriesPermissionToEdit: Boolean!
"""
An action that can be invoked from a trigger.
"""
	allowedActions: [AssetAction!]!
"""
An action that can be invoked from a trigger.
"""
	resource: String!
}

"""
Security policies for actions in the organization
"""
type ActionSecurityPolicies {
"""
Indicates if email actions can be configured and triggered
Stability: Short-term
"""
	emailActionEnabled: Boolean!
"""
Allow list of glob patterns for acceptable email action recipients. Empty means no recipients allowed whereas null means all.
Stability: Short-term
"""
	emailActionRecipientAllowList: [String!]
"""
Indicates if repository actions can be configured and triggered
Stability: Short-term
"""
	repoActionEnabled: Boolean!
"""
Indicates if OpsGenie actions can be configured and triggered
Stability: Short-term
"""
	opsGenieActionEnabled: Boolean!
"""
Indicates if PagerDuty actions can be configured and triggered
Stability: Short-term
"""
	pagerDutyActionEnabled: Boolean!
"""
Indicates if single channel Slack actions can be configured and triggered
Stability: Short-term
"""
	slackSingleChannelActionEnabled: Boolean!
"""
Indicates if multi channel Slack actions can be configured and triggered
Stability: Short-term
"""
	slackMultiChannelActionEnabled: Boolean!
"""
Indicates if upload file actions can be configured and triggered
Stability: Short-term
"""
	uploadFileActionEnabled: Boolean!
"""
Indicates if VictorOps actions can be configured and triggered
Stability: Short-term
"""
	victorOpsActionEnabled: Boolean!
"""
Indicates if Webhook actions can be configured and triggered
Stability: Short-term
"""
	webhookActionEnabled: Boolean!
"""
Allow list of glob patterns for acceptable webhook URLs. Empty means no recipients allowed whereas null means all.
Stability: Short-term
"""
	webhookActionUrlAllowList: [String!]
}

type ActionTemplate {
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	displayName: String!
"""
Stability: Long-term
"""
	yamlTemplate: String!
"""
The type of action
Stability: Long-term
"""
	type: ActionType!
}

"""
The type of action this template is for
"""
enum ActionType {
	Email
	LogScaleRepository
	OpsGenie
	PagerDuty
	SlackMulti
	SlackSingle
	UploadFile
	VictorOps
	Webhook
}

type ActiveSchemaOnView {
"""
Stability: Long-term
"""
	viewName: RepoOrViewName!
"""
Stability: Long-term
"""
	schemaId: String!
"""
Stability: Long-term
"""
	is1to1Linked: Boolean!
}

"""
An aggregate alert.
"""
type AggregateAlert {
"""
Id of the aggregate alert.
Stability: Long-term
"""
	id: String!
"""
Name of the aggregate alert.
Stability: Long-term
"""
	name: String!
"""
Description of the aggregate alert.
Stability: Long-term
"""
	description: String
"""
LogScale query to execute.
Stability: Long-term
"""
	queryString: String!
"""
List of actions to fire on query result.
Stability: Long-term
"""
	actions: [Action!]!
"""
Labels attached to the aggregate alert.
Stability: Long-term
"""
	labels: [String!]!
"""
Flag indicating whether the aggregate alert is enabled.
Stability: Long-term
"""
	enabled: Boolean!
"""
Throttle time in seconds.
Stability: Long-term
"""
	throttleTimeSeconds: Long!
"""
A field to throttle on. Can only be set if throttleTimeSeconds is set.
Stability: Long-term
"""
	throttleField: String
"""
Search interval in seconds.
Stability: Long-term
"""
	searchIntervalSeconds: Long!
"""
Timestamp type to use for a query.
Stability: Long-term
"""
	queryTimestampType: QueryTimestampType!
"""
Trigger mode used for triggering the alert.
Stability: Long-term
"""
	triggerMode: TriggerMode!
"""
Unix timestamp for last execution of trigger.
Stability: Long-term
"""
	lastTriggered: Long
"""
Unix timestamp for last successful poll (including action invocation if applicable) of the aggregate alert query. If this is not quite recent, then the alert might be having problems.
Stability: Long-term
"""
	lastSuccessfulPoll: Long
"""
Last error encountered while running the aggregate alert.
Stability: Long-term
"""
	lastError: String
"""
Last warnings encountered while running the aggregate alert.
Stability: Long-term
"""
	lastWarnings: [String!]!
"""
YAML specification of the aggregate alert.
Stability: Long-term
"""
	yamlTemplate: YAML!
"""
The id of the package of the aggregate alert template.
Stability: Long-term
"""
	packageId: VersionedPackageSpecifier
"""
User or token used to modify the asset.
Stability: Preview
"""
	modifiedInfo: ModifiedInfo!
"""
The package that the aggregate alert was installed as part of.
Stability: Long-term
"""
	package: PackageInstallation
"""
Ownership of the query run by this alert
Stability: Long-term
"""
	queryOwnership: QueryOwnership!
"""
Allowed asset actions
Stability: Preview
"""
	allowedActions: [AssetAction!]!
"""
The resource identifier for this aggregate alert.
Stability: Short-term
"""
	resource: String!
}

type AggregateAlertTemplate {
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	displayName: String!
"""
Stability: Long-term
"""
	yamlTemplate: YAML!
"""
Stability: Long-term
"""
	labels: [String!]!
}

"""
An alert.
"""
type Alert {
"""
Id of the alert.
Stability: Long-term
"""
	id: String!
"""
Name of the alert.
Stability: Long-term
"""
	name: String!
	assetType: AssetType!
"""
Id of user which the alert is running as.
Stability: Long-term
"""
	runAsUser: User
"""
Name of the alert.
Stability: Long-term
"""
	displayName: String!
"""
Name of the alert.
Stability: Long-term
"""
	description: String
"""
LogScale query to execute.
Stability: Long-term
"""
	queryString: String!
"""
Start of the relative time interval for the query.
Stability: Long-term
"""
	queryStart: String!
"""
Throttle time in milliseconds.
Stability: Long-term
"""
	throttleTimeMillis: Long!
"""
Field to throttle on.
Stability: Long-term
"""
	throttleField: String
"""
Unix timestamp for when the alert was last triggered.
Stability: Long-term
"""
	timeOfLastTrigger: Long
"""
Flag indicating whether the alert is enabled.
Stability: Long-term
"""
	enabled: Boolean!
"""
List of ids for actions to fire on query result.
Stability: Long-term
"""
	actions: [String!]!
"""
List of ids for actions to fire on query result.
Stability: Long-term
"""
	actionsV2: [Action!]!
"""
Last error encountered while running the alert.
Stability: Long-term
"""
	lastError: String
"""
Last warnings encountered while running the alert.
Stability: Long-term
"""
	lastWarnings: [String!]!
"""
Labels attached to the alert.
Stability: Long-term
"""
	labels: [String!]!
"""
Flag indicating whether the calling user has 'starred' the alert.
"""
	isStarred: Boolean!
"""
A YAML formatted string that describes the alert.
Stability: Long-term
"""
	yamlTemplate: String!
"""
The id of the package that the alert was installed as part of.
Stability: Long-term
"""
	packageId: VersionedPackageSpecifier
"""
The package that the alert was installed as part of.
Stability: Long-term
"""
	package: PackageInstallation
"""
Ownership of the query run by this alert
Stability: Long-term
"""
	queryOwnership: QueryOwnership!
"""
Allowed asset actions
Stability: Preview
"""
	allowedActions: [AssetAction!]!
"""
The resource identifier for this alert.
Stability: Short-term
"""
	resource: String!
}

"""
All actions, labels and packages used in alerts.
"""
type AlertFieldValues {
"""
List of names of actions attached to alerts. Sorted by action names lexicographically.
Stability: Preview
"""
	actionNames: [String!]!
"""
List of labels attached to alerts. Sorted by label names lexicographically.
Stability: Preview
"""
	labels: [String!]!
"""
List of packages for installed alerts as unversioned qualified package specifiers `scope/packageName`. Sorted lexicographically.
Stability: Preview
"""
	unversionedPackageSpecifiers: [String!]!
}

"""
Arguments for alert field values query.
"""
input AlertFieldValuesInput {
"""
Arguments for alert field values query.
"""
	viewName: RepoOrViewName!
}

type AlertTemplate {
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	displayName: String!
"""
Stability: Long-term
"""
	yamlTemplate: String!
"""
Stability: Long-term
"""
	labels: [String!]!
}

"""
The different types of alerts known to the system.
"""
enum AlertType {
	LegacyAlert
	FilterAlert
	AggregateAlert
}

type AliasInfo {
"""
Stability: Long-term
"""
	source: String!
"""
Stability: Long-term
"""
	alias: String!
}

type AliasMapping {
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	tags: [TagInfo!]!
"""
Stability: Long-term
"""
	aliases: [AliasInfo!]!
"""
Stability: Long-term
"""
	originalFieldsToKeep: [String!]!
}

"""
Arguments for analyzeQuery
"""
input AnalyzeQueryArguments {
"""
Arguments for analyzeQuery
"""
	queryString: String!
"""
Arguments for analyzeQuery
"""
	version: LanguageVersionInputType!
"""
Arguments for analyzeQuery
"""
	isLive: Boolean
"""
Arguments for analyzeQuery
"""
	arguments: [QueryArgumentInputType!]
"""
Arguments for analyzeQuery
"""
	viewName: RepoOrViewName
"""
Arguments for analyzeQuery
"""
	strict: Boolean
"""
Arguments for analyzeQuery
"""
	rejectFunctions: [String!]
}

"""
Result of analyzing a query.
"""
type AnalyzeQueryInfo {
"""
Check if the given query contains any errors or warnings when used in a standard search context.
Stability: Short-term
"""
	validateQuery: QueryValidationInfo!
"""
Suggested type of alert to use for the given query.
Returns null if no suitable alert type could be suggested.
The given query is not guaranteed to be valid for the suggested alert type.

Stability: Short-term
"""
	suggestedAlertType: SuggestedAlertTypeInfo
}

"""
Configuration for archiving, e.e. bucket name and/or region.
"""
interface ArchivingConfiguration {
"""
Configuration for archiving, e.e. bucket name and/or region.
"""
	bucket: String!
"""
Configuration for archiving, e.e. bucket name and/or region.
"""
	startFrom: DateTime
"""
Configuration for archiving, e.e. bucket name and/or region.
"""
	disabled: Boolean
"""
Configuration for archiving, e.e. bucket name and/or region.
"""
	tagOrderInName: [String!]!
}

"""
The format to store archived segments.
"""
enum ArchivingFormat {
	RAW
	NDJSON
}

"""
Allowed asset action on asset
"""
enum AssetAction {
	Read
	Update
	Delete
	ReadMetadata
}

"""
A role and the asset actions it allows
"""
type AssetActionsByRole {
"""
Stability: Preview
"""
	role: Role
"""
Asset actions allowed by the role
Stability: Preview
"""
	assetActions: [AssetAction!]!
}

"""
Common interface for user and group permission assignments
"""
interface AssetActionsBySource {
"""
Common interface for user and group permission assignments
"""
	assetActionsByRoles: [AssetActionsByRole!]!
"""
Common interface for user and group permission assignments
"""
	directlyAssigned: DirectlyAssignedAssetPermissions!
}

"""
Asset permissions
"""
enum AssetPermission {
	UpdateAsset
	DeleteAsset
}

"""
An asset permission search result set
"""
type AssetPermissionSearchResultSet {
"""
The total number of matching results
Stability: Preview
"""
	totalResults: Int!
"""
The paginated result set
Stability: Preview
"""
	results: [SearchAssetPermissionsResultEntry!]!
}

"""
The different types of assets.
"""
enum AssetPermissionsAssetType {
	LegacyAlert
	FilterAlert
	AggregateAlert
	ScheduledSearch
	ScheduledReport
	Action
	Dashboard
	File
	SavedQuery
}

enum AssetType {
	Interaction
	ScheduledSearch
	Action
	File
	AggregateAlert
	FilterAlert
	Alert
	Parser
	SavedQuery
	Dashboard
}

"""
Represents information about how users authenticate with LogScale.
"""
interface AuthenticationMethod {
"""
Represents information about how users authenticate with LogScale.
"""
	name: String!
}

interface AuthenticationMethodAuth {
	authType: String!
}

"""
A regex pattern used to filter queries before they are executed.
"""
type BlockedQuery {
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	expiresAt: DateTime
"""
Stability: Long-term
"""
	expiresInMilliseconds: Int
"""
Stability: Long-term
"""
	pattern: String!
"""
Stability: Long-term
"""
	type: BlockedQueryMatcherType!
"""
Stability: Long-term
"""
	view: View
"""
The organization owning the pattern or view, if any.
Stability: Long-term
"""
	organization: Organization
"""
Stability: Long-term
"""
	limitedToOrganization: Boolean!
"""
True if the current actor is allowed the remove this pattern
Stability: Long-term
"""
	unblockAllowed: Boolean!
}

enum BlockedQueryMatcherType {
	EXACT
	REGEX
}

"""
Bucket storage configuration for the organization
"""
type BucketStorageConfig {
"""
The primary bucket storage of the organization
Stability: Long-term
"""
	targetBucketId1: String!
"""
The secondary bucket storage of the organization
Stability: Long-term
"""
	targetBucketId2: String
}

"""
A policy for choosing which segments to cache on local disk when overcommiting
local storage with bucket storage.

This can be used to protect certain repositories for local storage, such that
searching other repositories does not evict them.

A cache policy in LogScale divides segments into prioritized and non-prioritized
segments. When segments needs to be evicted from local storage, we always try
evicting non-prioritized segments before prioritized segments.

A cache policy can be set either on one of three levels (in order of precedence):
 - Repo
 - Org
 - Globally

 When determining the cache policy for a repo we first check if there is a cache
 policy set on the repo. If none is set on the repo, we check the the org. If none
 is set there either we check the global setting.

"""
type CachePolicy {
"""
Prioritize caching segments younger than this
Stability: Preview
"""
	prioritizeMillis: Long
}

enum Changes {
	Removed
	Added
	NoChange
}

"""
Data for checking a local cluster connection
"""
input CheckLocalClusterConnectionInput {
"""
Data for checking a local cluster connection
"""
	connectionId: String
"""
Data for checking a local cluster connection
"""
	targetViewName: String!
"""
Data for checking a local cluster connection
"""
	tags: [ClusterConnectionInputTag!]
"""
Data for checking a local cluster connection
"""
	queryPrefix: String
}

"""
Data for checking a remote cluster connection
"""
input CheckRemoteClusterConnectionInput {
"""
Data for checking a remote cluster connection
"""
	connectionId: String
"""
Data for checking a remote cluster connection
"""
	multiClusterViewName: String
"""
Data for checking a remote cluster connection
"""
	publicUrl: String!
"""
Data for checking a remote cluster connection
"""
	token: String
"""
Data for checking a remote cluster connection
"""
	tags: [ClusterConnectionInputTag!]
"""
Data for checking a remote cluster connection
"""
	queryPrefix: String
}

"""
An organization search result set
"""
type ChildOrganizationsResultSet {
"""
The total number of matching results
Stability: Preview
"""
	totalResults: Int!
"""
The paginated result set
Stability: Preview
"""
	results: [Organization!]!
}

"""
Identifies a client of the query.
"""
type Client {
"""
Stability: Long-term
"""
	externalId: String!
"""
Stability: Long-term
"""
	ip: String
"""
Stability: Long-term
"""
	user: String
}

"""
Information about the LogScale cluster.
"""
type Cluster {
"""
Stability: Long-term
"""
	nodes: [ClusterNode!]!
"""
Stability: Long-term
"""
	clusterManagementSettings: ClusterManagementSettings!
"""
Stability: Long-term
"""
	clusterInfoAgeSeconds: Float!
"""
Stability: Long-term
"""
	underReplicatedSegmentSize: Float!
"""
Stability: Long-term
"""
	overReplicatedSegmentSize: Float!
"""
Stability: Long-term
"""
	missingSegmentSize: Float!
"""
Stability: Long-term
"""
	properlyReplicatedSegmentSize: Float!
"""
Stability: Long-term
"""
	inBucketStorageSegmentSize: Float!
"""
Stability: Long-term
"""
	pendingBucketStorageSegmentSize: Float!
"""
Stability: Long-term
"""
	pendingBucketStorageRiskySegmentSize: Float!
"""
Stability: Long-term
"""
	targetUnderReplicatedSegmentSize: Float!
"""
Stability: Long-term
"""
	targetOverReplicatedSegmentSize: Float!
"""
Stability: Long-term
"""
	targetMissingSegmentSize: Float!
"""
Stability: Long-term
"""
	targetProperlyReplicatedSegmentSize: Float!
"""
Stability: Long-term
"""
	ingestPartitions: [IngestPartition!]!
"""
Stability: Short-term
"""
	storageReplicationFactor: Int
"""
Stability: Short-term
"""
	digestReplicationFactor: Int
"""
Stability: Short-term
"""
	stats: ClusterStats!
"""
The default cache policy of this cluster.
Stability: Preview
"""
	defaultCachePolicy: CachePolicy
}

"""
A cluster connection.
"""
interface ClusterConnection {
"""
A cluster connection.
"""
	id: String!
"""
A cluster connection.
"""
	clusterId: String!
"""
A cluster connection.
"""
	tags: [ClusterConnectionTag!]!
"""
A cluster connection.
"""
	queryPrefix: String!
}

input ClusterConnectionInputTag {
	key: String!
	value: String!
}

"""
The status of a cluster connection.
"""
interface ClusterConnectionStatus {
"""
The status of a cluster connection.
"""
	id: String
"""
The status of a cluster connection.
"""
	isValid: Boolean!
"""
The status of a cluster connection.
"""
	errorMessages: [ConnectionAspectErrorType!]!
}

"""
Tag for identifiying the cluster connection
"""
type ClusterConnectionTag {
"""
Cluster Connection tag key
Stability: Short-term
"""
	key: String!
"""
Value for the cluster connection tag
Stability: Short-term
"""
	value: String!
}

"""
Settings for the LogScale cluster.
"""
type ClusterManagementSettings {
"""
Replication factor for segments
Stability: Long-term
"""
	segmentReplicationFactor: Int!
"""
Replication factor for the digesters
Stability: Long-term
"""
	digestReplicationFactor: Int!
"""
Percentage of all hosts relevant to a particular cluster rebalance operation that need to be alive before we allow the system to automatically execute the operation. Cluster rebalance operations currently include reassigning digest work, and moving existing segments to balance disk usage. Value is between 0 and 100, both inclusive
Stability: Long-term
"""
	minHostAlivePercentageToEnableClusterRebalancing: Int!
"""
Whether or not desired digesters are allowed to be updated automatically
Stability: Short-term
"""
	allowUpdateDesiredDigesters: Boolean!
"""
true if the cluster should allow moving existing segments between nodes to achieve a better data distribution
Stability: Short-term
"""
	allowRebalanceExistingSegments: Boolean!
}

"""
A node in the a LogScale Cluster.
"""
type ClusterNode {
"""
Stability: Long-term
"""
	id: Int!
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	zone: String
"""
Stability: Long-term
"""
	uri: String!
"""
Stability: Long-term
"""
	uuid: String!
"""
Stability: Long-term
"""
	humioVersion: String!
"""
Stability: Short-term
"""
	supportedTasks: [NodeTaskEnum!]!
"""
Stability: Short-term
"""
	assignedTasks: [NodeTaskEnum!]
"""
Stability: Short-term
"""
	unassignedTasks: [NodeTaskEnum!]
"""
Stability: Short-term
"""
	consideredAliveUntil: DateTime
"""
Stability: Long-term
"""
	clusterInfoAgeSeconds: Float!
"""
The size in GB of data this node needs to receive.
Stability: Long-term
"""
	inboundSegmentSize: Float!
"""
The size in GB of data this node has that others need.
Stability: Short-term
"""
	outboundSegmentSize: Float!
"""
Stability: Long-term
"""
	canBeSafelyUnregistered: Boolean!
"""
Stability: Long-term
"""
	reasonsNodeCannotBeSafelyUnregistered: ReasonsNodeCannotBeSafelyUnregistered!
"""
The size in GB of data currently on this node.
Stability: Long-term
"""
	currentSize: Float!
"""
The size in GB of the data currently on this node that are in the primary storage location.
Stability: Long-term
"""
	primarySize: Float!
"""
The size in GB of the data currently on this node that are in the secondary storage location. Zero if no secondary is configured.
Stability: Long-term
"""
	secondarySize: Float!
"""
The total size in GB of the primary storage location on this node.
Stability: Long-term
"""
	totalSizeOfPrimary: Float!
"""
The total size in GB of the secondary storage location on this node. Zero if no secondary is configured.
Stability: Long-term
"""
	totalSizeOfSecondary: Float!
"""
The size in GB of the free space on this node of the primary storage location.
Stability: Long-term
"""
	freeOnPrimary: Float!
"""
The size in GB of the free space on this node of the secondary storage location. Zero if no secondary is configured.
Stability: Long-term
"""
	freeOnSecondary: Float!
"""
The size in GB of work-in-progress data files.
Stability: Long-term
"""
	wipSize: Float!
"""
The size in GB of data once the node has received the data allocated to it.
Stability: Long-term
"""
	targetSize: Float!
"""
The size in GB of data that only exists on this node - i.e. only one replica exists in the cluster.
Stability: Long-term
"""
	solitarySegmentSize: Float!
"""
A flag indicating whether the node is considered up or down by the cluster coordinated. This is based on the `lastHeartbeat` field.
Stability: Long-term
"""
	isAvailable: Boolean!
"""
The last time a heartbeat was received from the node.
Stability: Long-term
"""
	lastHeartbeat: DateTime!
"""
The time since a heartbeat was received from the node.
Stability: Long-term
"""
	timeSinceLastHeartbeat: Long!
"""
A flag indicating whether the node is marked for eviction. The Falcon LogScale cluster will start to move segments, digesters and queries away from any node marked for eviction
Stability: Long-term
"""
	isBeingEvicted: Boolean
"""
Contains data describing the status of eviction
Stability: Long-term
"""
	evictionStatus: EvictionStatus!
"""
True if the machine the node runs on has local segment storage
Stability: Long-term
"""
	hasStorageRole: Boolean!
"""
True if the machine the node runs on has the possibility to process kafka partitions
Stability: Long-term
"""
	hasDigestRole: Boolean!
"""
The time at which the host booted
Stability: Long-term
"""
	bootedAt: DateTime!
"""
The time since last boot
Stability: Long-term
"""
	timeSinceBooted: Long!
}

"""
Global stats for the cluster
"""
type ClusterStats {
"""
Stability: Long-term
"""
	compressedByteSize: Long!
"""
Stability: Long-term
"""
	uncompressedByteSize: Long!
"""
Stability: Long-term
"""
	compressedByteSizeOfMerged: Long!
"""
Stability: Long-term
"""
	uncompressedByteSizeOfMerged: Long!
}

"""
Arguments for concatenateQueries
"""
input ConcatenateQueriesArguments {
"""
Arguments for concatenateQueries
"""
	queryStrings: [String!]!
"""
Arguments for concatenateQueries
"""
	version: LanguageVersionInputType!
}

"""
A value denoting some aspect of a cluster connection
"""
enum ConnectionAspect {
	Tag
	QueryPrefix
	Other
	TargetView
	PublicUrl
	Token
}

"""
A key-value pair from a connection aspect to an error message pertaining to that aspect
"""
type ConnectionAspectErrorType {
"""
A connection aspect
Stability: Short-term
"""
	aspect: ConnectionAspect!
"""
An error message for the connection, tagged by the relevant aspect
Stability: Short-term
"""
	error: String!
}

"""
Represents the connection between a view and an underlying repository in another organization.
"""
type CrossOrgViewConnection {
"""
ID of the underlying repository
Stability: Short-term
"""
	id: String!
"""
Name of the underlying repository
Stability: Short-term
"""
	name: String!
"""
The filter applied to all results from the repository.
Stability: Short-term
"""
	filter: String!
"""
Stability: Short-term
"""
	languageVersion: LanguageVersion!
"""
ID of the organization containing the underlying repository
Stability: Short-term
"""
	orgId: String!
}

"""
The status the local database of CrowdStrike IOCs
"""
type CrowdStrikeIocStatus {
"""
Stability: Long-term
"""
	databaseTables: [IocTableInfo!]!
}

type CurrentStats {
"""
Stability: Long-term
"""
	ingest: Ingest!
"""
Stability: Long-term
"""
	storedData: StoredData!
"""
Stability: Long-term
"""
	scannedData: ScannedData!
"""
Stability: Long-term
"""
	users: UsersLimit!
}

"""
Query result for current usage
"""
union CurrentUsageQueryResult =QueryInProgress | CurrentStats

type CustomLinkInteraction {
"""
Stability: Long-term
"""
	urlTemplate: String!
"""
Stability: Long-term
"""
	openInNewTab: Boolean!
"""
Stability: Long-term
"""
	urlEncodeArgs: Boolean!
}

"""
Represents information about a dashboard.
"""
type Dashboard {
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	description: String
	assetType: AssetType!
"""
A YAML formatted string that describes the dashboard. It does not contain links or permissions, and is safe to share and use for making copies of a dashboard.
"""
	templateYaml: String!
"""
A YAML formatted string that describes the dashboard. It does not contain links or permissions, and is safe to share and use for making copies of a dashboard.
Stability: Long-term
"""
	yamlTemplate: YAML!
"""
Stability: Long-term
"""
	displayName: String!
"""
Stability: Long-term
"""
	labels: [String!]!
"""
Stability: Long-term
"""
	widgets: [Widget!]!
"""
Stability: Long-term
"""
	sections: [Section!]!
"""
Stability: Long-term
"""
	series: [SeriesConfig!]!
"""
Stability: Long-term
"""
	readOnlyTokens: [DashboardLink!]!
"""
Stability: Long-term
"""
	filters: [DashboardFilter!]!
"""
Stability: Long-term
"""
	parameters: [DashboardParameter!]!
"""
Stability: Long-term
"""
	updateFrequency: DashboardUpdateFrequencyType!
"""
Stability: Long-term
"""
	isStarred: Boolean!
"""
Stability: Long-term
"""
	defaultFilter: DashboardFilter
"""
Stability: Long-term
"""
	defaultSharedTimeStart: String!
"""
Stability: Long-term
"""
	defaultSharedTimeEnd: String!
"""
Stability: Long-term
"""
	timeJumpSizeInMs: Int
"""
Stability: Long-term
"""
	defaultSharedTimeEnabled: Boolean!
"""
Stability: Long-term
"""
	searchDomain: SearchDomain!
"""
Stability: Long-term
"""
	packageId: VersionedPackageSpecifier
"""
Stability: Long-term
"""
	package: PackageInstallation
"""
Allowed asset actions
Stability: Preview
"""
	allowedActions: [AssetAction!]!
"""
The resource identifier for this dashboard.
Stability: Short-term
"""
	resource: String!
}

"""
A dashboard
"""
type DashboardEntry {
"""
Stability: Preview
"""
	dashboard: Dashboard!
}

"""
A saved configuration for filtering dashboard widgets.
"""
type DashboardFilter {
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	prefixFilter: String!
}

"""
A token that can be used to access the dashboard without logging in. Useful for e.g. wall mounted dashboards or public dashboards.
"""
type DashboardLink {
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	token: String!
"""
Stability: Long-term
"""
	createdBy: String!
"""
The ip filter for the dashboard link.
Stability: Long-term
"""
	ipFilter: IPFilter
"""
Ownership of the queries run by this shared dashboard
Stability: Long-term
"""
	queryOwnership: QueryOwnership!
}

type DashboardLinkInteraction {
"""
Stability: Long-term
"""
	arguments: [DictionaryEntryType!]!
"""
Stability: Long-term
"""
	dashboardReference: DashboardLinkInteractionDashboardReference!
"""
Stability: Long-term
"""
	openInNewTab: Boolean!
"""
Stability: Long-term
"""
	useWidgetTimeWindow: Boolean!
}

"""
A reference to a dashboard either by id or name
"""
type DashboardLinkInteractionDashboardReference {
"""
Stability: Long-term
"""
	id: String
"""
Stability: Long-term
"""
	name: String
"""
Stability: Long-term
"""
	repoOrViewName: RepoOrViewName
"""
Stability: Long-term
"""
	packageSpecifier: UnversionedPackageSpecifier
}

"""
A page of dashboards.
"""
type DashboardPage {
"""
Stability: Long-term
"""
	pageInfo: PageType!
"""
Stability: Long-term
"""
	page: [Dashboard!]!
}

"""
Represents a dashboard parameter.
"""
interface DashboardParameter {
"""
Represents a dashboard parameter.
"""
	id: String!
"""
Represents a dashboard parameter.
"""
	label: String!
"""
Represents a dashboard parameter.
"""
	defaultValueV2: String
"""
Represents a dashboard parameter.
"""
	order: Int
"""
Represents a dashboard parameter.
"""
	width: Int
}

type DashboardTemplate {
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	displayName: String!
"""
Stability: Long-term
"""
	yamlTemplate: String!
"""
Stability: Long-term
"""
	labels: [String!]!
}

"""
The frequency at which a dashboard fetches new results for widgets.
"""
union DashboardUpdateFrequencyType =NeverDashboardUpdateFrequency | RealTimeDashboardUpdateFrequency

"""
A datasource, e.g. file name or system sending data to LogScale.
"""
type Datasource {
"""
Stability: Short-term
"""
	name: String!
"""
Stability: Short-term
"""
	oldestTimestamp: DateTime!
"""
Stability: Short-term
"""
	newestTimestamp: DateTime!
"""
Stability: Short-term
"""
	tags: [Tag!]!
"""
The size in Gigabytes of the data from this data source before compression.
Stability: Short-term
"""
	sizeAtIngest: Float!
"""
This size in Gigabytes of the data from this data source currently on disk.
Stability: Short-term
"""
	sizeOnDisk: Float!
"""
The size in Gigabytes of the data from this data source before compression, but only for the parts that are now part of a merged segment file.
Stability: Short-term
"""
	sizeAtIngestOfMerged: Float!
"""
This size in Gigabytes of the data from this data source currently on disk, but only for the parts that are now part of a merged segment file.
Stability: Short-term
"""
	sizeOnDiskOfMerged: Float!
}

"""
Date and time in the ISO-8601 instant format. Example: `2019-12-03T10:15:30.00Z`
"""
scalar DateTime

"""
A deletion of a set of events.
"""
type DeleteEvents {
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	created: DateTime!
"""
Stability: Long-term
"""
	start: DateTime!
"""
Stability: Long-term
"""
	end: DateTime!
"""
Stability: Long-term
"""
	query: String!
"""
Stability: Long-term
"""
	createdByUser: String
"""
Stability: Long-term
"""
	languageVersion: LanguageVersion!
}

"""
Entry into a list of unordered key-value pairs with unique keys
"""
type DictionaryEntryType {
"""
Stability: Long-term
"""
	key: String!
"""
Stability: Long-term
"""
	value: String!
}

"""
Asset permissions that can be directly assigned to users or groups
"""
type DirectlyAssignedAssetPermissions {
"""
List of asset permissions
Stability: Preview
"""
	assetPermissions: [AssetPermission!]!
"""
Whether permissions were assigned due to asset creator status
Stability: Preview
"""
	assignedBecauseOfCreatorStatus: Boolean!
}

"""
A dynamic configuration.
"""
enum DynamicConfig {
	BlockSignup
	DisableUserTracking
	DisableAnalyticsJob
	MaxAccessTokenTTL
	RejectIngestOnParserExceedingFraction
	QueryPartitionAutoBalance
	QueryCoordinatorMaxHeapFraction
	PruneCommunityLockedOrganizationsAfterHours
	PruneMissingTOSAcceptanceOrganizationsAfterHours
	DisableViewWithSameNameCleanup
	MaxIngestRequestSize
	JoinRowLimit
	JoinDefaultLimit
	SelfJoinLimit
	StateRowLimit
	AstDepthLimit
	AdHocTablesLimit
	QueryMemoryLimit
	LiveQueryMemoryLimit
	QueryCoordinatorMemoryLimit
	GroupDefaultLimit
	GroupMaxLimit
	RdnsDefaultLimit
	RdnsMaxLimit
	QueryResultRowCountLimit
	AggregatorOutputRowLimit
	ParserThrottlingAllocationFactor
	UndersizedMergingRetentionPercentage
	StaticQueryFractionOfCores
	TargetMaxRateForDatasource
	VerifySegmentInBucketCompletionIntervalDays
	VerifySegmentInBucketHeadOnly
	MaxRelocatedDatasourcesInGlobal
	DelayIngestResponseDueToIngestLagMaxFactor
	DelayIngestResponseDueToIngestLagThreshold
	DelayIngestResponseDueToIngestLagScale
	SampleIntervalForDatasourceRates
	FdrMaxNodesPerFeed
	BucketStorageWriteVersion
	BucketStorageKeySchemeVersion
	BucketStorageUploadInfrequentThresholdDays
	MinimumHumioVersion
	DebugAuditRequestTrace
	FlushSegmentsAndGlobalOnShutdown
	GracePeriodBeforeDeletingDeadEphemeralHostsMs
	FdrS3FileSizeMax
	ArchivingClusterWideStartFrom
	ArchivingClusterWideEndAt
	ArchivingClusterWideDisabled
	ArchivingClusterWideRegexForRepoName
	EnableDemoData
	MaxNumberOfOrganizations
	NumberOfDaysToRemoveStaleOrganizationsAfter
	IsAutomaticUpdateCheckingAllowed
	ExternalFunctionRequestResponseSizeLimitBytes
	ExternalFunctionRequestResponseEventCountLimit
	ReplaceANSIEscapeCodes
	DisableInconsistencyDetectionJob
	DeleteDuplicatedNameViewsAfterMerging
	MaxQueryPenaltyCreditForBlockedQueriesFactor
	MaxConcurrentQueriesOnWorker
	MaxQueryPollsForWorker
	MaxOpenSegmentsOnWorker
	IngestFeedAwsProcessingDownloadBufferSize
	IngestFeedAwsProcessingEventBufferSize
	IngestFeedAwsProcessingEventsPerBatch
	IngestFeedAwsDownloadMaxObjectSize
	IngestFeedGovernorGainPerCore
	IngestFeedGovernorCycleDuration
	IngestFeedGovernorIngestDelayLow
	IngestFeedGovernorIngestDelayHigh
	IngestFeedGovernorRateOverride
	IngestFeedMaxConcurrentPolls
	MaxCsvFileUploadSizeBytes
	MaxJsonFileUploadSizeBytes
	MatchFilesMaxHeapFraction
	LookupTableSyncAwaitSeconds
	GraphQLSelectionSizeLimit
	UnauthenticatedGraphQLSelectionSizeLimit
	QueryBlockMillisOnHighIngestDelay
	FileReplicationFactor
	QueryBacktrackingLimit
	ParserBacktrackingLimit
	GraphQlDirectivesAmountLimit
	TableCacheMemoryAllowanceFraction
	TableCacheMaxStorageFraction
	TableCacheMaxStorageFractionForIngestAndHttpOnly
	RetentionPreservationStartDt
	RetentionPreservationEndDt
	RetentionPreservationTag
	DisableNewRegexEngine
	EnableGlobalJsonStatsLogger
	LiveAdhocTableUpdatePeriodMinimumMs
	MinQueryPermitsFactor
	CorrelateQueryLimit
	CorrelateConstraintLimit
	CorrelateConstellationTickLimit
	CorrelateLinkValuesLimit
	CorrelateLinkValuesMaxByteSize
	CorrelateNumberOfTimeBuckets
	CorrelateQueryEventLimit
	MultiPassDefaultIterationLimit
	MultiPassMaxIterationLimit
	CorrelateMinIterations
	GracefulShutdownConsideredAliveSeconds
}

"""
A key value pair of a dynamic config and the accompanying value.
"""
type DynamicConfigKeyValueType {
"""
The dynamic config key.
Stability: Short-term
"""
	dynamicConfigKey: DynamicConfig!
"""
The dynamic config value.
Stability: Short-term
"""
	dynamicConfigValue: String!
}

scalar Email

"""
Scope of feature flag enablement
"""
enum EnabledInScope {
	GlobalScope
	OrganizationScope
	UserScope
	Disabled
}

enum EntitiesPageDirection {
	Previous
	Next
}

input EntitiesPageInputType {
	cursor: String!
	direction: EntitiesPageDirection!
}

enum EntitySearchEntityType {
	Dashboard
	File
	Interaction
}

input EntitySearchInputType {
	searchTerm: String
	pageSize: Int
	paths: [String!]
	sortBy: [EntitySearchSortInfoType!]
	entityTypes: [EntitySearchEntityType!]!
}

union EntitySearchResultEntity =ViewInteractionEntry | FileEntry | DashboardEntry

input EntitySearchSortInfoType {
	name: String!
	order: EntitySearchSortOrderType!
}

enum EntitySearchSortOrderType {
	Descending
	Ascending
}

enum EnvironmentType {
	ON_PREM
	ON_CLOUD
	ON_COMMUNITY
}

"""
Usage information
"""
type EnvironmentVariableUsage {
"""
The source for this environment variable. "Environment": the value is from the environment, "Default": variable not found in the environment, but a default value is used, "Missing": no variable or default found
Stability: Short-term
"""
	source: String!
"""
Value for this variable
Stability: Short-term
"""
	value: String!
"""
Environment variable name
Stability: Short-term
"""
	name: String!
}

"""
An event forwarder
"""
interface EventForwarder {
"""
An event forwarder
"""
	id: String!
"""
An event forwarder
"""
	name: String!
"""
An event forwarder
"""
	description: String!
"""
An event forwarder
"""
	enabled: Boolean!
}

"""
An event forwarder
"""
type EventForwarderForSelection {
"""
Id of the event forwarder
Stability: Long-term
"""
	id: String!
"""
Name of the event forwarder
Stability: Long-term
"""
	name: String!
"""
Description of the event forwarder
Stability: Long-term
"""
	description: String!
"""
Is the event forwarder enabled
Stability: Long-term
"""
	enabled: Boolean!
"""
The kind of event forwarder
Stability: Long-term
"""
	kind: EventForwarderKind!
}

"""
The kind of an event forwarder
"""
enum EventForwarderKind {
	Kafka
}

"""
An event forwarding rule
"""
type EventForwardingRule {
"""
The unique id for the event forwarding rule
Stability: Long-term
"""
	id: String!
"""
The query string for filtering and mapping the events to forward
Stability: Long-term
"""
	queryString: String!
"""
The id of the event forwarder
Stability: Long-term
"""
	eventForwarderId: String!
"""
The unix timestamp that the event forwarder was created at
Stability: Long-term
"""
	createdAt: Long
"""
Stability: Long-term
"""
	languageVersion: LanguageVersion!
}

"""
Fields that helps describe the status of eviction
"""
type EvictionStatus {
"""
Stability: Long-term
"""
	currentlyUnderReplicatedBytes: Long!
"""
Stability: Long-term
"""
	totalSegmentBytes: Long!
"""
Stability: Long-term
"""
	isDigester: Boolean!
"""
Stability: Long-term
"""
	bytesThatExistOnlyOnThisNode: Float!
}

"""
The specification of an external function.
"""
type ExternalFunctionSpecificationOutput {
"""
The name of the external function.
Stability: Preview
"""
	name: String!
"""
The URL for the external function.
Stability: Preview
"""
	procedureURL: String!
"""
The parameter specifications for the external function.
Stability: Preview
"""
	parameters: [ParameterSpecificationOutput!]!
"""
The description for the external function.
Stability: Preview
"""
	description: String!
"""
The kind of external function. This defines how the external function is executed.
Stability: Preview
"""
	kind: KindOutput!
}

"""
Information about an FDR feed.
"""
type FdrFeed {
"""
Id of the FDR feed.
Stability: Long-term
"""
	id: String!
"""
Name of the FDR feed.
Stability: Long-term
"""
	name: String!
"""
Description of the FDR feed.
Stability: Long-term
"""
	description: String
"""
The id of the parser that is used to parse the FDR data.
Stability: Long-term
"""
	parserId: String!
"""
AWS client id of the FDR feed.
Stability: Long-term
"""
	clientId: String!
"""
AWS SQS queue url of the FDR feed.
Stability: Long-term
"""
	sqsUrl: String!
"""
AWS S3 Identifier of the FDR feed.
Stability: Long-term
"""
	s3Identifier: String!
"""
Is ingest from the FDR feed enabled?
Stability: Long-term
"""
	enabled: Boolean!
}

"""
Administrator control for an FDR feed
"""
type FdrFeedControl {
"""
Id of the FDR feed.
Stability: Long-term
"""
	id: String!
"""
Maximum number of nodes to poll FDR feed with
Stability: Long-term
"""
	maxNodes: Int
"""
Maximum amount of files downloaded from s3 in parallel for a single node.
Stability: Long-term
"""
	fileDownloadParallelism: Int
}

enum FeatureAnnouncement {
	TriggerSearchPage
	TriggerOverview
	FleetRemoteUpdatesAndGroups
	FilterMatchHighlighting
	OrganizationOwnedQueries
	Interactions
	FieldInteractions
	PuffinRebranding
	FetchMoreOnFieldsPanel
	ToolPanel
}

"""
Represents a feature flag.
"""
enum FeatureFlag {
"""
Export data to bucket storage.
Stability: Preview
"""
	ExportToBucket
"""
Enable repeating queries. Can be used instead of live queries for functions having limitations around live queries.
Stability: Preview
"""
	RepeatingQueries
"""
Enable custom ingest tokens not generated by LogScale.
Stability: Preview
"""
	CustomIngestTokens
"""
Use new organization limits.
Stability: Preview
"""
	NewOrganizationLimits
"""
Enable ArrayFunctions in query language.
THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.
Stability: Preview
"""
	ArrayFunctions
"""
Enable geography functions in query language.
THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.
Stability: Preview
"""
	GeographyFunctions
"""
Prioritize newer over older segments.
THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.
Stability: Preview
"""
	CachePolicies
"""
Enable searching across LogScale clusters.
Stability: Preview
"""
	MultiClusterSearch
"""
Enable subdomains for current cluster.
THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.
Stability: Preview
"""
	SubdomainForOrganizations
"""
Enable Humio Managed repositories. The customer is not permitted to change certain configurations in a LogScale Managed repository.
THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.
Stability: Preview
"""
	ManagedRepositories
"""
Allow users to configure FDR feeds for managed repositories
THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.
Stability: Preview
"""
	ManagedRepositoriesAllowFDRConfig
"""
The UsagePage shows data from ingestAfterFieldRemovalSize instead of segmentWriteBytes
Stability: Preview
"""
	UsagePageUsingIngestAfterFieldRemovalSize
"""
Enable falcon data connector
Stability: Preview
"""
	FalconDataConnector
"""
Flag for testing, does nothing
THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.
Stability: Preview
"""
	SleepFunction
"""
Enable login bridge
Stability: Preview
"""
	LoginBridge
"""
Enables download of macos installer for logcollector through fleet management
Stability: Preview
"""
	MacosInstallerForLogCollector
"""
Enables ephemeral hosts support for fleet management
Stability: Preview
"""
	FleetEphemeralHosts
"""
Prevents the archiving logic from splitting segments into multiple archived files based on their tag groups
Stability: Preview
"""
	DontSplitSegmentsForArchiving
"""
Enables fleet management collector metrics
Stability: Preview
"""
	FleetCollectorMetrics
"""
No currentHosts writes for segments in buckets
Stability: Preview
"""
	NoCurrentsForBucketSegments
"""
Force a refresh of ClusterManagementStats cache before calculating UnregisterNodeBlockers in clusterUnregisterNode mutation
Stability: Preview
"""
	RefreshClusterManagementStatsInUnregisterNode
"""
Pre-merge mini-segments
Stability: Preview
"""
	PreMergeMiniSegments
"""
Use new store for Autosharding rules
Stability: Preview
"""
	NewAutoshardRuleStore
"""
Use a new segment file format on write - not readable by older versions
Stability: Preview
"""
	WriteNewSegmentFileFormat
"""
When using the new segment file format on write, also do the old solely for comparison
THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.
Stability: Preview
"""
	MeasureNewSegmentFileFormat
"""
Enables fleet management collector debug logging
Stability: Preview
"""
	FleetCollectorDebugLogging
"""
Resolve field names during codegen rather than for every event
Stability: Preview
"""
	ResolveFieldsCodeGen
"""
Enables LogScale Collector remote updates
Stability: Preview
"""
	FleetRemoteUpdates
"""
Enables alternate query merge target handling
Stability: Preview
"""
	AlternateQueryMergeTargetHandling
"""
Allow digesters to start without having all the minis for the current merge target. Requires the AlternateQueryMergeTargetHandling feature flag to be enabled
Stability: Preview
"""
	DigestersDontNeedMergeTargetMinis
"""
Enables labels for fleet management
THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.
Stability: Preview
"""
	FleetLabels
"""
Segment rebalancer handles mini segments. Can only take effect when the AlternateQueryMergeTargetHandling and DigestersDontNeedMergeTargetMinis feature flags are also enabled
Stability: Preview
"""
	SegmentRebalancerHandlesMinis
"""
Enables dashboards on fleet overview page
THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.
Stability: Preview
"""
	FleetOverviewDashboards
"""
Enables archiving for Google Cloud Storage
THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.
Stability: Preview
"""
	GoogleCloudArchiving
"""
Enables TablePage UI on fleet management pages.
THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.
Stability: Preview
"""
	FleetTablePageUI
"""
Disables periodic ingestOffset pushing for datasources in favor of alternate handling
Stability: Preview
"""
	ReplacePeriodicIngestOffsetPushing
"""
Lets the cluster know that non-evicted nodes undergoing a graceful shutdown should be considered alive for 5 minutes with regards to segment rebalancing
Stability: Preview
"""
	SetConsideredAliveUntilOnGracefulShutdown
"""
Enables Field Aliasing
Stability: Preview
"""
	FieldAliasing
"""
External Functions
THIS FUNCTIONALITY IS RESTRICTED: Enabling this functionality should not be done in any production environment.
Stability: Preview
"""
	ExternalFunctions
"""
Enable the LogScale Query Assistant
THIS FUNCTIONALITY IS RESTRICTED: Enabling this functionality should not be done in any production environment.
Stability: Preview
"""
	QueryAssistant
"""
Enable Flight Control support in cluster
THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.
Stability: Preview
"""
	FlightControl
"""
Enables a limit on query backtracking
Stability: Preview
"""
	QueryBacktrackingLimit
"""
Adds a derived #repo.cid tag when searching in views or dataspaces within an organization with an associated CID
THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.
Stability: Preview
"""
	DerivedCidTag
"""
Live tables
Stability: Preview
"""
	LiveTables
"""
Enables graph queries
THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.
Stability: Preview
"""
	GraphQueries
"""
Enables the MITRE Detection Annotation function
THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.
Stability: Preview
"""
	MitreDetectionAnnotation
"""
Enables having multiple role bindings for a single view in the same group. This feature can only be enabled when min version is at least 1.150.0
Stability: Preview
"""
	MultipleViewRoleBindings
"""
When enabled, queries exceeding the AggregatorOutputRowLimit will get cancelled. When disabled, queries will continue to run, but a log is produced whenever the limit is exceeded.
Stability: Preview
"""
	CancelQueriesExceedingAggregateOutputRowLimit
"""
Enables mapping one group to more than one LogScale group with the same lookup name during group synchronization.
THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.
Stability: Preview
"""
	OneToManyGroupSynchronization
"""
Enables support specifying the query time interval using the query function setTimeInterval()
Stability: Preview
"""
	TimeIntervalInQuery
"""
Enables LLM parser generation
THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.
Stability: Preview
"""
	LlmParserGeneration
"""
Enables the external data source sync job to sync entity data
THIS FUNCTIONALITY IS RESTRICTED: Enabling this functionality should not be done in any production environment.
Stability: Preview
"""
	ExternalDataSourceSyncForEntity
"""
Enables the external data source sync job to sync identity data
THIS FUNCTIONALITY IS RESTRICTED: Enabling this functionality should not be done in any production environment.
Stability: Preview
"""
	ExternalDataSourceSyncForIdentity
"""
Use the new query coordination partition logic.
Stability: Preview
"""
	UseNewQueryCoordinationPartitions
"""
Use the new sort, head, tail, and table datastructure
Stability: Preview
"""
	SortNewDatastructure
}

"""
Feature flags with details
"""
type FeatureFlagV2 {
"""
Stability: Preview
"""
	flag: FeatureFlag!
"""
Stability: Preview
"""
	description: String!
"""
Stability: Preview
"""
	experimental: Boolean!
}

type FieldAliasSchema {
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	fields: [SchemaField!]!
"""
Stability: Long-term
"""
	instances: [AliasMapping!]!
"""
Stability: Long-term
"""
	version: String!
"""
Stability: Long-term
"""
	yamlTemplate: YAML!
}

type FieldAliasSchemasInfo {
"""
Stability: Long-term
"""
	schemas: [FieldAliasSchema!]!
"""
Stability: Long-term
"""
	activeSchemaOnOrg: String
"""
Stability: Long-term
"""
	activeSchemasOnViews: [ActiveSchemaOnView!]!
}

"""
Field condition comparison operator type
"""
enum FieldConditionOperatorType {
	Equal
	NotEqual
	Contains
	NotContains
	StartsWith
	EndsWith
	Present
	NotPresent
	Unknown
}

"""
Presentation preferences used when a field is added to table and event list widgets in the UI.
"""
type FieldConfiguration {
"""
The field the configuration is associated with.
Stability: Long-term
"""
	fieldName: String!
"""
A JSON object containing the column properties applied to the column when it is added to a widget.
Stability: Long-term
"""
	config: JSON!
}

"""
An assertion that an event output from a parser test case has an expected value for a given field.
"""
type FieldHasValue {
"""
Field to assert on.
Stability: Long-term
"""
	fieldName: String!
"""
Value expected to be contained in the field.
Stability: Long-term
"""
	expectedValue: String!
}

"""
A file upload to LogScale for use with the `match` query function. You can see them under the Files page in the UI.
"""
type File {
"""
Stability: Long-term
"""
	contentHash: String!
"""
Stability: Long-term
"""
	nameAndPath: FileNameAndPath!
"""
Stability: Long-term
"""
	createdAt: DateTime!
"""
Stability: Long-term
"""
	createdBy: String!
"""
Stability: Long-term
"""
	modifiedAt: DateTime!
"""
Stability: Long-term
"""
	fileSizeBytes: Long
"""
Stability: Long-term
"""
	modifiedBy: String!
"""
Stability: Long-term
"""
	packageId: VersionedPackageSpecifier
"""
Stability: Long-term
"""
	package: PackageInstallation
"""
Allowed asset actions
Stability: Preview
"""
	allowedActions: [AssetAction!]!
"""
The resource identifier for this file.
Stability: Short-term
"""
	resource: String!
}

"""
A file asset
"""
type FileEntry {
"""
Stability: Preview
"""
	view: SearchDomain
"""
Stability: Preview
"""
	file: File!
}

"""
A field in a file and what value the field should have for a given entry to pass the filter.
"""
input FileFieldFilterType {
"""
A field in a file and what value the field should have for a given entry to pass the filter.
"""
	field: String!
"""
A field in a file and what value the field should have for a given entry to pass the filter.
"""
	values: [String!]!
}

type FileNameAndPath {
"""
Stability: Long-term
"""
	name: String!
"""
Paths for files can be one of two types: absolute or relative.
Absolute paths start with a slash, and relative paths start without a slash, like Unix paths.

Every repository or view in the system is considered a "folder" in its own right,
meaning that every relative path is relative to the current view.
An absolute path points to something that can be addressed from any view,
and a relative path points to a file located inside the view.
If there is no path, it means the file is located at your current location.

Stability: Long-term
"""
	path: String
}

"""
A filter alert.
"""
type FilterAlert {
"""
Id of the filter alert.
Stability: Long-term
"""
	id: String!
"""
Name of the filter alert.
Stability: Long-term
"""
	name: String!
"""
Description of the filter alert.
Stability: Long-term
"""
	description: String
"""
LogScale query to execute.
Stability: Long-term
"""
	queryString: String!
"""
List of ids for actions to fire on query result.
Stability: Long-term
"""
	actions: [Action!]!
"""
Labels attached to the filter alert.
Stability: Long-term
"""
	labels: [String!]!
"""
Flag indicating whether the filter alert is enabled.
Stability: Long-term
"""
	enabled: Boolean!
"""
Throttle time in seconds.
Stability: Long-term
"""
	throttleTimeSeconds: Long
"""
A field to throttle on. Can only be set if throttleTimeSeconds is set.
Stability: Long-term
"""
	throttleField: String
"""
Unix timestamp for last successful poll of the filter alert query. If this is not quite recent, then the alert might be having problems.
Stability: Long-term
"""
	lastSuccessfulPoll: Long
"""
Unix timestamp for last execution of trigger.
Stability: Long-term
"""
	lastTriggered: Long
"""
Unix timestamp for last error.
Stability: Long-term
"""
	lastErrorTime: Long
"""
Last error encountered while running the filter alert.
Stability: Long-term
"""
	lastError: String
"""
Last warnings encountered while running the filter alert.
Stability: Long-term
"""
	lastWarnings: [String!]!
"""
YAML specification of the filter alert.
Stability: Long-term
"""
	yamlTemplate: YAML!
"""
The id of the package that the alert was installed as part of.
Stability: Long-term
"""
	packageId: VersionedPackageSpecifier
"""
User or token used to modify the asset.
Stability: Preview
"""
	modifiedInfo: ModifiedInfo!
"""
The package that the alert was installed as part of.
Stability: Long-term
"""
	package: PackageInstallation
"""
Ownership of the query run by this alert
Stability: Long-term
"""
	queryOwnership: QueryOwnership!
"""
Allowed asset actions
Stability: Preview
"""
	allowedActions: [AssetAction!]!
"""
The resource identifier for this filter alert.
Stability: Short-term
"""
	resource: String!
}

"""
The default config for filter alerts.
"""
type FilterAlertConfig {
"""
Maximum trigger limit for filter alerts with one or more email actions.
Stability: Long-term
"""
	filterAlertEmailTriggerLimit: Int!
"""
Maximum trigger limit for filter alerts with no email actions.
Stability: Long-term
"""
	filterAlertNonEmailTriggerLimit: Int!
}

type FilterAlertTemplate {
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	displayName: String!
"""
Stability: Long-term
"""
	yamlTemplate: YAML!
"""
Stability: Long-term
"""
	labels: [String!]!
}

enum FleetConfiguration__SortBy {
	Name
	ModifiedBy
	Instances
	Size
	LastModified
}

enum FleetGroups__SortBy {
	Filter
	WantedVersion
	Collectors
	Name
}

type FleetInstallationToken {
"""
Stability: Short-term
"""
	token: String!
"""
Stability: Short-term
"""
	jwtToken: String!
"""
Stability: Short-term
"""
	name: String!
"""
Stability: Short-term
"""
	assignedConfiguration: LogCollectorConfiguration
"""
Stability: Short-term
"""
	installationCommands: LogCollectorInstallCommand!
}

enum FleetInstallationTokens__SortBy {
	Name
	ConfigName
}

enum Fleet__SortBy {
	Hostname
	System
	Version
	Ingest
	LastActivity
	ConfigName
	CpuAverage5Min
	MemoryMax5Min
	DiskMax5Min
	Change
	Labels
}

"""
Settings for the Java Flight Recorder.
"""
type FlightRecorderSettings {
"""
True if OldObjectSample is enabled
Stability: Preview
"""
	oldObjectSampleEnabled: Boolean!
"""
The duration old object sampling will run for before dumping results and restarting
Stability: Preview
"""
	oldObjectSampleDurationMinutes: Long!
}

"""
Archiving configuration for GCS, i.e. bucket and format.
"""
type GCSArchivingConfiguration implements ArchivingConfiguration{
"""
Bucket name for storing archived data. Example: acme-bucket.
Stability: Preview
"""
	bucket: String!
"""
Do not archive logs older than this.
Stability: Preview
"""
	startFrom: DateTime
"""
Whether the archiving has been disabled.
Stability: Preview
"""
	disabled: Boolean
"""
The format to store the archived data in Google Cloud Storage
Stability: Preview
"""
	format: ArchivingFormat
"""
Array of names of tag fields to use in that order in the output file names.
Stability: Preview
"""
	tagOrderInName: [String!]!
}

"""
Data for generating an unsaved aggregate alert object from a library package template
"""
input GenerateAggregateAlertFromPackageTemplateInput {
"""
Data for generating an unsaved aggregate alert object from a library package template
"""
	viewName: RepoOrViewName!
"""
Data for generating an unsaved aggregate alert object from a library package template
"""
	packageId: VersionedPackageSpecifier!
"""
Data for generating an unsaved aggregate alert object from a library package template
"""
	templateName: String!
}

"""
Data for generating an unsaved aggregate alert object from a yaml template
"""
input GenerateAggregateAlertFromTemplateInput {
"""
Data for generating an unsaved aggregate alert object from a yaml template
"""
	viewName: RepoOrViewName!
"""
Data for generating an unsaved aggregate alert object from a yaml template
"""
	yamlTemplate: YAML!
}

"""
Data for generating an unsaved alert object from a library package template
"""
input GenerateAlertFromPackageTemplateInput {
"""
Data for generating an unsaved alert object from a library package template
"""
	viewName: RepoOrViewName!
"""
Data for generating an unsaved alert object from a library package template
"""
	packageId: VersionedPackageSpecifier!
"""
Data for generating an unsaved alert object from a library package template
"""
	templateName: String!
}

"""
Data for generating an unsaved alert object from a yaml template
"""
input GenerateAlertFromTemplateInput {
"""
Data for generating an unsaved alert object from a yaml template
"""
	viewName: RepoOrViewName!
"""
Data for generating an unsaved alert object from a yaml template
"""
	yamlTemplate: YAML!
}

"""
Data for generating an unsaved filter alert object from a library package template
"""
input GenerateFilterAlertFromPackageTemplateInput {
"""
Data for generating an unsaved filter alert object from a library package template
"""
	viewName: RepoOrViewName!
"""
Data for generating an unsaved filter alert object from a library package template
"""
	packageId: VersionedPackageSpecifier!
"""
Data for generating an unsaved filter alert object from a library package template
"""
	templateName: String!
}

"""
Data for generating an unsaved filter alert object from a yaml template
"""
input GenerateFilterAlertFromTemplateInput {
"""
Data for generating an unsaved filter alert object from a yaml template
"""
	viewName: RepoOrViewName!
"""
Data for generating an unsaved filter alert object from a yaml template
"""
	yamlTemplate: YAML!
}

"""
Data for generating an unsaved parser object from a YAML template
"""
input GenerateParserFromTemplateInput {
"""
Data for generating an unsaved parser object from a YAML template
"""
	yamlTemplate: YAML!
}

"""
Data for generating an unsaved scheduled search object from a library package template.
"""
input GenerateScheduledSearchFromPackageTemplateInput {
"""
Data for generating an unsaved scheduled search object from a library package template.
"""
	viewName: RepoOrViewName!
"""
Data for generating an unsaved scheduled search object from a library package template.
"""
	packageId: VersionedPackageSpecifier!
"""
Data for generating an unsaved scheduled search object from a library package template.
"""
	templateName: String!
}

"""
Data for generating an unsaved scheduled search object from a yaml templat.
"""
input GenerateScheduledSearchFromTemplateInput {
"""
Data for generating an unsaved scheduled search object from a yaml templat.
"""
	viewName: RepoOrViewName!
"""
Data for generating an unsaved scheduled search object from a yaml templat.
"""
	yamlTemplate: YAML!
}

"""
The input required to get an external function specification.
"""
input GetExternalFunctionInput {
"""
The input required to get an external function specification.
"""
	name: String!
"""
The input required to get an external function specification.
"""
	view: String!
}

"""
A group.
"""
type Group {
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	displayName: String!
"""
Stability: Long-term
"""
	defaultQueryPrefix: String
"""
Stability: Long-term
"""
	defaultRole: Role
"""
Stability: Long-term
"""
	defaultSearchDomainCount: Int!
"""
Stability: Long-term
"""
	lookupName: String
"""
Stability: Long-term
"""
	searchDomainCount: Int!
"""
Stability: Long-term
"""
	roles: [SearchDomainRole!]!
"""
Stability: Long-term
"""
	searchDomainRoles(
		searchDomainId: String
	): [SearchDomainRole!]!
	searchDomainRolesByName(
		searchDomainName: String!
	): SearchDomainRole
"""
Stability: Long-term
"""
	searchDomainRolesBySearchDomainName(
		searchDomainName: String!
	): [SearchDomainRole!]!
"""
Get allowed asset actions for the group on a specific asset and explain how it has gotten this access
Stability: Preview
"""
	allowedAssetActionsBySource(
"""
Id of the asset
"""
		assetId: String!
"""
The type of the asset.
"""
		assetType: AssetPermissionsAssetType!
		searchDomainId: String
	): GroupAssetActionsBySource!
"""
Search for asset permissions for the group. Only search for asset name is supported with regards to the searchFilter argument.
Stability: Preview
"""
	searchAssetPermissions(
"""
Filter results based on this string
"""
		searchFilter: String
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
"""
The sort by options for assets. Asset name is default
"""
		sortBy: SortBy
"""
List of asset types
"""
		assetTypes: [AssetPermissionsAssetType!]
"""
List of search domain id's to search within. Null or empty list is interpreted as all search domains
"""
		searchDomainIds: [String!]
"""
Include Read, Update and/or Delete permission assignments. The filter will accept all assets if the argument Null or the empty list.
"""
		permissions: [AssetAction!]
	): AssetPermissionSearchResultSet!
"""
Stability: Long-term
"""
	systemRoles: [GroupSystemRole!]!
"""
Stability: Long-term
"""
	organizationRoles: [GroupOrganizationRole!]!
"""
Stability: Long-term
"""
	queryPrefixes(
		onlyIncludeRestrictiveQueryPrefixes: Boolean
		onlyForRoleWithId: String
		onlyForViewWithId: String
	): [QueryPrefixes!]!
"""
Stability: Long-term
"""
	userCount: Int!
"""
Stability: Long-term
"""
	users: [User!]!
"""
Stability: Long-term
"""
	searchUsers(
"""
Filter results based on this string
"""
		searchFilter: String
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
"""
The value to sort the result set by.
"""
		sortBy: OrderByUserField
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
	): UserResultSetType!
"""
Stability: Long-term
"""
	permissionType: PermissionType
}

"""
Asset actions given by a group for a specific asset
"""
type GroupAssetActionsBySource implements AssetActionsBySource{
"""
Stability: Preview
"""
	group: Group
"""
List of roles assigned to the user or group and the asset actions they allow
Stability: Preview
"""
	assetActionsByRoles: [AssetActionsByRole!]!
"""
Asset permissions assigned directly to the user or group
Stability: Preview
"""
	directlyAssigned: DirectlyAssignedAssetPermissions!
}

input GroupFilter {
	oldQuery: String
	newQuery: String!
}

type GroupFilterInfo {
"""
Stability: Short-term
"""
	total: Int!
"""
Stability: Short-term
"""
	added: Int!
"""
Stability: Short-term
"""
	removed: Int!
"""
Stability: Short-term
"""
	noChange: Int!
}

"""
The organization roles of the group.
"""
type GroupOrganizationRole {
"""
Stability: Long-term
"""
	role: Role!
}

"""
A page of groups in an organization.
"""
type GroupPage {
"""
Stability: Long-term
"""
	pageInfo: PageType!
"""
Stability: Long-term
"""
	page: [Group!]!
}

"""
The groups query result set.
"""
type GroupResultSetType {
"""
The total number of matching results
Stability: Long-term
"""
	totalResults: Int!
"""
The paginated result set
Stability: Long-term
"""
	results: [Group!]!
}

"""
The role assigned to a group in a SearchDomain
"""
type GroupSearchDomainRole {
"""
Stability: Long-term
"""
	role: Role!
"""
Stability: Long-term
"""
	searchDomain: SearchDomain!
"""
Stability: Long-term
"""
	group: Group!
}

"""
The system roles of the group.
"""
type GroupSystemRole {
"""
Stability: Long-term
"""
	role: Role!
}

enum GroupsOrUsersFilter {
	Users
	Groups
}

"""
Health status of the service
"""
type HealthStatus {
"""
The latest status from the service
Stability: Preview
"""
	status: String!
"""
The latest health status message from the service
Stability: Preview
"""
	message: String!
}

"""
Represents information about the LogScale instance.
"""
type HumioMetadata {
"""
Returns enabled features that are likely in beta.
Stability: Short-term
"""
	isFeatureFlagEnabled(
		feature: FeatureFlag!
	): Boolean!
"""
Stability: Long-term
"""
	externalPermissions: Boolean!
"""
Stability: Long-term
"""
	version: String!
"""
An indication whether or not the cluster is being updated. This is based off of differences in the cluster node versions.
Stability: Preview
"""
	isClusterBeingUpdated: Boolean!
"""
The lowest detected node version in the cluster.
Stability: Preview
"""
	minimumNodeVersion: String!
"""
Stability: Long-term
"""
	environment: EnvironmentType!
"""
Stability: Long-term
"""
	clusterId: String!
"""
Stability: Short-term
"""
	falconDataConnectorUrl: String
"""
Stability: Long-term
"""
	regions: [RegionSelectData!]!
"""
List of supported AWS regions
Stability: Long-term
"""
	awsRegions: [String!]!
"""
Cluster AWS IAM role arn (Amazon Resource Name) used to assume role for ingest feeds
Stability: Long-term
"""
	ingestFeedAwsRoleArn: String
"""
Configuration status for AWS ingest feeds.
Stability: Long-term
"""
	awsIngestFeedsConfigurationStatus: IngestFeedConfigurationStatus!
"""
Stability: Short-term
"""
	sharedDashboardsEnabled: Boolean!
"""
Stability: Short-term
"""
	personalUserTokensEnabled: Boolean!
"""
Stability: Long-term
"""
	globalAllowListEmailActionsEnabled: Boolean!
"""
Stability: Long-term
"""
	isAutomaticUpdateCheckingEnabled: Boolean!
"""
The authentication method used for the cluster node
Stability: Long-term
"""
	authenticationMethod: AuthenticationMethod!
"""
Stability: Short-term
"""
	organizationMultiMode: Boolean!
"""
Stability: Short-term
"""
	organizationMode: OrganizationMode!
"""
Stability: Short-term
"""
	sandboxesEnabled: Boolean!
"""
Stability: Short-term
"""
	externalGroupSynchronization: Boolean!
"""
Stability: Long-term
"""
	allowActionsNotUseProxy: Boolean!
"""
Stability: Long-term
"""
	isUsingSmtp: Boolean!
"""
Stability: Short-term
"""
	isPendingUsersEnabled: Boolean!
"""
Stability: Long-term
"""
	scheduledSearchMaxBackfillLimit: Int
"""
Stability: Short-term
"""
	isExternalManaged: Boolean!
"""
Stability: Short-term
"""
	isApiExplorerEnabled: Boolean!
"""
Stability: Short-term
"""
	isScheduledReportEnabled: Boolean!
"""
Stability: Short-term
"""
	eulaUrl: String!
"""
The time in ms after which a repository has been marked for deletion it will no longer be restorable.
Stability: Long-term
"""
	deleteBackupAfter: Long!
"""
Stability: Short-term
"""
	maxCsvFileUploadSizeBytes: Long!
"""
Stability: Short-term
"""
	maxJsonFileUploadSizeBytes: Long!
"""
The filter alert config.
"""
	filterAlertConfig: FilterAlertConfig!
}

"""
A LogScale query
"""
type HumioQuery {
"""
Stability: Long-term
"""
	languageVersion: LanguageVersion!
"""
Stability: Long-term
"""
	queryString: String!
"""
Stability: Long-term
"""
	arguments: [DictionaryEntryType!]!
"""
Stability: Long-term
"""
	start: String!
"""
Stability: Long-term
"""
	end: String!
"""
Stability: Long-term
"""
	isLive: Boolean!
}

"""
An IP Filter
"""
type IPFilter {
"""
The unique id for the ip filter
Stability: Long-term
"""
	id: String!
"""
The name for the ip filter
Stability: Long-term
"""
	name: String!
"""
The ip filter
Stability: Long-term
"""
	ipFilter: String!
}

type IdentityProviderAuth {
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	authenticationMethod: AuthenticationMethodAuth!
}

"""
An Identity Provider
"""
interface IdentityProviderAuthentication {
"""
An Identity Provider
"""
	id: String!
"""
An Identity Provider
"""
	name: String!
"""
An Identity Provider
"""
	defaultIdp: Boolean!
"""
An Identity Provider
"""
	humioManaged: Boolean!
"""
An Identity Provider
"""
	lazyCreateUsers: Boolean!
"""
An Identity Provider
"""
	domains: [String!]!
"""
An Identity Provider
"""
	debug: Boolean!
}

type Ingest {
"""
Stability: Long-term
"""
	currentBytes: Long!
"""
Stability: Long-term
"""
	limit: UsageLimit!
}

"""
An ingest feed.
"""
type IngestFeed {
"""
Id of the ingest feed.
Stability: Long-term
"""
	id: String!
"""
Name of the ingest feed.
Stability: Long-term
"""
	name: String!
"""
Description of the ingest feed.
Stability: Long-term
"""
	description: String
"""
Parser used to parse the ingest feed.
Stability: Long-term
"""
	parser: Parser
"""
Is ingest from the ingest feed enabled?
Stability: Long-term
"""
	enabled: Boolean!
"""
The source which this ingest feed will ingest from
Stability: Long-term
"""
	source: IngestFeedSource!
"""
Unix timestamp for when this feed was created
Stability: Long-term
"""
	createdAt: Long!
"""
Details about how the ingest feed is running
Stability: Long-term
"""
	executionInfo: IngestFeedExecutionInfo
}

"""
How to authenticate to AWS.
"""
union IngestFeedAwsAuthentication =IngestFeedAwsAuthenticationIamRole

"""
IAM role authentication
"""
type IngestFeedAwsAuthenticationIamRole {
"""
Arn of the role to be assumed
Stability: Long-term
"""
	roleArn: String!
"""
External Id to the role to be assumed
Stability: Long-term
"""
	externalId: String!
}

"""
Compression scheme of the file.
"""
enum IngestFeedCompression {
	Auto
	Gzip
	None
}

"""
Represents the configuration status of the ingest feed feature on the cluster
"""
type IngestFeedConfigurationStatus {
"""
Stability: Long-term
"""
	isConfigured: Boolean!
}

"""
Details about how the ingest feed is running
"""
type IngestFeedExecutionInfo {
"""
Unix timestamp of the latest activity for the feed
Stability: Long-term
"""
	latestActivity: Long
"""
Details about the status of the ingest feed
Stability: Long-term
"""
	statusMessage: IngestFeedStatus
}

"""
The preprocessing to apply to an ingest feed before parsing.
"""
union IngestFeedPreprocessing =IngestFeedPreprocessingSplitNewline | IngestFeedPreprocessingSplitAwsRecords

"""
The kind of preprocessing to do.
"""
enum IngestFeedPreprocessingKind {
"""
Interpret the input as AWS JSON record format and emit each record as an event
"""
	SplitAwsRecords
"""
Interpret the input as newline-delimited and emit each line as an event
"""
	SplitNewline
}

"""
Interpret the input as AWS JSON record format and emit each record as an event
"""
type IngestFeedPreprocessingSplitAwsRecords {
"""
The kind of preprocessing to do.
Stability: Long-term
"""
	kind: IngestFeedPreprocessingKind!
}

"""
Interpret the input as newline-delimited and emit each line as an event
"""
type IngestFeedPreprocessingSplitNewline {
"""
The kind of preprocessing to do.
Stability: Long-term
"""
	kind: IngestFeedPreprocessingKind!
}

"""
The ingest feed query result set
"""
type IngestFeedQueryResultSet {
"""
The total number of matching results
Stability: Long-term
"""
	totalResults: Int!
"""
The paginated result set
Stability: Long-term
"""
	results: [IngestFeed!]!
}

"""
An ingest feed that polls data from S3 and is notified via SQS
"""
type IngestFeedS3SqsSource {
"""
AWS SQS queue url.
Stability: Long-term
"""
	sqsUrl: String!
"""
The preprocessing to apply to an ingest feed before parsing.
Stability: Long-term
"""
	preprocessing: IngestFeedPreprocessing!
"""
How to authenticate to AWS.
Stability: Long-term
"""
	awsAuthentication: IngestFeedAwsAuthentication!
"""
Compression scheme of the file.
Stability: Long-term
"""
	compression: IngestFeedCompression!
"""
The AWS region to connect to.
Stability: Long-term
"""
	region: String!
}

"""
The source from which to download from an ingest feed.
"""
union IngestFeedSource =IngestFeedS3SqsSource

"""
Details about the status of the ingest feed
"""
type IngestFeedStatus {
"""
Description of the problem with the ingest feed
Stability: Long-term
"""
	problem: String!
"""
Terse description of the problem with the ingest feed
Stability: Long-term
"""
	terseProblem: String
"""
Timestamp, in milliseconds, of when the status message was set
Stability: Long-term
"""
	statusTimestamp: Long!
"""
Cause of the problem with the ingest feed
Stability: Long-term
"""
	cause: IngestFeedStatusCause
}

"""
Details about the cause of the problem
"""
type IngestFeedStatusCause {
"""
Description of the cause of the problem
Stability: Long-term
"""
	cause: String!
"""
Terse description of the cause of the problem
Stability: Long-term
"""
	terseCause: String
}

enum IngestFeeds__SortBy {
	CreatedTimeStamp
	Name
}

enum IngestFeeds__Type {
	AwsS3Sqs
}

"""
Ingest Listeners listen on a port for UDP or TCP traffic, used with SysLog.
"""
type IngestListener {
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	repository: Repository!
"""
The TCP/UDP port to listen to.
Stability: Long-term
"""
	port: Int!
"""
The network protocol data is sent through.
Stability: Long-term
"""
	protocol: IngestListenerProtocol!
"""
The charset used to decode the event stream. Available charsets depend on the JVM running the LogScale instance. Names and aliases can be found at http://www.iana.org/assignments/character-sets/character-sets.xhtml
Stability: Long-term
"""
	charset: String!
"""
Specify which host should open the socket. By default this field is empty and all hosts will open a socket. This field can be used to select only one host to open the socket.
Stability: Long-term
"""
	vHost: Int
"""
Stability: Long-term
"""
	name: String!
"""
The ip address this listener will bind to. By default (leaving this field empty) it will bind to 0.0.0.0 - all interfaces. Using this field it is also possible to specify the address to bind to. In a cluster setup it is also possible to specify if only one machine should open a socket - The vhost field is used for that.
Stability: Long-term
"""
	bindInterface: String!
"""
The parser configured to parse data for the listener. This returns null if the parser has been removed since the listener was created.
Stability: Long-term
"""
	parser: Parser
}

"""
The network protocol a ingest listener uses.
"""
enum IngestListenerProtocol {
"""
UDP Protocol
"""
	UDP
"""
TCP Protocol
"""
	TCP
"""
Gelf over UDP Protocol
"""
	GELF_UDP
"""
Gelf over TCP Protocol
"""
	GELF_TCP
"""
Netflow over UDP
"""
	NETFLOW_UDP
}

"""
A cluster ingest partition. It assigns cluster nodes with the responsibility of ingesting data.
"""
type IngestPartition {
"""
Stability: Long-term
"""
	id: Int!
"""
The ids of the node responsible executing real-time queries for the partition and writing events to time series. The list is ordered so that the first node is the primary node and the rest are followers ready to take over if the primary fails.
Stability: Long-term
"""
	nodeIds: [Int!]!
}

"""
An API ingest token used for sending data to LogScale.
"""
type IngestToken {
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	token: String!
"""
Stability: Long-term
"""
	parser: Parser
}

"""
The status of an IOC database table
"""
type IocTableInfo {
"""
The name of the indicator type in this table
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	status: IocTableStatus!
"""
The number of milliseconds since epoch that the IOC database was last updated
Stability: Long-term
"""
	lastUpdated: Long
"""
The number of indicators in the database
Stability: Long-term
"""
	count: Int!
}

enum IocTableStatus {
	Unauthorized
	Unavailable
	Ok
}

"""
Represents information about the IP database used by LogScale
"""
type IpDatabaseInfo {
"""
The absolute file path of the file containing the database
Stability: Long-term
"""
	dbFilePath: String!
"""
The update strategy used for the IP Database
Stability: Long-term
"""
	updateStrategy: String!
"""
Metadata about the IP Database used by LogScale
Stability: Long-term
"""
	metadata: IpDatabaseMetadata
}

"""
Represents metadata about the IP database used by LogScale
"""
type IpDatabaseMetadata {
"""
The type of database
Stability: Long-term
"""
	type: String!
"""
The date on which the database was build
Stability: Long-term
"""
	buildDate: DateTime!
"""
The description of the database
Stability: Long-term
"""
	description: String!
"""
The md5 hash of the file containing the database
Stability: Long-term
"""
	dbFileMd5: String!
}

scalar JSON

type KafkaClusterDescription {
"""
Stability: Short-term
"""
	clusterID: String!
"""
Stability: Short-term
"""
	nodes: [KafkaNode!]!
"""
Stability: Short-term
"""
	controller: KafkaNode!
"""
Stability: Short-term
"""
	logDirDescriptions: [KafkaLogDir!]!
"""
Stability: Short-term
"""
	globalEventsTopic: KafkaTopicDescription!
"""
Stability: Short-term
"""
	ingestTopic: KafkaTopicDescription!
"""
Stability: Short-term
"""
	chatterTopic: KafkaTopicDescription!
}

type KafkaLogDir {
"""
Stability: Short-term
"""
	nodeID: Int!
"""
Stability: Short-term
"""
	path: String!
"""
Stability: Short-term
"""
	error: String
"""
Stability: Short-term
"""
	topicPartitions: [KafkaNodeTopicPartitionLogDescription!]!
}

type KafkaNode {
"""
Stability: Short-term
"""
	id: Int!
"""
Stability: Short-term
"""
	host: String
"""
Stability: Short-term
"""
	port: Int!
"""
Stability: Short-term
"""
	rack: String
}

type KafkaNodeTopicPartitionLogDescription {
"""
Stability: Short-term
"""
	topicPartition: KafkaTopicPartition!
"""
Stability: Short-term
"""
	offset: Long!
"""
Stability: Short-term
"""
	size: Long!
"""
Stability: Short-term
"""
	isFuture: Boolean!
}

type KafkaTopicConfig {
"""
Stability: Short-term
"""
	key: String!
"""
Stability: Short-term
"""
	value: String!
}

type KafkaTopicConfigs {
"""
Stability: Short-term
"""
	configs: [KafkaTopicConfig!]!
"""
Stability: Short-term
"""
	defaultConfigs: [KafkaTopicConfig!]!
}

type KafkaTopicDescription {
"""
Stability: Short-term
"""
	name: String!
"""
Stability: Short-term
"""
	config: KafkaTopicConfigs!
"""
Stability: Short-term
"""
	partitions: [KafkaTopicPartitionDescription!]!
}

"""
Kafka Topic Partition
"""
type KafkaTopicPartition {
"""
Stability: Short-term
"""
	topic: String!
"""
Stability: Short-term
"""
	partition: Int!
}

type KafkaTopicPartitionDescription {
"""
Stability: Short-term
"""
	partition: Int!
"""
Stability: Short-term
"""
	leader: Int!
"""
Stability: Short-term
"""
	replicas: [Int!]!
"""
Stability: Short-term
"""
	inSyncReplicas: [Int!]!
}

"""
The kind of the external function
"""
enum KindEnum {
	Source
	General
	Enrichment
}

"""
Defines how the external function is executed.
"""
type KindOutput {
"""
The name of the kind of external function.
Stability: Preview
"""
	name: KindEnum!
"""
The parameters that specify the key fields. Use for the 'Enrichment' functions.
Stability: Preview
"""
	parametersDefiningKeyFields: [String!]
"""
The names of the keys when they're returned from the external function. Use for the 'Enrichment' functions.
Stability: Preview
"""
	fixedKeyFields: [String!]
}

type LanguageVersion {
"""
If non-null, this is a version known by the current version of LogScale.
Stability: Long-term
"""
	name: LanguageVersionEnum
"""
If non-null, this is a version stored by a future LogScale version.
Stability: Long-term
"""
	futureName: String
"""
The language version.
Stability: Long-term
"""
	version: LanguageVersionOutputType!
"""
If false, this version isn't recognized by the current version of LogScale.
It must have been stored by a future LogScale version.
This can happen if LogScale was upgraded, and subsequently downgraded (rolled back).
Stability: Long-term
"""
	isKnown: Boolean!
}

"""
The version of the LogScale query language to use.
"""
enum LanguageVersionEnum {
	legacy
	xdr1
	xdrdetects1
	filteralert
	federated1
}

"""
A specific language version.
"""
input LanguageVersionInputType {
"""
A specific language version.
"""
	name: String!
}

"""
A specific language version.
"""
type LanguageVersionOutputType {
"""
The name of the language version. The name is case insensitive.
Stability: Long-term
"""
	name: String!
}

"""
Represents information about the LogScale instance.
"""
interface License {
"""
Represents information about the LogScale instance.
"""
	expiresAt: DateTime!
"""
Represents information about the LogScale instance.
"""
	issuedAt: DateTime!
}

"""
A Limit added to the organization.
"""
type Limit {
"""
The limit name
Stability: Long-term
"""
	limitName: String!
"""
If the limit allows logging in
Stability: Long-term
"""
	allowLogin: Boolean!
"""
The daily ingest allowed for the limit
Stability: Long-term
"""
	dailyIngest: Long!
"""
The retention in days allowed for the limit
Stability: Long-term
"""
	retention: Int!
"""
If the limit allows self service
Stability: Long-term
"""
	allowSelfService: Boolean!
"""
The deleted date for the limit
Stability: Long-term
"""
	deletedDate: Long
}

"""
A Limit added to the organization.
"""
type LimitV2 {
"""
The id
Stability: Long-term
"""
	id: String!
"""
The limit name
Stability: Long-term
"""
	limitName: String!
"""
The display name of the limit
Stability: Long-term
"""
	displayName: String!
"""
If the limit allows logging in
Stability: Long-term
"""
	allowLogin: Boolean!
"""
The daily ingest allowed for the limit
Stability: Long-term
"""
	dailyIngest: contractual!
"""
The amount of storage allowed for the limit
Stability: Long-term
"""
	storageLimit: contractual!
"""
The data scanned measurement allowed for the limit
Stability: Long-term
"""
	dataScannedLimit: contractual!
"""
The usage measurement type used for the limit
Stability: Long-term
"""
	measurementPoint: Organizations__MeasurementType!
"""
The user seats allowed for the limit
Stability: Long-term
"""
	userLimit: contractual!
"""
The number of repositories allowed for the limit
Stability: Long-term
"""
	repoLimit: Int
"""
The retention in days for the limit, that's the contracted value
Stability: Long-term
"""
	retention: Int!
"""
The max retention in days allowed for the limit, this can be greater than or equal to retention
Stability: Long-term
"""
	maxRetention: Int!
"""
If the limit allows self service
Stability: Long-term
"""
	allowSelfService: Boolean!
"""
The deleted date for the limit
Stability: Long-term
"""
	deletedDate: Long
"""
The expiration date for the limit
Stability: Long-term
"""
	expirationDate: Long
"""
If the limit is a trial
Stability: Long-term
"""
	trial: Boolean!
"""
If the customer is allowed flight control
Stability: Long-term
"""
	allowFlightControl: Boolean!
"""
Data type for the limit, all repositories linked to the limit will get this datatype logged in usage
Stability: Long-term
"""
	dataType: String!
"""
Repositories attached to the limit
Stability: Long-term
"""
	repositories: [Repository!]!
}

"""
All data related to a scheduled report accessible with a readonly scheduled report access token
"""
type LimitedScheduledReport {
"""
Id of the scheduled report.
Stability: Long-term
"""
	id: String!
"""
Name of the scheduled report.
Stability: Long-term
"""
	name: String!
"""
Description of the scheduled report.
Stability: Long-term
"""
	description: String!
"""
Name of the dashboard referenced by the report.
Stability: Long-term
"""
	dashboardName: String!
"""
Display name of the dashboard referenced by the report.
Stability: Long-term
"""
	dashboardDisplayName: String!
"""
Shared time interval of the dashboard referenced by the report.
Stability: Long-term
"""
	dashboardSharedTimeInterval: SharedDashboardTimeInterval
"""
Widgets of the dashboard referenced by the report.
Stability: Long-term
"""
	dashboardWidgets: [Widget!]!
"""
Sections of the dashboard referenced by the report.
Stability: Long-term
"""
	dashboardSections: [Section!]!
"""
Series configurations of the dashboard referenced by the report.
Stability: Long-term
"""
	dashboardSeries: [SeriesConfig!]!
"""
The name of the repository or view queries are executed against.
Stability: Long-term
"""
	repoOrViewName: RepoOrViewName!
"""
Layout of the scheduled report.
Stability: Long-term
"""
	layout: ScheduledReportLayout!
"""
Timezone of the schedule. Examples include UTC, Europe/Copenhagen.
Stability: Long-term
"""
	timeZone: String!
"""
List of parameter value configurations.
Stability: Long-term
"""
	parameters: [ParameterValue!]!
"""
The resource identifier for this scheduled report.
Stability: Short-term
"""
	resource: String!
}

"""
The status of a local cluster connection.
"""
type LocalClusterConnectionStatus implements ClusterConnectionStatus{
"""
Name of the local view
Stability: Short-term
"""
	viewName: String
"""
Id of the connection
Stability: Short-term
"""
	id: String
"""
Whether the connection is valid
Stability: Short-term
"""
	isValid: Boolean!
"""
Errors if the connection is invalid
Stability: Short-term
"""
	errorMessages: [ConnectionAspectErrorType!]!
}

"""
A fleet search result entry
"""
type LogCollector {
"""
If the collector is enrolled this is its id
Stability: Short-term
"""
	id: String
"""
The hostname
Stability: Short-term
"""
	hostname: String!
"""
The host system
Stability: Short-term
"""
	system: String!
"""
Version
Stability: Short-term
"""
	version: String!
"""
Last activity recorded
Stability: Short-term
"""
	lastActivity: String!
"""
Ingest last 24h.
Stability: Short-term
"""
	ingestLast24H: Long!
"""
Ip address
Stability: Short-term
"""
	ipAddress: String
"""

Stability: Short-term
"""
	logSources: [LogCollectorLogSource!]!
"""
Log collector machineId
Stability: Short-term
"""
	machineId: String!
"""
contains the name of any manually assigned config
Stability: Short-term
"""
	configName: String
"""
contains the id of any manually assigned config
Stability: Short-term
"""
	configId: String
"""
Stability: Short-term
"""
	configurations: [LogCollectorConfigInfo!]!
"""
Stability: Short-term
"""
	errors: [String!]!
"""
Stability: Short-term
"""
	cfgTestId: String
"""
Stability: Short-term
"""
	cpuAverage5Min: Float
"""
Stability: Short-term
"""
	memoryMax5Min: Long
"""
Stability: Short-term
"""
	diskMax5Min: Float
"""
Stability: Short-term
"""
	change: Changes
"""
Stability: Short-term
"""
	groups: [LogCollectorGroup!]!
"""
Stability: Short-term
"""
	wantedVersion: String
"""
Stability: Short-term
"""
	debugLogging: LogCollectorDebugLogging
"""
Stability: Short-term
"""
	timeOfUpdate: DateTime
"""
Stability: Short-term
"""
	usesRemoteUpdate: Boolean!
"""
Stability: Short-term
"""
	ephemeralTimeout: Int
"""
Stability: Short-term
"""
	status: LogCollectorStatusType
"""
Stability: Short-term
"""
	labels: [LogCollectorLabel!]!
}

type LogCollectorConfigInfo {
"""
Stability: Short-term
"""
	id: String!
"""
Stability: Short-term
"""
	name: String!
"""
Stability: Short-term
"""
	group: LogCollectorGroup
"""
Stability: Short-term
"""
	assignment: LogCollectorConfigurationAssignmentType!
}

"""
A configuration file for a log collector
"""
type LogCollectorConfiguration {
"""

Stability: Short-term
"""
	id: String!
"""

Stability: Short-term
"""
	name: String!
"""

Stability: Short-term
"""
	yaml: String
"""

Stability: Short-term
"""
	draft: String
"""

Stability: Short-term
"""
	version: Int!
"""

Stability: Short-term
"""
	yamlCharactersCount: Int!
"""
Stability: Short-term
"""
	modifiedAt: DateTime!
"""
Stability: Short-term
"""
	draftModifiedAt: DateTime
"""
Stability: Short-term
"""
	modifiedBy: String!
"""
Stability: Short-term
"""
	instances: Int!
"""
Stability: Short-term
"""
	description: String
"""
Stability: Short-term
"""
	isTestRunning: Boolean!
}

enum LogCollectorConfigurationAssignmentType {
	Group
	Manual
	Test
}

type LogCollectorConfigurationProblemAtPath {
"""
Stability: Short-term
"""
	summary: String!
"""
Stability: Short-term
"""
	details: String
"""
Stability: Short-term
"""
	path: String!
"""
Stability: Short-term
"""
	number: Int!
}

union LogCollectorDebugLogging =LogCollectorDebugLoggingStatic

type LogCollectorDebugLoggingStatic {
"""
Stability: Short-term
"""
	url: String
"""
Stability: Short-term
"""
	token: String!
"""
Stability: Short-term
"""
	level: String!
"""
Stability: Short-term
"""
	repository: String
}

"""
Details about a Log Collector
"""
type LogCollectorDetails {
"""
If the collector is enrolled this is its id
Stability: Short-term
"""
	id: String
"""
The hostname
Stability: Short-term
"""
	hostname: String!
"""
The host system
Stability: Short-term
"""
	system: String!
"""
Version
Stability: Short-term
"""
	version: String!
"""
Last activity recorded
Stability: Short-term
"""
	lastActivity: String!
"""
Ip address
Stability: Short-term
"""
	ipAddress: String
"""

Stability: Short-term
"""
	logSources: [LogCollectorLogSource!]!
"""
Log collector machineId
Stability: Short-term
"""
	machineId: String!
"""
Stability: Short-term
"""
	configurations: [LogCollectorConfigInfo!]!
"""
Stability: Short-term
"""
	errors: [String!]!
"""
Stability: Short-term
"""
	cpuAverage5Min: Float
"""
Stability: Short-term
"""
	memoryMax5Min: Long
"""
Stability: Short-term
"""
	diskMax5Min: Float
"""
Stability: Short-term
"""
	ephemeralTimeout: Int
"""
Stability: Short-term
"""
	status: LogCollectorStatusType
}

type LogCollectorGroup {
"""
Stability: Short-term
"""
	id: String!
"""
Stability: Short-term
"""
	name: String!
"""
Stability: Short-term
"""
	filter: String
"""
Stability: Short-term
"""
	configurations: [LogCollectorConfiguration!]!
"""
Stability: Short-term
"""
	collectorCount: Int
"""
Stability: Short-term
"""
	wantedVersion: String
"""
Stability: Short-term
"""
	onlyUsesRemoteUpdates: Boolean!
}

type LogCollectorInstallCommand {
"""
Stability: Short-term
"""
	windowsCommand: String!
"""
Stability: Short-term
"""
	linuxCommand: String!
"""
Stability: Short-term
"""
	macosCommand: String!
}

"""
Provides information about an installer of the LogScale Collector.
"""
type LogCollectorInstaller {
"""
Installer file name
Stability: Short-term
"""
	name: String!
"""
URL to fetch installer from
Stability: Short-term
"""
	url: String!
"""
LogScale Collector version
Stability: Short-term
"""
	version: String!
"""
Installer CPU architecture
Stability: Short-term
"""
	architecture: String!
"""
Installer type (deb, rpm or msi)
Stability: Short-term
"""
	type: String!
"""
Installer file size
Stability: Short-term
"""
	size: Int!
"""
Config file example
Stability: Short-term
"""
	configExample: String
"""
Icon file name
Stability: Short-term
"""
	icon: String
}

type LogCollectorLabel {
"""
Stability: Short-term
"""
	name: String!
"""
Stability: Short-term
"""
	value: String!
}

type LogCollectorLogSource {
"""

Stability: Short-term
"""
	sourceName: String!
"""

Stability: Short-term
"""
	sourceType: String!
"""

Stability: Short-term
"""
	sinkType: String!
"""

Stability: Short-term
"""
	parser: String
"""

Stability: Short-term
"""
	repository: String
}

type LogCollectorMergedConfiguration {
"""
Stability: Short-term
"""
	problems: [LogCollectorConfigurationProblemAtPath!]!
"""
Stability: Short-term
"""
	content: String!
}

enum LogCollectorStatusType {
	Error
	OK
}

type LoginBridge {
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	issuer: String!
"""
Stability: Long-term
"""
	description: String!
"""
Stability: Long-term
"""
	remoteId: String!
"""
Stability: Long-term
"""
	loginUrl: String!
"""
Stability: Long-term
"""
	relayStateUUrl: String!
"""
Stability: Long-term
"""
	samlEntityId: String!
"""
Stability: Long-term
"""
	publicSamlCertificate: String!
"""
Stability: Long-term
"""
	groupAttribute: String!
"""
Stability: Long-term
"""
	organizationIdAttributeName: String!
"""
Stability: Long-term
"""
	organizationNameAttributeName: String
"""
Stability: Long-term
"""
	additionalAttributes: String
"""
Stability: Long-term
"""
	groups: [String!]!
"""
Stability: Long-term
"""
	allowedUsers: [User!]!
"""
Stability: Long-term
"""
	generateUserName: Boolean!
"""
Stability: Long-term
"""
	termsDescription: String!
"""
Stability: Long-term
"""
	termsLink: String!
"""
Stability: Long-term
"""
	showTermsAndConditions: Boolean!
"""
True if any user in this organization has logged in to CrowdStream via LogScale. Requires manage organizations permissions
Stability: Long-term
"""
	anyUserAlreadyLoggedInViaLoginBridge: Boolean!
}

type LoginBridgeRequest {
"""
Stability: Long-term
"""
	samlResponse: String!
"""
Stability: Long-term
"""
	loginUrl: String!
"""
Stability: Long-term
"""
	relayState: String!
}

type LookupFileTemplate {
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	displayName: String!
"""
Stability: Long-term
"""
	content: String!
}

scalar Markdown

"""
A place for LogScale to find packages.
"""
type Marketplace {
"""
Gets all categories in the marketplace.
Stability: Long-term
"""
	categoryGroups: [MarketplaceCategoryGroup!]!
}

"""
A category that can be used to filter search results in the marketplace.
"""
type MarketplaceCategory {
"""
A display string for the category.
Stability: Long-term
"""
	title: String!
"""
The id is used to filter the searches.
Stability: Long-term
"""
	id: String!
}

"""
A grouping of categories that can be used to filter search results in the marketplace.
"""
type MarketplaceCategoryGroup {
"""
A display string for the category group.
Stability: Long-term
"""
	title: String!
"""
The categories that are members of the group.
Stability: Long-term
"""
	categories: [MarketplaceCategory!]!
}

"""
User or token used to modify the asset.
"""
interface ModifiedInfo {
"""
User or token used to modify the asset.
"""
	modifiedAt: Long!
}

type MonthlyIngest {
"""
Stability: Long-term
"""
	monthly: [UsageOnDay!]!
}

"""
Query result for monthly ingest
"""
union MonthlyIngestQueryResult =QueryInProgress | MonthlyIngest

type MonthlyStorage {
"""
Stability: Long-term
"""
	monthly: [StorageOnDay!]!
}

"""
Query result for monthly storage
"""
union MonthlyStorageQueryResult =QueryInProgress | MonthlyStorage

type NeverDashboardUpdateFrequency {
"""
Stability: Long-term
"""
	name: String!
}

"""
Assignable node task.
"""
enum NodeTaskEnum {
	storage
	digest
	query
}

"""
A notification
"""
type Notification {
"""
The unique id for the notification
Stability: Long-term
"""
	id: String!
"""
The title of the notification
Stability: Long-term
"""
	title: String!
"""
The message for the notification
Stability: Long-term
"""
	message: String!
"""
Whether the notification is dismissable
Stability: Long-term
"""
	dismissable: Boolean!
"""
The severity of the notification
Stability: Long-term
"""
	severity: NotificationSeverity!
"""
The type of the notification
Stability: Long-term
"""
	type: NotificationTypes!
"""
Link accompanying the notification
Stability: Long-term
"""
	link: String
"""
Description for the link
Stability: Long-term
"""
	linkDescription: String
}

enum NotificationSeverity {
	Success
	Info
	Warning
	Error
}

enum NotificationTypes {
	Banner
	Announcement
	Bell
}

"""
Paginated response for notifications.
"""
type NotificationsResultSet {
"""
The total number of matching results
Stability: Long-term
"""
	totalResults: Int!
"""
The paginated result set
Stability: Long-term
"""
	results: [Notification!]!
}

type OidcIdentityProvider implements IdentityProviderAuthentication{
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	clientId: String!
"""
Stability: Long-term
"""
	clientSecret: String!
"""
Stability: Long-term
"""
	domains: [String!]!
"""
Stability: Long-term
"""
	issuer: String!
"""
Stability: Long-term
"""
	tokenEndpointAuthMethod: String!
"""
Stability: Long-term
"""
	userClaim: String!
"""
Stability: Long-term
"""
	scopes: [String!]!
"""
Stability: Long-term
"""
	userInfoEndpoint: String
"""
Stability: Long-term
"""
	registrationEndpoint: String
"""
Stability: Long-term
"""
	tokenEndpoint: String
"""
Stability: Long-term
"""
	groupsClaim: String
"""
Stability: Long-term
"""
	jwksEndpoint: String
"""
Stability: Long-term
"""
	authenticationMethod: AuthenticationMethodAuth!
"""
Stability: Long-term
"""
	authorizationEndpoint: String
"""
Stability: Long-term
"""
	debug: Boolean!
"""
Stability: Long-term
"""
	federatedIdp: String
"""
Stability: Long-term
"""
	scopeClaim: String
"""
Stability: Long-term
"""
	defaultIdp: Boolean!
"""
Stability: Long-term
"""
	humioManaged: Boolean!
"""
Stability: Long-term
"""
	lazyCreateUsers: Boolean!
}

type OnlyTotal {
"""
Stability: Short-term
"""
	total: Int!
}

enum OrderBy {
	DESC
	ASC
}

"""
OrderByDirection
"""
enum OrderByDirection {
	DESC
	ASC
}

"""
OrderByUserField
"""
enum OrderByUserField {
	FULLNAME
	USERNAME
	DISPLAYNAME
}

input OrderByUserFieldInput {
	userField: OrderByUserField!
	order: OrderByDirection!
}

type OrgConfig {
"""
Organization ID
Stability: Short-term
"""
	id: String!
"""
Organization name
Stability: Short-term
"""
	name: String!
"""
bucket region
Stability: Short-term
"""
	region: String!
"""

Stability: Short-term
"""
	bucket: String!
"""
bucket prefix
Stability: Short-term
"""
	prefix: String!
}

"""
An Organization
"""
type Organization {
"""
The unique id for the Organization
Stability: Short-term
"""
	id: String!
"""
The CID corresponding to the organization
Stability: Short-term
"""
	cid: String
"""
The name for the Organization
Stability: Short-term
"""
	name: String!
"""
The description for the Organization, can be null
Stability: Short-term
"""
	description: String
"""
Details about the organization
Stability: Short-term
"""
	details: OrganizationDetails!
"""
Stats of the organization
Stability: Short-term
"""
	stats: OrganizationStats!
"""
Organization configurations and settings
Stability: Short-term
"""
	configs: OrganizationConfigs!
"""
Search domains in the organization
Stability: Short-term
"""
	searchDomains: [SearchDomain!]!
"""
IP filter for readonly dashboard links
Stability: Short-term
"""
	readonlyDashboardIPFilter: String
"""
Created date
Stability: Short-term
"""
	createdAt: Long
"""
If the organization has been marked for deletion, this indicates the day it was deleted.
Stability: Short-term
"""
	deletedAt: Long
"""
Trial started at
Stability: Short-term
"""
	trialStartedAt: Long
"""
Public url for the Organization
Stability: Short-term
"""
	publicUrl: String
"""
Ingest url for the Organization
Stability: Short-term
"""
	ingestUrl: String
"""
Check if the current user has a given permission in the organization.
Stability: Short-term
"""
	isActionAllowed(
"""
The action to check if a user is allowed to perform on an organization.
"""
		action: OrganizationAction!
	): Boolean!
"""
Limits assigned to the organization
Stability: Short-term
"""
	limits: [Limit!]!
"""
Limits assigned to the organizations
Stability: Short-term
"""
	limitsV2: [LimitV2!]!
"""
Stability: Short-term
"""
	externalPermissions: Boolean!
"""
Stability: Short-term
"""
	externalGroupSynchronization: Boolean!
"""
The default cache policy of this organization.
Stability: Preview
"""
	defaultCachePolicy: CachePolicy
}

"""
Actions a user may perform on an organization.
"""
enum OrganizationAction {
	AdministerPermissions
	CreateRepository
	CreateView
	ChangeReadOnlyDashboardFilter
	CreateUser
	ConfigureIdp
	ChangeSessions
	ChangeOrganizationSettings
	CreateTrialRepository
	UseCustomEmailTemplate
	ViewLoginBridge
	ViewUsage
	ConfigureIPFilters
	DeleteRepositoryOrView
	ChangeFleetManagement
	ViewFleetManagement
	UseRemoteUpdates
	UseFleetRemoteDebug
	UseFleetEphemeralHosts
	UseFleetLabels
	ChangeTriggersToRunAsOtherUsers
	ChangeEventForwarders
	ViewRunningQueries
	BlockQueries
	AdministerTokens
	ManageUsers
	ViewIpFilters
	DownloadMacOsInstaller
	ChangeSecurityPolicies
	QueryAssistant
	OrganizationQueryOwnershipEnabled
	UsePersonalToken
	ChangeExternalFunctions
	AddFederatedView
	ViewFalconDataConnectorUrl
	ManageSchemas
"""
Stability: Preview
"""
	ExternalFunctionsEnabled
	ViewOrganizationSettings
	ViewSecurityPolicies
	ViewSessionSettings
	ViewUsers
	ViewPermissions
	ViewIdp
	ViewOrganizationTokens
	ViewDeletedRepositoriesOrViews
	ViewEventForwarders
	ViewSchemas
	UseFleetOverviewDashboards
	UseFleetTablePageUI
"""
Stability: Preview
"""
	GranularPermissionsUI
}

"""
Configurations for the organization
"""
type OrganizationConfigs {
"""
Session settings
Stability: Short-term
"""
	session: OrganizationSession!
"""
Social login settings
Stability: Short-term
"""
	socialLogin: [SocialLoginSettings!]!
"""
Subdomain configuration for the organization
Stability: Short-term
"""
	subdomains: SubdomainConfig
"""
Bucket storage configuration for the organization
Stability: Short-term
"""
	bucketStorage: BucketStorageConfig
"""
Security policies for actions in the organization
Stability: Short-term
"""
	actions: ActionSecurityPolicies
"""
Security policies for tokens in the organization
Stability: Short-term
"""
	tokens: TokenSecurityPolicies
"""
Security policies for shared dashboard tokens in the organization
Stability: Short-term
"""
	sharedDashboards: SharedDashboardsSecurityPolicies
"""
Login bridge
Stability: Short-term
"""
	loginBridge: LoginBridge
"""
Whether the organization is currently blocking ingest
Stability: Short-term
"""
	blockingIngest: Boolean!
"""
Default timezone to use for users without a default timezone set.
Stability: Short-term
"""
	defaultTimeZone: String
}

"""
Details about the organization
"""
type OrganizationDetails {
"""
Notes of the organization (root only)
Stability: Short-term
"""
	notes: String!
"""
Industry of the organization
Stability: Short-term
"""
	industry: String!
"""
Industry of the organization
Stability: Short-term
"""
	useCases: [Organizations__UseCases!]!
"""
Subscription of the organization
Stability: Short-term
"""
	subscription: Organizations__Subscription!
"""
Trial end date of the organization if any
Stability: Short-term
"""
	trialEndDate: Long
"""
Limits of the organization
Stability: Short-term
"""
	limits: OrganizationLimits!
"""
The country of the organization
Stability: Short-term
"""
	country: String!
"""
Determines whether an organization has access to IOCs (indicators of compromise)
Stability: Short-term
"""
	iocAccess: Boolean
}

"""
Limits of the organization
"""
type OrganizationLimits {
"""
Daily ingest allowed
Stability: Short-term
"""
	dailyIngest: Long!
"""
Days of retention allowed
Stability: Short-term
"""
	retention: Int!
"""
Max amount of users allowed
Stability: Short-term
"""
	users: Int!
"""
License expiration date
Stability: Short-term
"""
	licenseExpirationDate: Long
"""
Whether self service is enabled for the Organization, allowing features like creating repositories and setting retention.
Stability: Short-term
"""
	allowSelfService: Boolean!
"""
Last contract synchronization date
Stability: Short-term
"""
	lastSyncDate: Long
"""
Whether the contract is missing for the organization. None for non accounts, true if account and has no contract and false if contract was found and used.
Stability: Short-term
"""
	missingContract: Boolean
"""
Contract version
Stability: Short-term
"""
	contractVersion: Organizations__ContractVersion!
}

"""
Organization management permissions
"""
enum OrganizationManagementPermission {
	ManageSpecificOrganizations
}

enum OrganizationMode {
	Single
	Multi
	MultiV2
}

"""
Organization permissions
"""
enum OrganizationPermission {
	ExportOrganization
	ChangeOrganizationPermissions
	ChangeIdentityProviders
	CreateRepository
	ManageUsers
	ViewUsage
	ChangeOrganizationSettings
	ChangeIPFilters
	ChangeSessions
	ChangeAllViewOrRepositoryPermissions
	IngestAcrossAllReposWithinOrganization
	DeleteAllRepositories
	DeleteAllViews
	ViewAllInternalNotifications
	ChangeFleetManagement
	ViewFleetManagement
	ChangeTriggersToRunAsOtherUsers
	MonitorQueries
	BlockQueries
	ChangeSecurityPolicies
	ChangeExternalFunctions
	ChangeFieldAliases
	ManageViewConnections
}

"""
An organization search result entry
"""
type OrganizationSearchResultEntry {
"""
The unique id for the Organization
Stability: Short-term
"""
	organizationId: String!
"""
The name of the Organization
Stability: Short-term
"""
	organizationName: String!
"""
The string matching the search
Stability: Short-term
"""
	searchMatch: String!
"""
The id of the entity matched
Stability: Short-term
"""
	entityId: String!
"""
The subscription type of the organization
Stability: Short-term
"""
	subscription: Organizations__Subscription!
"""
The type of the search result match
Stability: Short-term
"""
	type: Organizations__SearchEntryType!
"""
The amount of users in the organization
Stability: Short-term
"""
	userCount: Int!
"""
The amount of repositories and views in the organization
Stability: Short-term
"""
	viewCount: Int!
"""
The total data volume in bytes that the organization is currently using
Stability: Short-term
"""
	byteVolume: Long!
"""
The end date of the trial if applicable
Stability: Short-term
"""
	trialEndDate: Long
"""
The time when the organization was created
Stability: Short-term
"""
	createdAt: Long!
"""
If the organization has been marked for deletion, this indicates the time when the organization was marked.
Stability: Short-term
"""
	deletedAt: Long
"""
The relevant organization for the result
Stability: Short-term
"""
	organization: Organization!
}

"""
An organization search result set
"""
type OrganizationSearchResultSet {
"""
The total number of matching results
Stability: Short-term
"""
	totalResults: Int!
"""
The paginated result set
Stability: Short-term
"""
	results: [OrganizationSearchResultEntry!]!
}

"""
Session configuration for the organization
"""
type OrganizationSession {
"""
The maximum time in ms the user is allowed to be inactive
Stability: Long-term
"""
	maxInactivityPeriod: Long!
"""
The time in ms after which the user is forced to reauthenticate
Stability: Long-term
"""
	forceReauthenticationAfter: Long!
}

"""
Stats of the organization
"""
type OrganizationStats {
"""
Total compressed data volume used by the organization
Stability: Short-term
"""
	dataVolumeCompressed: Long!
"""
Total data volume used by the organization
Stability: Short-term
"""
	dataVolume: Long!
"""
The total daily ingest of the organization
Stability: Short-term
"""
	dailyIngest: Long!
"""
The number of users in the organization
Stability: Short-term
"""
	userCount: Int!
}

enum OrganizationsLinks__SortBy {
	Cid
	OrgId
	Name
}

enum Organizations__ContractVersion {
	Unknown
	Version1
	Version2
}

enum Organizations__MeasurementType {
	SegmentWriteSize
	ProcessedEventsSize
}

enum Organizations__SearchEntryType {
	Organization
	Repository
	View
	User
}

enum Organizations__SortBy {
	UserCount
	Name
	Volume
	ViewCount
	Subscription
	CreatedAt
}

enum Organizations__Subscription {
	Paying
	Trial
	PreTrial
	PostTrial
	UnlimitedPoC
	ClusterOwner
	Complementary
	OnPremMonitor
	MissingTOSAcceptance
	CommunityLocked
	CommunityUnlocked
	Partner
	Internal
	Churned
	Unknown
}

enum Organizations__UseCases {
	Unknown
	IoT
	Security
	Operations
	ApplicationDevelopment
}

"""
A Humio package
"""
type Package2 {
"""
Stability: Long-term
"""
	id: VersionedPackageSpecifier!
"""
Stability: Long-term
"""
	scope: PackageScope!
"""
Stability: Long-term
"""
	name: PackageName!
"""
Stability: Long-term
"""
	version: PackageVersion!
"""
Stability: Long-term
"""
	description: String
"""
Stability: Long-term
"""
	iconUrl: UrlOrData
"""
Stability: Long-term
"""
	author: PackageAuthor!
"""
Stability: Long-term
"""
	contributors: [PackageAuthor!]!
"""
Stability: Long-term
"""
	licenseUrl: URL!
"""
Stability: Long-term
"""
	minHumioVersion: SemanticVersion!
"""
Stability: Long-term
"""
	readme: Markdown
"""
Stability: Long-term
"""
	dashboardTemplates: [DashboardTemplate!]!
"""
Stability: Long-term
"""
	savedQueryTemplates: [SavedQueryTemplate!]!
"""
Stability: Long-term
"""
	parserTemplates: [ParserTemplate!]!
"""
Stability: Long-term
"""
	alertTemplates: [AlertTemplate!]!
"""
Stability: Long-term
"""
	filterAlertTemplates: [FilterAlertTemplate!]!
"""
Stability: Long-term
"""
	aggregateAlertTemplates: [AggregateAlertTemplate!]!
"""
Stability: Long-term
"""
	lookupFileTemplates: [LookupFileTemplate!]!
"""
Stability: Long-term
"""
	actionTemplates: [ActionTemplate!]!
"""
Stability: Long-term
"""
	scheduledSearchTemplates: [ScheduledSearchTemplate!]!
"""
Stability: Long-term
"""
	viewInteractionTemplates: [ViewInteractionTemplate!]!
"""
Stability: Long-term
"""
	type: PackageType!
"""
The available versions of the package on the marketplace.
Stability: Long-term
"""
	versionsOnMarketplace: [RegistryPackageVersionInfo!]!
}

"""
The author of a package.
"""
type PackageAuthor {
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	email: Email
}

"""
A package installation.
"""
type PackageInstallation {
"""
Stability: Long-term
"""
	id: VersionedPackageSpecifier!
"""
Stability: Long-term
"""
	installedBy: UserAndTimestamp!
"""
Stability: Long-term
"""
	updatedBy: UserAndTimestamp!
"""
Stability: Long-term
"""
	source: PackageInstallationSourceType!
"""
Finds updates on a package. It also looks for updates on packages that were installed manually, in case e.g. test versions of a package have been distributed prior to the full release.
Stability: Long-term
"""
	availableUpdate: PackageVersion
"""
Stability: Long-term
"""
	package: Package2!
}

enum PackageInstallationSourceType {
"""
Stability: Long-term
"""
	HumioHub
"""
Stability: Long-term
"""
	ZipFile
}

scalar PackageName

"""
Information about a package that matches a search in a package registry.
"""
type PackageRegistrySearchResultItem {
"""
Stability: Long-term
"""
	id: VersionedPackageSpecifier!
"""
Stability: Long-term
"""
	description: String
"""
Stability: Long-term
"""
	iconUrl: UrlOrData
"""
Stability: Long-term
"""
	type: PackageType!
"""
Stability: Long-term
"""
	installedVersion: VersionedPackageSpecifier
"""
True if the current version of LogScale supports the latest version of this package.
Stability: Long-term
"""
	isLatestVersionSupported: Boolean!
"""
The version of LogScale required to run the latest version of this package.
Stability: Long-term
"""
	minHumioVersionOfLatest: SemanticVersion!
}

scalar PackageScope

scalar PackageTag

enum PackageType {
"""
Stability: Long-term
"""
	application
"""
Stability: Long-term
"""
	library
}

scalar PackageVersion

type PageType {
"""
Stability: Long-term
"""
	number: Int!
"""
Stability: Long-term
"""
	totalNumberOfRows: Int!
"""
Stability: Long-term
"""
	total: Int!
}

"""
The specification of a parameter
"""
type ParameterSpecificationOutput {
"""
The name of the parameter
Stability: Preview
"""
	name: String!
"""
The type of the parameter
Stability: Preview
"""
	parameterType: ParameterTypeEnum!
"""
Restricts the smallest allowed value for parameters of type Long
Stability: Preview
"""
	minLong: Long
"""
Restricts the largest allowed value for parameters of type Long
Stability: Preview
"""
	maxLong: Long
"""
 Restricts the smallest allowed value for parameters of type Double
Stability: Preview
"""
	minDouble: Float
"""
Restricts the largest allowed value for parameters of type Double
Stability: Preview
"""
	maxDouble: Float
"""
Restricts the minimum number of allowed elements for parameters of type Array
Stability: Preview
"""
	minLength: Int
"""
Defines a default value of the parameter
Stability: Preview
"""
	defaultValue: [String!]
}

"""
The parameter types
"""
enum ParameterTypeEnum {
	Field
	String
	Long
	Double
	ArrayField
	ArrayString
	ArrayLong
	ArrayDouble
}

"""
Parameter value configuration.
"""
type ParameterValue {
"""
Id of the parameter.
Stability: Long-term
"""
	id: String!
"""
Value of the parameter.
Stability: Long-term
"""
	value: String!
}

"""
A configured parser for incoming data.
"""
type Parser {
"""
The id of the parser.
Stability: Long-term
"""
	id: String!
"""
Name of the parser.
Stability: Long-term
"""
	name: String!
"""
The full name of the parser including package information if part of an application.
Stability: Long-term
"""
	displayName: String!
"""
The description of the parser.
Stability: Long-term
"""
	description: String
	assetType: AssetType!
"""
True if the parser is one of LogScale's built-in parsers.
Stability: Long-term
"""
	isBuiltIn: Boolean!
"""
The parser script that is executed for every incoming event.
Stability: Long-term
"""
	script: String!
"""
The source code of the parser.
"""
	sourceCode: String!
"""
Stability: Long-term
"""
	languageVersion: LanguageVersion!
"""
Fields that are used as tags.
Stability: Long-term
"""
	fieldsToTag: [String!]!
"""
The fields to use as tags.
"""
	tagFields: [String!]!
"""
A list of fields that will be removed from the event before it's parsed. These fields will not be included when calculating usage.
Stability: Long-term
"""
	fieldsToBeRemovedBeforeParsing: [String!]!
"""
A template that can be used to recreate the parser.
Stability: Long-term
"""
	yamlTemplate: YAML!
"""
Saved test data (e.g. log lines) that you can use to test the parser.
"""
	testData: [String!]!
"""
Test cases that can be used to help verify that the parser works as expected.
Stability: Long-term
"""
	testCases: [ParserTestCase!]!
"""
Stability: Long-term
"""
	packageId: VersionedPackageSpecifier
"""
Stability: Long-term
"""
	package: PackageInstallation
}

type ParserTemplate {
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	displayName: String!
"""
Stability: Long-term
"""
	yamlTemplate: String!
}

"""
A test case for a parser.
"""
type ParserTestCase {
"""
The event to parse and test on.
Stability: Long-term
"""
	event: ParserTestEvent!
"""
Assertions on the shape of the test case output events. The list consists of key-value pairs to be treated as a map-construct, where the index of the output event is the key, and the assertions are the value.
Stability: Long-term
"""
	outputAssertions: [ParserTestCaseAssertionsForOutput!]!
}

"""
Assertions on the shape of the given output event. It is a key-value pair, where the index of the output event is the key, and the assertions are the value.
"""
type ParserTestCaseAssertionsForOutput {
"""
The index of the output event which the assertions should apply to.
Stability: Long-term
"""
	outputEventIndex: Int!
"""
Assertions on the shape of a given test case output event.
Stability: Long-term
"""
	assertions: ParserTestCaseOutputAssertions!
}

"""
Assertions on the shape of a given test case output event.
"""
type ParserTestCaseOutputAssertions {
"""
Names of fields which should not be present on the output event.
Stability: Long-term
"""
	fieldsNotPresent: [String!]!
"""
Names of fields and their expected value on the output event. These are key-value pairs, and should be treated as a map-construct.
Stability: Long-term
"""
	fieldsHaveValues: [FieldHasValue!]!
}

"""
An event for a parser to parse during testing.
"""
type ParserTestEvent {
"""
The contents of the `@rawstring` field when the event begins parsing.
Stability: Long-term
"""
	rawString: String!
}

"""
A pending user. I.e. a user that was invited to join an organization.
"""
type PendingUser {
"""
The id or token for the pending user
Stability: Long-term
"""
	id: String!
"""
Whether IDP is enabled for the organization
Stability: Long-term
"""
	idp: Boolean!
"""
The time the pending user was created
Stability: Long-term
"""
	createdAt: Long!
"""
The email of the user that invited the pending user
Stability: Long-term
"""
	invitedByEmail: String!
"""
The name of the user that invited the pending user
Stability: Long-term
"""
	invitedByName: String!
"""
The name of the organization the the pending user is about to join
Stability: Long-term
"""
	orgName: String!
"""
The email of the pending user
Stability: Long-term
"""
	newUserEmail: String!
"""
The current organization state for the user, if any.
Stability: Long-term
"""
	pendingUserState: PendingUserState!
}

"""
The current organization state for the user.
"""
enum PendingUserState {
	NoOrganization
	SingleUserOrganization
	MultiUserOrganizationOnlyOwnerConflict
	MultiUserOrganizationNoConflict
	UserExistsNoOrganization
	UserExistsDeletedOrganization
}

"""
Permissions on a view
"""
enum Permission {
	ChangeUserAccess
"""
Permission to administer alerts, scheduled searches and actions
"""
	ChangeTriggersAndActions
"""
Permission to administer alerts and scheduled searches
"""
	ChangeTriggers
	CreateTriggers
	UpdateTriggers
	DeleteTriggers
"""
Permission to administer actions
"""
	ChangeActions
	CreateActions
	UpdateActions
	DeleteActions
	ChangeDashboards
	CreateDashboards
	UpdateDashboards
	DeleteDashboards
	ChangeDashboardReadonlyToken
	ChangeFiles
	CreateFiles
	UpdateFiles
	DeleteFiles
	ChangeInteractions
	ChangeParsers
	ChangeSavedQueries
	CreateSavedQueries
	UpdateSavedQueries
	DeleteSavedQueries
	ConnectView
	ChangeDataDeletionPermissions
	ChangeRetention
	ChangeDefaultSearchSettings
	ChangeS3ArchivingSettings
	DeleteDataSources
	DeleteRepositoryOrView
	DeleteEvents
	ReadAccess
	ChangeIngestTokens
	ChangePackages
	ChangeViewOrRepositoryDescription
	ChangeConnections
"""
Permission to administer event forwarding rules
"""
	EventForwarding
	QueryDashboard
	ChangeViewOrRepositoryPermissions
	ChangeFdrFeeds
	OrganizationOwnedQueries
	ReadExternalFunctions
	ChangeIngestFeeds
	ChangeScheduledReports
	CreateScheduledReports
	UpdateScheduledReports
	DeleteScheduledReports
}

"""
The type of permission
"""
enum PermissionType {
	AssetPermission
	ViewPermission
	OrganizationPermission
	OrganizationManagementPermission
	SystemPermission
}

"""
Personal token for a user. The token will inherit the same permissions as the user.
"""
type PersonalUserToken implements Token{
"""
The id of the token.
Stability: Long-term
"""
	id: String!
"""
The name of the token.
Stability: Long-term
"""
	name: String!
"""
The time at which the token expires.
Stability: Long-term
"""
	expireAt: Long
"""
The ip filter on the token.
Stability: Long-term
"""
	ipFilter: String
"""
The ip filter on the token.
Stability: Long-term
"""
	ipFilterV2: IPFilter
"""
The date the token was created.
Stability: Long-term
"""
	createdAt: Long!
}

type Query {
"""
All actions, labels and packages used in alerts.
Stability: Preview
"""
	alertFieldValues(
"""
Arguments for alert field values query.
"""
		input: AlertFieldValuesInput!
	): AlertFieldValues!
"""
Analyze a query for certain properties.
Stability: Short-term
"""
	analyzeQuery(
		input: AnalyzeQueryArguments!
	): AnalyzeQueryInfo!
"""
Returns information about the IP ASN database used by the LogScale instance.
Stability: Long-term
"""
	asnDatabaseInfo: IpDatabaseInfo!
"""
This fetches the list of blocked query patterns.
Stability: Long-term
"""
	blockedQueries(
"""
Whether to return all blocked queries within the cluster. Requires the ManageCluster permission.
"""
		clusterWide: Boolean
"""
Whether to include blocked queries for organizations that have been deleted.
"""
		includeBlockedQueriesForDeletedOrganizations: Boolean
	): [BlockedQuery!]!
"""
This is used to check if a given domain is valid.
Stability: Short-term
"""
	checkDomain(
		domain: String!
	): Boolean!
"""
Validate a local cluster connection.
Stability: Short-term
"""
	checkLocalClusterConnection(
"""
Data for checking a local cluster connection
"""
		input: CheckLocalClusterConnectionInput!
	): LocalClusterConnectionStatus!
"""
Validate a remote cluster connection.
Stability: Short-term
"""
	checkRemoteClusterConnection(
"""
Data for checking a remote cluster connection
"""
		input: CheckRemoteClusterConnectionInput!
	): RemoteClusterConnectionStatus!
"""
Get linked child organizations
Stability: Preview
"""
	childOrganizations(
		search: String
		skip: Int!
		limit: Int!
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
		sortBy: OrganizationsLinks__SortBy
	): ChildOrganizationsResultSet!
"""
This is used to retrieve information about a cluster.
Stability: Long-term
"""
	cluster: Cluster!
"""
Return the cluster management settings for this LogScale cluster.
Stability: Short-term
"""
	clusterManagementSettings: ClusterManagementSettings
"""
Concatenate multiple valid queries into a combined query.
Stability: Short-term
"""
	concatenateQueries(
		input: ConcatenateQueriesArguments!
	): QueryConcatenationInfo!
"""
This returns the current authenticated user.
Stability: Long-term
"""
	currentUser: User!
"""
This is used to retrieve a dashboard.
Stability: Long-term
"""
	dashboardsPage(
		search: String
		pageNumber: Int!
		pageSize: Int!
	): DashboardPage!
"""
For internal debugging
Stability: Preview
"""
	debugCache(
		searchKeys: [String!]!
	): String!
"""
This returns the current value for the dynamic configuration.
Stability: Short-term
"""
	dynamicConfig(
		dynamicConfig: DynamicConfig!
	): String!
"""
Returns all dynamic configurations. Requires root access.
Stability: Short-term
"""
	dynamicConfigs: [DynamicConfigKeyValueType!]!
"""
Get next and previous pages when querying assets across LogScale views and repositories. Requires the cursor from the entitiesSearch or entitiesPage response as well as a direction
Stability: Preview
"""
	entitiesPage(
"""
input parameters for the page
"""
		input: EntitiesPageInputType!
	): SearchResult!
"""
Query assets across LogScale views and repositories. Will only return the first page. The response includes a cursor that can be sent to entitiesPage to get next pages with the same parameters
Stability: Preview
"""
	entitiesSearch(
"""
input parameters for the search
"""
		input: EntitySearchInputType!
	): SearchResult!
"""
Get usage information around non-secret environment variables
Stability: Short-term
"""
	environmentVariableUsage: [EnvironmentVariableUsage!]!
"""
This will list all of the event forwarders associated with an organization.
Stability: Long-term
"""
	eventForwarders: [EventForwarder!]!
"""
This is used to determine if a given user has exceeded their query quota.
Stability: Short-term
"""
	exceededQueryQuotas(
"""
Username of the user for which to retrieve exceeded Query Quotas
"""
		username: String!
	): [QueryQuotaExceeded!]!
"""
List feature flags depending on filters and context
Stability: Preview
"""
	featureFlags(
"""
Include experimental features. Enabling experimental features are strongly discouraged and can lead to LogScale ending up in a bad state beyond repair.
"""
		includeExperimentalFeatures: Boolean
"""
Filter defining for which scope feature flags should be returned
"""
		enabledInScopeFilter: EnabledInScope
	): [FeatureFlagV2!]!
"""
This can fetch the OIDC metadata from the discovery (.well-known/openid-configuration) endpoint provided.
Stability: Long-term
"""
	fetchOIDCMetadataFromDiscoveryEndpoint(
"""
The .well-known OIDC endpoint.
"""
		discoveryEndpoint: String!
	): WellKnownEndpointDetails!
"""
This will fetch the SAML metadata from the discovery endpoint provided.
Stability: Long-term
"""
	fetchSamlMetadataFromDiscoveryEndpoint(
"""
The SAML metadata endpoint.
"""
		discoveryEndpoint: String!
	): SamlMetadata!
"""
Retrieve the active schema and its field aliases on the given view.
Stability: Long-term
"""
	fieldAliasSchemaOnView(
		repoOrViewName: String!
	): FieldAliasSchema
"""
Retrieve all schemas for field aliases.
Stability: Long-term
"""
	fieldAliasSchemas: FieldAliasSchemasInfo!
"""
This will find information on the identity provider.
Stability: Long-term
"""
	findIdentityProvider(
		email: String!
	): IdentityProviderAuth!
"""
Stability: Long-term
"""
	fleetInstallationToken(
		id: String!
	): FleetInstallationToken
"""
Stability: Short-term
"""
	fleetInstallationTokens: [FleetInstallationToken!]!
"""
Return the Java Flight Recorder settings for the specified vhost.
Stability: Preview
"""
	flightRecorderSettings(
"""
The vhost to fetch settings for.
"""
		vhost: Int!
	): FlightRecorderSettings
"""
Generate an unsaved aggregate alert from a package alert template.
Stability: Long-term
"""
	generateAggregateAlertFromPackageTemplate(
"""
Data for generating an unsaved aggregate alert object from a library package template
"""
		input: GenerateAggregateAlertFromPackageTemplateInput!
	): UnsavedAggregateAlert!
"""
Generate an unsaved aggregate alert from a yaml template.
Stability: Long-term
"""
	generateAggregateAlertFromTemplate(
"""
Data for generating an unsaved aggregate alert object from a yaml template
"""
		input: GenerateAggregateAlertFromTemplateInput!
	): UnsavedAggregateAlert!
"""
Generate an unsaved alert from a package alert template.
Stability: Long-term
"""
	generateAlertFromPackageTemplate(
"""
Data for generating an unsaved alert object from a library package template
"""
		input: GenerateAlertFromPackageTemplateInput!
	): UnsavedAlert!
"""
Generate an unsaved alert from a yaml template.
Stability: Long-term
"""
	generateAlertFromTemplate(
"""
Data for generating an unsaved alert object from a yaml template
"""
		input: GenerateAlertFromTemplateInput!
	): UnsavedAlert!
"""
Generate an unsaved filter alert from a package alert template.
Stability: Long-term
"""
	generateFilterAlertFromPackageTemplate(
"""
Data for generating an unsaved filter alert object from a library package template
"""
		input: GenerateFilterAlertFromPackageTemplateInput!
	): UnsavedFilterAlert!
"""
Generate an unsaved filter alert from a yaml template.
Stability: Long-term
"""
	generateFilterAlertFromTemplate(
"""
Data for generating an unsaved filter alert object from a yaml template
"""
		input: GenerateFilterAlertFromTemplateInput!
	): UnsavedFilterAlert!
"""
Generate an unsaved parser from a YAML template.
Stability: Long-term
"""
	generateParserFromTemplate(
"""
Data for generating an unsaved parser object from a YAML template
"""
		input: GenerateParserFromTemplateInput!
	): UnsavedParser!
"""
Generate an unsaved scheduled search from a package scheduled search template.
Stability: Long-term
"""
	generateScheduledSearchFromPackageTemplate(
"""
Data for generating an unsaved scheduled search object from a library package template.
"""
		input: GenerateScheduledSearchFromPackageTemplateInput!
	): UnsavedScheduledSearch!
"""
Generate an unsaved scheduled search from a yaml template.
Stability: Long-term
"""
	generateScheduledSearchFromTemplate(
"""
Data for generating an unsaved scheduled search object from a yaml templat.
"""
		input: GenerateScheduledSearchFromTemplateInput!
	): UnsavedScheduledSearch!
"""
Look up an external function specification.
Stability: Preview
"""
	getExternalFunction(
		input: GetExternalFunctionInput!
	): ExternalFunctionSpecificationOutput
"""
This is used to get content of a file.
Stability: Long-term
"""
	getFileContent(
		name: String!
		fileName: String!
		offset: Int
		limit: Int
		filterString: String
	): UploadedFileSnapshot!
"""
Get url endpoint for fleet management
Stability: Short-term
"""
	getFleetManagementUrl: String!
"""
Stability: Short-term
"""
	getLogCollectorDebugLogging: LogCollectorDebugLogging
"""
Stability: Short-term
"""
	getLogCollectorDetails(
		machineId: String!
	): LogCollectorDetails
"""
Stability: Short-term
"""
	getLogCollectorInstanceDebugLogging(
		id: String!
	): LogCollectorDebugLogging
"""
Stability: Short-term
"""
	getLostCollectorDays: Int!
"""
Used to get information on a specified group.
Stability: Long-term
"""
	group(
		groupId: String!
	): Group!
"""
Used to get information on groups by a given display name.
Stability: Long-term
"""
	groupByDisplayName(
		displayName: String!
	): Group!
"""
Search groups and users with permissions on the asset.
Stability: Preview
"""
	groupsAndUsersWithPermissionsOnAsset(
"""
The name of the search domain where the asset belongs.
"""
		searchDomainName: String!
"""
The type of the asset.
"""
		assetType: AssetPermissionsAssetType!
"""
The ID of the asset. For files, use the name of the file.
"""
		assetId: String!
"""
Filter results based on this string
"""
		searchFilter: String
"""
Indicates whether to include only users, only groups, or both.
"""
		groupsOrUsersFilters: [GroupsOrUsersFilter!]
"""
The amount of results to return.
"""
		limit: Int
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
"""
If true the result will also include users and groups that currently doesn't have access to the asset
"""
		includeEmptyPermissionSet: Boolean!
	): UserOrGroupAssetPermissionSearchResultSet!
"""
All defined groups in an organization.
Stability: Long-term
"""
	groupsPage(
		search: String
		pageNumber: Int!
		pageSize: Int!
		typeFilter: [PermissionType!]
	): GroupPage!
"""
This will check whether an organization has an organization root.
Stability: Short-term
"""
	hasOrgRoot(
		orgId: String!
	): Boolean!
"""
This is used to get information on a specific identity provider.
Stability: Long-term
"""
	identityProvider(
		id: String!
	): IdentityProviderAuthentication!
"""
Stability: Long-term
"""
	identityProviders: [IdentityProviderAuthentication!]!
"""
This returns information about the license for the LogScale instance, if any license installed.
Stability: Long-term
"""
	installedLicense: License
"""
Provides details for a specific package installed on a specific view.
Stability: Long-term
"""
	installedPackage(
"""
The id of the package.
"""
		packageId: VersionedPackageSpecifier!
"""
The name of the view the package is installed in.
"""
		viewName: String!
	): PackageInstallation
"""
Used to get information on the IOC database used by the LogScale instance.
Stability: Long-term
"""
	iocDatabaseInfo: CrowdStrikeIocStatus!
"""
This returns information about the IP location database used by the LogScale instance.
Stability: Long-term
"""
	ipDatabaseInfo: IpDatabaseInfo!
"""
Returns a list of IP filters.
Stability: Long-term
"""
	ipFilters: [IPFilter!]!
"""
This will return information about the Kafka cluster.
Stability: Short-term
"""
	kafkaCluster: KafkaClusterDescription!
"""
Used to get language restrictions for language version.
Stability: Preview
"""
	languageRestrictions(
		version: LanguageVersionEnum!
	): QueryLanguageRestriction!
"""
Used to list all notifications currently set in the system. This requires root access.
Stability: Long-term
"""
	listNotifications: [Notification!]!
"""
Stability: Short-term
"""
	logCollectorConfiguration(
		id: String!
	): LogCollectorConfiguration!
"""
List available Log Collector installers.
Stability: Long-term
"""
	logCollectorInstallers: [LogCollectorInstaller!]
"""
Stability: Short-term
"""
	logCollectorMergedConfiguration(
		configIds: [String!]!
	): LogCollectorMergedConfiguration!
"""
List versions available through Remote Update for the LogScale Collector
Stability: Long-term
"""
	logCollectorVersionsAvailable: [String!]!
"""
Stability: Long-term
"""
	loginBridgeRequest: LoginBridgeRequest!
"""
Stability: Long-term
"""
	marketplace: Marketplace!
"""
This will return information about the LogScale instance
Stability: Short-term
"""
	meta(
		url: String
	): HumioMetadata!
"""
Returns a list of organizations that has non-default bucket-storage configuration
Stability: Short-term
"""
	nonDefaultBucketConfigs: [OrgConfig!]!
"""
Stability: Long-term
"""
	oidcIdentityProvider(
		id: String!
	): OidcIdentityProvider!
"""
Get the current organization
Stability: Long-term
"""
	organization: Organization!
"""
Get a pending user.
Stability: Long-term
"""
	pendingUser(
		token: String!
	): PendingUser!
"""
Get a pending user.
Stability: Long-term
"""
	pendingUsers(
		search: String
	): [PendingUser!]!
"""
Proxy query through a specific organization. Root operation.
Stability: Long-term
"""
	proxyOrganization(
		organizationId: String!
	): Query!
"""
Stability: Preview
"""
	queryAnalysis(
		queryString: String!
		languageVersion: LanguageVersionEnum!
		isLive: Boolean!
		viewName: String
	): queryAnalysis!
"""
Return the query assistance for the given search, as well as the assistant version.
Stability: Preview
"""
	queryAssistance(
"""
The search to assist with
"""
		search: String!
"""
Enable to remap often used fields to their LogScale equivalents
"""
		remapFields: Boolean!
	): QueryAssistantResult!
"""
Stability: Short-term
"""
	queryQuotaDefaultSettings: [QueryQuotaIntervalSetting!]!
"""
Stability: Short-term
"""
	queryQuotaUsage(
"""
Username of the user for which to retrieve status of Query Quotas
"""
		username: String!
	): [QueryQuotaUsage!]!
"""
Stability: Short-term
"""
	queryQuotaUserSettings(
"""
If omitted, returns the Query Quota Settings for all users. If provided, returns the Query Quota Settings for that particular user.
"""
		username: String
	): [QueryQuotaUserSettings!]!
"""
Query search domains with organization filter
Stability: Long-term
"""
	querySearchDomains(
"""
Filter results based on this string
"""
		searchFilter: String
"""
Choose to filter based on type of search domain
"""
		typeFilter: SearchDomainTypes!
		sortBy: Searchdomain__SortBy!
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
"""
Filter for deleted search domains. True will return deleted search domains and exclude regular search domains and requires that you have some permission that grants you access to delete search domains. False or nothing will return search domains that has not yet been deleted.
"""
		deleted: Boolean
		includeHidden: Boolean
"""
Filter results by name of connected limit. Search domains without a limit will be excluded
"""
		limitName: String
	): SearchDomainSearchResultSet!
"""
Fetch the list of active event redaction jobs.
Stability: Long-term
"""
	redactEvents(
"""
The name of the repository to fetch pending event redactions for.
"""
		repositoryName: String!
	): [DeleteEvents!]!
"""
Stability: Long-term
"""
	repositories(
"""
Include sandboxes for other users in the results set
"""
		includeSandboxes: Boolean
		includeHidden: Boolean
	): [Repository!]!
"""
Lookup a given repository by name.
Stability: Long-term
"""
	repository(
"""
The name of the repository
"""
		name: String!
		includeHidden: Boolean
	): Repository!
"""
A given role.
Stability: Long-term
"""
	role(
		roleId: String!
	): Role!
"""
All defined roles.
Stability: Long-term
"""
	roles: [Role!]!
"""
All defined roles in org.
Stability: Long-term
"""
	rolesInOrgForChangingUserAccess(
		searchDomainId: String!
	): [Role!]!
"""
Searchable paginated roles
Stability: Long-term
"""
	rolesPage(
		search: String
		pageNumber: Int!
		pageSize: Int!
		typeFilter: [PermissionType!]
		includeHidden: Boolean
	): RolePage!
"""
Returns running queries.
Stability: Long-term
"""
	runningQueries(
"""
Search term that is used to filter running queries based on query input
"""
		searchTerm: String
"""
Which field to use when sorting
"""
		sortField: SortField
		sortOrder: SortOrder
"""
Whether to return global results. Default=false. True requires system level access.
"""
		global: Boolean
	): RunningQueries!
"""
Returns whether AWS Role is required when configuring S3 Archiving.
Stability: Short-term
"""
	s3ArchivingRequiresRole: Boolean!
"""
Stability: Long-term
"""
	samlIdentityProvider(
		id: String!
	): SamlIdentityProvider!
"""
Stability: Long-term
"""
	savedQuery(
		id: String!
	): SavedQuery!
"""
Get scheduled report information using a scheduled report access token.
Stability: Long-term
"""
	scheduledReport: LimitedScheduledReport!
"""
Stability: Long-term
"""
	searchDomain(
		name: String!
	): SearchDomain!
"""
Lists assets in the provided search domains.
Stability: Preview
"""
	searchDomainAssets(
"""
The names of the search domains to search for assets in. If empty, includes assets from all search domains the requester has access to.
"""
		searchDomainNames: [String!]!
"""
The types of assets to include. If empty, all asset types are included.
"""
		assetTypes: [AssetPermissionsAssetType!]
"""
Filter results based on this string
"""
		searchFilter: String
"""
The amount of results to return.
"""
		limit: Int
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
	): SearchDomainAssetsResultSet!
"""
Stability: Long-term
"""
	searchDomains(
		includeHidden: Boolean
	): [SearchDomain!]!
"""
Paged searchDomains.
Stability: Long-term
"""
	searchDomainsPage(
		search: String
		includeHidden: Boolean
		pageNumber: Int!
		pageSize: Int!
	): SearchDomainPage!
"""
Get paginated search results.
Stability: Short-term
"""
	searchFleet(
		isLiveFilter: Boolean
		versionFilter: SearchFleetVersionFilter
		osFilter: SearchFleetOsFilter
		groupIdsFilter: [String!]
		changeFilter: Changes
		groupFilter: GroupFilter
		queryState: String
		inactiveFilter: Boolean
		statusFilter: SearchFleetStatusFilter
		testConfigIdFilter: String
		configIdFilter: String
"""
Filter results based on this string
"""
		searchFilter: String
		sortBy: Fleet__SortBy
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
	): SearchFleetUnion!
"""
Stability: Short-term
"""
	searchFleetInstallationTokens(
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
		sortBy: FleetInstallationTokens__SortBy
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
	): SearchFleetInstallationTokenResultSet!
"""
Search log collector configurations.
Stability: Short-term
"""
	searchLogCollectorConfigurations(
"""
Filter results based on this string
"""
		searchFilter: String
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
		sortBy: FleetConfiguration__SortBy
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
	): SearchLogCollectorConfigurationResultSet!
"""
Search log collector configurations.
Stability: Short-term
"""
	searchLogCollectorGroups(
"""
Filter results based on this string
"""
		searchFilter: String
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
		sortBy: FleetGroups__SortBy
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
	): SearchLogCollectorGroupsResultSet!
"""
Get paginated search results. (Root operation)
Stability: Short-term
"""
	searchOrganizations(
"""
Filter results based on this string
"""
		searchFilter: String
		sortBy: Organizations__SortBy!
		typeFilter: [Organizations__SearchEntryType!]
		subscriptionFilter: [Organizations__Subscription!]
		includeDeletedFilter: Boolean
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
	): OrganizationSearchResultSet!
"""
Check the status for a specific typed service.
Stability: Preview
"""
	serviceStatus(
"""
The service type name of the service to get status for.
"""
		serviceType: String!
	): HealthStatus!
"""
Metadata from all registered services
Stability: Preview
"""
	servicesMetadata: [ServiceMetadata!]!
"""
Paginated search results for tokens
Stability: Long-term
"""
	sessions(
"""
Filter results based on this string
"""
		searchFilter: String
		level: Sessions__Filter_Level
		sortBy: Sessions__SortBy
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
		onlyActiveSessions: Boolean
	): SessionQueryResultSet!
"""
Gets a shared dashboard by it's shared link token.
Stability: Long-term
"""
	sharedDashboards(
		token: String!
	): SharedDashboard!
"""
Stability: Long-term
"""
	starredDashboards: [Dashboard!]!
"""
Get a specific token by ID
Stability: Long-term
"""
	token(
		tokenId: String!
	): Token!
"""
Token for fleet management.
Stability: Short-term
"""
	tokenForFleetManagement: String!
"""
Paginated search results for tokens
Stability: Long-term
"""
	tokens(
"""
Filter results based on this string
"""
		searchFilter: String
		typeFilter: [Tokens__Type!]
		parentEntityIdFilter: [String!]
		sortBy: Tokens__SortBy!
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
	): TokenQueryResultSet!
"""
Stability: Preview
"""
	usage: UsageStats!
"""
A user in the system.
Stability: Long-term
"""
	user(
		id: String!
	): User
"""
Requires manage cluster permission; Returns all users in the system.
Stability: Long-term
"""
	users(
		orderBy: OrderByUserFieldInput
		search: String
	): [User!]!
"""

Stability: Long-term
"""
	usersAndGroupsForChangingUserAccess(
		search: String
		searchDomainId: String!
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
	): UsersAndGroupsSearchResultSet!
"""
Requires either root access, org owner access or permission to manage users in at least one repository or view. Returns a page of all users in an organization.
Stability: Long-term
"""
	usersPage(
		orderBy: OrderByUserFieldInput
		search: String
		pageNumber: Int!
		pageSize: Int!
	): UsersPage!
"""
Return users without organizations
Stability: Short-term
"""
	usersWithoutOrganizations: [User!]!
"""
Validate the Access Token
Stability: Short-term
"""
	validateAccessToken(
		accessToken: String!
	): String!
"""
Validate the Access Token
Stability: Long-term
"""
	validateAccessTokenV2(
		accessToken: String!
	): AccessTokenValidatorResultType!
"""
Check that a query compiles.
Stability: Preview
"""
	validateQuery(
		queryString: String!
		version: LanguageVersionEnum!
		isLive: Boolean
		arguments: [QueryArgument!]
	): QueryValidationResult!
"""
Validate the JWT Token
Stability: Long-term
"""
	validateToken(
		jwtToken: String!
	): Boolean!
"""
The currently authenticated user's account.
Stability: Long-term
"""
	viewer: Account!
"""
The currently authenticated user's account if any.
Stability: Long-term
"""
	viewerOpt: Account
"""
Get the list of keys being used to select queries for tracing on workers.
Stability: Preview
"""
	workerQueryTracingState: WorkerQueryTracingState!
}

"""
An argument to a query
"""
input QueryArgument {
"""
An argument to a query
"""
	name: String!
"""
An argument to a query
"""
	value: String!
}

"""
An argument for a query.
"""
input QueryArgumentInputType {
"""
An argument for a query.
"""
	name: String!
"""
An argument for a query.
"""
	value: String!
}

"""
Either a successful assistance result, or an error
"""
union QueryAssistantAssistance =QueryAssistantSuccess | QueryAssistantError

type QueryAssistantDiagnostic {
"""
Stability: Preview
"""
	message: QueryAssistantDiagnosticMessage!
"""
Stability: Preview
"""
	position: QueryAssistantDiagnosticPosition
"""
Stability: Preview
"""
	severity: QueryAssistantDiagnosticSeverity!
}

type QueryAssistantDiagnosticMessage {
"""
Stability: Preview
"""
	what: String!
"""
Stability: Preview
"""
	terse: String!
"""
Stability: Preview
"""
	code: String!
}

type QueryAssistantDiagnosticPosition {
"""
Stability: Preview
"""
	column: Int!
"""
Stability: Preview
"""
	line: Int!
"""
Stability: Preview
"""
	beginOffset: Int!
"""
Stability: Preview
"""
	endOffset: Int!
"""
Stability: Preview
"""
	longString: String!
}

enum QueryAssistantDiagnosticSeverity {
	Hint
	Information
	Warning
	Error
}

type QueryAssistantError {
"""
Stability: Preview
"""
	error: String!
}

"""
An assistance result and a version of the query assistant
"""
type QueryAssistantResult {
"""
The assistant version.
Stability: Preview
"""
	version: String!
"""
The query assistance for the given search.
Stability: Preview
"""
	assistance: QueryAssistantAssistance!
}

type QueryAssistantSuccess {
"""
Stability: Preview
"""
	result: String!
"""
Stability: Preview
"""
	diagnostics: [QueryAssistantDiagnostic!]!
}

"""
An interaction for a query based widget
"""
type QueryBasedWidgetInteraction {
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	titleTemplate: String
"""
Stability: Long-term
"""
	conditions: [WidgetInteractionCondition!]!
"""
Stability: Long-term
"""
	typeInfo: QueryBasedWidgetInteractionTypeInfo!
}

union QueryBasedWidgetInteractionTypeInfo =DashboardLinkInteraction | CustomLinkInteraction | SearchLinkInteraction | UpdateParametersInteraction

"""
Result of concatenating queries.
"""
type QueryConcatenationInfo {
"""
Stability: Short-term
"""
	concatenatedQuery: String!
"""
Stability: Short-term
"""
	validationResult: QueryValidationInfo!
}

"""
A diagnostic message from query validation.
"""
type QueryDiagnostic {
"""
Stability: Preview
"""
	message: String!
"""
Stability: Preview
"""
	code: String!
"""
Stability: Preview
"""
	severity: Severity!
}

"""
Diagnostic information for a query.
"""
type QueryDiagnosticInfoOutputType {
"""
The diagnostic message.
Stability: Short-term
"""
	message: String!
"""
The code for the diagnostic.
Stability: Short-term
"""
	code: String!
"""
The severity of the diagnostic.
Stability: Short-term
"""
	severity: String!
}

type QueryInProgress {
"""
Stability: Long-term
"""
	queryId: String!
}

"""
Language restrictions for language version.
"""
type QueryLanguageRestriction {
"""
Stability: Preview
"""
	version: LanguageVersion!
"""
Stability: Preview
"""
	allowedFunctions: [String!]!
"""
Stability: Preview
"""
	enabled: Boolean!
}

"""
Query ownership
"""
interface QueryOwnership {
"""
Query ownership
"""
	id: String!
}

type QueryPrefixes {
"""
Stability: Long-term
"""
	viewId: String!
"""
Stability: Long-term
"""
	queryPrefix: String!
}

type QueryQuotaExceeded {
"""
Stability: Short-term
"""
	kind: QueryQuotaMeasurementKind!
"""
Stability: Short-term
"""
	resetsAt: Long!
}

enum QueryQuotaInterval {
	PerDay
	PerHour
	PerTenMinutes
	PerMinute
}

type QueryQuotaIntervalSetting {
"""
Stability: Short-term
"""
	interval: QueryQuotaInterval!
"""
Stability: Short-term
"""
	measurementKind: QueryQuotaMeasurementKind!
"""
Stability: Short-term
"""
	value: Long
"""
Stability: Short-term
"""
	valueKind: QueryQuotaIntervalSettingKind!
"""
Stability: Short-term
"""
	source: QueryQuotaIntervalSettingSource!
}

enum QueryQuotaIntervalSettingKind {
	Limitless
	Limited
}

enum QueryQuotaIntervalSettingSource {
	Default
	UserSpecified
}

enum QueryQuotaMeasurementKind {
	StaticCost
	LiveCost
	QueryCount
}

type QueryQuotaUsage {
"""
Stability: Short-term
"""
	interval: QueryQuotaInterval!
"""
Stability: Short-term
"""
	queryCount: Int!
"""
Stability: Short-term
"""
	staticCost: Long!
"""
Stability: Short-term
"""
	liveCost: Long!
}

"""
Query Quota Settings for a particular user
"""
type QueryQuotaUserSettings {
"""
Username of the user for which these Query Quota Settings apply
Stability: Short-term
"""
	username: String!
"""
List of the settings that apply
Stability: Short-term
"""
	settings: [QueryQuotaIntervalSetting!]!
}

"""
Timestamp type to use for a query.
"""
enum QueryTimestampType {
"""
Use @timestamp for the query.
"""
	EventTimestamp
"""
Use @ingesttimestamp for the query.
"""
	IngestTimestamp
}

"""
Result of query validation.
"""
type QueryValidationInfo {
"""
Stability: Short-term
"""
	isValid: Boolean!
"""
Stability: Short-term
"""
	diagnostics: [QueryDiagnosticInfoOutputType!]!
}

"""
Result of validating a query.
"""
type QueryValidationResult {
"""
Stability: Preview
"""
	isValid: Boolean!
"""
Stability: Preview
"""
	diagnostics: [QueryDiagnostic!]!
}

"""
Readonly default role
"""
enum ReadonlyDefaultRole {
	Reader
}

type RealTimeDashboardUpdateFrequency {
"""
Stability: Long-term
"""
	name: String!
}

"""
A map from reasons why a node might not be able to be unregistered safely, to the boolean value indicating whether a given reason applies to this node. For a node to be unregistered without any undue disruption, none of the reasons must apply.
"""
type ReasonsNodeCannotBeSafelyUnregistered {
"""
Stability: Long-term
"""
	isAlive: Boolean!
"""
Stability: Long-term
"""
	leadsDigest: Boolean!
"""
Stability: Long-term
"""
	hasUnderReplicatedData: Boolean!
"""
Stability: Long-term
"""
	hasDataThatExistsOnlyOnThisNode: Boolean!
}

type RecentQuery {
"""
Stability: Long-term
"""
	languageVersion: LanguageVersion!
"""
Stability: Long-term
"""
	query: HumioQuery!
"""
Stability: Long-term
"""
	runAt: DateTime!
"""
Stability: Long-term
"""
	widgetType: String
"""
Stability: Long-term
"""
	widgetOptions: JSON
}

"""
Information about regions
"""
type RegionSelectData {
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	url: String!
"""
Stability: Long-term
"""
	iconUrl: String!
}

"""
Info about a version of a LogScale Package.
"""
type RegistryPackageVersionInfo {
"""
The package version
Stability: Long-term
"""
	version: SemanticVersion!
"""
The minimum version of LogScale required to run the package.
Stability: Long-term
"""
	minHumioVersion: SemanticVersion!
}

"""
The status of a remote cluster connection.
"""
type RemoteClusterConnectionStatus implements ClusterConnectionStatus{
"""
Name of the remote view
Stability: Short-term
"""
	remoteViewName: String
"""
Software version of the remote view
Stability: Short-term
"""
	remoteServerVersion: String
"""
Oldest server version that is protocol compatible with the remote server
Stability: Short-term
"""
	remoteServerCompatVersion: String
"""
Id of the connection
Stability: Short-term
"""
	id: String
"""
Whether the connection is valid
Stability: Short-term
"""
	isValid: Boolean!
"""
Errors if the connection is invalid
Stability: Short-term
"""
	errorMessages: [ConnectionAspectErrorType!]!
}

scalar RepoOrViewName

type RepositoriesUsageQueryResult {
"""
The total number of matching results
Stability: Long-term
"""
	totalResults: Int!
"""
The paginated result set
Stability: Long-term
"""
	results: [RepositoryUsageValue!]!
}

"""
Query result for repositories usage data
"""
union RepositoriesUsageQueryResultTypes =QueryInProgress | RepositoriesUsageQueryResult

enum RepositoriesUsageQuerySortBy {
	Name
	UsageValue
}

"""
A repository stores ingested data, configures parsers and data retention policies.
"""
type Repository implements SearchDomain{
"""
Repo Types are used for tracking trial status in LogScale Cloud setups.
Stability: Long-term
"""
	type: RepositoryType!
"""
Repo data types are used for controlling the types of data are allowed in the repository.
Stability: Long-term
"""
	dataType: RepositoryDataType!
"""
The limit attached to the repository.
Stability: Long-term
"""
	limit: LimitV2
"""
The date and time in the future after which ingest for this repository will be re-enabled.
Stability: Long-term
"""
	ingestBlock: DateTime
"""
Usage tag, used to group usage summary on repositories
Stability: Long-term
"""
	usageTag: String
"""
Data sources where data is ingested from. E.g. This can be specific log files or services sending data to LogScale.
Stability: Long-term
"""
	datasources: [Datasource!]!
"""
Total size the data. Size is measured as the size stored before compression and is thus the size of the internal format, not the data that was ingested.
Stability: Long-term
"""
	uncompressedByteSize: Long!
"""
Total size of data. Size is measured as the size after compression.
Stability: Long-term
"""
	compressedByteSize: Long!
"""
Total size the data, merged parts. Size is measured as the size stored before compression and is thus the size of the internal format, not the data that was ingested.
Stability: Long-term
"""
	uncompressedByteSizeOfMerged: Long!
"""
Total size of data, merged parts. Size is measured as the size after compression.
Stability: Long-term
"""
	compressedByteSizeOfMerged: Long!
"""
The timestamp of the latest ingested data, or null if the repository is empty.
Stability: Long-term
"""
	timeOfLatestIngest: DateTime
"""
The maximum time (in days) to keep data. Data old than this will be deleted.
Stability: Long-term
"""
	timeBasedRetention: Float
"""
Retention (in Gigabytes) based on the size of data when it arrives to LogScale, that is before parsing and compression. LogScale will keep `at most` this amount of data.
Stability: Long-term
"""
	ingestSizeBasedRetention: Float
"""
Stability: Long-term
"""
	ingestTokens: [IngestToken!]!
"""
Retention (in Gigabytes) based on the size of data when in storage, that is, after parsing and compression. LogScale will keep `at least` this amount of data, but as close to this number as possible.
Stability: Long-term
"""
	storageSizeBasedRetention: Float
"""
Sets time (in days) to keep backups before they are deleted.
Stability: Long-term
"""
	timeBasedBackupRetention: Float
"""
The ingest listeners configured for this repository.
Stability: Long-term
"""
	ingestListeners: [IngestListener!]!
"""
Maximum number of auto shards created.
Stability: Long-term
"""
	maxAutoShardCount: Int
"""
Configuration for S3 archiving. E.g. bucket name and region.
Stability: Long-term
"""
	s3ArchivingConfiguration: S3Configuration
"""
Configuration for GCS archiving. E.g. bucket name.
Stability: Preview
"""
	gcsArchivingConfiguration: GCSArchivingConfiguration
"""
Configuration for archiving. E.g. bucket name and region.
Stability: Preview
"""
	archivingConfiguration: ArchivingConfiguration
"""
Provider for archiving, i.e. S3 or GCS
Stability: Preview
"""
	archivingProvider: String
"""
The cache policy set on this repo.
Stability: Preview
"""
	cachePolicy: CachePolicy
"""
The cache policy of this repo that as will be applied.

This will apply the cache policy of the repo, org-wide default, or global
default. This will be (in order of precedence):
 1. The repo cache policy, if set.
 2. The organization-wide cache policy, if set.
 3. The global cache policy, if set.
 4. The default cache policy in which no segments are prioritized.

Stability: Preview
"""
	effectiveCachePolicy: CachePolicy!
"""
Tag grouping rules applied on the repository currently. Rules only apply to the tags they denote, and tags without rules do not have any grouping.
Stability: Long-term
"""
	currentTagGroupings: [TagGroupingRule!]!
"""
The AWS External ID used when assuming roles in AWS on behalf of this repository.
Stability: Long-term
"""
	awsExternalId: String!
"""
The ARN of the AWS IAM identity that will write to S3 for S3 Archiving.
Stability: Short-term
"""
	s3ArchivingArn: String
"""
The event forwarding rules configured for the repository
Stability: Long-term
"""
	eventForwardingRules: [EventForwardingRule!]!
"""
List event forwarders in the organization with only basic information
Stability: Long-term
"""
	eventForwardersForSelection: [EventForwarderForSelection!]!
"""
A saved FDR feed.
Stability: Long-term
"""
	fdrFeed(
"""
The id of the FDR feed to get.
"""
		id: String!
	): FdrFeed!
"""
Saved FDR Feeds
Stability: Long-term
"""
	fdrFeeds: [FdrFeed!]!
"""
Administrator control for an FDR feed.
Stability: Long-term
"""
	fdrFeedControl(
"""
The id of the FDR feed to get administrator control for.
"""
		id: String!
	): FdrFeedControl!
"""
Administrator controls for FDR feeds
Stability: Long-term
"""
	fdrFeedControls: [FdrFeedControl!]!
"""
A saved Ingest feed.
Stability: Long-term
"""
	ingestFeed(
"""
The id of the IngestFeed to get.
"""
		id: String!
	): IngestFeed!
"""
Saved ingest feeds
Stability: Long-term
"""
	ingestFeeds(
"""
Filter results based on this string
"""
		searchFilter: String
"""
Type of ingest feed to filter
"""
		typeFilter: [IngestFeeds__Type!]
"""
Field which to sort the ingest feeds by
"""
		sortBy: IngestFeeds__SortBy!
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
	): IngestFeedQueryResultSet!
"""
A parser on the repository.
Stability: Long-term
"""
	parser(
		id: String
"""
[DEPRECATED: Please use `id` instead. Will be removed in version 1.178]
"""
		name: String
	): Parser
"""
Saved parsers.
Stability: Long-term
"""
	parsers: [Parser!]!
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	name: RepoOrViewName!
"""
Stability: Long-term
"""
	description: String
"""
The point in time the search domain was marked for deletion.
Stability: Long-term
"""
	deletedDate: Long
"""
The point in time the search domain will not be restorable anymore.
Stability: Long-term
"""
	permanentlyDeletedAt: Long
"""
Stability: Long-term
"""
	isStarred: Boolean!
"""
Search limit in milliseconds, which searches should are limited to.
Stability: Long-term
"""
	searchLimitedMs: Long
"""
Repositories not part of the search limitation.
Stability: Long-term
"""
	reposExcludedInSearchLimit: [String!]!
"""
Returns a specific version of a package given a package version.
Stability: Long-term
"""
	packageV2(
"""
The package id of the package to get.
"""
		packageId: VersionedPackageSpecifier!
	): Package2!
"""
The available versions of a package.
Stability: Long-term
"""
	packageVersions(
		packageId: UnversionedPackageSpecifier!
	): [RegistryPackageVersionInfo!]!
"""
Returns a list of available packages that can be installed.
Stability: Long-term
"""
	availablePackages(
"""
Filter input to limit the returned packages
"""
		filter: String
"""
Packages with any of these tags will be included. No filtering on tags.
"""
		tags: [PackageTag!]
"""
Packages with any of these categories will be included.
"""
		categories: [String!]
	): [PackageRegistrySearchResultItem!]!
"""
List packages installed on a specific view or repo.
Stability: Long-term
"""
	installedPackages: [PackageInstallation!]!
"""
Stability: Long-term
"""
	hasPackageInstalled(
		packageId: VersionedPackageSpecifier!
	): Boolean!
"""
Users who have access.
Stability: Long-term
"""
	users: [User!]!
"""
Users or groups who has access.
Stability: Long-term
"""
	usersAndGroups(
		search: String
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
	): UsersAndGroupsSearchResultSet!
"""
Search users with a given permission
Stability: Preview
"""
	usersV2(
"""
Search for a user whose email or name matches this search string
"""
		search: String
"""
Permission that the users must have on the search domain. Leave out to get users with any permission on the view
"""
		permissionFilter: Permission
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
	): Users!
"""
Groups with assigned roles.
Stability: Long-term
"""
	groups: [Group!]!
"""
Stability: Long-term
"""
	starredFields: [String!]!
"""
Stability: Long-term
"""
	recentQueriesV2: [RecentQuery!]!
"""
Stability: Long-term
"""
	automaticSearch: Boolean!
"""
Check if the current user is allowed to perform the given action on the view.
Stability: Long-term
"""
	isActionAllowed(
"""
The action to check if a user is allowed to perform on a view.
"""
		action: ViewAction!
	): Boolean!
"""
Returns the all actions the user is allowed to perform on the view.
Stability: Long-term
"""
	allowedViewActions: [ViewAction!]!
"""
The query prefix prepended to each search in this domain.
Stability: Long-term
"""
	viewerQueryPrefix: String!
"""
All tags from all datasources.
Stability: Long-term
"""
	tags: [String!]!
"""
The resource identifier for this search domain.
Stability: Short-term
"""
	resource: String!
"""
All interactions defined on the view.
Stability: Long-term
"""
	interactions: [ViewInteraction!]!
"""
A saved alert
Stability: Long-term
"""
	alert(
		id: String!
	): Alert!
"""
Saved alerts.
Stability: Long-term
"""
	alerts: [Alert!]!
"""
A saved dashboard.
Stability: Long-term
"""
	dashboard(
		id: String!
	): Dashboard!
"""
All dashboards available on the view.
Stability: Long-term
"""
	dashboards: [Dashboard!]!
"""
A saved filter alert
Stability: Long-term
"""
	filterAlert(
		id: String!
	): FilterAlert!
"""
Saved filter alerts.
Stability: Long-term
"""
	filterAlerts: [FilterAlert!]!
"""
A saved aggregate alert
Stability: Long-term
"""
	aggregateAlert(
		id: String!
	): AggregateAlert!
"""
Saved aggregate alerts.
Stability: Long-term
"""
	aggregateAlerts: [AggregateAlert!]!
"""
A saved scheduled search.
Stability: Long-term
"""
	scheduledSearch(
"""
The id of the scheduled search to get.
"""
		id: String!
	): ScheduledSearch!
"""
Saved scheduled searches.
Stability: Long-term
"""
	scheduledSearches: [ScheduledSearch!]!
"""
A saved action.
Stability: Long-term
"""
	action(
"""
The id of the action to get.
"""
		id: String!
	): Action!
"""
A list of saved actions.
Stability: Long-term
"""
	actions(
"""
The result will only include actions with the specified ids. Omit to find all actions.
"""
		actionIds: [String!]
	): [Action!]!
"""
A saved query.
Stability: Long-term
"""
	savedQuery(
		id: String!
	): SavedQuery!
"""
Saved queries.
Stability: Long-term
"""
	savedQueries: [SavedQuery!]!
"""
Stability: Long-term
"""
	defaultQuery: SavedQuery
"""
Stability: Long-term
"""
	files: [File!]!
"""
Stability: Long-term
"""
	fileFieldSearch(
"""
Name of the csv or json file to retrieve the field entries from.
"""
		fileName: String!
"""
Name of the field in the file to return entries from.
"""
		fieldName: String!
"""
Text to filter values by prefix on.
"""
		prefixFilter: String
"""
The exact values that given fields should have for an entry to be part of the result.
"""
		valueFilters: [FileFieldFilterType!]!
"""
Names of the fields to include in the result.
"""
		fieldsToInclude: [String!]!
"""
Maximum number of values to retrieve from the file.
"""
		maxEntries: Int!
	): [[DictionaryEntryType!]!]!
"""
Saved scheduled reports.
Stability: Long-term
"""
	scheduledReports: [ScheduledReport!]!
"""
Saved scheduled report.
Stability: Long-term
"""
	scheduledReport(
"""
The id of the scheduled report to get.
"""
		id: String!
	): ScheduledReport
}

"""
The data type of a repository. Indicates which type of data the repository is restricted to - e.g. 'Falcon' for repository intended for Falcon data
"""
enum RepositoryDataType {
	FALCON
	ANYDATA
}

"""
The repository type of a repository
"""
enum RepositoryType {
	PERSONAL
	TRIAL
	DEFAULT
	SYSTEM
	MANAGED
}

type RepositoryUsageValue {
"""
Stability: Long-term
"""
	name: String
"""
Stability: Long-term
"""
	valueBytes: Long!
"""
Stability: Long-term
"""
	percentage: Float!
"""
Stability: Long-term
"""
	id: String!
}

type Role {
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	displayName: String!
	color: String
"""
Stability: Long-term
"""
	description: String
"""
Stability: Long-term
"""
	viewPermissions: [Permission!]!
"""
Stability: Long-term
"""
	systemPermissions: [SystemPermission!]!
"""
Stability: Long-term
"""
	organizationPermissions: [OrganizationPermission!]!
"""
Stability: Long-term
"""
	organizationManagementPermissions: [OrganizationManagementPermission!]!
"""
Stability: Long-term
"""
	groupsCount: Int!
"""
Stability: Long-term
"""
	usersCount: Int!
"""
Stability: Long-term
"""
	users: [User!]!
"""
Stability: Long-term
"""
	groupsV2(
		search: String
		userId: String
		searchInRoles: Boolean
		onlyIncludeGroupsWithRestrictiveQueryPrefix: Boolean
"""
The amount of results to return.
"""
		limit: Int
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
	): GroupResultSetType!
"""
Stability: Long-term
"""
	groups: [Group!]!
"""
Stability: Preview
"""
	readonlyDefaultRole: ReadonlyDefaultRole
}

"""
A page of roles.
"""
type RolePage {
"""
Stability: Long-term
"""
	pageInfo: PageType!
"""
Stability: Long-term
"""
	page: [Role!]!
}

"""
The roles query result set.
"""
type RolesResultSetType {
"""
The total number of matching results
Stability: Long-term
"""
	totalResults: Int!
"""
The paginated result set
Stability: Long-term
"""
	results: [Role!]!
}

"""
Queries that are currently being executed
"""
type RunningQueries {
"""
Number of milliseconds until next update is available
Stability: Long-term
"""
	updateAvailableIn: Long!
"""
Total number of queries being executed
Stability: Long-term
"""
	totalNumberOfQueries: Int!
"""
Total number of live queries being executed
Stability: Long-term
"""
	totalNumberOfLiveQueries: Int!
"""
Total number of clients querying
Stability: Long-term
"""
	totalNumberOfClients: Int!
"""
Total size of skipped bytes for all queries being executed
Stability: Long-term
"""
	totalSkippedBytes: Long!
"""
Total size of included bytes for all queries being executed
Stability: Long-term
"""
	totalIncludedBytes: Long!
"""
Total size of remaining bytes to be processed for all queries being executed
Stability: Long-term
"""
	totalQueuedBytes: Long!
"""
Queries being executed, at most 1000 queries are returned.
Stability: Long-term
"""
	queries: [RunningQuery!]!
}

"""
A query that is currently being executed.
"""
type RunningQuery {
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	clients: [Client!]!
"""
Stability: Long-term
"""
	initiatedBy: String
"""
Stability: Long-term
"""
	isLive: Boolean!
"""
Stability: Long-term
"""
	isHistoricDone: Boolean!
"""
Stability: Long-term
"""
	queryInput: String!
"""
Stability: Long-term
"""
	queryPrefix: String!
"""
Stability: Long-term
"""
	coordinatorId: String!
"""
Stability: Long-term
"""
	totalWork: Int!
"""
Stability: Long-term
"""
	workDone: Int!
"""
Stability: Long-term
"""
	view: String!
"""
The organization owning the query, if any.
Stability: Long-term
"""
	organization: Organization
"""
Stability: Long-term
"""
	timeInMillis: Long!
"""
Stability: Long-term
"""
	timeQueuedInMillis: Long!
"""
Stability: Long-term
"""
	isDashboard: Boolean!
"""
Stability: Long-term
"""
	estimatedTotalBytes: Long!
"""
Stability: Long-term
"""
	skippedBytes: Long!
"""
Stability: Long-term
"""
	includedBytes: Long!
"""
Stability: Long-term
"""
	processedEvents: Long!
"""
Static CPU time spent since query started
Stability: Long-term
"""
	mapMillis: Float!
"""
Static CPU time spent the last 30 seconds
Stability: Long-term
"""
	deltaMapMillis: Float!
"""
Live CPU time spent since query started
Stability: Long-term
"""
	liveMillis: Float!
"""
Live CPU time spent the last 30 seconds
Stability: Long-term
"""
	deltaLiveMillis: Float!
"""
Stability: Long-term
"""
	mapAllocations: Long!
"""
Stability: Long-term
"""
	liveAllocations: Long!
"""
Stability: Long-term
"""
	reduceAllocations: Long!
"""
Stability: Long-term
"""
	totalAllocations: Long!
"""
Stability: Long-term
"""
	deltaTotalAllocations: Long!
"""
Stability: Long-term
"""
	timeInterval: String!
"""
Stability: Long-term
"""
	timeZoneOffSetMinutes: Int!
"""
Stability: Long-term
"""
	queryArgs: String!
"""
Stability: Long-term
"""
	status: String!
"""
Total cost calculation.
Stability: Long-term
"""
	totalCost: Float!
"""
Live cost calculation
Stability: Long-term
"""
	liveCost: Float!
"""
Static cost calculation
Stability: Long-term
"""
	staticCost: Float!
"""
Total cost calculation last 30 seconds.
Stability: Long-term
"""
	deltaTotalCost: Float!
"""
Live cost calculation last 30 seconds.
Stability: Long-term
"""
	deltaLiveCost: Float!
"""
Static cost calculation last 30 seconds.
Stability: Long-term
"""
	deltaStaticCost: Float!
}

"""
The format to store archived segments in AWS S3.
"""
enum S3ArchivingFormat {
	RAW
	NDJSON
}

"""
Configuration for S3 archiving. E.g. bucket name and region.
"""
type S3Configuration implements ArchivingConfiguration{
"""
S3 bucket name for storing archived data. Example: acme-bucket.
Stability: Short-term
"""
	bucket: String!
"""
The region the S3 bucket belongs to. Example: eu-central-1.
Stability: Short-term
"""
	region: String!
"""
Do not archive logs older than this.
Stability: Short-term
"""
	startFrom: DateTime
"""
Whether the archiving has been disabled.
Stability: Short-term
"""
	disabled: Boolean
"""
The format to store the archived data in on S3.
Stability: Short-term
"""
	format: S3ArchivingFormat
"""
Array of names of tag fields to use in that order in the output file names.
Stability: Short-term
"""
	tagOrderInName: [String!]!
"""
The ARN of the AWS Role that is assumed when writing to S3.
Stability: Short-term
"""
	roleArn: String
}

"""
A SAML Identity Provider
"""
type SamlIdentityProvider implements IdentityProviderAuthentication{
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	domains: [String!]!
"""
Stability: Long-term
"""
	groupMembershipAttribute: String
"""
Stability: Long-term
"""
	idpCertificateInBase64: String!
"""
Stability: Long-term
"""
	idpEntityId: String!
"""
Stability: Long-term
"""
	signOnUrl: String!
"""
Stability: Long-term
"""
	authenticationMethod: AuthenticationMethodAuth!
"""
Stability: Long-term
"""
	userAttribute: String
"""
Stability: Long-term
"""
	adminAttribute: String
"""
Stability: Long-term
"""
	adminAttributeMatch: String
"""
Stability: Long-term
"""
	alternativeIdpCertificateInBase64: String
"""
Stability: Long-term
"""
	defaultIdp: Boolean!
"""
Stability: Long-term
"""
	humioManaged: Boolean!
"""
Stability: Long-term
"""
	lazyCreateUsers: Boolean!
"""
Stability: Long-term
"""
	debug: Boolean!
}

type SamlMetadata {
"""
Stability: Long-term
"""
	entityID: String!
"""
Stability: Long-term
"""
	signOnUrl: String!
"""
Stability: Long-term
"""
	certificate: String!
}

"""
A query saved for later use.
"""
type SavedQuery {
"""
A YAML formatted string that describes the saved query.
"""
	templateYaml: String!
"""
A YAML formatted string that describes the saved query.
Stability: Long-term
"""
	yamlTemplate: YAML!
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	displayName: String!
"""
Stability: Long-term
"""
	description: String
	assetType: AssetType!
"""
Stability: Long-term
"""
	query: HumioQuery!
"""
Stability: Long-term
"""
	isStarred: Boolean!
"""
Stability: Long-term
"""
	widgetType: String!
"""
Stability: Long-term
"""
	options: JSON!
"""
Stability: Long-term
"""
	packageId: VersionedPackageSpecifier
"""
Stability: Long-term
"""
	package: PackageInstallation
"""
Stability: Long-term
"""
	interactions: [QueryBasedWidgetInteraction!]!
"""
Allowed asset actions
Stability: Preview
"""
	allowedActions: [AssetAction!]!
"""
The resource identifier for this saved query.
Stability: Short-term
"""
	resource: String!
}

type SavedQueryTemplate {
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	displayName: String!
"""
Stability: Long-term
"""
	yamlTemplate: String!
}

type ScannedData {
"""
Stability: Long-term
"""
	currentBytes: Long!
"""
Stability: Long-term
"""
	limit: UsageLimit!
}

"""
A scheduled report schedule properties
"""
type Schedule {
"""
Cron pattern describing the schedule to execute the report on.
Stability: Long-term
"""
	cronExpression: String!
"""
Timezone of the schedule. Examples include UTC, Europe/Copenhagen.
Stability: Long-term
"""
	timeZone: String!
"""
Start date of the active period of the schedule.
Stability: Long-term
"""
	startDate: Long!
"""
Optional end date of the active period of the schedule.
Stability: Long-term
"""
	endDate: Long
}

"""
Information about a scheduled report
"""
type ScheduledReport {
"""
Id of the scheduled report.
Stability: Long-term
"""
	id: String!
"""
Name of the scheduled report.
Stability: Long-term
"""
	name: String!
"""
Flag indicating whether a password is defined for the report.
Stability: Long-term
"""
	isPasswordDefined: Boolean!
"""
Flag indicating whether the scheduled report is enabled.
Stability: Long-term
"""
	enabled: Boolean!
"""
Status of the latest report execution.
Stability: Long-term
"""
	status: String!
"""
Description of the scheduled report.
Stability: Long-term
"""
	description: String!
"""
The id of the dashboard the report was created for.
Stability: Long-term
"""
	dashboardId: String!
"""
The dashboard the report was created for.
Stability: Long-term
"""
	dashboard: Dashboard!
"""
Unix timestamp for the last report execution. The timestamp only indicates an attempt, not if it was successful.
Stability: Long-term
"""
	timeOfLastReportExecution: Long
"""
Unix timestamp for the next planned report execution.
Stability: Long-term
"""
	timeOfNextPlannedReportExecution: Long
"""
Last errors encountered while generating the scheduled report.
Stability: Long-term
"""
	lastExecutionErrors: [String!]!
"""
Last warnings encountered while generating the scheduled report.
Stability: Long-term
"""
	lastExecutionWarnings: [String!]!
"""
User who created the report.
Stability: Long-term
"""
	createdBy: User
"""
Date when the report was created.
Stability: Long-term
"""
	creationDate: String!
"""
Start of the relative time interval for the dashboard.
Stability: Long-term
"""
	timeIntervalStart: String
"""
The schedule to run the report by.
Stability: Long-term
"""
	schedule: Schedule!
"""
Labels attached to the scheduled report.
Stability: Long-term
"""
	labels: [String!]!
"""
List of parameter value configurations.
Stability: Long-term
"""
	parameters: [ParameterValue!]!
"""
List of recipients who should receive an email with the generated report.
Stability: Long-term
"""
	recipients: [String!]!
"""
Layout of the scheduled report.
Stability: Long-term
"""
	layout: ScheduledReportLayout!
"""
Allowed asset actions
Stability: Preview
"""
	allowedActions: [AssetAction!]!
"""
The resource identifier for this scheduled report.
Stability: Short-term
"""
	resource: String!
}

"""
Information about a scheduled report layout
"""
type ScheduledReportLayout {
"""
Paper size. Supported types are A4 and Letter.
Stability: Long-term
"""
	paperSize: String!
"""
Paper orientation. Supported types are Landscape and Portrait.
Stability: Long-term
"""
	paperOrientation: String!
"""
Paper layout. Supported types are List and Grid.
Stability: Long-term
"""
	paperLayout: String!
"""
Flag indicating whether to show report description.
Stability: Long-term
"""
	showDescription: Boolean
"""
Flag indicating whether to show title on frontpage.
Stability: Long-term
"""
	showTitleFrontpage: Boolean!
"""
Flag indicating whether to show parameters.
Stability: Long-term
"""
	showParameters: Boolean!
"""
Max number of rows to display in tables.
Stability: Long-term
"""
	maxNumberOfRows: Int!
"""
Flag indicating whether to show title header.
Stability: Long-term
"""
	showTitleHeader: Boolean!
"""
Flag indicating whether to show export date.
Stability: Long-term
"""
	showExportDate: Boolean!
"""
Flag indicating whether to show footer page numbers.
Stability: Long-term
"""
	footerShowPageNumbers: Boolean!
}

"""
Information about a scheduled search
"""
type ScheduledSearch {
"""
Id of the scheduled search.
Stability: Long-term
"""
	id: String!
"""
Name of the scheduled search.
Stability: Long-term
"""
	name: String!
"""
Description of the scheduled search.
Stability: Long-term
"""
	description: String
"""
LogScale query to execute.
Stability: Long-term
"""
	queryString: String!
"""
Start of the relative time interval for the query.
"""
	start: String!
"""
End of the relative time interval for the query.
"""
	end: String!
"""
Search interval in seconds.
Stability: Long-term
"""
	searchIntervalSeconds: Long!
"""
Offset of the search interval in seconds. Only present when 'queryTimestampType' is EventTimestamp.
Stability: Long-term
"""
	searchIntervalOffsetSeconds: Long
"""
Maximum number of seconds to wait for ingest delay. Only present when 'queryTimestampType' is IngestTimestamp.
Stability: Long-term
"""
	maxWaitTimeSeconds: Long
"""
Time zone of the schedule. Currently this field only supports UTC offsets like 'UTC', 'UTC-01' or 'UTC+12:45'.
Stability: Long-term
"""
	timeZone: String!
"""
Cron pattern describing the schedule to execute the query on.
Stability: Long-term
"""
	schedule: String!
"""
User-defined limit, which caps the number of missed searches to backfill, e.g. in the event of a shutdown. If the 'queryTimestampType' is IngestTimestamp this field is not used, but due to backwards compatibility a value of 0 is returned.
"""
	backfillLimit: Int!
"""
User-defined limit, which caps the number of missed searches to backfill, e.g. in the event of a shutdown. Only present when 'queryTimestampType' is EventTimestamp.
Stability: Long-term
"""
	backfillLimitV2: Int
"""
Timestamp type to use for the query.
Stability: Long-term
"""
	queryTimestampType: QueryTimestampType!
"""
Flag indicating whether the scheduled search is enabled.
Stability: Long-term
"""
	enabled: Boolean!
"""
List of Ids for actions to fire on query result.
Stability: Long-term
"""
	actions: [String!]!
"""
List of actions to fire on query result.
Stability: Long-term
"""
	actionsV2: [Action!]!
"""
Id of user which the scheduled search is running as.
Stability: Long-term
"""
	runAsUser: User
"""
Unix timestamp for when last query execution finished.
"""
	lastScheduledSearch: Long
"""
Unix timestamp for end of search interval for last query execution.
Stability: Long-term
"""
	lastExecuted: Long
"""
Unix timestamp for end of search interval for last query execution that triggered.
Stability: Long-term
"""
	lastTriggered: Long
"""
Unix timestamp for next planned search.
Stability: Long-term
"""
	timeOfNextPlannedExecution: Long
"""
Last error encountered while running the search.
Stability: Long-term
"""
	lastError: String
"""
Last warnings encountered while running the scheduled search.
Stability: Long-term
"""
	lastWarnings: [String!]!
"""
Labels added to the scheduled search.
Stability: Long-term
"""
	labels: [String!]!
"""
Flag indicating whether the calling user has 'starred' the scheduled search.
"""
	isStarred: Boolean!
"""
A template that can be used to recreate the scheduled search.
Stability: Long-term
"""
	yamlTemplate: YAML!
"""
Stability: Long-term
"""
	packageId: VersionedPackageSpecifier
"""
Stability: Long-term
"""
	package: PackageInstallation
"""
User or token used to modify the asset.
Stability: Preview
"""
	modifiedInfo: ModifiedInfo!
"""
Ownership of the query run by this scheduled search
Stability: Long-term
"""
	queryOwnership: QueryOwnership!
"""
Allowed asset actions
Stability: Preview
"""
	allowedActions: [AssetAction!]!
"""
The resource identifier for this scheduled search.
Stability: Short-term
"""
	resource: String!
}

type ScheduledSearchTemplate {
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	displayName: String!
"""
Stability: Long-term
"""
	yamlTemplate: String!
"""
Stability: Long-term
"""
	labels: [String!]!
}

type SchemaField {
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	description: String
}

"""
An asset permissions search result entry
"""
type SearchAssetPermissionsResultEntry {
"""
The unique id for the Asset
Stability: Preview
"""
	assetId: String!
"""
The name of the Asset
Stability: Preview
"""
	assetName: String!
"""
The type of the Asset
Stability: Preview
"""
	assetType: AssetPermissionsAssetType!
"""
The search domain that the asset belongs to
Stability: Preview
"""
	searchDomain: SearchDomain
"""
The asset actions allowed for this asset
Stability: Preview
"""
	permissions: [AssetAction!]!
"""
The resource string representation of this asset. Can be used for assigning asset permissions for this asset
Stability: Preview
"""
	resource: String!
}

"""
Common interface for Repositories and Views.
"""
interface SearchDomain {
"""
Common interface for Repositories and Views.
"""
	id: String!
"""
Common interface for Repositories and Views.
"""
	name: RepoOrViewName!
"""
Common interface for Repositories and Views.
"""
	description: String
"""
Common interface for Repositories and Views.
"""
	deletedDate: Long
"""
Common interface for Repositories and Views.
"""
	permanentlyDeletedAt: Long
"""
Common interface for Repositories and Views.
"""
	isStarred: Boolean!
"""
Common interface for Repositories and Views.
"""
	searchLimitedMs: Long
"""
Common interface for Repositories and Views.
"""
	reposExcludedInSearchLimit: [String!]!
"""
Common interface for Repositories and Views.
"""
	packageV2(
		packageId: VersionedPackageSpecifier!
	): Package2!
"""
Common interface for Repositories and Views.
"""
	packageVersions(
		packageId: UnversionedPackageSpecifier!
	): [RegistryPackageVersionInfo!]!
"""
Common interface for Repositories and Views.
"""
	availablePackages(
		filter: String
		tags: [PackageTag!]
		categories: [String!]
	): [PackageRegistrySearchResultItem!]!
"""
Common interface for Repositories and Views.
"""
	installedPackages: [PackageInstallation!]!
"""
Common interface for Repositories and Views.
"""
	hasPackageInstalled(
		packageId: VersionedPackageSpecifier!
	): Boolean!
"""
Common interface for Repositories and Views.
"""
	users: [User!]!
"""
Common interface for Repositories and Views.
"""
	usersAndGroups(
		search: String
		skip: Int
		limit: Int
	): UsersAndGroupsSearchResultSet!
"""
Common interface for Repositories and Views.
"""
	usersV2(
		search: String
		permissionFilter: Permission
		skip: Int
		limit: Int
	): Users!
"""
Common interface for Repositories and Views.
"""
	groups: [Group!]!
"""
Common interface for Repositories and Views.
"""
	starredFields: [String!]!
"""
Common interface for Repositories and Views.
"""
	recentQueriesV2: [RecentQuery!]!
"""
Common interface for Repositories and Views.
"""
	automaticSearch: Boolean!
"""
Common interface for Repositories and Views.
"""
	isActionAllowed(
		action: ViewAction!
	): Boolean!
"""
Common interface for Repositories and Views.
"""
	allowedViewActions: [ViewAction!]!
"""
Common interface for Repositories and Views.
"""
	viewerQueryPrefix: String!
"""
Common interface for Repositories and Views.
"""
	tags: [String!]!
"""
Common interface for Repositories and Views.
"""
	resource: String!
"""
Common interface for Repositories and Views.
"""
	interactions: [ViewInteraction!]!
"""
Common interface for Repositories and Views.
"""
	alert(
		id: String!
	): Alert!
"""
Common interface for Repositories and Views.
"""
	alerts: [Alert!]!
"""
Common interface for Repositories and Views.
"""
	dashboard(
		id: String!
	): Dashboard!
"""
Common interface for Repositories and Views.
"""
	dashboards: [Dashboard!]!
"""
Common interface for Repositories and Views.
"""
	filterAlert(
		id: String!
	): FilterAlert!
"""
Common interface for Repositories and Views.
"""
	filterAlerts: [FilterAlert!]!
"""
Common interface for Repositories and Views.
"""
	aggregateAlert(
		id: String!
	): AggregateAlert!
"""
Common interface for Repositories and Views.
"""
	aggregateAlerts: [AggregateAlert!]!
"""
Common interface for Repositories and Views.
"""
	scheduledSearch(
		id: String!
	): ScheduledSearch!
"""
Common interface for Repositories and Views.
"""
	scheduledSearches: [ScheduledSearch!]!
"""
Common interface for Repositories and Views.
"""
	action(
		id: String!
	): Action!
"""
Common interface for Repositories and Views.
"""
	actions(
		actionIds: [String!]
	): [Action!]!
"""
Common interface for Repositories and Views.
"""
	savedQuery(
		id: String!
	): SavedQuery!
"""
Common interface for Repositories and Views.
"""
	savedQueries: [SavedQuery!]!
"""
Common interface for Repositories and Views.
"""
	defaultQuery: SavedQuery
"""
Common interface for Repositories and Views.
"""
	files: [File!]!
"""
Common interface for Repositories and Views.
"""
	fileFieldSearch(
		fileName: String!
		fieldName: String!
		prefixFilter: String
		valueFilters: [FileFieldFilterType!]!
		fieldsToInclude: [String!]!
		maxEntries: Int!
	): [[DictionaryEntryType!]!]!
"""
Common interface for Repositories and Views.
"""
	scheduledReports: [ScheduledReport!]!
"""
Common interface for Repositories and Views.
"""
	scheduledReport(
		id: String!
	): ScheduledReport
}

"""
An asset in a search domain.
"""
type SearchDomainAsset {
"""
The id of the asset.
Stability: Preview
"""
	id: String!
"""
The name of the asset.
Stability: Preview
"""
	name: String!
"""
The type of the asset.
Stability: Preview
"""
	assetType: AssetPermissionsAssetType!
"""
The id of the search domain.
Stability: Preview
"""
	searchDomainId: String!
"""
The name of the search domain.
Stability: Preview
"""
	searchDomainName: String!
"""
The resource string representation of this asset. Can be used for assigning asset permissions for this asset
Stability: Preview
"""
	resource: String!
}

"""
A result set containing information about search domain assets.
"""
type SearchDomainAssetsResultSet {
"""
The total number of matching results.
Stability: Preview
"""
	totalResults: Int!
"""
The paginated result set.
Stability: Preview
"""
	results: [SearchDomainAsset!]!
}

"""
A page of searchDomains.
"""
type SearchDomainPage {
"""
Stability: Long-term
"""
	pageInfo: PageType!
"""
Stability: Long-term
"""
	page: [SearchDomain!]!
}

"""
The role assigned in a searchDomain.
"""
type SearchDomainRole {
"""
Stability: Long-term
"""
	searchDomain: SearchDomain!
"""
Stability: Long-term
"""
	role: Role!
}

"""
The search domain search result set
"""
type SearchDomainSearchResultSet {
"""
The total number of matching results
Stability: Long-term
"""
	totalResults: Int!
"""
The paginated result set
Stability: Long-term
"""
	results: [SearchDomain!]!
}

enum SearchDomainTypes {
	All
	Views
	Repository
}

"""
Aggregations for search fleet result set
"""
type SearchFleetAggregations {
"""
Stability: Short-term
"""
	status: SearchFleetStatus!
"""
Stability: Short-term
"""
	versions: [SearchFleetVersions!]!
"""
Stability: Short-term
"""
	allVersions: [String!]!
"""
Stability: Short-term
"""
	os: SearchFleetSystems!
"""
Stability: Short-term
"""
	ingest: SearchFleetIngest!
}

"""
The fleet search has not finished yet
"""
type SearchFleetInProgress {
"""
Stability: Short-term
"""
	queryState: String!
"""
Stability: Short-term
"""
	totalResultsInfo: SearchFleetTotalResultInfo!
"""
The total number of matching results
Stability: Short-term
"""
	totalResults: Int!
"""
Aggregations of the result set
Stability: Short-term
"""
	aggregations: SearchFleetAggregations
"""
The paginated result set
Stability: Short-term
"""
	results: [LogCollector!]!
}

"""
Ingest aggregation for search fleet result set
"""
type SearchFleetIngest {
"""
Stability: Short-term
"""
	volume: Long!
}

"""
A fleet installation token search result set
"""
type SearchFleetInstallationTokenResultSet {
"""
The total number of matching results
Stability: Short-term
"""
	totalResults: Int!
"""
The paginated result set
Stability: Short-term
"""
	results: [FleetInstallationToken!]!
}

enum SearchFleetOsFilter {
	Unknown
	MacOS
	Linux
	Windows
}

"""
A fleet search result set
"""
type SearchFleetResultSet {
"""
Stability: Short-term
"""
	queryState: String!
"""
Stability: Short-term
"""
	totalResultsInfo: SearchFleetTotalResultInfo!
"""
The total number of matching results
Stability: Short-term
"""
	totalResults: Int!
"""
Aggregations of the result set
Stability: Short-term
"""
	aggregations: SearchFleetAggregations
"""
The paginated result set
Stability: Short-term
"""
	results: [LogCollector!]!
}

"""
Status aggregation for search fleet result set
"""
type SearchFleetStatus {
"""
Stability: Short-term
"""
	errored: Int!
"""
Stability: Short-term
"""
	ok: Int!
}

enum SearchFleetStatusFilter {
	Error
	OK
}

"""
Systems aggregation for search fleet result set
"""
type SearchFleetSystems {
"""
Stability: Short-term
"""
	windows: Int!
"""
Stability: Short-term
"""
	macOs: Int!
"""
Stability: Short-term
"""
	linux: Int!
}

"""
Information about the returned result set.
"""
union SearchFleetTotalResultInfo =OnlyTotal | GroupFilterInfo

"""
Query result for search fleet
"""
union SearchFleetUnion =SearchFleetResultSet | SearchFleetInProgress

input SearchFleetVersionFilter {
	version: String
	needsUpdate: Boolean
}

"""
Version aggregation for search fleet result set
"""
type SearchFleetVersions {
"""
Stability: Short-term
"""
	version: String!
"""
Stability: Short-term
"""
	count: Int!
}

type SearchLinkInteraction {
"""
Stability: Long-term
"""
	repoOrViewName: RepoOrViewName
"""
Stability: Long-term
"""
	queryString: String!
"""
Stability: Long-term
"""
	arguments: [DictionaryEntryType!]!
"""
Stability: Long-term
"""
	openInNewTab: Boolean!
"""
Stability: Long-term
"""
	useWidgetTimeWindow: Boolean!
}

"""
A log collector configuration search result set
"""
type SearchLogCollectorConfigurationResultSet {
"""
The total number of matching results
Stability: Short-term
"""
	totalResults: Int!
"""
The paginated result set
Stability: Short-term
"""
	results: [LogCollectorConfiguration!]!
}

"""
A log collector group search result set
"""
type SearchLogCollectorGroupsResultSet {
"""
The total number of matching results
Stability: Short-term
"""
	totalResults: Int!
"""
The paginated result set
Stability: Short-term
"""
	results: [LogCollectorGroup!]!
}

type SearchResult {
"""
The total number of results that matched the search query. Only [pageSize] elements will be returned.
Stability: Preview
"""
	totalResults: Int!
"""
Stability: Preview
"""
	data: [EntitySearchResultEntity!]!
"""
Stability: Preview
"""
	cursor: String
"""
Stability: Preview
"""
	hasNextPage: Boolean!
"""
Stability: Preview
"""
	hasPreviousPage: Boolean!
}

enum Searchdomain__SortBy {
	Name
	Volume
	DeletedAt
	LimitName
}

"""
A dashboard section.
"""
type Section {
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	title: String
"""
Stability: Long-term
"""
	description: String
"""
Stability: Long-term
"""
	collapsed: Boolean!
"""
Stability: Long-term
"""
	timeSelector: TimeInterval
"""
Stability: Long-term
"""
	widgetIds: [String!]!
"""
Stability: Long-term
"""
	order: Int!
}

scalar SemanticVersion

type SeriesConfig {
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	title: String
"""
Stability: Long-term
"""
	color: String
}

"""
Metadata about a registered service
"""
type ServiceMetadata {
"""
The name of the service
Stability: Preview
"""
	name: String!
"""
The type of the service
Stability: Preview
"""
	serviceType: String!
"""
The endpoint of the service
Stability: Preview
"""
	endpointUrl: String!
"""
The version of the service
Stability: Preview
"""
	version: String!
"""
The health status of the service
Stability: Preview
"""
	healthStatus: HealthStatus!
}

"""
An active session.
"""
type Session {
"""
The id of the session
Stability: Long-term
"""
	id: String!
"""
Client info.
Stability: Long-term
"""
	clientInfo: String!
"""
Approximate city from IP
Stability: Long-term
"""
	city: String
"""
Country from IP
Stability: Long-term
"""
	country: String
"""
The IP of the client when the session was created.
Stability: Long-term
"""
	ip: String!
"""
The user that created the session.
Stability: Long-term
"""
	user: User!
"""
The time at which the session was created.
Stability: Long-term
"""
	createdAt: Long
"""
The time at which the session was last active.
Stability: Long-term
"""
	lastActivityAt: Long
"""
If the session is the current session for the user.
Stability: Long-term
"""
	isCurrentSession: Boolean!
}

"""
The session query result set
"""
type SessionQueryResultSet {
"""
The total number of matching results
Stability: Long-term
"""
	totalResults: Int!
"""
The paginated result set
Stability: Long-term
"""
	results: [Session!]!
}

enum Sessions__Filter_Level {
	Organization
	User
}

enum Sessions__SortBy {
	LastActivityTime
	LoginTime
	IPAddress
	Location
	ClientInfo
	User
}

"""
Output diagnostic from query validation.
"""
enum Severity {
	Error
	Warning
	Information
	Hint
}

"""
Represents information about a dashboard shared through a link.
"""
type SharedDashboard {
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	displayName: String!
"""
The ip filter on the shared dashboard.
Stability: Long-term
"""
	ipFilter: IPFilter
"""
Stability: Long-term
"""
	sharedTimeInterval: SharedDashboardTimeInterval
"""
The name of the repository or view queries are executed against.
Stability: Long-term
"""
	repoOrViewName: RepoOrViewName!
"""
Stability: Long-term
"""
	widgets: [Widget!]!
"""
Stability: Long-term
"""
	sections: [Section!]!
"""
Stability: Long-term
"""
	series: [SeriesConfig!]!
"""
The resource identifier for this dashboard.
Stability: Short-term
"""
	resource: String!
}

"""
Time Interval that is active on all dashboard widgets
"""
type SharedDashboardTimeInterval {
"""
Stability: Long-term
"""
	isLive: Boolean!
"""
Stability: Long-term
"""
	start: String!
"""
Stability: Long-term
"""
	end: String!
}

"""
Security policies for shared dashboards in the organization
"""
type SharedDashboardsSecurityPolicies {
"""
Whether shared dashboard tokens are enabled
Stability: Short-term
"""
	sharedDashboardsEnabled: Boolean!
"""
The IP filter that is enforced on all shared dashboards
Stability: Short-term
"""
	enforceIpFilter: IPFilter
}

enum ShowTermsAndConditions {
	StandardMandatoryDoDNoticeAndConsent
	LogScaleEula
	None
}

enum SocialLoginField {
	AllowAll
	DenyAll
	AllowSelected
}

"""
Social login configuration for the organization
"""
type SocialLoginSettings {
"""
Social provider
Stability: Short-term
"""
	provider: SocialProviderProfile!
"""
Filter
Stability: Short-term
"""
	filter: SocialLoginField!
"""
Allowed users
Stability: Short-term
"""
	allowList: [User!]!
}

enum SocialProviderProfile {
	Google
	Github
	Bitbucket
}

"""
The sort by options for assets.
"""
enum SortBy {
	Name
	SearchDomain
}

"""
Field to sort queries by
"""
enum SortField {
	InitiatedBy
	View
	Age
	Status
	DeltaTotalMemoryAllocation
	TotalMemoryAllocation
	DeltaLiveCPU
	TotalLiveCPU
	DeltaStaticCPU
	TotalStaticCPU
	DeltaStaticCost
	DeltaLiveCost
	DeltaTotalCost
	StaticCost
	LiveCost
	TotalCost
}

"""
Order to sort queries by
"""
enum SortOrder {
	Ascending
	Descending
}

"""
Returns a query that gives the underlying events for some specified fields. queryArguments are names of free variables in the query, prefixed with a ?.For example, 'foo=?bar | count()' has the queryArgument bar.
"""
type SourceEventsQueryResultType {
"""
Stability: Preview
"""
	query: String
"""
Stability: Preview
"""
	queryArguments: [String!]!
"""
Stability: Preview
"""
	diagnostics: [QueryDiagnostic!]!
}

type StorageOnDay {
"""
Stability: Long-term
"""
	date: DateTime!
"""
Stability: Long-term
"""
	storageBytes: Long!
"""
Stability: Long-term
"""
	limit: UsageLimit!
}

type StoredData {
"""
Stability: Long-term
"""
	currentBytes: Long!
"""
Stability: Long-term
"""
	limit: UsageLimit!
}

"""
Subdomain configuration for the organization
"""
type SubdomainConfig {
"""
The primary subdomain of the organization
Stability: Short-term
"""
	primarySubdomain: String!
"""
The secondary subdomains of the organization
Stability: Short-term
"""
	secondarySubdomains: [String!]!
"""
EnforceSubdomain, if set to true the organization can only be accessed by the subdomain, otherwise it can also be accessed directly at the cluster domain url.
Stability: Short-term
"""
	enforceSubdomains: Boolean!
}

type SuggestedAlertTypeInfo {
"""
The suggested alert type.
Stability: Short-term
"""
	alertType: AlertType!
}

"""
Actions a user may perform on the system.
"""
enum SystemAction {
	ViewOrganizations
	AdministerSystemPermissions
	ChangeSubdomain
	ViewSubdomain
	DeleteOrganizations
	AdministerOrganizations
	AdministerCloud
	AdministerTokens
	AdministerCluster
	ChangeSharedFiles
}

"""
System permissions
"""
enum SystemPermission {
	ReadHealthCheck
	ViewOrganizations
	ManageOrganizations
	ImportOrganization
	DeleteOrganizations
	ChangeSystemPermissions
	ManageCluster
	IngestAcrossAllReposWithinCluster
	DeleteHumioOwnedRepositoryOrView
	ChangeUsername
	ChangeFeatureFlags
	ChangeSubdomains
	ListSubdomains
	PatchGlobal
	ChangeBucketStorage
	ManageOrganizationLinks
}

"""
A tag on a datasource.
"""
type Tag {
"""
Stability: Short-term
"""
	key: String!
"""
Stability: Short-term
"""
	value: String!
}

"""
Describes the number of groups that tag values get distributed into for a given tag.
"""
type TagGroupingRule {
"""
Stability: Short-term
"""
	tagName: String!
"""
Stability: Short-term
"""
	groupCount: Int!
}

type TagInfo {
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	value: String!
}

"""
A time interval that represents either a fixed or relative time range.
"""
type TimeInterval {
"""
Stability: Long-term
"""
	start: String!
"""
Stability: Long-term
"""
	end: String!
}

"""
A token.
"""
interface Token {
"""
A token.
"""
	id: String!
"""
A token.
"""
	name: String!
"""
A token.
"""
	expireAt: Long
"""
A token.
"""
	ipFilter: String
"""
A token.
"""
	ipFilterV2: IPFilter
"""
A token.
"""
	createdAt: Long!
}

"""
The token query result set
"""
type TokenQueryResultSet {
"""
The total number of matching results
Stability: Long-term
"""
	totalResults: Int!
"""
The paginated result set
Stability: Long-term
"""
	results: [Token!]!
}

"""
Security policies for tokens in the organization
"""
type TokenSecurityPolicies {
"""
Whether personal user tokens are enabled
Stability: Short-term
"""
	personalUserTokensEnabled: Boolean!
"""
Maximum time in ms a personal user token can be used before expiring (TTL)
Stability: Short-term
"""
	personalUserTokensEnforceExpirationAfterMs: Long
"""
The IP filter that is enforced on all personal user tokens
Stability: Short-term
"""
	personalUserTokensEnforceIpFilter: IPFilter
"""
Whether view permission tokens are enabled
Stability: Short-term
"""
	viewPermissionTokensEnabled: Boolean!
"""
Maximum time in ms a view permission token can be used before expiring (TTL)
Stability: Short-term
"""
	viewPermissionTokensEnforceExpirationAfterMs: Long
"""
The IP filter that is enforced on all view permission tokens
Stability: Short-term
"""
	viewPermissionTokensEnforceIpFilter: IPFilter
"""
Whether it is allowed to change permissions on existing view permission tokens
Stability: Short-term
"""
	viewPermissionTokensAllowPermissionUpdates: Boolean
"""
Whether organization permission tokens are enabled
Stability: Short-term
"""
	organizationPermissionTokensEnabled: Boolean!
"""
Maximum time in ms a organization permission token can be used before expiring (TTL)
Stability: Short-term
"""
	organizationPermissionTokensEnforceExpirationAfterMs: Long
"""
The IP filter that is enforced on all organization permission tokens
Stability: Short-term
"""
	organizationPermissionTokensEnforceIpFilter: IPFilter
"""
Whether it is allowed to change permissions on existing organization permission tokens
Stability: Short-term
"""
	organizationPermissionTokensAllowPermissionUpdates: Boolean
"""
Whether system permission tokens are enabled
Stability: Short-term
"""
	systemPermissionTokensEnabled: Boolean!
"""
Maximum time in ms a system permission token can be used before expiring (TTL)
Stability: Short-term
"""
	systemPermissionTokensEnforceExpirationAfterMs: Long
"""
The IP filter that is enforced on all system permission tokens
Stability: Short-term
"""
	systemPermissionTokensEnforceIpFilter: IPFilter
"""
Whether it is allowed to change permissions on existing system permission tokens
Stability: Short-term
"""
	systemPermissionTokensAllowPermissionUpdates: Boolean
}

enum Tokens__SortBy {
	ExpirationDate
	Name
}

enum Tokens__Type {
	ViewPermissionToken
	OrganizationPermissionToken
	OrganizationManagementPermissionToken
	SystemPermissionToken
}

"""
Trigger mode for an aggregate alert.
"""
enum TriggerMode {
"""
Wait for up to 20 minutes for a complete result before triggering.
"""
	CompleteMode
"""
Trigger immediately, even on incomplete results. If nothing to trigger on, wait for up to 20 minutes for there to be a result to trigger on.
"""
	ImmediateMode
}

scalar URL

enum UiTheme {
	Auto
	Dark
	Light
}

type UnlimitedUsage {
"""
Stability: Long-term
"""
	unlimited: Boolean!
}

"""
An unsaved aggregate alert.
"""
type UnsavedAggregateAlert {
"""
Name of the aggregate alert.
Stability: Long-term
"""
	name: String!
"""
Description of the aggregate alert.
Stability: Long-term
"""
	description: String
"""
LogScale query to execute.
Stability: Long-term
"""
	queryString: String!
"""
List of actions to fire on query result.
Stability: Long-term
"""
	actions: [Action!]!
"""
Labels attached to the aggregate alert.
Stability: Long-term
"""
	labels: [String!]!
"""
Flag indicating whether the aggregate alert is enabled.
Stability: Long-term
"""
	enabled: Boolean!
"""
Throttle time in seconds.
Stability: Long-term
"""
	throttleTimeSeconds: Long!
"""
A field to throttle on. Can only be set if throttleTimeSeconds is set.
Stability: Long-term
"""
	throttleField: String
"""
Timestamp type to use for a query.
Stability: Long-term
"""
	queryTimestampType: QueryTimestampType!
"""
Trigger mode used for triggering the alert.
Stability: Long-term
"""
	triggerMode: TriggerMode!
"""
Search interval in seconds.
Stability: Long-term
"""
	searchIntervalSeconds: Long!
}

"""
An unsaved alert.
"""
type UnsavedAlert {
"""
Name of the alert.
Stability: Long-term
"""
	name: String!
"""
Description of the alert.
Stability: Long-term
"""
	description: String
"""
LogScale query to execute.
Stability: Long-term
"""
	queryString: String!
"""
Start of the relative time interval for the query.
Stability: Long-term
"""
	queryStart: String!
"""
Throttle time in milliseconds.
Stability: Long-term
"""
	throttleTimeMillis: Long!
"""
Field to throttle on.
Stability: Long-term
"""
	throttleField: String
"""
List of ids for actions to fire on query result.
Stability: Long-term
"""
	actions: [Action!]!
"""
Labels attached to the alert.
Stability: Long-term
"""
	labels: [String!]!
"""
Flag indicating whether the alert is enabled.
Stability: Long-term
"""
	enabled: Boolean!
}

"""
An unsaved filter alert.
"""
type UnsavedFilterAlert {
"""
Name of the filter alert.
Stability: Long-term
"""
	name: String!
"""
Description of the filter alert.
Stability: Long-term
"""
	description: String
"""
LogScale query to execute.
Stability: Long-term
"""
	queryString: String!
"""
List of ids for actions to fire on query result.
Stability: Long-term
"""
	actions: [Action!]!
"""
Labels attached to the filter alert.
Stability: Long-term
"""
	labels: [String!]!
"""
Flag indicating whether the filter alert is enabled.
Stability: Long-term
"""
	enabled: Boolean!
"""
Throttle time in seconds.
Stability: Long-term
"""
	throttleTimeSeconds: Long
"""
A field to throttle on. Can only be set if throttleTimeSeconds is set.
Stability: Long-term
"""
	throttleField: String
}

"""
The contents of a parser YAML template in structured form. The parser needs to be persisted before it can be deployed.
"""
type UnsavedParser {
"""
Name of the parser.
Stability: Long-term
"""
	name: String!
"""
The description of the parser.
Stability: Long-term
"""
	description: String
"""
The parser script that is executed for every incoming event.
Stability: Long-term
"""
	script: String!
"""
Fields that are used as tags.
Stability: Long-term
"""
	fieldsToTag: [String!]!
"""
A list of fields that will be removed from the event before it's parsed. These fields will not be included when calculating usage.
Stability: Long-term
"""
	fieldsToBeRemovedBeforeParsing: [String!]!
"""
Test cases that can be used to help verify that the parser works as expected.
Stability: Long-term
"""
	testCases: [ParserTestCase!]!
}

"""
An unsaved scheduled search.
"""
type UnsavedScheduledSearch {
"""
Name of the scheduled search.
Stability: Long-term
"""
	name: String!
"""
Description of the scheduled search.
Stability: Long-term
"""
	description: String
"""
LogScale query to execute.
Stability: Long-term
"""
	queryString: String!
"""
Start of the relative time interval for the query.
"""
	start: String!
"""
End of the relative time interval for the query.
"""
	end: String!
"""
Cron pattern describing the schedule to execute the query on.
Stability: Long-term
"""
	schedule: String!
"""
Time zone of the schedule. Currently this field only supports UTC offsets like 'UTC', 'UTC-01' or 'UTC+12:45'.
Stability: Long-term
"""
	timeZone: String!
"""
User-defined limit, which caps the number of missed searches to backfill, e.g. in the event of a shutdown. If the 'queryTimestampType' is IngestTimestamp this field is not used, but due to backwards compatibility a value of 0 is returned.
"""
	backfillLimit: Int!
"""
User-defined limit, which caps the number of missed searches to backfill, e.g. in the event of a shutdown. Only present when 'queryTimestampType' is EventTimestamp.
Stability: Long-term
"""
	backfillLimitV2: Int
"""
Search interval in seconds.
Stability: Long-term
"""
	searchIntervalSeconds: Long!
"""
Offset of the search interval in seconds. Only present when 'queryTimestampType' is EventTimestamp.
Stability: Long-term
"""
	searchIntervalOffsetSeconds: Long
"""
Maximum number of seconds to wait for ingest delay. Only present when 'queryTimestampType' is IngestTimestamp.
Stability: Long-term
"""
	maxWaitTimeSeconds: Long
"""
Timestamp type to use for the query.
Stability: Long-term
"""
	queryTimestampType: QueryTimestampType!
"""
List of Ids for actions to fire on query result.
Stability: Long-term
"""
	actions: [Action!]!
"""
Labels attached to the scheduled search.
Stability: Long-term
"""
	labels: [String!]!
"""
Flag indicating whether the scheduled search is enabled.
Stability: Long-term
"""
	enabled: Boolean!
}

scalar UnversionedPackageSpecifier

type UpdateParametersInteraction {
"""
Stability: Long-term
"""
	arguments: [DictionaryEntryType!]!
"""
Stability: Long-term
"""
	useWidgetTimeWindow: Boolean!
}

"""
An uploaded file snapshot.
"""
type UploadedFileSnapshot {
"""
Stability: Long-term
"""
	nameAndPath: FileNameAndPath!
"""
Stability: Long-term
"""
	headers: [String!]!
"""
Stability: Long-term
"""
	lines: [[String!]!]!
"""
Stability: Long-term
"""
	totalLinesCount: Long!
"""
Stability: Long-term
"""
	limit: Int!
"""
Stability: Long-term
"""
	offset: Int!
"""
Stability: Long-term
"""
	filterString: String
"""
The resource identifier for this file.
Stability: Short-term
"""
	resource: String!
}

scalar UrlOrData

"""
Contractual usage limit. If you are above you should renegotiate your contract.
"""
union UsageLimit =UsageLimitDefined | UnlimitedUsage

type UsageLimitDefined {
"""
Stability: Long-term
"""
	limit: Long!
}

type UsageOnDay {
"""
Stability: Long-term
"""
	date: DateTime!
"""
Stability: Long-term
"""
	ingestBytes: Long!
"""
Stability: Long-term
"""
	averageIngestBytes: Long
"""
Stability: Long-term
"""
	limit: UsageLimit!
}

type UsageStats {
"""
Current usage measurements and limits for ingest, storage, scanned data and users
Stability: Long-term
"""
	currentStats(
		queryId: String
	): CurrentUsageQueryResult!
"""
Stability: Long-term
"""
	monthlyIngest(
		month: Int!
		year: Int!
		queryId: String
	): MonthlyIngestQueryResult!
"""
Stability: Long-term
"""
	monthlyStoredData(
		month: Int!
		year: Int!
		queryId: String
	): MonthlyStorageQueryResult!
"""
Stability: Long-term
"""
	firstUsageTimeStamp: Long!
"""
Stability: Long-term
"""
	repositoriesIngest(
		month: Int!
		year: Int!
		day: Int
"""
Filter results based on this string
"""
		searchFilter: String
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
		sortBy: RepositoriesUsageQuerySortBy!
		queryId: String
	): RepositoriesUsageQueryResultTypes!
"""
Stability: Long-term
"""
	repositoriesStorage(
		month: Int!
		year: Int!
		day: Int
"""
Filter results based on this string
"""
		searchFilter: String
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
		sortBy: RepositoriesUsageQuerySortBy!
		queryId: String
	): RepositoriesUsageQueryResultTypes!
}

"""
A user profile.
"""
type User {
"""
Stability: Long-term
"""
	id: String!
"""
fullName if present, otherwise username.
Stability: Long-term
"""
	displayName: String!
"""
Stability: Long-term
"""
	username: String!
"""
Stability: Long-term
"""
	isRoot: Boolean!
"""
Stability: Long-term
"""
	isOrgRoot: Boolean!
"""
Stability: Long-term
"""
	fullName: String
"""
Stability: Long-term
"""
	firstName: String
"""
Stability: Long-term
"""
	lastName: String
"""
Stability: Long-term
"""
	phoneNumber: String
"""
Stability: Long-term
"""
	email: String
"""
Stability: Long-term
"""
	picture: String
"""
Stability: Long-term
"""
	createdAt: DateTime!
"""
Stability: Long-term
"""
	countryCode: String
"""
Stability: Long-term
"""
	stateCode: String
"""
Stability: Long-term
"""
	company: String
"""
Stability: Long-term
"""
	userOrGroupSearchDomainRoles(
		search: String
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
	): UserOrGroupSearchDomainRoleResultSet!
"""
Stability: Long-term
"""
	groupSearchDomainRoles: [GroupSearchDomainRole!]!
"""
Stability: Long-term
"""
	searchDomainRoles(
		searchDomainId: String
	): [SearchDomainRole!]!
	searchDomainRolesByName(
		searchDomainName: String!
	): SearchDomainRole
"""
Stability: Long-term
"""
	searchDomainRolesBySearchDomainName(
		searchDomainName: String!
	): [SearchDomainRole!]!
"""
Get allowed asset actions for the user on a specific asset and explain how these actions have been granted
Stability: Preview
"""
	allowedAssetActionsBySource(
"""
Id of the asset
"""
		assetId: String!
"""
The type of the asset.
"""
		assetType: AssetPermissionsAssetType!
"""
Search domain id
"""
		searchDomainId: String
	): [AssetActionsBySource!]!
"""
Search for asset permissions for the user. Only search for asset name is supported with regards to the ${SearchFilterArg.name} argument.
Stability: Preview
"""
	searchAssetPermissions(
"""
Filter results based on this string
"""
		searchFilter: String
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
"""
Choose the order in which the results are returned.
"""
		orderBy: OrderBy
"""
The sort by options for assets. Asset name is default
"""
		sortBy: SortBy
"""
List of asset types
"""
		assetTypes: [AssetPermissionsAssetType!]
"""
List of search domain id's to search within. Null or empty list is interpreted as all search domains
"""
		searchDomainIds: [String!]
"""
Include Read, Update and/or Delete permission assignments. The filter will accept all assets if the argument Null or the empty list.
"""
		permissions: [AssetAction!]
	): AssetPermissionSearchResultSet!
"""
The roles assigned to the user through a group.
Stability: Preview
"""
	rolesV2(
		search: String
		typeFilter: [PermissionType!]
"""
The amount of results to return.
"""
		limit: Int
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
		searchInGroups: Boolean
	): RolesResultSetType!
"""
The groups the user is a member of.
Stability: Preview
"""
	groupsV2(
		search: String
		typeFilter: [PermissionType!]
"""
The amount of results to return.
"""
		limit: Int
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
		searchInRoles: Boolean
	): GroupResultSetType!
"""
The groups the user is a member of.
Stability: Long-term
"""
	groups: [Group!]!
"""
Permissions of the user.
Stability: Long-term
"""
	permissions(
"""
Exact name of the repo to find permissions for.
"""
		viewName: String
	): [UserPermissions!]!
"""
A page of user permissions.
"""
	permissionsPage(
		search: String
		pageNumber: Int!
		pageSize: Int!
	): UserPermissionsPage!
"""
Returns the actions the user is allowed to perform in the system.
Stability: Long-term
"""
	allowedSystemActions: [SystemAction!]!
"""
Returns the actions the user is allowed to perform in the organization.
Stability: Long-term
"""
	allowedOrganizationActions: [OrganizationAction!]!
}

type UserAndTimestamp {
"""
Stability: Long-term
"""
	username: String!
"""
Stability: Long-term
"""
	user: User
"""
Stability: Long-term
"""
	timestamp: DateTime!
}

"""
A user or a group
"""
union UserOrGroup =Group | User

"""
An asset permission search result set
"""
type UserOrGroupAssetPermissionSearchResultSet {
"""
The total number of matching results
Stability: Preview
"""
	totalResults: Int!
"""
The paginated result set
Stability: Preview
"""
	results: [UserOrGroupTypeAndPermissions!]!
}

"""
A user or a group role
"""
union UserOrGroupSearchDomainRole =GroupSearchDomainRole | SearchDomainRole

"""
A page of users or group roles.
"""
type UserOrGroupSearchDomainRoleResultSet {
"""
The total number of matching results
Stability: Long-term
"""
	totalResults: Int!
"""
Stability: Long-term
"""
	results: [UserOrGroupSearchDomainRole!]!
"""
Stability: Long-term
"""
	totalSearchDomains: Int!
}

"""
User or groups and its asset permissions
"""
type UserOrGroupTypeAndPermissions {
"""
Stability: Preview
"""
	userOrGroup: UserOrGroup!
"""
Stability: Preview
"""
	assetPermissions: [AssetAction!]!
"""
The type of the Asset
Stability: Preview
"""
	assetType: AssetPermissionsAssetType!
}

"""
Permissions of the user.
"""
type UserPermissions {
"""
Stability: Short-term
"""
	searchDomain: SearchDomain!
"""
Stability: Short-term
"""
	queryPrefix: String!
"""
Stability: Short-term
"""
	viewPermissions: [Permission!]!
}

"""
A page of user permissions.
"""
type UserPermissionsPage {
"""
Stability: Short-term
"""
	pageInfo: PageType!
"""
Stability: Short-term
"""
	page: [UserPermissions!]!
}

"""
The users query result set.
"""
type UserResultSetType {
"""
The total number of matching results
Stability: Long-term
"""
	totalResults: Int!
"""
The paginated result set
Stability: Long-term
"""
	results: [User!]!
}

type UserSettings {
"""
Stability: Long-term
"""
	uiTheme: UiTheme!
"""
Stability: Long-term
"""
	starredDashboards: [String!]!
"""
Stability: Long-term
"""
	starredSearchDomains: [String!]!
	starredAlerts: [String!]!
"""
Stability: Preview
"""
	featureAnnouncementsToShow: [FeatureAnnouncement!]!
"""
Stability: Long-term
"""
	isQuickStartCompleted: Boolean!
"""
Default timezone preference
Stability: Long-term
"""
	defaultTimeZone: String
"""
Stability: Preview
"""
	isAutomaticHighlightingEnabled: Boolean!
"""
Stability: Short-term
"""
	isCommunityMessageDismissed: Boolean!
"""
Stability: Short-term
"""
	isGettingStartedMessageDismissed: Boolean!
"""
Stability: Short-term
"""
	isWelcomeMessageDismissed: Boolean!
"""
Stability: Short-term
"""
	isEventListOrderedWithNewestAtBottom: Boolean!
"""
Stability: Short-term
"""
	isPackageDocsMessageDismissed: Boolean!
"""
Stability: Short-term
"""
	isFieldPanelOpenByDefault: Boolean!
"""
Stability: Short-term
"""
	isAutomaticSearchEnabled: Boolean!
"""
Stability: Short-term
"""
	isDarkModeMessageDismissed: Boolean!
}

"""
A paginated set of users
"""
type Users {
"""
The total number of users
Stability: Long-term
"""
	totalUsers: Int!
"""
The paginated set of users
Stability: Long-term
"""
	users: [User!]!
}

"""
A page of users and groups.
"""
type UsersAndGroupsSearchResultSet {
"""
The total number of matching results
Stability: Long-term
"""
	totalResults: Int!
"""
Stability: Long-term
"""
	results: [UserOrGroup!]!
}

type UsersLimit {
"""
Stability: Long-term
"""
	currentBytes: Int!
"""
Stability: Long-term
"""
	limit: UsageLimit!
}

"""
A page of users.
"""
type UsersPage {
"""
Stability: Long-term
"""
	pageInfo: PageType!
"""
Stability: Long-term
"""
	page: [User!]!
}

scalar VersionedPackageSpecifier

"""
Represents information about a view, pulling data from one or several repositories.
"""
type View implements SearchDomain{
"""
Stability: Long-term
"""
	connections: [ViewConnection!]!
"""
Stability: Short-term
"""
	crossOrgConnections: [CrossOrgViewConnection!]!
"""
Cluster connections.
Stability: Short-term
"""
	clusterConnections: [ClusterConnection!]!
"""
A specific connection.
Stability: Short-term
"""
	clusterConnection(
"""
The id of the connection to get.
"""
		id: String!
	): ClusterConnection!
"""
Check all this search domain's cluster connections.
Stability: Short-term
"""
	checkClusterConnections: [ClusterConnectionStatus!]!
"""
True if the view is federated, false otherwise.
Stability: Preview
"""
	isFederated: Boolean!
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	name: RepoOrViewName!
"""
Stability: Long-term
"""
	description: String
"""
The point in time the search domain was marked for deletion.
Stability: Long-term
"""
	deletedDate: Long
"""
The point in time the search domain will not be restorable anymore.
Stability: Long-term
"""
	permanentlyDeletedAt: Long
"""
Stability: Long-term
"""
	isStarred: Boolean!
"""
Search limit in milliseconds, which searches should are limited to.
Stability: Long-term
"""
	searchLimitedMs: Long
"""
Repositories not part of the search limitation.
Stability: Long-term
"""
	reposExcludedInSearchLimit: [String!]!
"""
Returns a specific version of a package given a package version.
Stability: Long-term
"""
	packageV2(
"""
The package id of the package to get.
"""
		packageId: VersionedPackageSpecifier!
	): Package2!
"""
The available versions of a package.
Stability: Long-term
"""
	packageVersions(
		packageId: UnversionedPackageSpecifier!
	): [RegistryPackageVersionInfo!]!
"""
Returns a list of available packages that can be installed.
Stability: Long-term
"""
	availablePackages(
"""
Filter input to limit the returned packages
"""
		filter: String
"""
Packages with any of these tags will be included. No filtering on tags.
"""
		tags: [PackageTag!]
"""
Packages with any of these categories will be included.
"""
		categories: [String!]
	): [PackageRegistrySearchResultItem!]!
"""
List packages installed on a specific view or repo.
Stability: Long-term
"""
	installedPackages: [PackageInstallation!]!
"""
Stability: Long-term
"""
	hasPackageInstalled(
		packageId: VersionedPackageSpecifier!
	): Boolean!
"""
Users who have access.
Stability: Long-term
"""
	users: [User!]!
"""
Users or groups who has access.
Stability: Long-term
"""
	usersAndGroups(
		search: String
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
	): UsersAndGroupsSearchResultSet!
"""
Search users with a given permission
Stability: Preview
"""
	usersV2(
"""
Search for a user whose email or name matches this search string
"""
		search: String
"""
Permission that the users must have on the search domain. Leave out to get users with any permission on the view
"""
		permissionFilter: Permission
"""
The number of results to skip or the offset to use. For instance if implementing pagination, set skip = limit * (page - 1)
"""
		skip: Int
"""
The amount of results to return.
"""
		limit: Int
	): Users!
"""
Groups with assigned roles.
Stability: Long-term
"""
	groups: [Group!]!
"""
Stability: Long-term
"""
	starredFields: [String!]!
"""
Stability: Long-term
"""
	recentQueriesV2: [RecentQuery!]!
"""
Stability: Long-term
"""
	automaticSearch: Boolean!
"""
Check if the current user is allowed to perform the given action on the view.
Stability: Long-term
"""
	isActionAllowed(
"""
The action to check if a user is allowed to perform on a view.
"""
		action: ViewAction!
	): Boolean!
"""
Returns the all actions the user is allowed to perform on the view.
Stability: Long-term
"""
	allowedViewActions: [ViewAction!]!
"""
The query prefix prepended to each search in this domain.
Stability: Long-term
"""
	viewerQueryPrefix: String!
"""
All tags from all datasources.
Stability: Long-term
"""
	tags: [String!]!
"""
The resource identifier for this search domain.
Stability: Short-term
"""
	resource: String!
"""
All interactions defined on the view.
Stability: Long-term
"""
	interactions: [ViewInteraction!]!
"""
A saved alert
Stability: Long-term
"""
	alert(
		id: String!
	): Alert!
"""
Saved alerts.
Stability: Long-term
"""
	alerts: [Alert!]!
"""
A saved dashboard.
Stability: Long-term
"""
	dashboard(
		id: String!
	): Dashboard!
"""
All dashboards available on the view.
Stability: Long-term
"""
	dashboards: [Dashboard!]!
"""
A saved filter alert
Stability: Long-term
"""
	filterAlert(
		id: String!
	): FilterAlert!
"""
Saved filter alerts.
Stability: Long-term
"""
	filterAlerts: [FilterAlert!]!
"""
A saved aggregate alert
Stability: Long-term
"""
	aggregateAlert(
		id: String!
	): AggregateAlert!
"""
Saved aggregate alerts.
Stability: Long-term
"""
	aggregateAlerts: [AggregateAlert!]!
"""
A saved scheduled search.
Stability: Long-term
"""
	scheduledSearch(
"""
The id of the scheduled search to get.
"""
		id: String!
	): ScheduledSearch!
"""
Saved scheduled searches.
Stability: Long-term
"""
	scheduledSearches: [ScheduledSearch!]!
"""
A saved action.
Stability: Long-term
"""
	action(
"""
The id of the action to get.
"""
		id: String!
	): Action!
"""
A list of saved actions.
Stability: Long-term
"""
	actions(
"""
The result will only include actions with the specified ids. Omit to find all actions.
"""
		actionIds: [String!]
	): [Action!]!
"""
A saved query.
Stability: Long-term
"""
	savedQuery(
		id: String!
	): SavedQuery!
"""
Saved queries.
Stability: Long-term
"""
	savedQueries: [SavedQuery!]!
"""
Stability: Long-term
"""
	defaultQuery: SavedQuery
"""
Stability: Long-term
"""
	files: [File!]!
"""
Stability: Long-term
"""
	fileFieldSearch(
"""
Name of the csv or json file to retrieve the field entries from.
"""
		fileName: String!
"""
Name of the field in the file to return entries from.
"""
		fieldName: String!
"""
Text to filter values by prefix on.
"""
		prefixFilter: String
"""
The exact values that given fields should have for an entry to be part of the result.
"""
		valueFilters: [FileFieldFilterType!]!
"""
Names of the fields to include in the result.
"""
		fieldsToInclude: [String!]!
"""
Maximum number of values to retrieve from the file.
"""
		maxEntries: Int!
	): [[DictionaryEntryType!]!]!
"""
Saved scheduled reports.
Stability: Long-term
"""
	scheduledReports: [ScheduledReport!]!
"""
Saved scheduled report.
Stability: Long-term
"""
	scheduledReport(
"""
The id of the scheduled report to get.
"""
		id: String!
	): ScheduledReport
}

"""
Actions a user may perform on a view.
"""
enum ViewAction {
	ChangeConnections
	ChangeUserAccess
"""
Denotes if you can administer alerts, scheduled searches and actions
"""
	ChangeTriggersAndActions
"""
Denotes if you can administer alerts and scheduled searches
"""
	ChangeTriggers
	CreateTriggers
"""
Denotes if you can administer actions
"""
	ChangeActions
	CreateActions
	ChangeInteractions
	ChangeViewOrRepositoryDescription
	ChangeDashboards
	CreateDashboards
	ChangeDashboardReadonlyToken
	ChangeFdrFeeds
	ChangeDataspaceKind
	ChangeFdrFeedControls
	ReadFdrFeeds
	ChangeIngestFeeds
	ChangeFiles
	CreateFiles
	ChangeParsers
	DeleteParsers
	ChangeSavedQueries
	CreateSavedQueries
	ConnectView
	ConnectMultiClusterView
	ChangeDataDeletionPermissions
	ChangeRetention
	ChangeTimeBasedRetention
	ChangeSizeBasedRetention
	ChangeDefaultSearchSettings
	ChangeS3ArchivingSettings
	DeleteDataSources
	DeleteRepositoryOrView
	DeleteEvents
"""
Denotes if you can see log events
"""
	ReadEvents
	ChangeIngestTokens
	ChangePackages
"""
Denotes if you can administer event forwarding rules
"""
	EventForwarding
	ChangeIngestListeners
	ChangePermissionTokens
	ChangeIngestBlocking
	ChangeFieldsToBeRemovedBeforeParsing
	ExportQueryResults
	ChangeOrganizationOwnedQueries
	ReadExternalFunctions
	ChangeScheduledReports
	CreateScheduledReports
	GenerateParsers
	SaveSearchResultAsWidget
	TestActions
}

"""
Represents the connection between a view and an underlying repository.
"""
type ViewConnection {
"""
The underlying repository
Stability: Long-term
"""
	repository: Repository!
"""
The filter applied to all results from the repository.
Stability: Long-term
"""
	filter: String!
"""
Stability: Long-term
"""
	languageVersion: LanguageVersion!
}

"""
An interaction available across search and dashboards
"""
type ViewInteraction {
"""
Stability: Long-term
"""
	id: String!
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	displayName: String!
"""
Stability: Long-term
"""
	description: String
	assetType: AssetType!
"""
Stability: Long-term
"""
	packageId: VersionedPackageSpecifier
"""
Stability: Long-term
"""
	package: PackageInstallation
}

"""
A defined view interaction
"""
type ViewInteractionEntry {
"""
Stability: Preview
"""
	id: String!
"""
Stability: Preview
"""
	view: SearchDomain!
"""
Stability: Preview
"""
	interaction: QueryBasedWidgetInteraction!
"""
Stability: Preview
"""
	packageId: VersionedPackageSpecifier
"""
Stability: Preview
"""
	package: PackageInstallation
}

type ViewInteractionTemplate {
"""
Stability: Long-term
"""
	name: String!
"""
Stability: Long-term
"""
	displayName: String!
"""
Stability: Long-term
"""
	yamlTemplate: String!
}

type WellKnownEndpointDetails {
"""
Stability: Long-term
"""
	issuer: String!
"""
Stability: Long-term
"""
	authorizationEndpoint: String
"""
Stability: Long-term
"""
	jwksEndpoint: String
"""
Stability: Long-term
"""
	registrationEndpoint: String
"""
Stability: Long-term
"""
	tokenEndpoint: String
"""
Stability: Long-term
"""
	tokenEndpointAuthMethod: String!
"""
Stability: Long-term
"""
	userInfoEndpoint: String
}

"""
A dashboard widget.
"""
interface Widget {
"""
A dashboard widget.
"""
	id: String!
"""
A dashboard widget.
"""
	title: String!
"""
A dashboard widget.
"""
	description: String
"""
A dashboard widget.
"""
	x: Int!
"""
A dashboard widget.
"""
	y: Int!
"""
A dashboard widget.
"""
	width: Int!
"""
A dashboard widget.
"""
	height: Int!
}

type WidgetInteractionCondition {
"""
Stability: Long-term
"""
	fieldName: String!
"""
Stability: Long-term
"""
	operator: FieldConditionOperatorType!
"""
Stability: Long-term
"""
	argument: String!
}

"""
A key being traced by worker query tracing.
"""
type WorkerQueryTracingItem {
"""
Stability: Preview
"""
	key: String!
"""
Stability: Preview
"""
	expiry: Long!
}

"""
The state of worker query tracing.
"""
type WorkerQueryTracingState {
"""
Stability: Preview
"""
	items: [WorkerQueryTracingItem!]!
}

scalar YAML

"""
Common interface for contractual parts of the limit
"""
interface contractual {
"""
Common interface for contractual parts of the limit
"""
	includeUsage: Boolean!
}

type drilldowns {
"""
Get the query that returns the underlying events for the given fields.
Stability: Preview
"""
	sourceEventsForFieldsQuery(
		fields: [String!]!
	): SourceEventsQueryResultType!
}

"""
A namespace for various query analyses and transformations.
"""
type queryAnalysis {
"""
Stability: Preview
"""
	drilldowns: drilldowns!
"""
Checks if a query is fit for use for a filter alert
"""
	isValidFilterAlertQuery(
		viewName: String!
	): Boolean!
"""
The query contains an aggregator
Stability: Preview
"""
	isAggregate: Boolean!
"""
The query does not contain a join-like function or defineTable()
Stability: Preview
"""
	isSinglePhase: Boolean!
"""
The query string up to the first aggregator
Stability: Preview
"""
	filterPart: String!
}

"""
The `BigDecimal` scalar type represents signed fractional values with arbitrary precision.
"""
scalar BigDecimal

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values. BigInt can represent arbitrary big values.
"""
scalar BigInt

"""
The `Boolean` scalar type represents `true` or `false`.
"""
scalar Boolean

"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_754).
"""
scalar Float

"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int

"""
The `Long` scalar type represents non-fractional signed whole numeric values. Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String


# Fetched from version 1.180.0--build-2981--sha-eba6ae23b00e69c90317d596a09527ab206e8bfc