// Code generated by generate.go; DO NOT EDIT.

package api

import "github.com/cli/shurcooL-graphql"

type Long int64
type JSON string
type YAML string
type DateTime string
type RepoOrViewName string

// Input represents one of the Input structs:
//
// ActionSecurityPoliciesInput, AddAlertLabel, AddAliasMappingInput, AddIngestTokenV3Input, AddLabelScheduledSearch, AddLimitInput, AddLimitV2Input, AddRecentQueryInput, AddRoleInput, AddStarScheduledSearch, AddStarToAlert, AddStarToFieldInput, AddStarToQueryInput, AddSubdomainInput, AddToBlocklistByIdInput, AddToBlocklistInput, AddUserInput, AddUserInputV2, AddUsersToGroupInput, AliasInfoInput, AliasMappingInput, AnalyticsBrowser, AnalyticsBrowserInfo, AnalyticsDevice, AnalyticsDeviceInfo, AnalyticsEngine, AnalyticsFeature, AnalyticsInfo, AnalyticsLog, AnalyticsLogWithTimestamp, AnalyticsMetrics, AnalyticsOS, AnalyticsUserAgent, AnalyzeQueryArguments, ArgumentInput, AssignOrganizationRoleToGroupInput, AssignParserToIngestTokenInputV2, AssignRoleToGroupInput, AssignSystemRoleToGroupInput, BatchUpdateQueryOwnershipInput, BlockIngestOnOrgInput, CachePolicyInput, CancelRedactEventsInput, CheckLocalClusterConnectionInput, CheckRemoteClusterConnectionInput, ClearErrorOnAggregateAlertInput, ClearErrorOnAlertInput, ClearErrorOnFilterAlertInput, ClearErrorOnScheduledSearchInput, ClearFieldConfigurationsInput, ClearRecentQueriesInput, CloneParserInput, ClusterConnectionInputTag, ColumnChange, ConflictResolutionConfiguration, CreateActionFromTemplateInput, CreateAggregateAlert, CreateAlert, CreateAlertFromTemplateInput, CreateAwsS3SqsIngestFeed, CreateCustomLinkInteractionInput, CreateDashboardFromTemplateV2Input, CreateDashboardInput, CreateDashboardLinkInteractionInput, CreateEmailAction, CreateEventForwardingRule, CreateFdrFeed, CreateFieldAliasSchemaInput, CreateFilterAlert, CreateHumioRepoAction, CreateIngestListenerV3Input, CreateKafkaEventForwarder, CreateLocalClusterConnectionInput, CreateOpsGenieAction, CreateOrUpdateExternalFunctionInput, CreateOrganizationPermissionTokenInput, CreatePagerDutyAction, CreateParserFromTemplateInput, CreateParserInput, CreateParserInputV2, CreatePersonalUserTokenInput, CreatePostMessageSlackAction, CreateRemoteClusterConnectionInput, CreateSavedQueryInput, CreateScheduledReportInput, CreateScheduledReportLayoutInput, CreateScheduledReportParameterValueInput, CreateScheduledSearch, CreateScheduledSearchFromTemplateInput, CreateSearchLinkInteractionInput, CreateSlackAction, CreateSystemPermissionTokenInput, CreateUploadFileAction, CreateVictorOpsAction, CreateViewPermissionsTokenInput, CreateWebhookAction, CustomLinkInteractionInput, DashboardLinkInteractionInput, DashboardUpdateFrequencyInput, DeleteAction, DeleteAggregateAlert, DeleteAlert, DeleteClusterConnectionInput, DeleteDashboardInput, DeleteDashboardInputV2, DeleteEventForwarderInput, DeleteEventForwardingRule, DeleteFdrFeed, DeleteFieldAliasSchema, DeleteFilterAlert, DeleteIngestFeed, DeleteInteractionInput, DeleteParserInput, DeleteSavedQueryInput, DeleteScheduledReportInput, DeleteScheduledSearch, DeleteSearchDomainByIdInput, DisableAggregateAlert, DisableAlert, DisableEventForwarderInput, DisableFieldAliasSchemaOnOrgInput, DisableFieldAliasSchemaOnViewInput, DisableFilterAlert, DisableOrganizationIocAccess, DisableScheduledReportInput, DisableStarScheduledSearch, DynamicConfigInputObject, EnableAggregateAlert, EnableAlert, EnableEventForwarderInput, EnableFieldAliasSchemaOnOrgInput, EnableFieldAliasSchemaOnViewsInput, EnableFilterAlert, EnableOrganizationIocAccess, EnableScheduledReportInput, EnableStarScheduledSearch, EnableWorkerQueryTracingInputType, EnabledInput, EnforceSubdomainsInput, EntitySearchInputType, EntitySearchSortInfoType, FieldConfigurationInput, FieldHasValueInput, FieldInteractionConditionInput, FileFieldFilterType, FilterInput, FunctionListInput, GenerateAggregateAlertFromPackageTemplateInput, GenerateAggregateAlertFromTemplateInput, GenerateAlertFromPackageTemplateInput, GenerateAlertFromTemplateInput, GenerateFilterAlertFromPackageTemplateInput, GenerateFilterAlertFromTemplateInput, GenerateScheduledSearchFromPackageTemplateInput, GenerateScheduledSearchFromTemplateInput, GetExternalFunctionInput, GroupFilter, GroupRoleAssignment, HttpHeaderEntryInput, IPFilterIdInput, IPFilterInput, IPFilterUpdateInput, IngestFeedAwsAuthenticationInput, IngestFeedPreprocessingInput, IngestPartitionInput, InputData, InputDictionaryEntry, InstallPackageFromRegistryInput, KindInput, LanguageVersionInputType, LinkInput, LoginBridgeInput, LoginBridgeUpdateInput, MarkLimitDeletedInput, MigrateLimitsInput, NotificationInput, OidcConfigurationInput, OrderByUserFieldInput, OrganizationLimitsInput, ParameterFilePropertiesInput, ParameterFileValueFilter, ParameterFixedListOption, ParameterFixedListPropertiesInput, ParameterFreeTextPropertiesInput, ParameterInput, ParameterQueryPropertiesInput, ParameterSpecificationInput, ParserTestCaseAssertionsForOutputInput, ParserTestCaseInput, ParserTestCaseOutputAssertionsInput, ParserTestEventInput, ParserTestRunInput, QueryArgument, QueryArgumentInputType, QueryQuotaDefaultSettingsInput, QueryQuotaIntervalSettingInput, QueryQuotaUserSettingsInput, RedactEventsInputType, RemoveAlertLabel, RemoveAliasMappingInput, RemoveFromBlocklistInput, RemoveLabelScheduledSearch, RemoveLimitInput, RemoveOrganizationRoleFromGroupInput, RemoveParserInput, RemoveRepoCachePolicyInput, RemoveRoleFromGroupInput, RemoveSecondarySubdomainInput, RemoveStarFromAlert, RemoveStarFromQueryInput, RemoveStarScheduledSearch, RemoveStarToFieldInput, RemoveSystemRoleFromGroupInput, RemoveUserByIdInput, RemoveUserInput, RemoveUsersFromGroupInput, RenameSearchDomainByIdInput, RepoFilterInput, ReportErrorInput, ResetQuotaInput, RestoreDeletedSearchDomainInput, ResubmitMarketoLeadData, RevokeSessionInput, RotateTokenInputData, ScheduledReportResultFailedInput, ScheduledReportResultSucceededInput, SchemaFieldInput, SearchLinkInteractionInput, ServiceLevelIndicatorLogArg, SessionInput, SetDefaultSavedQueryInput, SetGlobalDefaultCachePolicyInput, SetLimitDisplayNameInput, SetOrgDefaultCachePolicyInput, SetPrimarySubdomainInput, SetRepoCachePolicyInput, SetSubdomainSettingsInput, SharedDashboardsSecurityPoliciesInput, SlackFieldEntryInput, SocialLoginSettingsInput, StopQueriesInput, TagGroupingRuleInput, TagsInput, TestAwsS3SqsIngestFeed, TestEmailAction, TestFdrFeed, TestHumioRepoAction, TestKafkaEventForwarder, TestOpsGenieAction, TestPagerDutyAction, TestParserInputV2, TestPostMessageSlackAction, TestSlackAction, TestUploadFileAction, TestVictorOpsAction, TestWebhookAction, TokenInput, TokenSecurityPoliciesInput, TriggerPollIngestFeed, UpdateAggregateAlert, UpdateAlert, UpdateAwsS3SqsIngestFeed, UpdateCustomLinkInteractionInput, UpdateDashboardInput, UpdateDashboardLinkInteractionInput, UpdateDefaultQueryPrefixInput, UpdateDefaultRoleInput, UpdateDescription, UpdateEmailAction, UpdateEventForwardingRule, UpdateFdrFeed, UpdateFdrFeedControl, UpdateFieldAliasMappingInput, UpdateFieldAliasSchemaInput, UpdateFilterAlert, UpdateGroupInput, UpdateHumioRepoAction, UpdateIngestFeedDescription, UpdateIngestListenerV3Input, UpdateKafkaEventForwarder, UpdateLimitInput, UpdateLimitInputV2, UpdateLocalClusterConnectionInput, UpdateLong, UpdateOidcConfigurationInput, UpdateOpsGenieAction, UpdateOrganizationPermissionsTokenPermissionsInput, UpdatePackageFromRegistryInput, UpdatePagerDutyAction, UpdateParametersInteractionInput, UpdateParserInput, UpdateParserInputV2, UpdateParserScriptInput, UpdatePostMessageSlackAction, UpdateQueryPrefixInput, UpdateRemoteClusterConnectionInput, UpdateRepoDataTypeInputObject, UpdateRepoLimitIdInputObject, UpdateRoleInput, UpdateSavedQueryInput, UpdateScheduledReportInput, UpdateScheduledReportLayoutInput, UpdateScheduledReportParameterValueInput, UpdateScheduledSearch, UpdateSearchLinkInteractionInput, UpdateSlackAction, UpdateSubscriptionInputObject, UpdateSystemPermissionsTokenPermissionsInput, UpdateUploadFileAction, UpdateUserByIdInput, UpdateVictorOpsAction, UpdateViewPermissionsTokenPermissionsInput, UpdateWebhookAction, UpgradeAccountData, UserRoleAssignment, UtmParams, ViewConnectionInput, WidgetInput, WidgetLinkPropertiesInput, WidgetNotePropertiesInput, WidgetQueryPropertiesInput, deleteExternalFunctionInput.
type Input interface{}

// ActionSecurityPoliciesInput represents data for updating action security policies.
type ActionSecurityPoliciesInput struct {
	// Whether email actions should be enabled.
	EmailActionEnabled graphql.Boolean `json:"emailActionEnabled"` // Required
	// Whether repository actions should be enabled.
	RepoActionEnabled graphql.Boolean `json:"repoActionEnabled"` // Required
	// Whether OpsGenie actions should be enabled.
	OpsGenieActionEnabled graphql.Boolean `json:"opsGenieActionEnabled"` // Required
	// Whether PagerDuty actions should be enabled.
	PagerDutyActionEnabled graphql.Boolean `json:"pagerDutyActionEnabled"` // Required
	// Whether single channel Slack actions should be enabled.
	SlackSingleChannelActionEnabled graphql.Boolean `json:"slackSingleChannelActionEnabled"` // Required
	// Whether multi channel Slack actions should be enabled.
	SlackMultiChannelActionEnabled graphql.Boolean `json:"slackMultiChannelActionEnabled"` // Required
	// Whether upload file actions should be enabled.
	UploadFileActionEnabled graphql.Boolean `json:"uploadFileActionEnabled"` // Required
	// Whether VictorOps actions should be enabled.
	VictorOpsActionEnabled graphql.Boolean `json:"victorOpsActionEnabled"` // Required
	// Whether webhook actions should be enabled.
	WebhookActionEnabled graphql.Boolean `json:"webhookActionEnabled"` // Required
	// Allow list of glob patterns restricting which recipient can be set on email actions. E.g. *@organization.com. Empty list means no recipients allowed whereas not setting it means all allowed.
	EmailActionRecipientAllowList *[]graphql.String `json:"emailActionRecipientAllowList,omitempty"` // Optional
	// Allow list of glob patterns restricting which URL can be set on webhook actions. E.g. *.organization.com. Empty means no recipients allowed whereas null means all.
	WebhookActionURLAllowList *[]graphql.String `json:"webhookActionUrlAllowList,omitempty"` // Optional
}

// AddAlertLabel represents data for adding a label to an alert.
type AddAlertLabel struct {
	// Name of the view of the alert.
	ViewName graphql.String `json:"viewName"` // Required
	// Id of the alert.
	ID graphql.String `json:"id"` // Required
	// Label for the alert.
	Label graphql.String `json:"label"` // Required
}

// AddAliasMappingInput represents [PREVIEW: This functionality is still under development and can change without warning.] Input object for field addFieldAliasMapping.
type AddAliasMappingInput struct {
	// ID of the schema that the alias mapping exists on.
	SchemaID graphql.String `json:"schemaId"` // Required
	// Alias mapping to be added to this schema.
	AliasMapping AliasMappingInput `json:"aliasMapping"` // Required
}

// AddIngestTokenV3Input represents input data to create an ingest token.
type AddIngestTokenV3Input struct {
	// Name of the repository.
	RepositoryName graphql.String `json:"repositoryName"` // Required
	// Name of the new ingest token.
	Name graphql.String `json:"name"` // Required
	// Optional id or name of the parser to assign to the ingest token. Parsers in packages can be referred to as "packagescope/packagename:parsername".
	Parser *graphql.String `json:"parser,omitempty"` // Optional
	// Optional custom token string. This requires special permissions and root privileges.
	CustomToken *graphql.String `json:"customToken,omitempty"` // Optional
}

// AddLabelScheduledSearch represents data for adding a label to a scheduled search.
type AddLabelScheduledSearch struct {
	// Name of the view of the scheduled search.
	ViewName graphql.String `json:"viewName"` // Required
	// Id of the scheduled search.
	ID graphql.String `json:"id"` // Required
	// Label for the scheduled search.
	Label graphql.String `json:"label"` // Required
}

type AddLimitInput struct {
	LimitName        graphql.String                  `json:"limitName"`                 // Required
	AllowLogin       graphql.Boolean                 `json:"allowLogin"`                // Required
	DailyIngest      Long                            `json:"dailyIngest"`               // Required
	Retention        graphql.Int                     `json:"retention"`                 // Required
	AllowSelfService graphql.Boolean                 `json:"allowSelfService"`          // Required
	Expiration       *Long                           `json:"expiration,omitempty"`      // Optional
	ContractVersion  *Organizations__ContractVersion `json:"contractVersion,omitempty"` // Optional
	UserLimit        *graphql.Int                    `json:"userLimit,omitempty"`       // Optional
}

type AddLimitV2Input struct {
	LimitName                  graphql.String                 `json:"limitName"`                  // Required
	AllowLogin                 graphql.Boolean                `json:"allowLogin"`                 // Required
	DailyIngestContractualType Organizations__ContractualType `json:"dailyIngestContractualType"` // Required
	StorageContractualType     Organizations__ContractualType `json:"storageContractualType"`     // Required
	DailyScanContractualType   Organizations__ContractualType `json:"dailyScanContractualType"`   // Required
	MeasurementType            Organizations__MeasurementType `json:"measurementType"`            // Required
	Retention                  graphql.Int                    `json:"retention"`                  // Required
	MaxRetention               graphql.Int                    `json:"maxRetention"`               // Required
	AllowSelfService           graphql.Boolean                `json:"allowSelfService"`           // Required
	DateType                   graphql.String                 `json:"dateType"`                   // Required
	Trial                      graphql.Boolean                `json:"trial"`                      // Required
	AllowFlightControl         graphql.Boolean                `json:"allowFlightControl"`         // Required
	DailyIngest                *Long                          `json:"dailyIngest,omitempty"`      // Optional
	DailyScan                  *Long                          `json:"dailyScan,omitempty"`        // Optional
	Expiration                 *Long                          `json:"expiration,omitempty"`       // Optional
	UserLimit                  *graphql.Int                   `json:"userLimit,omitempty"`        // Optional
	RepositoryLimit            *graphql.Int                   `json:"repositoryLimit,omitempty"`  // Optional
}

type AddRecentQueryInput struct {
	ViewName       graphql.String         `json:"viewName"`             // Required
	QueryArguments []InputDictionaryEntry `json:"queryArguments"`       // Required
	QueryString    graphql.String         `json:"queryString"`          // Required
	Start          graphql.String         `json:"start"`                // Required
	End            graphql.String         `json:"end"`                  // Required
	IsLive         graphql.Boolean        `json:"isLive"`               // Required
	WidgetType     *graphql.String        `json:"widgetType,omitempty"` // Optional
	Options        *JSON                  `json:"options,omitempty"`    // Optional
}

type AddRoleInput struct {
	DisplayName             graphql.String            `json:"displayName"`                       // Required
	ViewPermissions         []Permission              `json:"viewPermissions"`                   // Required
	Color                   *graphql.String           `json:"color,omitempty"`                   // Optional
	SystemPermissions       *[]SystemPermission       `json:"systemPermissions,omitempty"`       // Optional
	OrganizationPermissions *[]OrganizationPermission `json:"organizationPermissions,omitempty"` // Optional
	ObjectAction            *ObjectAction             `json:"objectAction,omitempty"`            // Optional
}

// AddStarScheduledSearch represents data for adding a star to a scheduled search.
type AddStarScheduledSearch struct {
	// Name of the view of the scheduled search.
	ViewName graphql.String `json:"viewName"` // Required
	// Id of the scheduled search.
	ID graphql.String `json:"id"` // Required
}

// AddStarToAlert represents data for adding a star to an alert.
type AddStarToAlert struct {
	// Name of the view of the alert.
	ViewName graphql.String `json:"viewName"` // Required
	// Id of the alert.
	ID graphql.String `json:"id"` // Required
}

type AddStarToFieldInput struct {
	FieldName        graphql.String `json:"fieldName"`        // Required
	SearchDomainName graphql.String `json:"searchDomainName"` // Required
}

type AddStarToQueryInput struct {
	SavedQueryID     graphql.String `json:"savedQueryId"`     // Required
	SearchDomainName graphql.String `json:"searchDomainName"` // Required
}

type AddSubdomainInput struct {
	Subdomain graphql.String `json:"subdomain"` // Required
}

// AddToBlocklistByIdInput represents data for adding to the blocklist.
type AddToBlocklistByIdInput struct {
	// The pattern to match.
	Pattern graphql.String `json:"pattern"` // Required
	// Whether the pattern should be matched exactly or interpreted as a regex pattern.
	Type BlockedQueryMatcherType `json:"type"` // Required
	// Limits the scope of the pattern to a specific view preventing matching queries from execution in that context only.
	ViewID *graphql.String `json:"viewId,omitempty"` // Optional
	// Whether to apply the pattern globally. Requires the ManageCluster permission.
	ClusterWide *graphql.Boolean `json:"clusterWide,omitempty"` // Optional
}

// AddToBlocklistInput represents data for adding to the blocklist.
type AddToBlocklistInput struct {
	// The pattern to match.
	Pattern graphql.String `json:"pattern"` // Required
	// Whether the pattern should be matched exactly or interpreted as a regex pattern.
	Type BlockedQueryMatcherType `json:"type"` // Required
	// Limits the scope of the pattern to a specific view preventing matching queries from execution in that context only.
	ViewName *graphql.String `json:"viewName,omitempty"` // Optional
	// Whether to apply the pattern globally. Requires the ManageCluster permission.
	ClusterWide *graphql.Boolean `json:"clusterWide,omitempty"` // Optional
}

type AddUserInput struct {
	Username    graphql.String   `json:"username"`              // Required
	Company     *graphql.String  `json:"company,omitempty"`     // Optional
	IsRoot      *graphql.Boolean `json:"isRoot,omitempty"`      // Optional
	FirstName   *graphql.String  `json:"firstName,omitempty"`   // Optional
	LastName    *graphql.String  `json:"lastName,omitempty"`    // Optional
	FullName    *graphql.String  `json:"fullName,omitempty"`    // Optional
	Picture     *graphql.String  `json:"picture,omitempty"`     // Optional
	Email       *graphql.String  `json:"email,omitempty"`       // Optional
	CountryCode *graphql.String  `json:"countryCode,omitempty"` // Optional
	StateCode   *graphql.String  `json:"stateCode,omitempty"`   // Optional
}

type AddUserInputV2 struct {
	Username          graphql.String   `json:"username"`                    // Required
	Company           *graphql.String  `json:"company,omitempty"`           // Optional
	IsRoot            *graphql.Boolean `json:"isRoot,omitempty"`            // Optional
	FirstName         *graphql.String  `json:"firstName,omitempty"`         // Optional
	LastName          *graphql.String  `json:"lastName,omitempty"`          // Optional
	FullName          *graphql.String  `json:"fullName,omitempty"`          // Optional
	Picture           *graphql.String  `json:"picture,omitempty"`           // Optional
	Email             *graphql.String  `json:"email,omitempty"`             // Optional
	CountryCode       *graphql.String  `json:"countryCode,omitempty"`       // Optional
	StateCode         *graphql.String  `json:"stateCode,omitempty"`         // Optional
	SendInvite        *graphql.Boolean `json:"sendInvite,omitempty"`        // Optional
	VerificationToken *graphql.String  `json:"verificationToken,omitempty"` // Optional
	IsOrgOwner        *graphql.Boolean `json:"isOrgOwner,omitempty"`        // Optional
}

type AddUsersToGroupInput struct {
	Users   []graphql.String `json:"users"`   // Required
	GroupID graphql.String   `json:"groupId"` // Required
}

type AliasInfoInput struct {
	Source graphql.String `json:"source"` // Required
	Alias  graphql.String `json:"alias"`  // Required
}

// AliasMappingInput represents [PREVIEW: This functionality is still under development and can change without warning.] Input object for creating a new alias mapping.
type AliasMappingInput struct {
	Name                 graphql.String    `json:"name"`                           // Required
	Tags                 []TagsInput       `json:"tags"`                           // Required
	Aliases              []AliasInfoInput  `json:"aliases"`                        // Required
	OriginalFieldsToKeep *[]graphql.String `json:"originalFieldsToKeep,omitempty"` // Optional
}

type AnalyticsBrowser struct {
	Info             AnalyticsBrowserInfo `json:"info"`             // Required
	IsChrome         graphql.Boolean      `json:"isChrome"`         // Required
	IsChromeHeadless graphql.Boolean      `json:"isChromeHeadless"` // Required
	IsEdge           graphql.Boolean      `json:"isEdge"`           // Required
	IsFirefox        graphql.Boolean      `json:"isFirefox"`        // Required
	IsIE             graphql.Boolean      `json:"isIE"`             // Required
	IsSafari         graphql.Boolean      `json:"isSafari"`         // Required
}

type AnalyticsBrowserInfo struct {
	Name    *graphql.String `json:"name,omitempty"`    // Optional
	Version *graphql.String `json:"version,omitempty"` // Optional
	Major   *graphql.String `json:"major,omitempty"`   // Optional
}

type AnalyticsDevice struct {
	Info      AnalyticsDeviceInfo `json:"info"`      // Required
	IsConsole graphql.Boolean     `json:"isConsole"` // Required
	IsDesktop graphql.Boolean     `json:"isDesktop"` // Required
	IsMobile  graphql.Boolean     `json:"isMobile"`  // Required
	IsTablet  graphql.Boolean     `json:"isTablet"`  // Required
}

type AnalyticsDeviceInfo struct {
	Model  *graphql.String `json:"model,omitempty"`  // Optional
	Type   *graphql.String `json:"type,omitempty"`   // Optional
	Vendor *graphql.String `json:"vendor,omitempty"` // Optional
}

type AnalyticsEngine struct {
	Info     AnalyticsInfo   `json:"info"`     // Required
	IsWebkit graphql.Boolean `json:"isWebkit"` // Required
}

type AnalyticsFeature struct {
	Name  graphql.String  `json:"name"`  // Required
	Value graphql.Boolean `json:"value"` // Required
}

type AnalyticsInfo struct {
	Name    graphql.String `json:"name"`    // Required
	Version graphql.String `json:"version"` // Required
}

type AnalyticsLog struct {
	Category graphql.String  `json:"category"`          // Required
	Action   graphql.String  `json:"action"`            // Required
	Message  *graphql.String `json:"message,omitempty"` // Optional
}

type AnalyticsLogWithTimestamp struct {
	EventID   graphql.String     `json:"eventId"`           // Required
	Timestamp Long               `json:"timestamp"`         // Required
	Route     graphql.String     `json:"route"`             // Required
	Action    graphql.String     `json:"action"`            // Required
	System    graphql.String     `json:"system"`            // Required
	Arguments []graphql.String   `json:"arguments"`         // Required
	Features  []AnalyticsFeature `json:"features"`          // Required
	Context   graphql.String     `json:"context"`           // Required
	Metrics   AnalyticsMetrics   `json:"metrics"`           // Required
	UserAgent AnalyticsUserAgent `json:"userAgent"`         // Required
	Feature   *graphql.String    `json:"feature,omitempty"` // Optional
}

type AnalyticsMetrics struct {
	Fps graphql.Int `json:"fps"` // Required
}

type AnalyticsOS struct {
	Info      AnalyticsInfo   `json:"info"`      // Required
	IsAndroid graphql.Boolean `json:"isAndroid"` // Required
	IsIOS     graphql.Boolean `json:"isIOS"`     // Required
	IsLinux   graphql.Boolean `json:"isLinux"`   // Required
	IsMacOS   graphql.Boolean `json:"isMacOS"`   // Required
	IsWindows graphql.Boolean `json:"isWindows"` // Required
}

type AnalyticsUserAgent struct {
	Browser AnalyticsBrowser `json:"browser"` // Required
	Device  AnalyticsDevice  `json:"device"`  // Required
	Engine  AnalyticsEngine  `json:"engine"`  // Required
	Os      AnalyticsOS      `json:"os"`      // Required
}

// AnalyzeQueryArguments represents arguments for analyzeQuery.
type AnalyzeQueryArguments struct {
	QueryString graphql.String            `json:"queryString"`         // Required
	Version     LanguageVersionInputType  `json:"version"`             // Required
	IsLive      *graphql.Boolean          `json:"isLive,omitempty"`    // Optional
	Arguments   *[]QueryArgumentInputType `json:"arguments,omitempty"` // Optional
}

type ArgumentInput struct {
	Key   graphql.String `json:"key"`   // Required
	Value graphql.String `json:"value"` // Required
}

type AssignOrganizationRoleToGroupInput struct {
	GroupID graphql.String `json:"groupId"` // Required
	RoleID  graphql.String `json:"roleId"`  // Required
}

// AssignParserToIngestTokenInputV2 represents input data to assign a parser to an ingest token.
type AssignParserToIngestTokenInputV2 struct {
	// Name of the repository.
	RepositoryName graphql.String `json:"repositoryName"` // Required
	// Name of the ingest token.
	TokenName graphql.String `json:"tokenName"` // Required
	// Id or name of the parser to assign to the ingest token. Parsers in packages can be referred to as "packagescope/packagename:parsername".
	Parser graphql.String `json:"parser"` // Required
}

type AssignRoleToGroupInput struct {
	ViewID  graphql.String `json:"viewId"`  // Required
	GroupID graphql.String `json:"groupId"` // Required
	RoleID  graphql.String `json:"roleId"`  // Required
}

type AssignSystemRoleToGroupInput struct {
	GroupID graphql.String `json:"groupId"` // Required
	RoleID  graphql.String `json:"roleId"`  // Required
}

// BatchUpdateQueryOwnershipInput represents payload for specifying targets for batch updating query ownership.
type BatchUpdateQueryOwnershipInput struct {
	// The type to update.
	TargetType QueryOwnership_SelectionTargetType `json:"targetType"` // Required
	// The set of ids to update.
	IDs []graphql.String `json:"ids"` // Required
}

type BlockIngestOnOrgInput struct {
	BlockIngest graphql.Boolean `json:"blockIngest"` // Required
}

// CachePolicyInput represents a policy for choosing which segments to cache on local disk when overcommiting local storage with bucket storage. This can be used to protect certain repositories for local storage, such that searching other repositories does not evict them. A cache policy in Humio divides segments into prioritized and non-prioritized segments. When segments needs to be evicted from local storage, we always try evicting non-prioritized segments before prioritized segments. A cache policy can be set either on one of three levels (in order of precedence): - Repo - Org - Globally When determining the cache policy for a repo we first check if there is a cache policy set on the repo. If none is set on the repo, we check the the org. If none is set there either we check the global setting.
type CachePolicyInput struct {
	// Prioritize caching segments younger than this.
	PrioritizeMillis *Long `json:"prioritizeMillis,omitempty"` // Optional
}

type CancelRedactEventsInput struct {
	RepositoryName  graphql.String `json:"repositoryName"`  // Required
	RedactionTaskID graphql.String `json:"redactionTaskId"` // Required
}

// CheckLocalClusterConnectionInput represents data for checking a local cluster connection.
type CheckLocalClusterConnectionInput struct {
	// Name or id of the local view to connect with.
	TargetViewName graphql.String `json:"targetViewName"` // Required
	// Id of the connection to check.
	ConnectionID *graphql.String `json:"connectionId,omitempty"` // Optional
	// Additional tags that can be used to filter queries.
	Tags *[]ClusterConnectionInputTag `json:"tags,omitempty"` // Optional
	// Filter query that restricts the data visible through this connection.
	QueryPrefix *graphql.String `json:"queryPrefix,omitempty"` // Optional
}

// CheckRemoteClusterConnectionInput represents data for checking a remote cluster connection.
type CheckRemoteClusterConnectionInput struct {
	// Public URL of the remote cluster to connect with.
	PublicURL graphql.String `json:"publicUrl"` // Required
	// Id of the connection to check. Must be supplied if the token is not supplied.
	ConnectionID *graphql.String `json:"connectionId,omitempty"` // Optional
	// Name of the multi-cluster view to which the connection belongs. Must be supplied if the token is not supplied.
	MultiClusterViewName *graphql.String `json:"multiClusterViewName,omitempty"` // Optional
	// Access token for the remote view to connect with. Can be omitted if checking an existing connection with no token change.
	Token *graphql.String `json:"token,omitempty"` // Optional
	// Additional tags that can be used to filter queries.
	Tags *[]ClusterConnectionInputTag `json:"tags,omitempty"` // Optional
	// Filter query that restricts the data visible through this connection.
	QueryPrefix *graphql.String `json:"queryPrefix,omitempty"` // Optional
}

// ClearErrorOnAggregateAlertInput represents data for clearing the error on an aggregate alert.
type ClearErrorOnAggregateAlertInput struct {
	// Name of the view of the aggregate alert.
	ViewName RepoOrViewName `json:"viewName"` // Required
	// Id of the aggregate alert.
	ID graphql.String `json:"id"` // Required
}

// ClearErrorOnAlertInput represents data for clearing the error on an alert.
type ClearErrorOnAlertInput struct {
	// Name of the view of the alert.
	ViewName graphql.String `json:"viewName"` // Required
	// Id of the alert.
	ID graphql.String `json:"id"` // Required
}

// ClearErrorOnFilterAlertInput represents data for clearing the error on a filter alert.
type ClearErrorOnFilterAlertInput struct {
	// Name of the view of the filter alert.
	ViewName RepoOrViewName `json:"viewName"` // Required
	// Id of the filter alert.
	ID graphql.String `json:"id"` // Required
}

// ClearErrorOnScheduledSearchInput represents data for clearing the error on a scheduled search.
type ClearErrorOnScheduledSearchInput struct {
	// Name of the view of the scheduled search.
	ViewName graphql.String `json:"viewName"` // Required
	// Id of the scheduled search.
	ID graphql.String `json:"id"` // Required
}

type ClearFieldConfigurationsInput struct {
	ViewOrRepositoryName graphql.String `json:"viewOrRepositoryName"` // Required
}

type ClearRecentQueriesInput struct {
	ViewOrRepositoryName graphql.String `json:"viewOrRepositoryName"` // Required
}

// CloneParserInput represents input data to clone an existing parser.
type CloneParserInput struct {
	// Name of the new parser.
	NewParserName graphql.String `json:"newParserName"` // Required
	// Name of the repository.
	RepositoryName graphql.String `json:"repositoryName"` // Required
	// Id of the parser to clone.
	ParserIDToClone graphql.String `json:"parserIdToClone"` // Required
}

type ClusterConnectionInputTag struct {
	Key   graphql.String `json:"key"`   // Required
	Value graphql.String `json:"value"` // Required
}

// ColumnChange represents whether a column has been added or removed at the given index.
type ColumnChange struct {
	// Kind of change.
	ChangeKind ColumnChangeKind `json:"changeKind"` // Required
	// Index of column to change.
	Index graphql.Int `json:"index"` // Required
}

type ConflictResolutionConfiguration struct {
	EntityType         AssetType      `json:"entityType"`         // Required
	EntityName         graphql.String `json:"entityName"`         // Required
	ConflictResolution MergeStrategy  `json:"conflictResolution"` // Required
}

// CreateActionFromTemplateInput represents data for creating an action from a yaml template.
type CreateActionFromTemplateInput struct {
	// Name of the view of the action.
	ViewName RepoOrViewName `json:"viewName"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// YAML specification of the action.
	YamlTemplate YAML `json:"yamlTemplate"` // Required
}

// CreateAggregateAlert represents data for creating an aggregate alert.
type CreateAggregateAlert struct {
	// Name of the view of the aggregate alert.
	ViewName RepoOrViewName `json:"viewName"` // Required
	// Name of the aggregate alert.
	Name graphql.String `json:"name"` // Required
	// LogScale query to execute.
	QueryString graphql.String `json:"queryString"` // Required
	// List of ids or names for actions to fire on query result. Actions in packages can be referred to as "packagescope/packagename:actionname".
	ActionIDsOrNames []graphql.String `json:"actionIdsOrNames"` // Required
	// Ownership of the query run by this aggregate alert. If value is User, ownership will be based on the runAsUserId field.
	QueryOwnershipType QueryOwnershipType `json:"queryOwnershipType"` // Required
	// Description of the aggregate alert.
	Description *graphql.String `json:"description,omitempty"` // Optional
	// Labels attached to the aggregate alert.
	Labels *[]graphql.String `json:"labels,omitempty"` // Optional
	// Flag indicating whether the aggregate alert is enabled.
	Enabled *graphql.Boolean `json:"enabled,omitempty"` // Optional
	// Throttle time in seconds.
	ThrottleTimeSeconds *Long `json:"throttleTimeSeconds,omitempty"` // Optional
	// A field to throttle on. Can only be set if throttleTimeSeconds is set.
	ThrottleField *graphql.String `json:"throttleField,omitempty"` // Optional
	// The aggregate alert will run with the permissions of the user corresponding to this id if the queryOwnershipType field is set to User. If the queryOwnershipType is set to Organization, whilst runAsUserId is set, this will result in an error. If not specified, the aggregate alert will run with the permissions of the calling user. It requires the 'ChangeTriggersToRunAsOtherUsers' permission to set this field to a user id different from the calling user.
	RunAsUserID *graphql.String `json:"runAsUserId,omitempty"` // Optional
}

// CreateAlert represents data for creating an alert.
type CreateAlert struct {
	// Name of the view of the alert.
	ViewName graphql.String `json:"viewName"` // Required
	// Name of the alert.
	Name graphql.String `json:"name"` // Required
	// LogScale query to execute.
	QueryString graphql.String `json:"queryString"` // Required
	// Start of the relative time interval for the query.
	QueryStart graphql.String `json:"queryStart"` // Required
	// Throttle time in milliseconds.
	ThrottleTimeMillis Long `json:"throttleTimeMillis"` // Required
	// List of ids or names for actions to fire on query result. Actions in packages can be referred to as "packagescope/packagename:actionname".
	Actions []graphql.String `json:"actions"` // Required
	// Description of the alert.
	Description *graphql.String `json:"description,omitempty"` // Optional
	// Field to throttle on.
	ThrottleField *graphql.String `json:"throttleField,omitempty"` // Optional
	// The alert will run with the permissions of the user corresponding to this id if the queryOwnershipType field is set to User. If the queryOwnershipType is set to Organization, whilst runAsUserId is set, this will result in an error. If not specified, the alert will run with the permissions of the calling user. It requires the 'ChangeTriggersToRunAsOtherUsers' permission to set this field to a user id different from the calling user.
	RunAsUserID *graphql.String `json:"runAsUserId,omitempty"` // Optional
	// Flag indicating whether the alert is enabled.
	Enabled *graphql.Boolean `json:"enabled,omitempty"` // Optional
	// Labels attached to the alert.
	Labels *[]graphql.String `json:"labels,omitempty"` // Optional
	// Ownership of the query run by this alert. If value is User, ownership will be based on the runAsUserId field.
	QueryOwnershipType *QueryOwnershipType `json:"queryOwnershipType,omitempty"` // Optional
}

// CreateAlertFromTemplateInput represents data for creating an alert from a yaml template.
type CreateAlertFromTemplateInput struct {
	// Name of the view of the alert.
	ViewName RepoOrViewName `json:"viewName"` // Required
	// Name of the alert.
	Name graphql.String `json:"name"` // Required
	// YAML specification of the alert.
	YamlTemplate YAML `json:"yamlTemplate"` // Required
}

// CreateAwsS3SqsIngestFeed represents data for creating an ingest feed that uses AWS S3 and SQS.
type CreateAwsS3SqsIngestFeed struct {
	// Name of the repository of the ingest feed.
	RepositoryName RepoOrViewName `json:"repositoryName"` // Required
	// Name of the ingest feed.
	Name graphql.String `json:"name"` // Required
	// The id or name of the parser that should be used to parse the ingest feed. Parsers in packages can be referred to as: "packagescope/packagename:parsername".
	Parser graphql.String `json:"parser"` // Required
	// How to authenticate to AWS.
	Authentication IngestFeedAwsAuthenticationInput `json:"authentication"` // Required
	// AWS SQS queue url.
	SqsURL graphql.String `json:"sqsUrl"` // Required
	// The AWS region to connect to.
	Region graphql.String `json:"region"` // Required
	// Is ingest from the ingest feed enabled?.
	Enabled graphql.Boolean `json:"enabled"` // Required
	// The preprocessing to apply to an ingest feed before parsing.
	Preprocessing IngestFeedPreprocessingInput `json:"preprocessing"` // Required
	// Compression scheme of the file.
	Compression IngestFeedCompression `json:"compression"` // Required
	// Description of the ingest feed.
	Description *graphql.String `json:"description,omitempty"` // Optional
}

type CreateCustomLinkInteractionInput struct {
	Path                       graphql.String             `json:"path"`                       // Required
	CustomLinkInteractionInput CustomLinkInteractionInput `json:"customLinkInteractionInput"` // Required
}

// CreateDashboardFromTemplateV2Input represents data for creating a dashboard from a yaml specification.
type CreateDashboardFromTemplateV2Input struct {
	// Name of the view of the dashboard.
	ViewName RepoOrViewName `json:"viewName"` // Required
	// Name of the dashboard.
	Name graphql.String `json:"name"` // Required
	// YAML specification of the dashboard.
	YamlTemplate YAML `json:"yamlTemplate"` // Required
}

type CreateDashboardInput struct {
	SearchDomainName graphql.String                 `json:"searchDomainName"`          // Required
	Name             graphql.String                 `json:"name"`                      // Required
	Labels           *[]graphql.String              `json:"labels,omitempty"`          // Optional
	Widgets          *[]WidgetInput                 `json:"widgets,omitempty"`         // Optional
	Links            *[]LinkInput                   `json:"links,omitempty"`           // Optional
	DefaultFilterID  *graphql.String                `json:"defaultFilterId,omitempty"` // Optional
	Filters          *[]FilterInput                 `json:"filters,omitempty"`         // Optional
	Parameters       *[]ParameterInput              `json:"parameters,omitempty"`      // Optional
	Description      *graphql.String                `json:"description,omitempty"`     // Optional
	UpdateFrequency  *DashboardUpdateFrequencyInput `json:"updateFrequency,omitempty"` // Optional
}

type CreateDashboardLinkInteractionInput struct {
	Path                          graphql.String                `json:"path"`                          // Required
	DashboardLinkInteractionInput DashboardLinkInteractionInput `json:"dashboardLinkInteractionInput"` // Required
}

// CreateEmailAction represents data for creating an email action.
type CreateEmailAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// List of email addresses to send an email to.
	Recipients []graphql.String `json:"recipients"` // Required
	// Defines whether the action should use the configured proxy to make web requests.
	UseProxy graphql.Boolean `json:"useProxy"` // Required
	// Subject of the email. Can be templated with values from the result.
	SubjectTemplate *graphql.String `json:"subjectTemplate,omitempty"` // Optional
	// Body of the email. Can be templated with values from the result.
	BodyTemplate *graphql.String `json:"bodyTemplate,omitempty"` // Optional
	// Whether the result set should be be attached as a CSV file.
	AttachCsv *graphql.Boolean `json:"attachCsv,omitempty"` // Optional
}

// CreateEventForwardingRule represents data for creating an event forwarding rule.
type CreateEventForwardingRule struct {
	// The name of the repository that the event forwarding rule is for.
	RepoName graphql.String `json:"repoName"` // Required
	// The query string for filtering and mapping the events to forward.
	QueryString graphql.String `json:"queryString"` // Required
	// The id of the event forwarder.
	EventForwarderID graphql.String       `json:"eventForwarderId"`          // Required
	LanguageVersion  *LanguageVersionEnum `json:"languageVersion,omitempty"` // Optional
}

// CreateFdrFeed represents data for creating an FDR feed.
type CreateFdrFeed struct {
	// Name of the repository of the FDR feed.
	RepositoryName graphql.String `json:"repositoryName"` // Required
	// Name of the FDR feed.
	Name graphql.String `json:"name"` // Required
	// The id or name of the parser that should be used to parse the FDR data. We recommend using the FDR parser from the crowdstrike/fdr package, which can be referred to as "crowdstrike/fdr:FDR".
	Parser graphql.String `json:"parser"` // Required
	// AWS client id of the FDR feed.
	ClientID graphql.String `json:"clientId"` // Required
	// AWS client secret of the FDR feed.
	ClientSecret graphql.String `json:"clientSecret"` // Required
	// AWS SQS queue url of the FDR feed.
	SqsURL graphql.String `json:"sqsUrl"` // Required
	// AWS S3 Identifier of the FDR feed.
	S3Identifier graphql.String `json:"s3Identifier"` // Required
	// Description of the FDR feed.
	Description *graphql.String `json:"description,omitempty"` // Optional
	// Is ingest from the FDR feed enabled?.
	Enabled *graphql.Boolean `json:"enabled,omitempty"` // Optional
}

type CreateFieldAliasSchemaInput struct {
	Name          graphql.String       `json:"name"`                    // Required
	Fields        []SchemaFieldInput   `json:"fields"`                  // Required
	AliasMappings *[]AliasMappingInput `json:"aliasMappings,omitempty"` // Optional
}

// CreateFilterAlert represents data for creating a filter alert.
type CreateFilterAlert struct {
	// Name of the view of the filter alert.
	ViewName RepoOrViewName `json:"viewName"` // Required
	// Name of the filter alert.
	Name graphql.String `json:"name"` // Required
	// LogScale query to execute.
	QueryString graphql.String `json:"queryString"` // Required
	// List of ids or names for actions to fire on query result. Actions in packages can be referred to as "packagescope/packagename:actionname".
	ActionIDsOrNames []graphql.String `json:"actionIdsOrNames"` // Required
	// Ownership of the query run by this filter alert. If value is User, ownership will be based on the runAsUserId field.
	QueryOwnershipType QueryOwnershipType `json:"queryOwnershipType"` // Required
	// Description of the filter alert.
	Description *graphql.String `json:"description,omitempty"` // Optional
	// Labels attached to the filter alert.
	Labels *[]graphql.String `json:"labels,omitempty"` // Optional
	// Flag indicating whether the filter alert is enabled.
	Enabled *graphql.Boolean `json:"enabled,omitempty"` // Optional
	// Throttle time in seconds.
	ThrottleTimeSeconds *Long `json:"throttleTimeSeconds,omitempty"` // Optional
	// A field to throttle on. Can only be set if throttleTimeSeconds is set.
	ThrottleField *graphql.String `json:"throttleField,omitempty"` // Optional
	// The filter alert will run with the permissions of the user corresponding to this id if the queryOwnershipType field is set to User. If the queryOwnershipType is set to Organization, whilst runAsUserId is set, this will result in an error. If not specified, the filter alert will run with the permissions of the calling user. It requires the 'ChangeTriggersToRunAsOtherUsers' permission to set this field to a user id different from the calling user.
	RunAsUserID *graphql.String `json:"runAsUserId,omitempty"` // Optional
}

// CreateHumioRepoAction represents data for creating a Humio repo action.
type CreateHumioRepoAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// Humio ingest token for the dataspace that the action should ingest into.
	IngestToken graphql.String `json:"ingestToken"` // Required
}

// CreateIngestListenerV3Input represents input data to create an ingest listener.
type CreateIngestListenerV3Input struct {
	// Name of the repository.
	RepositoryName graphql.String `json:"repositoryName"` // Required
	// The TCP/UDP port the ingest listener will listen on.
	Port graphql.Int `json:"port"` // Required
	// The kind of listener; TCP, UDP, Netflow/UDP, GELF/UDP, GELF/TCP.
	Protocol IngestListenerProtocol `json:"protocol"` // Required
	// Name of the ingest listener.
	Name graphql.String `json:"name"` // Required
	// The ip address that the ingest listener will bind to.
	BindInterface graphql.String `json:"bindInterface"` // Required
	// Id or name of the parser to assign to the ingest listener. Parsers in packages can be referred to as "packagescope/packagename:parsername".
	Parser graphql.String `json:"parser"` // Required
	// The charset used to decode the event stream.
	Charset graphql.String `json:"charset"` // Required
	// The vHost name for the ingest listener.
	VHost *graphql.Int `json:"vHost,omitempty"` // Optional
}

// CreateKafkaEventForwarder represents data for creating a Kafka event forwarder.
type CreateKafkaEventForwarder struct {
	// Name of the event forwarder.
	Name graphql.String `json:"name"` // Required
	// Description of the event forwarder.
	Description graphql.String `json:"description"` // Required
	// The Kafka producer configuration used to forward events in the form of properties (x.y.z=abc). See https://library.humio.com/humio-server/ingesting-data-event-forwarders.html#kafka-configuration.
	Properties graphql.String `json:"properties"` // Required
	// The Kafka topic the events should be forwarded to.
	Topic graphql.String `json:"topic"` // Required
	// Is the event forwarder enabled.
	Enabled *graphql.Boolean `json:"enabled,omitempty"` // Optional
}

// CreateLocalClusterConnectionInput represents data for creating a local multi-cluster connection.
type CreateLocalClusterConnectionInput struct {
	// Name or id of the multi-cluster view to add the connection to.
	MultiClusterViewName graphql.String `json:"multiClusterViewName"` // Required
	// Name or id of the local view to connect with.
	TargetViewName graphql.String `json:"targetViewName"` // Required
	// Additional tags that can be used to filter queries.
	Tags *[]ClusterConnectionInputTag `json:"tags,omitempty"` // Optional
	// Filter query that restricts the data visible through this connection.
	QueryPrefix *graphql.String `json:"queryPrefix,omitempty"` // Optional
}

// CreateOpsGenieAction represents data for creating an OpsGenie action.
type CreateOpsGenieAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// OpsGenie webhook url to send the request to.
	APIURL graphql.String `json:"apiUrl"` // Required
	// Key to authenticate with OpsGenie.
	GenieKey graphql.String `json:"genieKey"` // Required
	// Defines whether the action should use the configured proxy to make web requests.
	UseProxy graphql.Boolean `json:"useProxy"` // Required
}

// CreateOrUpdateExternalFunctionInput represents the specification of an external function.
type CreateOrUpdateExternalFunctionInput struct {
	// The name of the external function.
	Name graphql.String `json:"name"` // Required
	// The URL for the external function.
	ProcedureURL graphql.String `json:"procedureURL"` // Required
	// The parameter specifications for the external function.
	Parameters []ParameterSpecificationInput `json:"parameters"` // Required
	// The description for the external function.
	Description graphql.String `json:"description"` // Required
	// The kind of external function. This defines how the external function is executed.
	Kind KindInput `json:"kind"` // Required
}

type CreateOrganizationPermissionTokenInput struct {
	Name        graphql.String           `json:"name"`                 // Required
	Permissions []OrganizationPermission `json:"permissions"`          // Required
	ExpireAt    *Long                    `json:"expireAt,omitempty"`   // Optional
	IPFilterID  *graphql.String          `json:"ipFilterId,omitempty"` // Optional
}

// CreatePagerDutyAction represents data for creating a PagerDuty action.
type CreatePagerDutyAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// Severity level to give to the message.
	Severity graphql.String `json:"severity"` // Required
	// Routing key to authenticate with PagerDuty.
	RoutingKey graphql.String `json:"routingKey"` // Required
	// Defines whether the action should use the configured proxy to make web requests.
	UseProxy graphql.Boolean `json:"useProxy"` // Required
}

// CreateParserFromTemplateInput represents data for creating a parser from a yaml template.
type CreateParserFromTemplateInput struct {
	// Name of the view to install the parser in.
	ViewName RepoOrViewName `json:"viewName"` // Required
	// Name of the parser.
	Name graphql.String `json:"name"` // Required
	// YAML specification of the parser.
	YamlTemplate YAML `json:"yamlTemplate"` // Required
}

type CreateParserInput struct {
	Name            graphql.String       `json:"name"`                      // Required
	TestData        []graphql.String     `json:"testData"`                  // Required
	SourceCode      graphql.String       `json:"sourceCode"`                // Required
	RepositoryName  graphql.String       `json:"repositoryName"`            // Required
	TagFields       []graphql.String     `json:"tagFields"`                 // Required
	Force           graphql.Boolean      `json:"force"`                     // Required
	LanguageVersion *LanguageVersionEnum `json:"languageVersion,omitempty"` // Optional
}

// CreateParserInputV2 represents input for creating a parser.
type CreateParserInputV2 struct {
	// The name to use for the parser.
	Name graphql.String `json:"name"` // Required
	// The parser script that is executed for every incoming event.
	Script graphql.String `json:"script"` // Required
	// Test cases that can be used to help verify that the parser works as expected.
	TestCases []ParserTestCaseInput `json:"testCases"` // Required
	// The repository where the parser lives.
	RepositoryName RepoOrViewName `json:"repositoryName"` // Required
	// Fields that are used as tags.
	FieldsToTag []graphql.String `json:"fieldsToTag"` // Required
	// A list of fields that will be removed from the event before it's parsed. These fields will not be included when calculating usage.
	FieldsToBeRemovedBeforeParsing []graphql.String `json:"fieldsToBeRemovedBeforeParsing"` // Required
	// Allows saving a parser with a name that is already in use, by overwriting the parser that previously had the name.
	AllowOverwritingExistingParser *graphql.Boolean `json:"allowOverwritingExistingParser,omitempty"` // Optional
	// A specific language version.
	LanguageVersion *LanguageVersionInputType `json:"languageVersion,omitempty"` // Optional
}

type CreatePersonalUserTokenInput struct {
	ExpireAt   *Long           `json:"expireAt,omitempty"`   // Optional
	IPFilterID *graphql.String `json:"ipFilterId,omitempty"` // Optional
}

// CreatePostMessageSlackAction represents data for creating a post message Slack action.
type CreatePostMessageSlackAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// Api token to authenticate with Slack.
	APIToken graphql.String `json:"apiToken"` // Required
	// List of Slack channels to message.
	Channels []graphql.String `json:"channels"` // Required
	// Fields to include within the Slack message. Can be templated with values from the result.
	Fields []SlackFieldEntryInput `json:"fields"` // Required
	// Defines whether the action should use the configured proxy to make web requests.
	UseProxy graphql.Boolean `json:"useProxy"` // Required
}

// CreateRemoteClusterConnectionInput represents data for creating a remote cluster connection.
type CreateRemoteClusterConnectionInput struct {
	// Name or id of the multi-cluster view to add the connection to.
	MultiClusterViewName graphql.String `json:"multiClusterViewName"` // Required
	// Public URL of the remote cluster to connect with.
	PublicURL graphql.String `json:"publicUrl"` // Required
	// Access token for the remote view to connect with.
	Token graphql.String `json:"token"` // Required
	// Additional tags that can be used to filter queries.
	Tags *[]ClusterConnectionInputTag `json:"tags,omitempty"` // Optional
	// Filter query that restricts the data visible through this connection.
	QueryPrefix *graphql.String `json:"queryPrefix,omitempty"` // Optional
}

type CreateSavedQueryInput struct {
	Name                         graphql.String                      `json:"name"`                                   // Required
	ViewName                     graphql.String                      `json:"viewName"`                               // Required
	QueryString                  graphql.String                      `json:"queryString"`                            // Required
	Start                        *graphql.String                     `json:"start,omitempty"`                        // Optional
	End                          *graphql.String                     `json:"end,omitempty"`                          // Optional
	IsLive                       *graphql.Boolean                    `json:"isLive,omitempty"`                       // Optional
	WidgetType                   *graphql.String                     `json:"widgetType,omitempty"`                   // Optional
	Options                      *graphql.String                     `json:"options,omitempty"`                      // Optional
	DashboardLinkInteractions    *[]DashboardLinkInteractionInput    `json:"dashboardLinkInteractions,omitempty"`    // Optional
	CustomLinkInteractions       *[]CustomLinkInteractionInput       `json:"customLinkInteractions,omitempty"`       // Optional
	SearchLinkInteractions       *[]SearchLinkInteractionInput       `json:"searchLinkInteractions,omitempty"`       // Optional
	UpdateParametersInteractions *[]UpdateParametersInteractionInput `json:"updateParametersInteractions,omitempty"` // Optional
}

type CreateScheduledReportInput struct {
	ViewName                  graphql.String                             `json:"viewName"`                  // Required
	Name                      graphql.String                             `json:"name"`                      // Required
	Enabled                   graphql.Boolean                            `json:"enabled"`                   // Required
	Description               graphql.String                             `json:"description"`               // Required
	DashboardID               graphql.String                             `json:"dashboardId"`               // Required
	SharedTime                graphql.Boolean                            `json:"sharedTime"`                // Required
	TimeWindowFrom            graphql.String                             `json:"timeWindowFrom"`            // Required
	TimeWindowTo              graphql.String                             `json:"timeWindowTo"`              // Required
	ScheduleFrequency         graphql.String                             `json:"scheduleFrequency"`         // Required
	ScheduleFrequencyEvery    graphql.String                             `json:"scheduleFrequencyEvery"`    // Required
	ScheduleFrequencyTime     graphql.String                             `json:"scheduleFrequencyTime"`     // Required
	ScheduleFrequencyTimeZone graphql.String                             `json:"scheduleFrequencyTimeZone"` // Required
	ScheduleFrequencyOn       []graphql.String                           `json:"scheduleFrequencyOn"`       // Required
	ScheduleStartDate         graphql.String                             `json:"scheduleStartDate"`         // Required
	ScheduleEndDate           graphql.String                             `json:"scheduleEndDate"`           // Required
	Labels                    []graphql.String                           `json:"labels"`                    // Required
	Parameters                []CreateScheduledReportParameterValueInput `json:"parameters"`                // Required
	ActionIDs                 []graphql.String                           `json:"actionIds"`                 // Required
	Layout                    CreateScheduledReportLayoutInput           `json:"layout"`                    // Required
	Password                  *graphql.String                            `json:"password,omitempty"`        // Optional
}

type CreateScheduledReportLayoutInput struct {
	PaperSize             graphql.String  `json:"paperSize"`             // Required
	PaperOrientation      graphql.String  `json:"paperOrientation"`      // Required
	PaperLayout           graphql.String  `json:"paperLayout"`           // Required
	ShowDescription       graphql.Boolean `json:"showDescription"`       // Required
	ShowTitleFrontpage    graphql.Boolean `json:"showTitleFrontpage"`    // Required
	ShowParameters        graphql.Boolean `json:"showParameters"`        // Required
	MaxNumberOfRows       graphql.Int     `json:"maxNumberOfRows"`       // Required
	ShowTitleHeader       graphql.Boolean `json:"showTitleHeader"`       // Required
	ShowExportDate        graphql.Boolean `json:"showExportDate"`        // Required
	FooterShowPageNumbers graphql.Boolean `json:"footerShowPageNumbers"` // Required
}

type CreateScheduledReportParameterValueInput struct {
	ID    graphql.String `json:"id"`    // Required
	Value graphql.String `json:"value"` // Required
}

// CreateScheduledSearch represents data for creating a scheduled search.
type CreateScheduledSearch struct {
	// Name of the view of the scheduled search.
	ViewName graphql.String `json:"viewName"` // Required
	// Name of the scheduled search.
	Name graphql.String `json:"name"` // Required
	// LogScale query to execute.
	QueryString graphql.String `json:"queryString"` // Required
	// Start of the relative time interval for the query.
	QueryStart graphql.String `json:"queryStart"` // Required
	// End of the relative time interval for the query.
	QueryEnd graphql.String `json:"queryEnd"` // Required
	// Cron pattern describing the schedule to execute the query on.
	Schedule graphql.String `json:"schedule"` // Required
	// Time zone of the schedule. Currently this field only supports UTC offsets like 'UTC', 'UTC-01' or 'UTC+12:45'.
	TimeZone graphql.String `json:"timeZone"` // Required
	// User-defined limit, which caps the number of missed searches to backfill, e.g. in the event of a shutdown.
	BackfillLimit graphql.Int `json:"backfillLimit"` // Required
	// List of ids or names for actions to fire on query result. Actions in packages can be referred to as "packagescope/packagename:actionname".
	Actions []graphql.String `json:"actions"` // Required
	// Description of the scheduled search.
	Description *graphql.String `json:"description,omitempty"` // Optional
	// Flag indicating whether the scheduled search is enabled.
	Enabled *graphql.Boolean `json:"enabled,omitempty"` // Optional
	// Labels attached to the scheduled search.
	Labels *[]graphql.String `json:"labels,omitempty"` // Optional
	// The scheduled search will run with the permissions of the user corresponding to this id if the queryOwnershipType field is set to User. If the queryOwnershipType is set to Organization, whilst runAsUserId is set, this will result in an error. If not specified, the scheduled search will run with the permissions of the calling user. It requires the 'ChangeTriggersToRunAsOtherUsers' permission to set this field to a user id different from the calling user.
	RunAsUserID *graphql.String `json:"runAsUserId,omitempty"` // Optional
	// Ownership of the query run by this scheduled search. If value is User, ownership will be based on the runAsUserId field.
	QueryOwnershipType *QueryOwnershipType `json:"queryOwnershipType,omitempty"` // Optional
}

// CreateScheduledSearchFromTemplateInput represents data for creating a scheduled search from a yaml template.
type CreateScheduledSearchFromTemplateInput struct {
	// Name of the view of the scheduled search.
	ViewName RepoOrViewName `json:"viewName"` // Required
	// Name of the scheduled search.
	Name graphql.String `json:"name"` // Required
	// YAML specification of the scheduled search.
	YamlTemplate YAML `json:"yamlTemplate"` // Required
}

type CreateSearchLinkInteractionInput struct {
	Path                       graphql.String             `json:"path"`                       // Required
	SearchLinkInteractionInput SearchLinkInteractionInput `json:"searchLinkInteractionInput"` // Required
}

// CreateSlackAction represents data for creating a Slack action.
type CreateSlackAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// Slack webhook url to send the request to.
	URL graphql.String `json:"url"` // Required
	// Fields to include within the Slack message. Can be templated with values from the result.
	Fields []SlackFieldEntryInput `json:"fields"` // Required
	// Defines whether the action should use the configured proxy to make web requests.
	UseProxy graphql.Boolean `json:"useProxy"` // Required
}

type CreateSystemPermissionTokenInput struct {
	Name        graphql.String     `json:"name"`                 // Required
	Permissions []SystemPermission `json:"permissions"`          // Required
	ExpireAt    *Long              `json:"expireAt,omitempty"`   // Optional
	IPFilterID  *graphql.String    `json:"ipFilterId,omitempty"` // Optional
}

// CreateUploadFileAction represents data for creating an upload file action.
type CreateUploadFileAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// File name for the uploaded file.
	FileName graphql.String `json:"fileName"` // Required
}

// CreateVictorOpsAction represents data for creating a VictorOps action.
type CreateVictorOpsAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// Type of the VictorOps message to make.
	MessageType graphql.String `json:"messageType"` // Required
	// VictorOps webhook url to send the request to.
	NotifyURL graphql.String `json:"notifyUrl"` // Required
	// Defines whether the action should use the configured proxy to make web requests.
	UseProxy graphql.Boolean `json:"useProxy"` // Required
}

type CreateViewPermissionsTokenInput struct {
	Name        graphql.String   `json:"name"`                 // Required
	ViewIDs     []graphql.String `json:"viewIds"`              // Required
	Permissions []Permission     `json:"permissions"`          // Required
	ExpireAt    *Long            `json:"expireAt,omitempty"`   // Optional
	IPFilterID  *graphql.String  `json:"ipFilterId,omitempty"` // Optional
}

// CreateWebhookAction represents data for creating a webhook action.
type CreateWebhookAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// Url to send the http(s) request to.
	URL graphql.String `json:"url"` // Required
	// Method to use for the request.
	Method graphql.String `json:"method"` // Required
	// Headers of the http(s) request.
	Headers []HttpHeaderEntryInput `json:"headers"` // Required
	// Body of the http(s) request. Can be templated with values from the result.
	BodyTemplate graphql.String `json:"bodyTemplate"` // Required
	// Flag indicating whether SSL should be ignored for the request.
	IgnoreSSL graphql.Boolean `json:"ignoreSSL"` // Required
	// Defines whether the action should use the configured proxy to make web requests.
	UseProxy graphql.Boolean `json:"useProxy"` // Required
}

type CustomLinkInteractionInput struct {
	Name                       graphql.String                    `json:"name"`                                 // Required
	URLTemplate                graphql.String                    `json:"urlTemplate"`                          // Required
	OpenInNewTab               graphql.Boolean                   `json:"openInNewTab"`                         // Required
	TitleTemplate              *graphql.String                   `json:"titleTemplate,omitempty"`              // Optional
	URLEncodeArgs              *graphql.Boolean                  `json:"urlEncodeArgs,omitempty"`              // Optional
	FieldInteractionConditions *[]FieldInteractionConditionInput `json:"fieldInteractionConditions,omitempty"` // Optional
}

type DashboardLinkInteractionInput struct {
	Name                       graphql.String                    `json:"name"`                                 // Required
	Arguments                  []ArgumentInput                   `json:"arguments"`                            // Required
	OpenInNewTab               graphql.Boolean                   `json:"openInNewTab"`                         // Required
	UseWidgetTimeWindow        graphql.Boolean                   `json:"useWidgetTimeWindow"`                  // Required
	TitleTemplate              *graphql.String                   `json:"titleTemplate,omitempty"`              // Optional
	DashboardID                *graphql.String                   `json:"dashboardId,omitempty"`                // Optional
	DashboardName              *graphql.String                   `json:"dashboardName,omitempty"`              // Optional
	DashboardRepoOrViewName    *RepoOrViewName                   `json:"dashboardRepoOrViewName,omitempty"`    // Optional
	PackageSpecifier           *UnversionedPackageSpecifier      `json:"packageSpecifier,omitempty"`           // Optional
	FieldInteractionConditions *[]FieldInteractionConditionInput `json:"fieldInteractionConditions,omitempty"` // Optional
}

type DashboardUpdateFrequencyInput struct {
	UpdateFrequencyType DashboardUpdateFrequency `json:"updateFrequencyType"` // Required
}

// DeleteAction represents data for deleting an action.
type DeleteAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Id of the action.
	ID graphql.String `json:"id"` // Required
}

// DeleteAggregateAlert represents data for deleting an aggregate alert.
type DeleteAggregateAlert struct {
	// Name of the view of the aggregate alert.
	ViewName RepoOrViewName `json:"viewName"` // Required
	// Id of the aggregate alert.
	ID graphql.String `json:"id"` // Required
}

// DeleteAlert represents data for deleting an alert.
type DeleteAlert struct {
	// Name of the view of the alert.
	ViewName graphql.String `json:"viewName"` // Required
	// Id of the alert.
	ID graphql.String `json:"id"` // Required
}

// DeleteClusterConnectionInput represents data for deleting a cluster connection.
type DeleteClusterConnectionInput struct {
	// Name or id of the multi-cluster view to delete the connection from.
	MultiClusterViewName graphql.String `json:"multiClusterViewName"` // Required
	// Id of the connection to delete.
	ConnectionID graphql.String `json:"connectionId"` // Required
}

type DeleteDashboardInput struct {
	ID graphql.String `json:"id"` // Required
}

// DeleteDashboardInputV2 represents the data for deleting a dashboard.
type DeleteDashboardInputV2 struct {
	// The viewId containing the dashboard to delete.
	ViewID graphql.String `json:"viewId"` // Required
	// The dashboardId to delete.
	DashboardID graphql.String `json:"dashboardId"` // Required
}

// DeleteEventForwarderInput represents data for deleting an event forwarder.
type DeleteEventForwarderInput struct {
	// Id of the event forwarder.
	ID graphql.String `json:"id"` // Required
}

// DeleteEventForwardingRule represents data for deleting an event forwarding rule.
type DeleteEventForwardingRule struct {
	// The name of the repository that the event forwarding rule is for.
	RepoName graphql.String `json:"repoName"` // Required
	// The unique id for the event forwarding rule.
	ID graphql.String `json:"id"` // Required
}

// DeleteFdrFeed represents data for deleting an FDR feed.
type DeleteFdrFeed struct {
	// Name of the repository of the FDR feed.
	RepositoryName graphql.String `json:"repositoryName"` // Required
	// Id of the FDR feed.
	ID graphql.String `json:"id"` // Required
}

type DeleteFieldAliasSchema struct {
	SchemaID graphql.String `json:"schemaId"` // Required
}

// DeleteFilterAlert represents data for deleting a filter alert.
type DeleteFilterAlert struct {
	// Name of the view of the filter alert.
	ViewName RepoOrViewName `json:"viewName"` // Required
	// Id of the filter alert.
	ID graphql.String `json:"id"` // Required
}

// DeleteIngestFeed represents data for deleting an ingest feed.
type DeleteIngestFeed struct {
	// Name of the repository of the ingest feed.
	RepositoryName RepoOrViewName `json:"repositoryName"` // Required
	// Id of the ingest feed.
	ID graphql.String `json:"id"` // Required
}

type DeleteInteractionInput struct {
	Path graphql.String `json:"path"` // Required
	ID   graphql.String `json:"id"`   // Required
}

type DeleteParserInput struct {
	ID             graphql.String `json:"id"`             // Required
	RepositoryName RepoOrViewName `json:"repositoryName"` // Required
}

type DeleteSavedQueryInput struct {
	ID       graphql.String `json:"id"`       // Required
	ViewName graphql.String `json:"viewName"` // Required
}

type DeleteScheduledReportInput struct {
	ViewName graphql.String `json:"viewName"` // Required
	ID       graphql.String `json:"id"`       // Required
}

// DeleteScheduledSearch represents data for deleting a scheduled search.
type DeleteScheduledSearch struct {
	// Name of the view of the scheduled search.
	ViewName graphql.String `json:"viewName"` // Required
	// Id of the scheduled search.
	ID graphql.String `json:"id"` // Required
}

type DeleteSearchDomainByIdInput struct {
	// The id of the search domain.
	ID graphql.String `json:"id"` // Required
	// Optional message to why the search domain was deleted. Will be added to the audit log.
	DeleteMessage *graphql.String `json:"deleteMessage,omitempty"` // Optional
}

// DisableAggregateAlert represents data for disabling an aggregate alert.
type DisableAggregateAlert struct {
	// Name of the view of the aggregate alert.
	ViewName RepoOrViewName `json:"viewName"` // Required
	// Id of the aggregate alert.
	ID graphql.String `json:"id"` // Required
}

// DisableAlert represents data for disabling an alert.
type DisableAlert struct {
	// Name of the view of the alert.
	ViewName RepoOrViewName `json:"viewName"` // Required
	// Id of the alert.
	ID graphql.String `json:"id"` // Required
}

// DisableEventForwarderInput represents data for disabling an event forwarder.
type DisableEventForwarderInput struct {
	// Id of the event forwarder.
	ID graphql.String `json:"id"` // Required
}

type DisableFieldAliasSchemaOnOrgInput struct {
	SchemaID graphql.String `json:"schemaId"` // Required
}

type DisableFieldAliasSchemaOnViewInput struct {
	ViewName graphql.String `json:"viewName"` // Required
	SchemaID graphql.String `json:"schemaId"` // Required
}

// DisableFilterAlert represents data for disabling a filter alert.
type DisableFilterAlert struct {
	// Name of the view of the filter alert.
	ViewName RepoOrViewName `json:"viewName"` // Required
	// Id of the filter alert.
	ID graphql.String `json:"id"` // Required
}

// DisableOrganizationIocAccess represents data for disabling access to IOCs (indicators of compromise) for an organization.
type DisableOrganizationIocAccess struct {
	// Id of organization.
	OrganizationID graphql.String `json:"organizationId"` // Required
}

type DisableScheduledReportInput struct {
	ViewName graphql.String `json:"viewName"` // Required
	ID       graphql.String `json:"id"`       // Required
}

// DisableStarScheduledSearch represents data for disabling a scheduled search.
type DisableStarScheduledSearch struct {
	// Name of the view of the scheduled search.
	ViewName graphql.String `json:"viewName"` // Required
	// Id of the scheduled search.
	ID graphql.String `json:"id"` // Required
}

type DynamicConfigInputObject struct {
	Config DynamicConfig  `json:"config"` // Required
	Value  graphql.String `json:"value"`  // Required
}

// EnableAggregateAlert represents data for enabling an aggregate alert.
type EnableAggregateAlert struct {
	// Name of the view of the aggregate alert.
	ViewName RepoOrViewName `json:"viewName"` // Required
	// Id of the aggregate alert.
	ID graphql.String `json:"id"` // Required
}

// EnableAlert represents data for enabling an alert.
type EnableAlert struct {
	// Name of the view of the alert.
	ViewName RepoOrViewName `json:"viewName"` // Required
	// Id of the alert.
	ID graphql.String `json:"id"` // Required
}

// EnableEventForwarderInput represents data for enabling an event forwarder.
type EnableEventForwarderInput struct {
	// Id of the event forwarder.
	ID graphql.String `json:"id"` // Required
}

type EnableFieldAliasSchemaOnOrgInput struct {
	SchemaID graphql.String `json:"schemaId"` // Required
}

type EnableFieldAliasSchemaOnViewsInput struct {
	ViewNames []graphql.String `json:"viewNames"` // Required
	SchemaID  graphql.String   `json:"schemaId"`  // Required
}

// EnableFilterAlert represents data for enabling a filter alert.
type EnableFilterAlert struct {
	// Name of the view of the filter alert.
	ViewName RepoOrViewName `json:"viewName"` // Required
	// Id of the filter alert.
	ID graphql.String `json:"id"` // Required
}

// EnableOrganizationIocAccess represents data for enabling access to IOCs (indicators of compromise) for an organization.
type EnableOrganizationIocAccess struct {
	// Id of organization.
	OrganizationID graphql.String `json:"organizationId"` // Required
}

type EnableScheduledReportInput struct {
	ViewName graphql.String `json:"viewName"` // Required
	ID       graphql.String `json:"id"`       // Required
}

// EnableStarScheduledSearch represents data for enabling a scheduled search.
type EnableStarScheduledSearch struct {
	// Name of the view of the scheduled search.
	ViewName graphql.String `json:"viewName"` // Required
	// Id of the scheduled search.
	ID graphql.String `json:"id"` // Required
}

type EnableWorkerQueryTracingInputType struct {
	// The quota key to enable tracing for. All queries belonging to this quota key will be traced.
	QuotaKey graphql.String `json:"quotaKey"` // Required
	// The end timestamp for tracing. Tracing for this quota key will be disabled automatically once this time is reached. Will be clamped to be at most 15 minutes in the future.
	Expiry DateTime `json:"expiry"` // Required
}

// EnabledInput represents enable or disable language restrictions.
type EnabledInput struct {
	Version LanguageVersionEnum `json:"version"` // Required
	Enabled graphql.Boolean     `json:"enabled"` // Required
}

type EnforceSubdomainsInput struct {
	Enforce graphql.Boolean `json:"enforce"` // Required
}

type EntitySearchInputType struct {
	SearchTerm *graphql.String             `json:"searchTerm,omitempty"` // Optional
	PageSize   *graphql.Int                `json:"pageSize,omitempty"`   // Optional
	PageBefore *graphql.String             `json:"pageBefore,omitempty"` // Optional
	PageAfter  *graphql.String             `json:"pageAfter,omitempty"`  // Optional
	Paths      *[]graphql.String           `json:"paths,omitempty"`      // Optional
	SortBy     *[]EntitySearchSortInfoType `json:"sortBy,omitempty"`     // Optional
}

type EntitySearchSortInfoType struct {
	Name  graphql.String            `json:"name"`  // Required
	Order EntitySearchSortOrderType `json:"order"` // Required
}

type FieldConfigurationInput struct {
	ViewID    graphql.String `json:"viewId"`    // Required
	FieldName graphql.String `json:"fieldName"` // Required
	JSON      JSON           `json:"json"`      // Required
}

// FieldHasValueInput represents asserts that a given field has an expected value after having been parsed.
type FieldHasValueInput struct {
	// Field to assert on.
	FieldName graphql.String `json:"fieldName"` // Required
	// Value expected to be contained in the field.
	ExpectedValue graphql.String `json:"expectedValue"` // Required
}

type FieldInteractionConditionInput struct {
	FieldName graphql.String             `json:"fieldName"` // Required
	Operator  FieldConditionOperatorType `json:"operator"`  // Required
	Argument  graphql.String             `json:"argument"`  // Required
}

// FileFieldFilterType represents a field in a file and what value the field should have for a given entry to pass the filter.
type FileFieldFilterType struct {
	Field  graphql.String   `json:"field"`  // Required
	Values []graphql.String `json:"values"` // Required
}

type FilterInput struct {
	ID     graphql.String `json:"id"`     // Required
	Name   graphql.String `json:"name"`   // Required
	Prefix graphql.String `json:"prefix"` // Required
}

// FunctionListInput represents input list of function names.
type FunctionListInput struct {
	Version   LanguageVersionEnum `json:"version"`   // Required
	Functions []graphql.String    `json:"functions"` // Required
}

// GenerateAggregateAlertFromPackageTemplateInput represents data for generating an unsaved aggregate alert object from a library package template.
type GenerateAggregateAlertFromPackageTemplateInput struct {
	// Name of the view of the aggregate alert.
	ViewName RepoOrViewName `json:"viewName"` // Required
	// The id of the package of the aggregate alert template.
	PackageID VersionedPackageSpecifier `json:"packageId"` // Required
	// The name of the aggregate alert template in the package.
	TemplateName graphql.String `json:"templateName"` // Required
}

// GenerateAggregateAlertFromTemplateInput represents data for generating an unsaved aggregate alert object from a yaml template.
type GenerateAggregateAlertFromTemplateInput struct {
	// Name of the view of the aggregate alert.
	ViewName RepoOrViewName `json:"viewName"` // Required
	// YAML specification of the aggregate alert.
	YamlTemplate YAML `json:"yamlTemplate"` // Required
}

// GenerateAlertFromPackageTemplateInput represents data for generating an unsaved alert object from a library package template.
type GenerateAlertFromPackageTemplateInput struct {
	// Name of the view of the alert.
	ViewName RepoOrViewName `json:"viewName"` // Required
	// The id of the package that the alert was installed as part of.
	PackageID VersionedPackageSpecifier `json:"packageId"` // Required
	// The name of the alert template in the package.
	TemplateName graphql.String `json:"templateName"` // Required
}

// GenerateAlertFromTemplateInput represents data for generating an unsaved alert object from a yaml template.
type GenerateAlertFromTemplateInput struct {
	// Name of the view of the alert.
	ViewName RepoOrViewName `json:"viewName"` // Required
	// YAML specification of the alert.
	YamlTemplate YAML `json:"yamlTemplate"` // Required
}

// GenerateFilterAlertFromPackageTemplateInput represents data for generating an unsaved filter alert object from a library package template.
type GenerateFilterAlertFromPackageTemplateInput struct {
	// Name of the view of the filter alert.
	ViewName RepoOrViewName `json:"viewName"` // Required
	// The id of the package of the filter alert template.
	PackageID VersionedPackageSpecifier `json:"packageId"` // Required
	// The name of the filter alert template in the package.
	TemplateName graphql.String `json:"templateName"` // Required
}

// GenerateFilterAlertFromTemplateInput represents data for generating an unsaved filter alert object from a yaml template.
type GenerateFilterAlertFromTemplateInput struct {
	// Name of the view of the filter alert.
	ViewName RepoOrViewName `json:"viewName"` // Required
	// YAML specification of the filter alert.
	YamlTemplate YAML `json:"yamlTemplate"` // Required
}

// GenerateScheduledSearchFromPackageTemplateInput represents data for generating an unsaved scheduled search object from a library package template.
type GenerateScheduledSearchFromPackageTemplateInput struct {
	// Name of the view of the scheduled search.
	ViewName RepoOrViewName `json:"viewName"` // Required
	// The id of the package that the scheduled search was installed as part of.
	PackageID VersionedPackageSpecifier `json:"packageId"` // Required
	// The name of the scheduled search template in the package.
	TemplateName graphql.String `json:"templateName"` // Required
}

// GenerateScheduledSearchFromTemplateInput represents data for generating an unsaved scheduled search object from a yaml templat.
type GenerateScheduledSearchFromTemplateInput struct {
	// Name of the view of the scheduled search.
	ViewName RepoOrViewName `json:"viewName"` // Required
	// YAML specification of the scheduled search.
	YamlTemplate YAML `json:"yamlTemplate"` // Required
}

// GetExternalFunctionInput represents the input required to get an external function specification.
type GetExternalFunctionInput struct {
	// The name of the external function to fetch.
	Name graphql.String `json:"name"` // Required
	// The view the external function should be accessible on.
	View graphql.String `json:"view"` // Required
}

type GroupFilter struct {
	NewQuery graphql.String  `json:"newQuery"`           // Required
	OldQuery *graphql.String `json:"oldQuery,omitempty"` // Optional
}

type GroupRoleAssignment struct {
	GroupID graphql.String `json:"groupId"` // Required
	RoleID  graphql.String `json:"roleId"`  // Required
}

// HttpHeaderEntryInput represents http(s) Header entry.
type HttpHeaderEntryInput struct {
	// Key of a http(s) header.
	Header graphql.String `json:"header"` // Required
	// Value of a http(s) header.
	Value graphql.String `json:"value"` // Required
}

type IPFilterIdInput struct {
	ID graphql.String `json:"id"` // Required
}

type IPFilterInput struct {
	Name     graphql.String `json:"name"`     // Required
	IPFilter graphql.String `json:"ipFilter"` // Required
}

type IPFilterUpdateInput struct {
	ID       graphql.String  `json:"id"`                 // Required
	Name     *graphql.String `json:"name,omitempty"`     // Optional
	IPFilter *graphql.String `json:"ipFilter,omitempty"` // Optional
}

// IngestFeedAwsAuthenticationInput represents how to authenticate to AWS.
type IngestFeedAwsAuthenticationInput struct {
	Kind IngestFeedAwsAuthenticationKind `json:"kind"` // Required
	// Arn of the role to be assumed.
	RoleArn *graphql.String `json:"roleArn,omitempty"` // Optional
}

// IngestFeedPreprocessingInput represents the preprocessing to apply to an ingest feed before parsing.
type IngestFeedPreprocessingInput struct {
	Kind IngestFeedPreprocessingKind `json:"kind"` // Required
}

type IngestPartitionInput struct {
	ID      graphql.Int   `json:"id"`      // Required
	NodeIDs []graphql.Int `json:"nodeIds"` // Required
}

type InputData struct {
	ID graphql.String `json:"id"` // Required
}

type InputDictionaryEntry struct {
	Key   graphql.String `json:"key"`   // Required
	Value graphql.String `json:"value"` // Required
}

type InstallPackageFromRegistryInput struct {
	ViewName           RepoOrViewName            `json:"viewName"`                     // Required
	PackageID          VersionedPackageSpecifier `json:"packageId"`                    // Required
	QueryOwnershipType *QueryOwnershipType       `json:"queryOwnershipType,omitempty"` // Optional
}

// KindInput represents defines how the external function is executed.
type KindInput struct {
	// The name of the kind of external function.
	Name KindEnum `json:"name"` // Required
	// The parameters that specify the key fields. Use for the 'Enrichment' functions.
	ParametersDefiningKeyFields *[]graphql.String `json:"parametersDefiningKeyFields,omitempty"` // Optional
	// The names of the keys when they're returned from the external function. Use for the 'Enrichment' functions.
	FixedKeyFields *[]graphql.String `json:"fixedKeyFields,omitempty"` // Optional
}

// LanguageVersionInputType represents a specific language version.
type LanguageVersionInputType struct {
	// The name of the language version. The name is case insensitive.
	Name graphql.String `json:"name"` // Required
}

type LinkInput struct {
	Name  graphql.String `json:"name"`  // Required
	Token graphql.String `json:"token"` // Required
}

type LoginBridgeInput struct {
	Name                        graphql.String   `json:"name"`                                // Required
	Description                 graphql.String   `json:"description"`                         // Required
	Issuer                      graphql.String   `json:"issuer"`                              // Required
	RemoteID                    graphql.String   `json:"remoteId"`                            // Required
	LoginURL                    graphql.String   `json:"loginUrl"`                            // Required
	RelayStateURL               graphql.String   `json:"relayStateUrl"`                       // Required
	SamlEntityID                graphql.String   `json:"samlEntityId"`                        // Required
	PrivateSamlCertificate      graphql.String   `json:"privateSamlCertificate"`              // Required
	PublicSamlCertificate       graphql.String   `json:"publicSamlCertificate"`               // Required
	AllowedUsers                []graphql.String `json:"allowedUsers"`                        // Required
	GroupAttribute              graphql.String   `json:"groupAttribute"`                      // Required
	Groups                      []graphql.String `json:"groups"`                              // Required
	OrganizationIDAttributeName graphql.String   `json:"organizationIdAttributeName"`         // Required
	GenerateUserName            graphql.Boolean  `json:"generateUserName"`                    // Required
	TermsDescription            graphql.String   `json:"termsDescription"`                    // Required
	TermsLink                   graphql.String   `json:"termsLink"`                           // Required
	AdditionalAttributes        *graphql.String  `json:"additionalAttributes,omitempty"`      // Optional
	OrganizationNameAttribute   *graphql.String  `json:"organizationNameAttribute,omitempty"` // Optional
}

type LoginBridgeUpdateInput struct {
	Name                        *graphql.String   `json:"name,omitempty"`                        // Optional
	Description                 *graphql.String   `json:"description,omitempty"`                 // Optional
	Issuer                      *graphql.String   `json:"issuer,omitempty"`                      // Optional
	RemoteID                    *graphql.String   `json:"remoteId,omitempty"`                    // Optional
	LoginURL                    *graphql.String   `json:"loginUrl,omitempty"`                    // Optional
	RelayStateURL               *graphql.String   `json:"relayStateUrl,omitempty"`               // Optional
	SamlEntityID                *graphql.String   `json:"samlEntityId,omitempty"`                // Optional
	PrivateSamlCertificate      *graphql.String   `json:"privateSamlCertificate,omitempty"`      // Optional
	PublicSamlCertificate       *graphql.String   `json:"publicSamlCertificate,omitempty"`       // Optional
	AllowedUsers                *[]graphql.String `json:"allowedUsers,omitempty"`                // Optional
	GroupAttribute              *graphql.String   `json:"groupAttribute,omitempty"`              // Optional
	Groups                      *[]graphql.String `json:"groups,omitempty"`                      // Optional
	OrganizationIDAttributeName *graphql.String   `json:"organizationIdAttributeName,omitempty"` // Optional
	AdditionalAttributes        *graphql.String   `json:"additionalAttributes,omitempty"`        // Optional
	OrganizationNameAttribute   *graphql.String   `json:"organizationNameAttribute,omitempty"`   // Optional
	GenerateUserName            *graphql.Boolean  `json:"generateUserName,omitempty"`            // Optional
	TermsDescription            *graphql.String   `json:"termsDescription,omitempty"`            // Optional
	TermsLink                   *graphql.String   `json:"termsLink,omitempty"`                   // Optional
}

type MarkLimitDeletedInput struct {
	LimitName graphql.String  `json:"limitName"` // Required
	Deleted   graphql.Boolean `json:"deleted"`   // Required
}

type MigrateLimitsInput struct {
	CreateLogLimit graphql.Boolean `json:"createLogLimit"`         // Required
	DefaultLimit   *graphql.String `json:"defaultLimit,omitempty"` // Optional
}

type NotificationInput struct {
	Message          graphql.String       `json:"message"`                   // Required
	Target           Targets              `json:"target"`                    // Required
	Title            graphql.String       `json:"title"`                     // Required
	Dismissable      graphql.Boolean      `json:"dismissable"`               // Required
	Severity         NotificationSeverity `json:"severity"`                  // Required
	NotificationType NotificationTypes    `json:"notificationType"`          // Required
	IDs              *[]graphql.String    `json:"ids,omitempty"`             // Optional
	Link             *graphql.String      `json:"link,omitempty"`            // Optional
	LinkDescription  *graphql.String      `json:"linkDescription,omitempty"` // Optional
}

type OidcConfigurationInput struct {
	Name                    graphql.String   `json:"name"`                           // Required
	ClientID                graphql.String   `json:"clientID"`                       // Required
	ClientSecret            graphql.String   `json:"clientSecret"`                   // Required
	Issuer                  graphql.String   `json:"issuer"`                         // Required
	TokenEndpointAuthMethod graphql.String   `json:"tokenEndpointAuthMethod"`        // Required
	AuthorizationEndpoint   graphql.String   `json:"authorizationEndpoint"`          // Required
	Domains                 []graphql.String `json:"domains"`                        // Required
	Scopes                  []graphql.String `json:"scopes"`                         // Required
	EnableDebug             graphql.Boolean  `json:"enableDebug"`                    // Required
	TokenEndpoint           *graphql.String  `json:"tokenEndpoint,omitempty"`        // Optional
	UserInfoEndpoint        *graphql.String  `json:"userInfoEndpoint,omitempty"`     // Optional
	RegistrationEndpoint    *graphql.String  `json:"registrationEndpoint,omitempty"` // Optional
	GroupsClaim             *graphql.String  `json:"groupsClaim,omitempty"`          // Optional
	JWKSEndpoint            *graphql.String  `json:"JWKSEndpoint,omitempty"`         // Optional
	UserClaim               *graphql.String  `json:"userClaim,omitempty"`            // Optional
	DefaultIdp              *graphql.Boolean `json:"defaultIdp,omitempty"`           // Optional
	HumioOwned              *graphql.Boolean `json:"humioOwned,omitempty"`           // Optional
	LazyCreateUsers         *graphql.Boolean `json:"lazyCreateUsers,omitempty"`      // Optional
	FederatedIdp            *graphql.String  `json:"federatedIdp,omitempty"`         // Optional
	ScopeClaim              *graphql.String  `json:"scopeClaim,omitempty"`           // Optional
}

type OrderByUserFieldInput struct {
	UserField OrderByUserField `json:"userField"` // Required
	Order     OrderByDirection `json:"order"`     // Required
}

type OrganizationLimitsInput struct {
	// Ingest in bytes.
	Ingest Long `json:"ingest"` // Required
	// Retention in days.
	Retention        graphql.Int                     `json:"retention"`                  // Required
	Users            graphql.Int                     `json:"users"`                      // Required
	Expiration       Long                            `json:"expiration"`                 // Required
	AllowSelfService *graphql.Boolean                `json:"allowSelfService,omitempty"` // Optional
	ContractVersion  *Organizations__ContractVersion `json:"contractVersion,omitempty"`  // Optional
}

type ParameterFilePropertiesInput struct {
	FileName             graphql.String             `json:"fileName"`                       // Required
	ValueColumn          graphql.String             `json:"valueColumn"`                    // Required
	ValueFilters         []ParameterFileValueFilter `json:"valueFilters"`                   // Required
	LabelColumn          *graphql.String            `json:"labelColumn,omitempty"`          // Optional
	InvalidInputPatterns *[]graphql.String          `json:"invalidInputPatterns,omitempty"` // Optional
	InvalidInputMessage  *graphql.String            `json:"invalidInputMessage,omitempty"`  // Optional
}

type ParameterFileValueFilter struct {
	Field  graphql.String   `json:"field"`  // Required
	Values []graphql.String `json:"values"` // Required
}

type ParameterFixedListOption struct {
	Label graphql.String `json:"label"` // Required
	Value graphql.String `json:"value"` // Required
}

type ParameterFixedListPropertiesInput struct {
	Values []ParameterFixedListOption `json:"values"` // Required
}

type ParameterFreeTextPropertiesInput struct {
	InvalidInputPatterns *[]graphql.String `json:"invalidInputPatterns,omitempty"` // Optional
	InvalidInputMessage  *graphql.String   `json:"invalidInputMessage,omitempty"`  // Optional
}

type ParameterInput struct {
	ID               graphql.String                     `json:"id"`                         // Required
	Label            graphql.String                     `json:"label"`                      // Required
	DefaultValue     *graphql.String                    `json:"defaultValue,omitempty"`     // Optional
	Order            *graphql.Int                       `json:"order,omitempty"`            // Optional
	FreeTextOptions  *ParameterFreeTextPropertiesInput  `json:"freeTextOptions,omitempty"`  // Optional
	QueryOptions     *ParameterQueryPropertiesInput     `json:"queryOptions,omitempty"`     // Optional
	FixedListOptions *ParameterFixedListPropertiesInput `json:"fixedListOptions,omitempty"` // Optional
	FileOptions      *ParameterFilePropertiesInput      `json:"fileOptions,omitempty"`      // Optional
	// [PREVIEW: The multi-value parameters feature is still in development.].
	IsMultiParam *graphql.Boolean `json:"isMultiParam,omitempty"` // Optional
	// [PREVIEW: The multi-value parameters feature is still in development.].
	DefaultMultiValues *[]graphql.String `json:"defaultMultiValues,omitempty"` // Optional
}

type ParameterQueryPropertiesInput struct {
	QueryString           graphql.String    `json:"queryString"`                    // Required
	TimeWindow            graphql.String    `json:"timeWindow"`                     // Required
	OptionValueField      graphql.String    `json:"optionValueField"`               // Required
	OptionLabelField      graphql.String    `json:"optionLabelField"`               // Required
	UseDashboardTimeIfSet graphql.Boolean   `json:"useDashboardTimeIfSet"`          // Required
	InvalidInputPatterns  *[]graphql.String `json:"invalidInputPatterns,omitempty"` // Optional
	InvalidInputMessage   *graphql.String   `json:"invalidInputMessage,omitempty"`  // Optional
}

// ParameterSpecificationInput represents the specification of a parameter.
type ParameterSpecificationInput struct {
	// The name of the parameter.
	Name graphql.String `json:"name"` // Required
	// The type of the parameter".
	ParameterType ParameterTypeEnum `json:"parameterType"` // Required
	// Restricts the smallest allowed value for parameters of type Long.
	MinLong *Long `json:"minLong,omitempty"` // Optional
	// Restricts the largest allowed value for parameters of type Long.
	MaxLong *Long `json:"maxLong,omitempty"` // Optional
	// Restricts the smallest allowed value for parameters of type Double.
	MinDouble *graphql.Float `json:"minDouble,omitempty"` // Optional
	// Restricts the largest allowed value for parameters of type Double.
	MaxDouble *graphql.Float `json:"maxDouble,omitempty"` // Optional
	// Restricts the minimum number of allowed elements for parameters of type Array.
	MinLength *graphql.Int `json:"minLength,omitempty"` // Optional
	// Defines a default value of the parameter.
	DefaultValue *[]graphql.String `json:"defaultValue,omitempty"` // Optional
}

// ParserTestCaseAssertionsForOutputInput represents assertions on the shape of a given test case output event. It is a key-pair value, where the index of the output event is the key, and the assertions are the value.
type ParserTestCaseAssertionsForOutputInput struct {
	// The index of the output event which the assertions should apply to.
	OutputEventIndex graphql.Int `json:"outputEventIndex"` // Required
	// Assertions on the shape of a given test case output event.
	Assertions ParserTestCaseOutputAssertionsInput `json:"assertions"` // Required
}

// ParserTestCaseInput represents a test case for a parser.
type ParserTestCaseInput struct {
	// The event to parse and test on.
	Event ParserTestEventInput `json:"event"` // Required
	// Assertions on the shape of the test case output events. The list consists of key-value pairs to be treated as a map-construct, where the index of the output event is the key, and the assertions are the value.
	OutputAssertions *[]ParserTestCaseAssertionsForOutputInput `json:"outputAssertions,omitempty"` // Optional
}

// ParserTestCaseOutputAssertionsInput represents assertions on the shape of a given test case output event.
type ParserTestCaseOutputAssertionsInput struct {
	// Names of fields which should not be present on the output event.
	FieldsNotPresent *[]graphql.String `json:"fieldsNotPresent,omitempty"` // Optional
	// Names of fields and their expected value on the output event. These are key-value pairs, and should be treated as a map-construct.
	FieldsHaveValues *[]FieldHasValueInput `json:"fieldsHaveValues,omitempty"` // Optional
}

// ParserTestEventInput represents an event for a parser to parse during testing.
type ParserTestEventInput struct {
	// The contents of the `@rawstring` field when the event begins parsing.
	RawString graphql.String `json:"rawString"` // Required
}

// ParserTestRunInput represents input for testing a parser.
type ParserTestRunInput struct {
	// The name of the repository the parser is located in. This is part of the test output in the `#repo` field in each parsed event.
	RepositoryName RepoOrViewName `json:"repositoryName"` // Required
	// The name of the parser. This is part of the test output in the `#type` field in each parsed event.
	ParserName graphql.String `json:"parserName"` // Required
	// The parser script that is executed for every incoming event.
	Script graphql.String `json:"script"` // Required
	// Fields that are used as tags.
	FieldsToTag []graphql.String `json:"fieldsToTag"` // Required
	// A list of fields that will be removed from the event before it's parsed. These fields will not be included when calculating usage.
	FieldsToBeRemovedBeforeParsing []graphql.String `json:"fieldsToBeRemovedBeforeParsing"` // Required
	// The test cases to run the parsing script against.
	TestCases []ParserTestCaseInput `json:"testCases"` // Required
	// A specific language version.
	LanguageVersion *LanguageVersionInputType `json:"languageVersion,omitempty"` // Optional
}

// QueryArgument represents an argument to a query.
type QueryArgument struct {
	Name  graphql.String `json:"name"`  // Required
	Value graphql.String `json:"value"` // Required
}

// QueryArgumentInputType represents an argument for a query.
type QueryArgumentInputType struct {
	// The name of the argument.
	Name graphql.String `json:"name"` // Required
	// The value of the argument.
	Value graphql.String `json:"value"` // Required
}

type QueryQuotaDefaultSettingsInput struct {
	Settings []QueryQuotaIntervalSettingInput `json:"settings"` // Required
}

type QueryQuotaIntervalSettingInput struct {
	Interval        QueryQuotaInterval            `json:"interval"`        // Required
	MeasurementKind QueryQuotaMeasurementKind     `json:"measurementKind"` // Required
	ValueKind       QueryQuotaIntervalSettingKind `json:"valueKind"`       // Required
	Value           *Long                         `json:"value,omitempty"` // Optional
}

type QueryQuotaUserSettingsInput struct {
	Username graphql.String                   `json:"username"` // Required
	Settings []QueryQuotaIntervalSettingInput `json:"settings"` // Required
}

type RedactEventsInputType struct {
	// The name of the repository to redact events in.
	RepositoryName graphql.String `json:"repositoryName"` // Required
	// The start of the interval to perform redactions in.
	Start DateTime `json:"start"` // Required
	// The end of the interval to perform redactions in.
	End DateTime `json:"end"` // Required
	// The query to use for redaction. Any event returned by this query will be removed.
	Query graphql.String `json:"query"` // Required
	// Optional message to log in the audit log for this action.
	UserMessage *graphql.String `json:"userMessage,omitempty"` // Optional
}

// RemoveAlertLabel represents data for removing a label from an alert.
type RemoveAlertLabel struct {
	// Name of the view of the alert.
	ViewName graphql.String `json:"viewName"` // Required
	// Id of the alert.
	ID graphql.String `json:"id"` // Required
	// Label for the alert.
	Label graphql.String `json:"label"` // Required
}

// RemoveAliasMappingInput represents [PREVIEW: This functionality is still under development and can change without warning.] Input object for field removeFieldAliasMapping.
type RemoveAliasMappingInput struct {
	// ID of the schema that the alias mapping exists on.
	SchemaID graphql.String `json:"schemaId"` // Required
	// Alias mapping ID.
	AliasMappingID graphql.String `json:"aliasMappingId"` // Required
}

// RemoveFromBlocklistInput represents data for removing a blocklist entry.
type RemoveFromBlocklistInput struct {
	// The ID of the blocklist entry to remove.
	ID graphql.String `json:"id"` // Required
}

// RemoveLabelScheduledSearch represents data for removing a label.
type RemoveLabelScheduledSearch struct {
	// Name of the view of the scheduled search.
	ViewName graphql.String `json:"viewName"` // Required
	// Id of the scheduled search.
	ID graphql.String `json:"id"` // Required
	// Label for the scheduled search.
	Label graphql.String `json:"label"` // Required
}

type RemoveLimitInput struct {
	LimitName graphql.String `json:"limitName"` // Required
}

type RemoveOrganizationRoleFromGroupInput struct {
	GroupID graphql.String `json:"groupId"` // Required
	RoleID  graphql.String `json:"roleId"`  // Required
}

type RemoveParserInput struct {
	ID             graphql.String `json:"id"`             // Required
	RepositoryName graphql.String `json:"repositoryName"` // Required
}

// RemoveRepoCachePolicyInput represents data to remove a repository cache policy.
type RemoveRepoCachePolicyInput struct {
	// Name of repository.
	RepositoryName graphql.String `json:"repositoryName"` // Required
}

type RemoveRoleFromGroupInput struct {
	ViewID  graphql.String `json:"viewId"`  // Required
	GroupID graphql.String `json:"groupId"` // Required
	RoleID  graphql.String `json:"roleId"`  // Required
}

type RemoveSecondarySubdomainInput struct {
	Subdomain graphql.String `json:"subdomain"` // Required
}

// RemoveStarFromAlert represents data for removing a star from an alert.
type RemoveStarFromAlert struct {
	// Name of the view of the alert.
	ViewName graphql.String `json:"viewName"` // Required
	// Id of the alert.
	ID graphql.String `json:"id"` // Required
}

type RemoveStarFromQueryInput struct {
	SavedQueryID     graphql.String `json:"savedQueryId"`     // Required
	SearchDomainName graphql.String `json:"searchDomainName"` // Required
}

// RemoveStarScheduledSearch represents data for removing a star.
type RemoveStarScheduledSearch struct {
	// Name of the view of the scheduled search.
	ViewName graphql.String `json:"viewName"` // Required
	// Id of the scheduled search.
	ID graphql.String `json:"id"` // Required
}

type RemoveStarToFieldInput struct {
	FieldName        graphql.String `json:"fieldName"`        // Required
	SearchDomainName graphql.String `json:"searchDomainName"` // Required
}

type RemoveSystemRoleFromGroupInput struct {
	GroupID graphql.String `json:"groupId"` // Required
	RoleID  graphql.String `json:"roleId"`  // Required
}

type RemoveUserByIdInput struct {
	ID graphql.String `json:"id"` // Required
}

type RemoveUserInput struct {
	Username graphql.String `json:"username"` // Required
}

type RemoveUsersFromGroupInput struct {
	Users   []graphql.String `json:"users"`   // Required
	GroupID graphql.String   `json:"groupId"` // Required
}

type RenameSearchDomainByIdInput struct {
	// The id of the search domain.
	ID graphql.String `json:"id"` // Required
	// The new name of the search domain.
	NewName graphql.String `json:"newName"` // Required
	// Optional message to why the search domain was renamed. Will be added to the audit log.
	RenameMessage *graphql.String `json:"renameMessage,omitempty"` // Optional
}

type RepoFilterInput struct {
	Name   graphql.String `json:"name"`   // Required
	Filter graphql.String `json:"filter"` // Required
}

type ReportErrorInput struct {
	ErrorType    graphql.String `json:"errorType"`    // Required
	ErrorMessage graphql.String `json:"errorMessage"` // Required
}

// ResetQuotaInput represents data for resetting quota.
type ResetQuotaInput struct {
	// New quota value to set.
	NewQuota *Long `json:"newQuota,omitempty"` // Optional
	// New rate value to set.
	NewRate *Long `json:"newRate,omitempty"` // Optional
}

type RestoreDeletedSearchDomainInput struct {
	// The id of the search domain.
	ID graphql.String `json:"id"` // Required
}

type ResubmitMarketoLeadData struct {
	UtmParams *UtmParams      `json:"utmParams,omitempty"` // Optional
	Zip       *graphql.String `json:"zip,omitempty"`       // Optional
}

type RevokeSessionInput struct {
	ID             graphql.String          `json:"id"`             // Required
	RevocationType SessionRevocation__Type `json:"revocationType"` // Required
}

type RotateTokenInputData struct {
	ID graphql.String `json:"id"` // Required
}

type ScheduledReportResultFailedInput struct {
	ReportErrors []ReportErrorInput `json:"reportErrors"` // Required
}

type ScheduledReportResultSucceededInput struct {
	Filename graphql.String `json:"filename"` // Required
}

type SchemaFieldInput struct {
	Name        graphql.String  `json:"name"`                  // Required
	Description *graphql.String `json:"description,omitempty"` // Optional
}

type SearchLinkInteractionInput struct {
	Name                       graphql.String                    `json:"name"`                                 // Required
	QueryString                graphql.String                    `json:"queryString"`                          // Required
	IsLive                     graphql.Boolean                   `json:"isLive"`                               // Required
	Arguments                  []ArgumentInput                   `json:"arguments"`                            // Required
	OpenInNewTab               graphql.Boolean                   `json:"openInNewTab"`                         // Required
	UseWidgetTimeWindow        graphql.Boolean                   `json:"useWidgetTimeWindow"`                  // Required
	TitleTemplate              *graphql.String                   `json:"titleTemplate,omitempty"`              // Optional
	RepoOrViewName             *RepoOrViewName                   `json:"repoOrViewName,omitempty"`             // Optional
	FieldInteractionConditions *[]FieldInteractionConditionInput `json:"fieldInteractionConditions,omitempty"` // Optional
}

type ServiceLevelIndicatorLogArg struct {
	FrontendVersion graphql.String `json:"frontendVersion"` // Required
	Content         JSON           `json:"content"`         // Required
}

type SessionInput struct {
	MaxInactivityPeriod        Long `json:"maxInactivityPeriod"`        // Required
	ForceReauthenticationAfter Long `json:"forceReauthenticationAfter"` // Required
}

type SetDefaultSavedQueryInput struct {
	ViewName     graphql.String  `json:"viewName"`               // Required
	SavedQueryID *graphql.String `json:"savedQueryId,omitempty"` // Optional
}

// SetGlobalDefaultCachePolicyInput represents data to set a global default cache policy.
type SetGlobalDefaultCachePolicyInput struct {
	// Policy to set.
	Policy CachePolicyInput `json:"policy"` // Required
}

type SetLimitDisplayNameInput struct {
	LimitName   graphql.String  `json:"limitName"`             // Required
	DisplayName *graphql.String `json:"displayName,omitempty"` // Optional
}

// SetOrgDefaultCachePolicyInput represents data to set a organization default cache policy.
type SetOrgDefaultCachePolicyInput struct {
	// Policy to set.
	Policy CachePolicyInput `json:"policy"` // Required
}

type SetPrimarySubdomainInput struct {
	Subdomain graphql.String `json:"subdomain"` // Required
}

// SetRepoCachePolicyInput represents data to set a repo cache policy.
type SetRepoCachePolicyInput struct {
	// Name of repository.
	RepositoryName graphql.String `json:"repositoryName"` // Required
	// Policy to set.
	Policy CachePolicyInput `json:"policy"` // Required
}

type SetSubdomainSettingsInput struct {
	PrimarySubdomain    graphql.String    `json:"primarySubdomain"`              // Required
	EnforceSubdomains   graphql.Boolean   `json:"enforceSubdomains"`             // Required
	SecondarySubdomains *[]graphql.String `json:"secondarySubdomains,omitempty"` // Optional
}

// SharedDashboardsSecurityPoliciesInput represents data for updating shared dashboards security policies.
type SharedDashboardsSecurityPoliciesInput struct {
	// Whether shared dashboard tokens should be enabled.
	SharedDashboardsEnabled graphql.Boolean `json:"sharedDashboardsEnabled"` // Required
	// The IP filter that will be enforced on all shared dashboard tokens.
	EnforceIPFilterID *graphql.String `json:"enforceIpFilterId,omitempty"` // Optional
}

// SlackFieldEntryInput represents slack message field entry.
type SlackFieldEntryInput struct {
	// Key of a Slack field.
	FieldName graphql.String `json:"fieldName"` // Required
	// Value of a Slack field.
	Value graphql.String `json:"value"` // Required
}

type SocialLoginSettingsInput struct {
	SocialProviderProfile SocialProviderProfile `json:"socialProviderProfile"` // Required
	Filter                SocialLoginField      `json:"filter"`                // Required
	AllowList             []graphql.String      `json:"allowList"`             // Required
}

type StopQueriesInput struct {
	// Whether to stop queries globally. Requires the ManageCluster permission.
	ClusterWide *graphql.Boolean `json:"clusterWide,omitempty"` // Optional
}

// TagGroupingRuleInput represents the grouping rule for a given tag.
type TagGroupingRuleInput struct {
	// The tag name to which the rule will apply.
	TagName graphql.String `json:"tagName"` // Required
	// The number of groups the tag will be split into.
	GroupCount graphql.Int `json:"groupCount"` // Required
}

type TagsInput struct {
	Name  graphql.String `json:"name"`  // Required
	Value graphql.String `json:"value"` // Required
}

// TestAwsS3SqsIngestFeed represents data for testing an ingest feed that uses AWS S3 and SQS.
type TestAwsS3SqsIngestFeed struct {
	// Name of the repository of the ingest feed.
	RepositoryName RepoOrViewName `json:"repositoryName"` // Required
	// How to authenticate to AWS.
	Authentication IngestFeedAwsAuthenticationInput `json:"authentication"` // Required
	// AWS SQS queue url.
	SqsURL graphql.String `json:"sqsUrl"` // Required
	// The AWS region to connect to.
	Region graphql.String `json:"region"` // Required
}

// TestEmailAction represents data for testing an email action.
type TestEmailAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// List of email addresses to send an email to.
	Recipients []graphql.String `json:"recipients"` // Required
	// Defines whether the action should use the configured proxy to make web requests.
	UseProxy graphql.Boolean `json:"useProxy"` // Required
	// Name of the action.. This is a mock value, the trigger does not have to exist.
	TriggerName graphql.String `json:"triggerName"` // Required
	// JSON data representing one or more events. One event can be supplied as a JSON object. Multiple events must be supplied as a list of JSON objects.
	EventData graphql.String `json:"eventData"` // Required
	// Subject of the email. Can be templated with values from the result.
	SubjectTemplate *graphql.String `json:"subjectTemplate,omitempty"` // Optional
	// Body of the email. Can be templated with values from the result.
	BodyTemplate *graphql.String `json:"bodyTemplate,omitempty"` // Optional
	// Whether the result set should be be attached as a CSV file.
	AttachCsv *graphql.Boolean `json:"attachCsv,omitempty"` // Optional
}

// TestFdrFeed represents data for testing an FDR feed.
type TestFdrFeed struct {
	// Name of the repository of the FDR feed.
	RepositoryName graphql.String `json:"repositoryName"` // Required
	// Id of an existing FDR feed. If no id is provided, the remaining input fields must be set.
	FeedID *graphql.String `json:"feedId,omitempty"` // Optional
	// AWS client id to use in FDR feed test. If not set, the 'clientId' of the existing FDR feed will be used.
	ClientID *graphql.String `json:"clientId,omitempty"` // Optional
	// AWS client secret to use in FDR feed test. If not set, the 'clientSecret' of the existing FDR feed will be used.
	ClientSecret *graphql.String `json:"clientSecret,omitempty"` // Optional
	// AWS SQS queue url to use in FDR feed test. If not set, the 'sqsUrl' of the existing FDR feed will be used.
	SqsURL *graphql.String `json:"sqsUrl,omitempty"` // Optional
	// AWS S3 identifier to use in FDR feed test. If not set, the 's3Identifier' of the existing FDR feed will be used.
	S3Identifier *graphql.String `json:"s3Identifier,omitempty"` // Optional
}

// TestHumioRepoAction represents data for testing a Humio repo action.
type TestHumioRepoAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// Humio ingest token for the dataspace that the action should ingest into.
	IngestToken graphql.String `json:"ingestToken"` // Required
	// Name of the action.. This is a mock value, the trigger does not have to exist.
	TriggerName graphql.String `json:"triggerName"` // Required
	// JSON data representing one or more events. One event can be supplied as a JSON object. Multiple events must be supplied as a list of JSON objects.
	EventData graphql.String `json:"eventData"` // Required
}

// TestKafkaEventForwarder represents data for testing a Kafka event forwarder.
type TestKafkaEventForwarder struct {
	// Name of the event forwarder.
	Name graphql.String `json:"name"` // Required
	// Description of the event forwarder.
	Description graphql.String `json:"description"` // Required
	// The Kafka producer configuration used to forward events in the form of properties (x.y.z=abc). See https://library.humio.com/humio-server/ingesting-data-event-forwarders.html#kafka-configuration.
	Properties graphql.String `json:"properties"` // Required
	// The Kafka topic the events should be forwarded to.
	Topic graphql.String `json:"topic"` // Required
	// Is the event forwarder enabled.
	Enabled *graphql.Boolean `json:"enabled,omitempty"` // Optional
}

// TestOpsGenieAction represents data for testing an OpsGenie action.
type TestOpsGenieAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// OpsGenie webhook url to send the request to.
	APIURL graphql.String `json:"apiUrl"` // Required
	// Key to authenticate with OpsGenie.
	GenieKey graphql.String `json:"genieKey"` // Required
	// Defines whether the action should use the configured proxy to make web requests.
	UseProxy graphql.Boolean `json:"useProxy"` // Required
	// Name of the action.. This is a mock value, the trigger does not have to exist.
	TriggerName graphql.String `json:"triggerName"` // Required
	// JSON data representing one or more events. One event can be supplied as a JSON object. Multiple events must be supplied as a list of JSON objects.
	EventData graphql.String `json:"eventData"` // Required
}

// TestPagerDutyAction represents data for testing a PagerDuty action.
type TestPagerDutyAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// Severity level to give to the message.
	Severity graphql.String `json:"severity"` // Required
	// Routing key to authenticate with PagerDuty.
	RoutingKey graphql.String `json:"routingKey"` // Required
	// Defines whether the action should use the configured proxy to make web requests.
	UseProxy graphql.Boolean `json:"useProxy"` // Required
	// Name of the action.. This is a mock value, the trigger does not have to exist.
	TriggerName graphql.String `json:"triggerName"` // Required
	// JSON data representing one or more events. One event can be supplied as a JSON object. Multiple events must be supplied as a list of JSON objects.
	EventData graphql.String `json:"eventData"` // Required
}

// TestParserInputV2 represents input for testing a parser.
type TestParserInputV2 struct {
	// The name of the repository the parser is located in.
	RepositoryName graphql.String `json:"repositoryName"` // Required
	// The id of the parser.
	ParserID graphql.String `json:"parserId"` // Required
	// The name of the parser.
	ParserName graphql.String `json:"parserName"` // Required
	// The parser script to be tested.
	ParserScript graphql.String `json:"parserScript"` // Required
	// The events to test the parser on.
	TestData []graphql.String `json:"testData"` // Required
}

// TestPostMessageSlackAction represents data for testing a post message Slack action.
type TestPostMessageSlackAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// Api token to authenticate with Slack.
	APIToken graphql.String `json:"apiToken"` // Required
	// List of Slack channels to message.
	Channels []graphql.String `json:"channels"` // Required
	// Fields to include within the Slack message. Can be templated with values from the result.
	Fields []SlackFieldEntryInput `json:"fields"` // Required
	// Defines whether the action should use the configured proxy to make web requests.
	UseProxy graphql.Boolean `json:"useProxy"` // Required
	// Name of the action.. This is a mock value, the trigger does not have to exist.
	TriggerName graphql.String `json:"triggerName"` // Required
	// JSON data representing one or more events. One event can be supplied as a JSON object. Multiple events must be supplied as a list of JSON objects.
	EventData graphql.String `json:"eventData"` // Required
}

// TestSlackAction represents data for testing a Slack action.
type TestSlackAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// Slack webhook url to send the request to.
	URL graphql.String `json:"url"` // Required
	// Fields to include within the Slack message. Can be templated with values from the result.
	Fields []SlackFieldEntryInput `json:"fields"` // Required
	// Defines whether the action should use the configured proxy to make web requests.
	UseProxy graphql.Boolean `json:"useProxy"` // Required
	// Name of the action.. This is a mock value, the trigger does not have to exist.
	TriggerName graphql.String `json:"triggerName"` // Required
	// JSON data representing one or more events. One event can be supplied as a JSON object. Multiple events must be supplied as a list of JSON objects.
	EventData graphql.String `json:"eventData"` // Required
}

// TestUploadFileAction represents data for testing an upload file action.
type TestUploadFileAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// File name for the uploaded file.
	FileName graphql.String `json:"fileName"` // Required
	// Name of the action.. This is a mock value, the trigger does not have to exist.
	TriggerName graphql.String `json:"triggerName"` // Required
	// JSON data representing one or more events. One event can be supplied as a JSON object. Multiple events must be supplied as a list of JSON objects.
	EventData graphql.String `json:"eventData"` // Required
}

// TestVictorOpsAction represents data for testing a VictorOps action.
type TestVictorOpsAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// Type of the VictorOps message to make.
	MessageType graphql.String `json:"messageType"` // Required
	// VictorOps webhook url to send the request to.
	NotifyURL graphql.String `json:"notifyUrl"` // Required
	// Defines whether the action should use the configured proxy to make web requests.
	UseProxy graphql.Boolean `json:"useProxy"` // Required
	// Name of the action.. This is a mock value, the trigger does not have to exist.
	TriggerName graphql.String `json:"triggerName"` // Required
	// JSON data representing one or more events. One event can be supplied as a JSON object. Multiple events must be supplied as a list of JSON objects.
	EventData graphql.String `json:"eventData"` // Required
}

// TestWebhookAction represents data for testing a webhook action.
type TestWebhookAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// Url to send the http(s) request to.
	URL graphql.String `json:"url"` // Required
	// Method to use for the request.
	Method graphql.String `json:"method"` // Required
	// Headers of the http(s) request.
	Headers []HttpHeaderEntryInput `json:"headers"` // Required
	// Body of the http(s) request. Can be templated with values from the result.
	BodyTemplate graphql.String `json:"bodyTemplate"` // Required
	// Flag indicating whether SSL should be ignored for the request.
	IgnoreSSL graphql.Boolean `json:"ignoreSSL"` // Required
	// Defines whether the action should use the configured proxy to make web requests.
	UseProxy graphql.Boolean `json:"useProxy"` // Required
	// Name of the action.. This is a mock value, the trigger does not have to exist.
	TriggerName graphql.String `json:"triggerName"` // Required
	// JSON data representing one or more events. One event can be supplied as a JSON object. Multiple events must be supplied as a list of JSON objects.
	EventData graphql.String `json:"eventData"` // Required
}

type TokenInput struct {
	Token graphql.String `json:"token"` // Required
}

// TokenSecurityPoliciesInput represents data for updating token security policies.
type TokenSecurityPoliciesInput struct {
	// Whether personal user tokens should be enabled.
	PersonalUserTokensEnabled graphql.Boolean `json:"personalUserTokensEnabled"` // Required
	// Whether view permission tokens should be enabled.
	ViewPermissionTokensEnabled graphql.Boolean `json:"viewPermissionTokensEnabled"` // Required
	// Whether it should be allowed to change permissions on existing view permission tokens.
	ViewPermissionTokensAllowPermissionUpdates graphql.Boolean `json:"viewPermissionTokensAllowPermissionUpdates"` // Required
	// Whether organization permission tokens should be enabled.
	OrganizationPermissionTokensEnabled graphql.Boolean `json:"organizationPermissionTokensEnabled"` // Required
	// Whether it should be allowed to change permissions on existing organization permission tokens.
	OrganizationPermissionTokensAllowPermissionUpdates graphql.Boolean `json:"organizationPermissionTokensAllowPermissionUpdates"` // Required
	// Maximum time in ms a personal user token can be used before expiring (TTL).
	PersonalUserTokensEnforceExpirationAfterMs *Long `json:"personalUserTokensEnforceExpirationAfterMs,omitempty"` // Optional
	// The IP filter that will be enforced on all personal user tokens.
	PersonalUserTokensEnforceIPFilterID *graphql.String `json:"personalUserTokensEnforceIpFilterId,omitempty"` // Optional
	// Maximum time in ms a view permission token can be used before expiring (TTL).
	ViewPermissionTokensEnforceExpirationAfterMs *Long `json:"viewPermissionTokensEnforceExpirationAfterMs,omitempty"` // Optional
	// The IP filter that will be enforced on all view permission tokens.
	ViewPermissionTokensEnforceIPFilterID *graphql.String `json:"viewPermissionTokensEnforceIpFilterId,omitempty"` // Optional
	// Maximum time in ms an organization permission token can be used before expiring (TTL).
	OrganizationPermissionTokensEnforceExpirationAfterMs *Long `json:"organizationPermissionTokensEnforceExpirationAfterMs,omitempty"` // Optional
	// The IP filter that will be enforced on all organization permission tokens.
	OrganizationPermissionTokensEnforceIPFilterID *graphql.String `json:"organizationPermissionTokensEnforceIpFilterId,omitempty"` // Optional
	// Whether system permission tokens should be enabled.
	SystemPermissionTokensEnabled *graphql.Boolean `json:"systemPermissionTokensEnabled,omitempty"` // Optional
	// Maximum time in ms a system permission token can be used before expiring (TTL).
	SystemPermissionTokensEnforceExpirationAfterMs *Long `json:"systemPermissionTokensEnforceExpirationAfterMs,omitempty"` // Optional
	// The IP filter that will be enforced on all system permission tokens.
	SystemPermissionTokensEnforceIPFilterID *graphql.String `json:"systemPermissionTokensEnforceIpFilterId,omitempty"` // Optional
	// Whether it should be allowed to change permissions on existing system permission tokens.
	SystemPermissionTokensAllowPermissionUpdates *graphql.Boolean `json:"systemPermissionTokensAllowPermissionUpdates,omitempty"` // Optional
}

// TriggerPollIngestFeed represents data for trigger polling an ingest feed.
type TriggerPollIngestFeed struct {
	// Name of the repository of the ingest feed.
	RepositoryName RepoOrViewName `json:"repositoryName"` // Required
	// Id of the ingest feed.
	ID graphql.String `json:"id"` // Required
}

// UpdateAggregateAlert represents data for updating an aggregate alert.
type UpdateAggregateAlert struct {
	// Name of the view of the aggregate alert.
	ViewName RepoOrViewName `json:"viewName"` // Required
	// Id of the aggregate alert.
	ID graphql.String `json:"id"` // Required
	// Name of the aggregate alert.
	Name graphql.String `json:"name"` // Required
	// LogScale query to execute.
	QueryString graphql.String `json:"queryString"` // Required
	// List of ids or names for actions to fire on query result. Actions in packages can be referred to as "packagescope/packagename:actionname".
	ActionIDsOrNames []graphql.String `json:"actionIdsOrNames"` // Required
	// Labels attached to the aggregate alert.
	Labels []graphql.String `json:"labels"` // Required
	// Flag indicating whether the aggregate alert is enabled.
	Enabled graphql.Boolean `json:"enabled"` // Required
	// Ownership of the query run by this aggregate alert. If value is User, ownership will be based on the runAsUserId field.
	QueryOwnershipType QueryOwnershipType `json:"queryOwnershipType"` // Required
	// Description of the aggregate alert.
	Description *graphql.String `json:"description,omitempty"` // Optional
	// Throttle time in seconds.
	ThrottleTimeSeconds *Long `json:"throttleTimeSeconds,omitempty"` // Optional
	// A field to throttle on. Can only be set if throttleTimeSeconds is set.
	ThrottleField *graphql.String `json:"throttleField,omitempty"` // Optional
	// The aggregate alert will run with the permissions of the user corresponding to this id if the queryOwnershipType field is set to User. If the queryOwnershipType is set to Organization, whilst runAsUserId is set, this will result in an error. If not specified, the aggregate alert will run with the permissions of the calling user. It requires the 'ChangeTriggersToRunAsOtherUsers' permission to set this field to a user id different from the calling user.
	RunAsUserID *graphql.String `json:"runAsUserId,omitempty"` // Optional
}

// UpdateAlert represents data for updating an alert.
type UpdateAlert struct {
	// Name of the view of the alert.
	ViewName graphql.String `json:"viewName"` // Required
	// Id of the alert.
	ID graphql.String `json:"id"` // Required
	// Name of the alert.
	Name graphql.String `json:"name"` // Required
	// LogScale query to execute.
	QueryString graphql.String `json:"queryString"` // Required
	// Start of the relative time interval for the query.
	QueryStart graphql.String `json:"queryStart"` // Required
	// Throttle time in milliseconds.
	ThrottleTimeMillis Long `json:"throttleTimeMillis"` // Required
	// Flag indicating whether the alert is enabled.
	Enabled graphql.Boolean `json:"enabled"` // Required
	// List of ids or names for actions to fire on query result. Actions in packages can be referred to as "packagescope/packagename:actionname".
	Actions []graphql.String `json:"actions"` // Required
	// Labels attached to the alert.
	Labels []graphql.String `json:"labels"` // Required
	// Description of the alert.
	Description *graphql.String `json:"description,omitempty"` // Optional
	// Field to throttle on.
	ThrottleField *graphql.String `json:"throttleField,omitempty"` // Optional
	// The alert will run with the permissions of the user corresponding to this id if the queryOwnershipType field is set to User. If the queryOwnershipType is set to Organization, whilst runAsUserId is set, this will result in an error. If not specified, the alert will run with the permissions of the calling user. It requires the 'ChangeTriggersToRunAsOtherUsers' permission to set this field to a user id different from the calling user.
	RunAsUserID *graphql.String `json:"runAsUserId,omitempty"` // Optional
	// Ownership of the query run by this alert. If value is User, ownership will be based on the runAsUserId field.
	QueryOwnershipType *QueryOwnershipType `json:"queryOwnershipType,omitempty"` // Optional
}

// UpdateAwsS3SqsIngestFeed represents data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
type UpdateAwsS3SqsIngestFeed struct {
	// Name of the repository of the ingest feed.
	RepositoryName RepoOrViewName `json:"repositoryName"` // Required
	// Id of the ingest feed.
	ID graphql.String `json:"id"` // Required
	// Name of the ingest feed.
	Name *graphql.String `json:"name,omitempty"` // Optional
	// If the description should be cleared, supply an `UpdateDescription` object with no value or a `null` value. If the description should be changed, supply an `UpdateDescription`object with the desired value.
	Description *UpdateIngestFeedDescription `json:"description,omitempty"` // Optional
	// The id or name of the parser that should be used to parse the ingest feed. Parsers in packages can be referred to as: "packagescope/packagename:parsername".
	Parser *graphql.String `json:"parser,omitempty"` // Optional
	// How to authenticate to AWS.
	Authentication *IngestFeedAwsAuthenticationInput `json:"authentication,omitempty"` // Optional
	// AWS SQS queue url.
	SqsURL *graphql.String `json:"sqsUrl,omitempty"` // Optional
	// The AWS region to connect to.
	Region *graphql.String `json:"region,omitempty"` // Optional
	// Is ingest from the ingest feed enabled?.
	Enabled *graphql.Boolean `json:"enabled,omitempty"` // Optional
	// The preprocessing to apply to an ingest feed before parsing.
	Preprocessing *IngestFeedPreprocessingInput `json:"preprocessing,omitempty"` // Optional
	// Compression scheme of the file.
	Compression *IngestFeedCompression `json:"compression,omitempty"` // Optional
}

type UpdateCustomLinkInteractionInput struct {
	Path                       graphql.String             `json:"path"`                       // Required
	InteractionID              graphql.String             `json:"interactionId"`              // Required
	CustomLinkInteractionInput CustomLinkInteractionInput `json:"customLinkInteractionInput"` // Required
}

type UpdateDashboardInput struct {
	ID                       graphql.String                 `json:"id"`                                 // Required
	Name                     *graphql.String                `json:"name,omitempty"`                     // Optional
	Labels                   *[]graphql.String              `json:"labels,omitempty"`                   // Optional
	Widgets                  *[]WidgetInput                 `json:"widgets,omitempty"`                  // Optional
	Links                    *[]LinkInput                   `json:"links,omitempty"`                    // Optional
	DefaultFilterID          *graphql.String                `json:"defaultFilterId,omitempty"`          // Optional
	Filters                  *[]FilterInput                 `json:"filters,omitempty"`                  // Optional
	Parameters               *[]ParameterInput              `json:"parameters,omitempty"`               // Optional
	Description              *graphql.String                `json:"description,omitempty"`              // Optional
	TimeJumpSizeInMs         *graphql.Int                   `json:"timeJumpSizeInMs,omitempty"`         // Optional
	UpdateFrequency          *DashboardUpdateFrequencyInput `json:"updateFrequency,omitempty"`          // Optional
	DefaultSharedTimeStart   *graphql.String                `json:"defaultSharedTimeStart,omitempty"`   // Optional
	DefaultSharedTimeEnd     *graphql.String                `json:"defaultSharedTimeEnd,omitempty"`     // Optional
	DefaultSharedTimeEnabled *graphql.Boolean               `json:"defaultSharedTimeEnabled,omitempty"` // Optional
}

type UpdateDashboardLinkInteractionInput struct {
	Path                          graphql.String                `json:"path"`                          // Required
	InteractionID                 graphql.String                `json:"interactionId"`                 // Required
	DashboardLinkInteractionInput DashboardLinkInteractionInput `json:"dashboardLinkInteractionInput"` // Required
}

type UpdateDefaultQueryPrefixInput struct {
	GroupID     graphql.String  `json:"groupId"`               // Required
	QueryPrefix *graphql.String `json:"queryPrefix,omitempty"` // Optional
}

type UpdateDefaultRoleInput struct {
	GroupID graphql.String  `json:"groupId"`          // Required
	RoleID  *graphql.String `json:"roleId,omitempty"` // Optional
}

// UpdateDescription represents type for updating the description. If the description should be cleared, supply an `UpdateDescription` object with no value or a `null` value. If the description should be changed, supply an `UpdateDescription`object with the desired value.
type UpdateDescription struct {
	// Description of the FDR feed.
	Value *graphql.String `json:"value,omitempty"` // Optional
}

// UpdateEmailAction represents data for updating an email action.
type UpdateEmailAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Id of the action.
	ID graphql.String `json:"id"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// List of email addresses to send an email to.
	Recipients []graphql.String `json:"recipients"` // Required
	// Defines whether the action should use the configured proxy to make web requests.
	UseProxy graphql.Boolean `json:"useProxy"` // Required
	// Subject of the email. Can be templated with values from the result.
	SubjectTemplate *graphql.String `json:"subjectTemplate,omitempty"` // Optional
	// Body of the email. Can be templated with values from the result.
	BodyTemplate *graphql.String `json:"bodyTemplate,omitempty"` // Optional
	// Whether the result set should be be attached as a CSV file.
	AttachCsv *graphql.Boolean `json:"attachCsv,omitempty"` // Optional
}

// UpdateEventForwardingRule represents data for updating an event forwarding rule.
type UpdateEventForwardingRule struct {
	// The name of the repository that the event forwarding rule is for.
	RepoName graphql.String `json:"repoName"` // Required
	// The unique id for the event forwarding rule.
	ID graphql.String `json:"id"` // Required
	// The query string for filtering and mapping the events to forward.
	QueryString graphql.String `json:"queryString"` // Required
	// The id of the event forwarder.
	EventForwarderID graphql.String       `json:"eventForwarderId"`          // Required
	LanguageVersion  *LanguageVersionEnum `json:"languageVersion,omitempty"` // Optional
}

// UpdateFdrFeed represents data for updating an FDR feed. Note that the fields, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
type UpdateFdrFeed struct {
	// Name of the repository of the FDR feed.
	RepositoryName graphql.String `json:"repositoryName"` // Required
	// Id of the FDR feed.
	ID graphql.String `json:"id"` // Required
	// Name of the FDR feed. If the field should not be updated, leave it out or let the value be `null`.
	Name *graphql.String `json:"name,omitempty"` // Optional
	// Description of the FDR feed. If the field should not be updated, leave it out or let the value be `null`. If the description should be cleared, supply an `UpdateDescription` object with no value or a `null` value. If the description should be changed, supply an `UpdateDescription`object with the desired value.
	Description *UpdateDescription `json:"description,omitempty"` // Optional
	// The id or name of the parser that should be used to parse the FDR data. We recommend using the FDR parser from the crowdstrike/fdr package, which can be referred to as "crowdstrike/fdr:FDR". If the field should not be updated, leave it out or let the value be `null`.
	Parser *graphql.String `json:"parser,omitempty"` // Optional
	// AWS client id of the FDR feed. If the field should not be updated, leave it out or let the value be `null`.
	ClientID *graphql.String `json:"clientId,omitempty"` // Optional
	// AWS client secret of the FDR feed. If the field should not be updated, leave it out or let the value be `null`.
	ClientSecret *graphql.String `json:"clientSecret,omitempty"` // Optional
	// AWS SQS queue url of the FDR feed. If the field should not be updated, leave it out or let the value be `null`.
	SqsURL *graphql.String `json:"sqsUrl,omitempty"` // Optional
	// AWS S3 Identifier of the FDR feed. If the field should not be updated, leave it out or let the value be `null`.
	S3Identifier *graphql.String `json:"s3Identifier,omitempty"` // Optional
	// Is ingest from the FDR feed enabled? If the field should not be updated, leave it out or let the value be `null`.
	Enabled *graphql.Boolean `json:"enabled,omitempty"` // Optional
}

// UpdateFdrFeedControl represents data for updating the administrator control of an FDR feed.
type UpdateFdrFeedControl struct {
	// Name of the repository of the FDR feed.
	RepositoryName graphql.String `json:"repositoryName"` // Required
	// Id of the FDR feed.
	ID graphql.String `json:"id"` // Required
	// Maximum number of nodes to poll FDR feed with If the value should be cleared, supply an `UpdateLong` object the with no value or a `null` value. If the setting should be changed, supply a `UpdateLong` object with the desired value. If this value is left out the underlying value will not change.
	MaxNodes *UpdateLong `json:"maxNodes,omitempty"` // Optional
	// Maximum amount of files downloaded from s3 in parallel for a single node. If the value should be cleared, supply an `UpdateLong` object the with no value or a `null` value. If the setting should be changed, supply a `UpdateLong` object with the desired value. If this value is left out the underlying value will not change.
	FileDownloadParallelism *UpdateLong `json:"fileDownloadParallelism,omitempty"` // Optional
}

// UpdateFieldAliasMappingInput represents [PREVIEW: This functionality is still under development and can change without warning.] Input object for field updateFieldAliasMapping.
type UpdateFieldAliasMappingInput struct {
	// ID of the schema that the alias mapping exists on.
	SchemaID graphql.String `json:"schemaId"` // Required
	// Alias mapping ID.
	AliasMappingID graphql.String `json:"aliasMappingId"` // Required
	// Name of the Alias mapping. Overrides the existing name. If not supplied then the name will be unchanged.
	Name *graphql.String `json:"name,omitempty"` // Optional
	// Tags of the alias mapping. Overrides the existing tags. If not supplied then the tags will be unchanged.
	Tags    *[]TagsInput      `json:"tags,omitempty"`    // Optional
	Aliases *[]AliasInfoInput `json:"aliases,omitempty"` // Optional
	// Source fields that are aliased, but should still be available in query. Overrides the existing values for this field. If not supplied then this field will be unchanged.
	OriginalFieldsToKeep *[]graphql.String `json:"originalFieldsToKeep,omitempty"` // Optional
}

// UpdateFieldAliasSchemaInput represents [PREVIEW: This functionality is still under development and can change without warning.] Input object for field updateFieldAliasSchema.
type UpdateFieldAliasSchemaInput struct {
	// Schema ID.
	ID graphql.String `json:"id"` // Required
	// Name of the schema. Overrides the existing name. If not supplied then the name will be unchanged.
	Name *graphql.String `json:"name,omitempty"` // Optional
	// Fields of the schema. Overrides the existing fields. If not supplied then the fields will be unchanged.
	Fields *[]SchemaFieldInput `json:"fields,omitempty"` // Optional
	// Alias mappings on the schema. Overrides the existing alias mappings. If not supplied then the alias mapping will be unchanged.
	AliasMappings *[]AliasMappingInput `json:"aliasMappings,omitempty"` // Optional
}

// UpdateFilterAlert represents data for updating a filter alert.
type UpdateFilterAlert struct {
	// Name of the view of the filter alert.
	ViewName RepoOrViewName `json:"viewName"` // Required
	// Id of the filter alert.
	ID graphql.String `json:"id"` // Required
	// Name of the filter alert.
	Name graphql.String `json:"name"` // Required
	// LogScale query to execute.
	QueryString graphql.String `json:"queryString"` // Required
	// List of ids or names for actions to fire on query result. Actions in packages can be referred to as "packagescope/packagename:actionname".
	ActionIDsOrNames []graphql.String `json:"actionIdsOrNames"` // Required
	// Labels attached to the filter alert.
	Labels []graphql.String `json:"labels"` // Required
	// Flag indicating whether the filter alert is enabled.
	Enabled graphql.Boolean `json:"enabled"` // Required
	// Ownership of the query run by this filter alert. If value is User, ownership will be based on the runAsUserId field.
	QueryOwnershipType QueryOwnershipType `json:"queryOwnershipType"` // Required
	// Description of the filter alert.
	Description *graphql.String `json:"description,omitempty"` // Optional
	// Throttle time in seconds.
	ThrottleTimeSeconds *Long `json:"throttleTimeSeconds,omitempty"` // Optional
	// A field to throttle on. Can only be set if throttleTimeSeconds is set.
	ThrottleField *graphql.String `json:"throttleField,omitempty"` // Optional
	// The filter alert will run with the permissions of the user corresponding to this id if the queryOwnershipType field is set to User. If the queryOwnershipType is set to Organization, whilst runAsUserId is set, this will result in an error. If not specified, the filter alert will run with the permissions of the calling user. It requires the 'ChangeTriggersToRunAsOtherUsers' permission to set this field to a user id different from the calling user.
	RunAsUserID *graphql.String `json:"runAsUserId,omitempty"` // Optional
}

type UpdateGroupInput struct {
	GroupID     graphql.String  `json:"groupId"`               // Required
	DisplayName *graphql.String `json:"displayName,omitempty"` // Optional
	LookupName  *graphql.String `json:"lookupName,omitempty"`  // Optional
}

// UpdateHumioRepoAction represents data for updating a Humio repo action.
type UpdateHumioRepoAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Id of the action.
	ID graphql.String `json:"id"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// Humio ingest token for the dataspace that the action should ingest into.
	IngestToken graphql.String `json:"ingestToken"` // Required
}

// UpdateIngestFeedDescription represents type for updating the description. If the description should be cleared, supply an `UpdateDescription` object with no value or a `null` value. If the description should be changed, supply an `UpdateDescription`object with the desired value.
type UpdateIngestFeedDescription struct {
	// Type for updating the description. If the description should be cleared, supply an `UpdateDescription` object with no value or a `null` value. If the description should be changed, supply an `UpdateDescription`object with the desired value.
	Description *graphql.String `json:"description,omitempty"` // Optional
}

// UpdateIngestListenerV3Input represents input data to update an ingest listener.
type UpdateIngestListenerV3Input struct {
	// id of the ingest listener.
	ID graphql.String `json:"id"` // Required
	// Name of the repository.
	RepositoryName graphql.String `json:"repositoryName"` // Required
	// The port the ingest listener will listen on.
	Port graphql.Int `json:"port"` // Required
	// The kind of listener; TCP, UDP, Netflow/UDP, GELF/UDP, GELF/TCP.
	Protocol IngestListenerProtocol `json:"protocol"` // Required
	// Name of the ingest listener.
	Name graphql.String `json:"name"` // Required
	// The ip address the ingest listener will bind to.
	BindInterface graphql.String `json:"bindInterface"` // Required
	// Id or name of the parser to assign to the ingest listener. Parsers in packages can be referred to as "packagescope/packagename:parsername".
	Parser graphql.String `json:"parser"` // Required
	// The charset used to decode the event stream.
	Charset graphql.String `json:"charset"` // Required
	// The vHost name for the ingest listener.
	VHost *graphql.Int `json:"vHost,omitempty"` // Optional
}

// UpdateKafkaEventForwarder represents data for updating a Kafka event forwarder.
type UpdateKafkaEventForwarder struct {
	// Id of the event forwarder.
	ID graphql.String `json:"id"` // Required
	// Name of the event forwarder.
	Name graphql.String `json:"name"` // Required
	// Description of the event forwarder.
	Description graphql.String `json:"description"` // Required
	// The Kafka producer configuration used to forward events in the form of properties (x.y.z=abc). See https://library.humio.com/humio-server/ingesting-data-event-forwarders.html#kafka-configuration.
	Properties graphql.String `json:"properties"` // Required
	// The Kafka topic the events should be forwarded to.
	Topic graphql.String `json:"topic"` // Required
	// Is the event forwarder enabled.
	Enabled *graphql.Boolean `json:"enabled,omitempty"` // Optional
}

type UpdateLimitInput struct {
	LimitName        graphql.String                  `json:"limitName"`                  // Required
	AllowLogin       *graphql.Boolean                `json:"allowLogin,omitempty"`       // Optional
	DailyIngest      *Long                           `json:"dailyIngest,omitempty"`      // Optional
	Retention        *graphql.Int                    `json:"retention,omitempty"`        // Optional
	AllowSelfService *graphql.Boolean                `json:"allowSelfService,omitempty"` // Optional
	Expiration       *Long                           `json:"expiration,omitempty"`       // Optional
	ContractVersion  *Organizations__ContractVersion `json:"contractVersion,omitempty"`  // Optional
	UserLimit        *graphql.Int                    `json:"userLimit,omitempty"`        // Optional
}

type UpdateLimitInputV2 struct {
	ID                         graphql.String                  `json:"id"`                                   // Required
	Name                       *graphql.String                 `json:"name,omitempty"`                       // Optional
	AllowLogin                 *graphql.Boolean                `json:"allowLogin,omitempty"`                 // Optional
	DailyIngest                *Long                           `json:"dailyIngest,omitempty"`                // Optional
	DailyIngestContractualType *Organizations__ContractualType `json:"dailyIngestContractualType,omitempty"` // Optional
	StorageContractualType     *Organizations__ContractualType `json:"storageContractualType,omitempty"`     // Optional
	DailyScanContractualType   *Organizations__ContractualType `json:"dailyScanContractualType,omitempty"`   // Optional
	MeasurementType            *Organizations__MeasurementType `json:"measurementType,omitempty"`            // Optional
	DailyScan                  *Long                           `json:"dailyScan,omitempty"`                  // Optional
	Retention                  *graphql.Int                    `json:"retention,omitempty"`                  // Optional
	MaxRetention               *graphql.Int                    `json:"maxRetention,omitempty"`               // Optional
	AllowSelfService           *graphql.Boolean                `json:"allowSelfService,omitempty"`           // Optional
	Expiration                 *Long                           `json:"expiration,omitempty"`                 // Optional
	UserLimit                  *graphql.Int                    `json:"userLimit,omitempty"`                  // Optional
	DateType                   *graphql.String                 `json:"dateType,omitempty"`                   // Optional
	Trial                      *graphql.Boolean                `json:"trial,omitempty"`                      // Optional
	AllowFlightControl         *graphql.Boolean                `json:"allowFlightControl,omitempty"`         // Optional
	RepositoryLimit            *graphql.Int                    `json:"repositoryLimit,omitempty"`            // Optional
}

// UpdateLocalClusterConnectionInput represents data for updating a local cluster connection.
type UpdateLocalClusterConnectionInput struct {
	// Name or id of the multi-cluster view that has the connection.
	MultiClusterViewName graphql.String `json:"multiClusterViewName"` // Required
	// Id of the connection to update.
	ConnectionID graphql.String `json:"connectionId"` // Required
	// Name or id of the local view to connect with.
	TargetViewName *graphql.String `json:"targetViewName,omitempty"` // Optional
	// Additional tags that can be used to filter queries.
	Tags *[]ClusterConnectionInputTag `json:"tags,omitempty"` // Optional
	// Filter query that restricts the data visible through this connection.
	QueryPrefix *graphql.String `json:"queryPrefix,omitempty"` // Optional
}

// UpdateLong represents if the value should be cleared, supply an `UpdateLong` object the with no value or a `null` value. If the setting should be changed, supply a `UpdateLong` object with the desired value.
type UpdateLong struct {
	Value *graphql.Int `json:"value,omitempty"` // Optional
}

type UpdateOidcConfigurationInput struct {
	ID                      graphql.String   `json:"id"`                             // Required
	Name                    graphql.String   `json:"name"`                           // Required
	ClientID                graphql.String   `json:"clientID"`                       // Required
	ClientSecret            graphql.String   `json:"clientSecret"`                   // Required
	Issuer                  graphql.String   `json:"issuer"`                         // Required
	TokenEndpointAuthMethod graphql.String   `json:"tokenEndpointAuthMethod"`        // Required
	AuthorizationEndpoint   graphql.String   `json:"authorizationEndpoint"`          // Required
	Domains                 []graphql.String `json:"domains"`                        // Required
	Scopes                  []graphql.String `json:"scopes"`                         // Required
	UserClaim               graphql.String   `json:"userClaim"`                      // Required
	EnableDebug             graphql.Boolean  `json:"enableDebug"`                    // Required
	TokenEndpoint           *graphql.String  `json:"tokenEndpoint,omitempty"`        // Optional
	UserInfoEndpoint        *graphql.String  `json:"userInfoEndpoint,omitempty"`     // Optional
	RegistrationEndpoint    *graphql.String  `json:"registrationEndpoint,omitempty"` // Optional
	GroupsClaim             *graphql.String  `json:"groupsClaim,omitempty"`          // Optional
	JWKSEndpoint            *graphql.String  `json:"JWKSEndpoint,omitempty"`         // Optional
	DefaultIdp              *graphql.Boolean `json:"defaultIdp,omitempty"`           // Optional
	HumioOwned              *graphql.Boolean `json:"humioOwned,omitempty"`           // Optional
	LazyCreateUsers         *graphql.Boolean `json:"lazyCreateUsers,omitempty"`      // Optional
	FederatedIdp            *graphql.String  `json:"federatedIdp,omitempty"`         // Optional
	ScopeClaim              *graphql.String  `json:"scopeClaim,omitempty"`           // Optional
}

// UpdateOpsGenieAction represents data for updating an OpsGenie action.
type UpdateOpsGenieAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Id of the action.
	ID graphql.String `json:"id"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// OpsGenie webhook url to send the request to.
	APIURL graphql.String `json:"apiUrl"` // Required
	// Key to authenticate with OpsGenie.
	GenieKey graphql.String `json:"genieKey"` // Required
	// Defines whether the action should use the configured proxy to make web requests.
	UseProxy graphql.Boolean `json:"useProxy"` // Required
}

type UpdateOrganizationPermissionsTokenPermissionsInput struct {
	ID          graphql.String           `json:"id"`          // Required
	Permissions []OrganizationPermission `json:"permissions"` // Required
}

type UpdatePackageFromRegistryInput struct {
	ViewName            RepoOrViewName                    `json:"viewName"`                     // Required
	PackageID           VersionedPackageSpecifier         `json:"packageId"`                    // Required
	ConflictResolutions []ConflictResolutionConfiguration `json:"conflictResolutions"`          // Required
	QueryOwnershipType  *QueryOwnershipType               `json:"queryOwnershipType,omitempty"` // Optional
}

// UpdatePagerDutyAction represents data for updating a PagerDuty action.
type UpdatePagerDutyAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Id of the action.
	ID graphql.String `json:"id"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// Severity level to give to the message.
	Severity graphql.String `json:"severity"` // Required
	// Routing key to authenticate with PagerDuty.
	RoutingKey graphql.String `json:"routingKey"` // Required
	// Defines whether the action should use the configured proxy to make web requests.
	UseProxy graphql.Boolean `json:"useProxy"` // Required
}

type UpdateParametersInteractionInput struct {
	Name                       graphql.String                    `json:"name"`                                 // Required
	Arguments                  []ArgumentInput                   `json:"arguments"`                            // Required
	UseWidgetTimeWindow        graphql.Boolean                   `json:"useWidgetTimeWindow"`                  // Required
	TitleTemplate              *graphql.String                   `json:"titleTemplate,omitempty"`              // Optional
	FieldInteractionConditions *[]FieldInteractionConditionInput `json:"fieldInteractionConditions,omitempty"` // Optional
}

// UpdateParserInput represents input for updating a parser.
type UpdateParserInput struct {
	// The repository where the parser lives.
	RepositoryName *graphql.String `json:"repositoryName,omitempty"` // Optional
	// The ID of the parser to update.
	ID *graphql.String `json:"id,omitempty"` // Optional
	// The name to use for the parser.
	Name *graphql.String `json:"name,omitempty"` // Optional
	// Test events that can be parsed by the parser.
	TestData *[]graphql.String `json:"testData,omitempty"` // Optional
	// The parser script that is executed for every incoming event.
	SourceCode *graphql.String `json:"sourceCode,omitempty"` // Optional
	// Any fields which the parser should convert to tags after an event is parsed.
	TagFields *[]graphql.String `json:"tagFields,omitempty"` // Optional
	// A list of fields that will be removed from the event before it's parsed. These fields will not be included when calculating usage.
	FieldsToBeRemovedBeforeParsing *[]graphql.String `json:"fieldsToBeRemovedBeforeParsing,omitempty"` // Optional
	// The version of the Humio query language to use.
	LanguageVersion *LanguageVersionEnum `json:"languageVersion,omitempty"` // Optional
}

// UpdateParserInputV2 represents input for updating a parser.
type UpdateParserInputV2 struct {
	// The repository where the parser lives.
	RepositoryName RepoOrViewName `json:"repositoryName"` // Required
	// The ID of the parser to update.
	ID graphql.String `json:"id"` // Required
	// The name to use for the parser.
	Name *graphql.String `json:"name,omitempty"` // Optional
	// Input for updating the parser script.
	Script *UpdateParserScriptInput `json:"script,omitempty"` // Optional
	// Test cases that can be used to help verify that the parser works as expected.
	TestCases *[]ParserTestCaseInput `json:"testCases,omitempty"` // Optional
	// Fields that are used as tags.
	FieldsToTag *[]graphql.String `json:"fieldsToTag,omitempty"` // Optional
	// A list of fields that will be removed from the event before it's parsed. These fields will not be included when calculating usage.
	FieldsToBeRemovedBeforeParsing *[]graphql.String `json:"fieldsToBeRemovedBeforeParsing,omitempty"` // Optional
}

// UpdateParserScriptInput represents input for updating the parser script.
type UpdateParserScriptInput struct {
	// The parser script that is executed for every incoming event.
	Script graphql.String `json:"script"` // Required
	// A specific language version. If no version is provided, the version already set on the parser will be used.
	LanguageVersion *LanguageVersionInputType `json:"languageVersion,omitempty"` // Optional
}

// UpdatePostMessageSlackAction represents data for updating a post-message Slack action.
type UpdatePostMessageSlackAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Id of the action.
	ID graphql.String `json:"id"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// Api token to authenticate with Slack.
	APIToken graphql.String `json:"apiToken"` // Required
	// List of Slack channels to message.
	Channels []graphql.String `json:"channels"` // Required
	// Fields to include within the Slack message. Can be templated with values from the result.
	Fields []SlackFieldEntryInput `json:"fields"` // Required
	// Defines whether the action should use the configured proxy to make web requests.
	UseProxy graphql.Boolean `json:"useProxy"` // Required
}

type UpdateQueryPrefixInput struct {
	QueryPrefix graphql.String `json:"queryPrefix"` // Required
	ViewID      graphql.String `json:"viewId"`      // Required
	GroupID     graphql.String `json:"groupId"`     // Required
}

// UpdateRemoteClusterConnectionInput represents data for updating a remote cluster connection.
type UpdateRemoteClusterConnectionInput struct {
	// Name or id of the multi-cluster view that has the connection.
	MultiClusterViewName graphql.String `json:"multiClusterViewName"` // Required
	// Id of the connection to update.
	ConnectionID graphql.String `json:"connectionId"` // Required
	// Public URL of the remote cluster to connect with.
	PublicURL *graphql.String `json:"publicUrl,omitempty"` // Optional
	// Access token for the remote view to connect with.
	Token *graphql.String `json:"token,omitempty"` // Optional
	// Additional tags that can be used to filter queries.
	Tags *[]ClusterConnectionInputTag `json:"tags,omitempty"` // Optional
	// Filter query that restricts the data visible through this connection.
	QueryPrefix *graphql.String `json:"queryPrefix,omitempty"` // Optional
}

type UpdateRepoDataTypeInputObject struct {
	DataspaceID  graphql.String     `json:"dataspaceId"`  // Required
	RepoDataType RepositoryDataType `json:"repoDataType"` // Required
}

type UpdateRepoLimitIdInputObject struct {
	DataspaceID graphql.String `json:"dataspaceId"` // Required
	LimitID     graphql.String `json:"limitId"`     // Required
}

type UpdateRoleInput struct {
	RoleID                  graphql.String            `json:"roleId"`                            // Required
	DisplayName             graphql.String            `json:"displayName"`                       // Required
	ViewPermissions         []Permission              `json:"viewPermissions"`                   // Required
	Description             *graphql.String           `json:"description,omitempty"`             // Optional
	Color                   *graphql.String           `json:"color,omitempty"`                   // Optional
	SystemPermissions       *[]SystemPermission       `json:"systemPermissions,omitempty"`       // Optional
	OrganizationPermissions *[]OrganizationPermission `json:"organizationPermissions,omitempty"` // Optional
	ObjectAction            *ObjectAction             `json:"objectAction,omitempty"`            // Optional
}

type UpdateSavedQueryInput struct {
	ID                           graphql.String                      `json:"id"`                                     // Required
	ViewName                     graphql.String                      `json:"viewName"`                               // Required
	Name                         *graphql.String                     `json:"name,omitempty"`                         // Optional
	QueryString                  *graphql.String                     `json:"queryString,omitempty"`                  // Optional
	Start                        *graphql.String                     `json:"start,omitempty"`                        // Optional
	End                          *graphql.String                     `json:"end,omitempty"`                          // Optional
	IsLive                       *graphql.Boolean                    `json:"isLive,omitempty"`                       // Optional
	WidgetType                   *graphql.String                     `json:"widgetType,omitempty"`                   // Optional
	Options                      *graphql.String                     `json:"options,omitempty"`                      // Optional
	DashboardLinkInteractions    *[]DashboardLinkInteractionInput    `json:"dashboardLinkInteractions,omitempty"`    // Optional
	CustomLinkInteractions       *[]CustomLinkInteractionInput       `json:"customLinkInteractions,omitempty"`       // Optional
	SearchLinkInteractions       *[]SearchLinkInteractionInput       `json:"searchLinkInteractions,omitempty"`       // Optional
	UpdateParametersInteractions *[]UpdateParametersInteractionInput `json:"updateParametersInteractions,omitempty"` // Optional
}

type UpdateScheduledReportInput struct {
	ViewName                  graphql.String                              `json:"viewName"`                            // Required
	ID                        graphql.String                              `json:"id"`                                  // Required
	Name                      *graphql.String                             `json:"name,omitempty"`                      // Optional
	Password                  *graphql.String                             `json:"password,omitempty"`                  // Optional
	Enabled                   *graphql.Boolean                            `json:"enabled,omitempty"`                   // Optional
	Description               *graphql.String                             `json:"description,omitempty"`               // Optional
	DashboardID               *graphql.String                             `json:"dashboardId,omitempty"`               // Optional
	LastReportSent            *graphql.String                             `json:"lastReportSent,omitempty"`            // Optional
	SharedTime                *graphql.Boolean                            `json:"sharedTime,omitempty"`                // Optional
	TimeWindowFrom            *graphql.String                             `json:"timeWindowFrom,omitempty"`            // Optional
	TimeWindowTo              *graphql.String                             `json:"timeWindowTo,omitempty"`              // Optional
	ScheduleFrequency         *graphql.String                             `json:"scheduleFrequency,omitempty"`         // Optional
	ScheduleFrequencyEvery    *graphql.String                             `json:"scheduleFrequencyEvery,omitempty"`    // Optional
	ScheduleFrequencyTime     *graphql.String                             `json:"scheduleFrequencyTime,omitempty"`     // Optional
	ScheduleFrequencyTimeZone *graphql.String                             `json:"scheduleFrequencyTimeZone,omitempty"` // Optional
	ScheduleFrequencyOn       *[]graphql.String                           `json:"scheduleFrequencyOn,omitempty"`       // Optional
	ScheduleStartDate         *graphql.String                             `json:"scheduleStartDate,omitempty"`         // Optional
	ScheduleEndDate           *graphql.String                             `json:"scheduleEndDate,omitempty"`           // Optional
	Labels                    *[]graphql.String                           `json:"labels,omitempty"`                    // Optional
	Parameters                *[]UpdateScheduledReportParameterValueInput `json:"parameters,omitempty"`                // Optional
	ActionIDs                 *[]graphql.String                           `json:"actionIds,omitempty"`                 // Optional
	Layout                    *UpdateScheduledReportLayoutInput           `json:"layout,omitempty"`                    // Optional
}

type UpdateScheduledReportLayoutInput struct {
	PaperSize             *graphql.String  `json:"paperSize,omitempty"`             // Optional
	PaperOrientation      *graphql.String  `json:"paperOrientation,omitempty"`      // Optional
	PaperLayout           *graphql.String  `json:"paperLayout,omitempty"`           // Optional
	ShowDescription       *graphql.Boolean `json:"showDescription,omitempty"`       // Optional
	ShowTitleFrontpage    *graphql.Boolean `json:"showTitleFrontpage,omitempty"`    // Optional
	ShowParameters        *graphql.Boolean `json:"showParameters,omitempty"`        // Optional
	MaxNumberOfRows       *graphql.Int     `json:"maxNumberOfRows,omitempty"`       // Optional
	ShowTitleHeader       *graphql.Boolean `json:"showTitleHeader,omitempty"`       // Optional
	ShowExportDate        *graphql.Boolean `json:"showExportDate,omitempty"`        // Optional
	FooterShowPageNumbers *graphql.Boolean `json:"footerShowPageNumbers,omitempty"` // Optional
}

type UpdateScheduledReportParameterValueInput struct {
	ID    graphql.String `json:"id"`    // Required
	Value graphql.String `json:"value"` // Required
}

// UpdateScheduledSearch represents data for updating a scheduled search.
type UpdateScheduledSearch struct {
	// Name of the view of the scheduled search.
	ViewName graphql.String `json:"viewName"` // Required
	// Id of the scheduled search.
	ID graphql.String `json:"id"` // Required
	// Name of the scheduled search.
	Name graphql.String `json:"name"` // Required
	// LogScale query to execute.
	QueryString graphql.String `json:"queryString"` // Required
	// Start of the relative time interval for the query.
	QueryStart graphql.String `json:"queryStart"` // Required
	// End of the relative time interval for the query.
	QueryEnd graphql.String `json:"queryEnd"` // Required
	// Cron pattern describing the schedule to execute the query on.
	Schedule graphql.String `json:"schedule"` // Required
	// Time zone of the schedule. Currently this field only supports UTC offsets like 'UTC', 'UTC-01' or 'UTC+12:45'.
	TimeZone graphql.String `json:"timeZone"` // Required
	// User-defined limit, which caps the number of missed searches to backfill, e.g. in the event of a shutdown.
	BackfillLimit graphql.Int `json:"backfillLimit"` // Required
	// Flag indicating whether the scheduled search is enabled.
	Enabled graphql.Boolean `json:"enabled"` // Required
	// List of ids or names for actions to fire on query result. Actions in packages can be referred to as "packagescope/packagename:actionname".
	Actions []graphql.String `json:"actions"` // Required
	// Labels attached to the scheduled search.
	Labels []graphql.String `json:"labels"` // Required
	// Description of the scheduled search.
	Description *graphql.String `json:"description,omitempty"` // Optional
	// The scheduled search will run with the permissions of the user corresponding to this id if the queryOwnershipType field is set to User. If the queryOwnershipType is set to Organization, whilst runAsUserId is set, this will result in an error. If not specified, the scheduled search will run with the permissions of the calling user. It requires the 'ChangeTriggersToRunAsOtherUsers' permission to set this field to a user id different from the calling user.
	RunAsUserID *graphql.String `json:"runAsUserId,omitempty"` // Optional
	// Ownership of the query run by this scheduled search. If value is User, ownership will be based on the runAsUserId field.
	QueryOwnershipType *QueryOwnershipType `json:"queryOwnershipType,omitempty"` // Optional
}

type UpdateSearchLinkInteractionInput struct {
	Path                       graphql.String             `json:"path"`                       // Required
	InteractionID              graphql.String             `json:"interactionId"`              // Required
	SearchLinkInteractionInput SearchLinkInteractionInput `json:"searchLinkInteractionInput"` // Required
}

// UpdateSlackAction represents data for updating a Slack action.
type UpdateSlackAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Id of the action.
	ID graphql.String `json:"id"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// Slack webhook url to send the request to.
	URL graphql.String `json:"url"` // Required
	// Fields to include within the Slack message. Can be templated with values from the result.
	Fields []SlackFieldEntryInput `json:"fields"` // Required
	// Defines whether the action should use the configured proxy to make web requests.
	UseProxy graphql.Boolean `json:"useProxy"` // Required
}

type UpdateSubscriptionInputObject struct {
	Subscription Organizations__Subscription `json:"subscription"`        // Required
	TrialDays    *graphql.Int                `json:"trialDays,omitempty"` // Optional
}

type UpdateSystemPermissionsTokenPermissionsInput struct {
	ID          graphql.String     `json:"id"`          // Required
	Permissions []SystemPermission `json:"permissions"` // Required
}

// UpdateUploadFileAction represents data for updating an upload file action.
type UpdateUploadFileAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Id of the action.
	ID graphql.String `json:"id"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// File name for the uploaded file.
	FileName graphql.String `json:"fileName"` // Required
}

type UpdateUserByIdInput struct {
	UserID      graphql.String   `json:"userId"`                // Required
	Company     *graphql.String  `json:"company,omitempty"`     // Optional
	IsRoot      *graphql.Boolean `json:"isRoot,omitempty"`      // Optional
	Username    *graphql.String  `json:"username,omitempty"`    // Optional
	FirstName   *graphql.String  `json:"firstName,omitempty"`   // Optional
	LastName    *graphql.String  `json:"lastName,omitempty"`    // Optional
	FullName    *graphql.String  `json:"fullName,omitempty"`    // Optional
	Picture     *graphql.String  `json:"picture,omitempty"`     // Optional
	Email       *graphql.String  `json:"email,omitempty"`       // Optional
	CountryCode *graphql.String  `json:"countryCode,omitempty"` // Optional
	StateCode   *graphql.String  `json:"stateCode,omitempty"`   // Optional
}

// UpdateVictorOpsAction represents data for updating a VictorOps action.
type UpdateVictorOpsAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Id of the action.
	ID graphql.String `json:"id"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// Type of the VictorOps message to make.
	MessageType graphql.String `json:"messageType"` // Required
	// VictorOps webhook url to send the request to.
	NotifyURL graphql.String `json:"notifyUrl"` // Required
	// Defines whether the action should use the configured proxy to make web requests.
	UseProxy graphql.Boolean `json:"useProxy"` // Required
}

type UpdateViewPermissionsTokenPermissionsInput struct {
	ID          graphql.String `json:"id"`          // Required
	Permissions []Permission   `json:"permissions"` // Required
}

// UpdateWebhookAction represents data for updating a webhook action.
type UpdateWebhookAction struct {
	// Name of the view of the action.
	ViewName graphql.String `json:"viewName"` // Required
	// Id of the action.
	ID graphql.String `json:"id"` // Required
	// Name of the action.
	Name graphql.String `json:"name"` // Required
	// Url to send the http(s) request to.
	URL graphql.String `json:"url"` // Required
	// Method to use for the request.
	Method graphql.String `json:"method"` // Required
	// Headers of the http(s) request.
	Headers []HttpHeaderEntryInput `json:"headers"` // Required
	// Body of the http(s) request. Can be templated with values from the result.
	BodyTemplate graphql.String `json:"bodyTemplate"` // Required
	// Flag indicating whether SSL should be ignored for the request.
	IgnoreSSL graphql.Boolean `json:"ignoreSSL"` // Required
	// Defines whether the action should use the configured proxy to make web requests.
	UseProxy graphql.Boolean `json:"useProxy"` // Required
}

type UpgradeAccountData struct {
	LastName    graphql.String  `json:"lastName"`              // Required
	Company     graphql.String  `json:"company"`               // Required
	Email       graphql.String  `json:"email"`                 // Required
	FirstName   *graphql.String `json:"firstName,omitempty"`   // Optional
	Purpose     *Purposes       `json:"purpose,omitempty"`     // Optional
	PhoneNumber *graphql.String `json:"phoneNumber,omitempty"` // Optional
	CountryCode *graphql.String `json:"countryCode,omitempty"` // Optional
	StateCode   *graphql.String `json:"stateCode,omitempty"`   // Optional
	Comment     *graphql.String `json:"comment,omitempty"`     // Optional
}

type UserRoleAssignment struct {
	UserID graphql.String `json:"userId"` // Required
	RoleID graphql.String `json:"roleId"` // Required
}

type UtmParams struct {
	Campaign graphql.String `json:"campaign"` // Required
	Content  graphql.String `json:"content"`  // Required
	Medium   graphql.String `json:"medium"`   // Required
	Source   graphql.String `json:"source"`   // Required
	Term     graphql.String `json:"term"`     // Required
}

// ViewConnectionInput represents the repositories this view will read from.
type ViewConnectionInput struct {
	// The name of the connected repository.
	RepositoryName graphql.String `json:"repositoryName"` // Required
	// The filter applied to all results from the repository.
	Filter          graphql.String       `json:"filter"`                    // Required
	LanguageVersion *LanguageVersionEnum `json:"languageVersion,omitempty"` // Optional
}

type WidgetInput struct {
	ID           graphql.String              `json:"id"`                     // Required
	Title        graphql.String              `json:"title"`                  // Required
	X            graphql.Int                 `json:"x"`                      // Required
	Y            graphql.Int                 `json:"y"`                      // Required
	Width        graphql.Int                 `json:"width"`                  // Required
	Height       graphql.Int                 `json:"height"`                 // Required
	Description  *graphql.String             `json:"description,omitempty"`  // Optional
	QueryOptions *WidgetQueryPropertiesInput `json:"queryOptions,omitempty"` // Optional
	NoteOptions  *WidgetNotePropertiesInput  `json:"noteOptions,omitempty"`  // Optional
	LinkOptions  *WidgetLinkPropertiesInput  `json:"linkOptions,omitempty"`  // Optional
}

type WidgetLinkPropertiesInput struct {
	Labels []graphql.String `json:"labels"` // Required
}

type WidgetNotePropertiesInput struct {
	Text            graphql.String  `json:"text"`                      // Required
	BackgroundColor *graphql.String `json:"backgroundColor,omitempty"` // Optional
	TextColor       *graphql.String `json:"textColor,omitempty"`       // Optional
}

type WidgetQueryPropertiesInput struct {
	QueryString                  graphql.String                      `json:"queryString"`                            // Required
	Start                        graphql.String                      `json:"start"`                                  // Required
	End                          graphql.String                      `json:"end"`                                    // Required
	WidgetType                   graphql.String                      `json:"widgetType"`                             // Required
	Options                      *graphql.String                     `json:"options,omitempty"`                      // Optional
	DashboardLinkInteractions    *[]DashboardLinkInteractionInput    `json:"dashboardLinkInteractions,omitempty"`    // Optional
	CustomLinkInteractions       *[]CustomLinkInteractionInput       `json:"customLinkInteractions,omitempty"`       // Optional
	SearchLinkInteractions       *[]SearchLinkInteractionInput       `json:"searchLinkInteractions,omitempty"`       // Optional
	UpdateParametersInteractions *[]UpdateParametersInteractionInput `json:"updateParametersInteractions,omitempty"` // Optional
}

// deleteExternalFunctionInput represents the input required to delete an external function specification.
type deleteExternalFunctionInput struct {
	// The name of the external function to delete.
	Name graphql.String `json:"name"` // Required
}
