// Code generated by generate.go; DO NOT EDIT.

package api

import "github.com/cli/shurcooL-graphql"

type Long int64
type JSON string
type YAML string
type DateTime string
type RepoOrViewName string

// Input represents one of the Input structs:
//
// ActionSecurityPoliciesInput, AddAlertLabel, AddAliasMappingInput, AddIngestTokenV3Input, AddLabelScheduledSearch, AddLimitInput, AddLimitV2Input, AddRecentQueryInput, AddRoleInput, AddStarScheduledSearch, AddStarToAlert, AddStarToFieldInput, AddStarToQueryInput, AddSubdomainInput, AddToBlocklistByIdInput, AddToBlocklistInput, AddUserInput, AddUserInputV2, AddUsersToGroupInput, AliasInfoInput, AliasMappingInput, AnalyticsBrowser, AnalyticsBrowserInfo, AnalyticsDevice, AnalyticsDeviceInfo, AnalyticsEngine, AnalyticsFeature, AnalyticsInfo, AnalyticsLog, AnalyticsLogWithTimestamp, AnalyticsMetrics, AnalyticsOS, AnalyticsUserAgent, AnalyzeQueryArguments, ArgumentInput, AssertFieldMissingInput, AssertFieldValueEqualsInput, AssignOrganizationRoleToGroupInput, AssignParserToIngestTokenInputV2, AssignRoleToGroupInput, AssignSystemRoleToGroupInput, BatchUpdateQueryOwnershipInput, BlockIngestOnOrgInput, CachePolicyInput, CancelRedactEventsInput, CheckLocalFederatedConnectionInput, CheckRemoteFederatedConnectionInput, ClearErrorOnAlertInput, ClearErrorOnFilterAlertInput, ClearErrorOnScheduledSearchInput, ClearFieldConfigurationsInput, ClearRecentQueriesInput, CloneParserInput, ColumnChange, ConfigurationFilter, ConflictResolutionConfiguration, CreateActionFromTemplateInput, CreateAlert, CreateAlertFromTemplateInput, CreateAwsS3SqsIngestFeed, CreateCustomLinkInteractionInput, CreateDashboardFromTemplateV2Input, CreateDashboardInput, CreateDashboardLinkInteractionInput, CreateEmailAction, CreateEventForwardingRule, CreateFdrFeed, CreateFieldAliasSchemaInput, CreateFilterAlert, CreateHumioRepoAction, CreateIngestListenerV3Input, CreateKafkaEventForwarder, CreateLocalFederatedConnectionInput, CreateOpsGenieAction, CreateOrUpdateExternalFunctionInput, CreateOrganizationPermissionTokenInput, CreatePagerDutyAction, CreateParserFromTemplateInput, CreateParserInput, CreateParserInputV2, CreatePersonalUserTokenInput, CreatePostMessageSlackAction, CreateRemoteFederatedConnectionInput, CreateSavedQueryInput, CreateScheduledSearch, CreateScheduledSearchFromTemplateInput, CreateSearchLinkInteractionInput, CreateSlackAction, CreateSystemPermissionTokenInput, CreateUploadFileAction, CreateVictorOpsAction, CreateViewPermissionsTokenInput, CreateWebhookAction, CustomLinkInteractionInput, DashboardLinkInteractionInput, DashboardUpdateFrequencyInput, DeleteAction, DeleteAlert, DeleteDashboardInput, DeleteDashboardInputV2, DeleteEventForwarderInput, DeleteEventForwardingRule, DeleteFdrFeed, DeleteFederatedConnectionInput, DeleteFieldAliasSchema, DeleteFilterAlert, DeleteIngestFeed, DeleteInteractionInput, DeleteSavedQueryInput, DeleteScheduledSearch, DeleteSearchDomainByIdInput, DisableAlert, DisableEventForwarderInput, DisableFieldAliasSchemaOnOrgInput, DisableFieldAliasSchemaOnViewInput, DisableFilterAlert, DisableOrganizationIocAccess, DisableStarScheduledSearch, DynamicConfigInputObject, EnableAlert, EnableEventForwarderInput, EnableFieldAliasSchemaOnOrgInput, EnableFieldAliasSchemaOnViewInput, EnableFilterAlert, EnableOrganizationIocAccess, EnableStarScheduledSearch, EnableWorkerQueryTracingInputType, EnabledInput, EnforceSubdomainsInput, EntitySearchInputType, EntitySearchSortInfoType, FederatedConnectionInputTag, FieldConfigurationInput, FieldInteractionConditionInput, FileFieldFilterType, FilterInput, FunctionListInput, GenerateAlertFromPackageTemplateInput, GenerateAlertFromTemplateInput, GenerateFilterAlertFromPackageTemplateInput, GenerateFilterAlertFromTemplateInput, GenerateScheduledSearchFromPackageTemplateInput, GenerateScheduledSearchFromTemplateInput, GetExternalFunctionInput, GroupRoleAssignment, HttpHeaderEntryInput, IPFilterIdInput, IPFilterInput, IPFilterUpdateInput, IngestFeedAwsAuthenticationInput, IngestFeedPreprocessingInput, IngestPartitionInput, InputData, InputDictionaryEntry, InstallPackageFromRegistryInput, KindInput, LanguageVersionInputType, LinkInput, LoginBridgeInput, LoginBridgeUpdateInput, MarkLimitDeletedInput, MigrateLimitsInput, NotificationInput, OidcConfigurationInput, OrderByUserFieldInput, OrganizationLimitsInput, ParameterFilePropertiesInput, ParameterFileValueFilter, ParameterFixedListOption, ParameterFixedListPropertiesInput, ParameterFreeTextPropertiesInput, ParameterInput, ParameterQueryPropertiesInput, ParameterSpecificationInput, ParserTestRunInput, QueryArgument, QueryArgumentInputType, QueryQuotaDefaultSettingsInput, QueryQuotaIntervalSettingInput, QueryQuotaUserSettingsInput, RedactEventsInputType, RemoveAlertLabel, RemoveAliasMappingInput, RemoveFromBlocklistInput, RemoveLabelScheduledSearch, RemoveLimitInput, RemoveOrganizationRoleFromGroupInput, RemoveParserInput, RemoveRepoCachePolicyInput, RemoveRoleFromGroupInput, RemoveSecondarySubdomainInput, RemoveStarFromAlert, RemoveStarFromQueryInput, RemoveStarScheduledSearch, RemoveStarToFieldInput, RemoveSystemRoleFromGroupInput, RemoveUserByIdInput, RemoveUserInput, RemoveUsersFromGroupInput, RenameSearchDomainByIdInput, RepoFilterInput, RestoreDeletedSearchDomainInput, ResubmitMarketoLeadData, RevokeSessionInput, RotateTokenInputData, SchemaFieldInput, SearchLinkInteractionInput, ServiceLevelIndicatorLogArg, SessionInput, SetDefaultSavedQueryInput, SetGlobalDefaultCachePolicyInput, SetLimitDisplayNameInput, SetOrgDefaultCachePolicyInput, SetPrimarySubdomainInput, SetRepoCachePolicyInput, SetSubdomainSettingsInput, SharedDashboardsSecurityPoliciesInput, SlackFieldEntryInput, SocialLoginSettingsInput, StopQueriesInput, TagGroupingRuleInput, TagsInput, TestAwsS3SqsIngestFeed, TestCaseInput, TestEmailAction, TestEventInput, TestFdrFeed, TestHumioRepoAction, TestKafkaEventForwarder, TestOpsGenieAction, TestPagerDutyAction, TestParserInputV2, TestPostMessageSlackAction, TestSlackAction, TestUploadFileAction, TestVictorOpsAction, TestWebhookAction, TokenInput, TokenSecurityPoliciesInput, TriggerPollIngestFeed, UpdateAlert, UpdateAwsS3SqsIngestFeed, UpdateCustomLinkInteractionInput, UpdateDashboardInput, UpdateDashboardLinkInteractionInput, UpdateDefaultQueryPrefixInput, UpdateDefaultRoleInput, UpdateDescription, UpdateEmailAction, UpdateEventForwardingRule, UpdateFdrFeed, UpdateFdrFeedControl, UpdateFieldAliasMappingInput, UpdateFieldAliasSchemaInput, UpdateFilterAlert, UpdateGroupInput, UpdateHumioRepoAction, UpdateIngestFeedDescription, UpdateIngestListenerV3Input, UpdateKafkaEventForwarder, UpdateLimitInput, UpdateLimitInputV2, UpdateLocalFederatedConnectionInput, UpdateLong, UpdateOidcConfigurationInput, UpdateOpsGenieAction, UpdateOrganizationPermissionsTokenPermissionsInput, UpdatePackageFromRegistryInput, UpdatePagerDutyAction, UpdateParametersInteractionInput, UpdateParserInput, UpdatePostMessageSlackAction, UpdateQueryPrefixInput, UpdateRemoteFederatedConnectionInput, UpdateRepoDataTypeInputObject, UpdateRepoLimitIdInputObject, UpdateRoleInput, UpdateSavedQueryInput, UpdateScheduledSearch, UpdateSearchLinkInteractionInput, UpdateSlackAction, UpdateSubscriptionInputObject, UpdateSystemPermissionsTokenPermissionsInput, UpdateUploadFileAction, UpdateUserByIdInput, UpdateVictorOpsAction, UpdateViewPermissionsTokenPermissionsInput, UpdateWebhookAction, UpgradeAccountData, UserRoleAssignment, UtmParams, ViewConnectionInput, WidgetInput, WidgetLinkPropertiesInput, WidgetNotePropertiesInput, WidgetQueryPropertiesInput, deleteExternalFunctionInput.
type Input interface{}

// ActionSecurityPoliciesInput represents data for updating action security policies.
type ActionSecurityPoliciesInput struct {

	// Whether email actions should be enabled. (Required)
	EmailActionEnabled graphql.Boolean `json:"emailActionEnabled"`

	// Whether repository actions should be enabled. (Required)
	RepoActionEnabled graphql.Boolean `json:"repoActionEnabled"`

	// Whether OpsGenie actions should be enabled. (Required)
	OpsGenieActionEnabled graphql.Boolean `json:"opsGenieActionEnabled"`

	// Whether PagerDuty actions should be enabled. (Required)
	PagerDutyActionEnabled graphql.Boolean `json:"pagerDutyActionEnabled"`

	// Whether single channel Slack actions should be enabled. (Required)
	SlackSingleChannelActionEnabled graphql.Boolean `json:"slackSingleChannelActionEnabled"`

	// Whether multi channel Slack actions should be enabled. (Required)
	SlackMultiChannelActionEnabled graphql.Boolean `json:"slackMultiChannelActionEnabled"`

	// Whether upload file actions should be enabled. (Required)
	UploadFileActionEnabled graphql.Boolean `json:"uploadFileActionEnabled"`

	// Whether VictorOps actions should be enabled. (Required)
	VictorOpsActionEnabled graphql.Boolean `json:"victorOpsActionEnabled"`

	// Whether webhook actions should be enabled. (Required)
	WebhookActionEnabled graphql.Boolean `json:"webhookActionEnabled"`

	// Allow list of glob patterns restricting which recipient can be set on email actions. E.g. *@organization.com. Empty list means no recipients allowed whereas not setting it means all allowed. (Optional)
	EmailActionRecipientAllowList *[]graphql.String `json:"emailActionRecipientAllowList,omitempty"`

	// Allow list of glob patterns restricting which URL can be set on webhook actions. E.g. *.organization.com. Empty means no recipients allowed whereas null means all. (Optional)
	WebhookActionURLAllowList *[]graphql.String `json:"webhookActionUrlAllowList,omitempty"`
}

// AddAlertLabel represents data for adding a label to an alert.
type AddAlertLabel struct {

	// Name of the view of the alert. (Required)
	ViewName graphql.String `json:"viewName"`

	// Id of the alert. (Required)
	ID graphql.String `json:"id"`

	// Label for the alert. (Required)
	Label graphql.String `json:"label"`
}

// AddAliasMappingInput represents [PREVIEW: This functionality is still under development and can change without warning.] Input object for field addFieldAliasMapping.
type AddAliasMappingInput struct {

	// ID of the schema that the alias mapping exists on. (Required)
	SchemaID graphql.String `json:"schemaId"`

	// Alias mapping to be added to this schema. (Required)
	AliasMapping AliasMappingInput `json:"aliasMapping"`
}

// AddIngestTokenV3Input represents input data to create an ingest token.
type AddIngestTokenV3Input struct {

	// Name of the repository. (Required)
	RepositoryName graphql.String `json:"repositoryName"`

	// Name of the new ingest token. (Required)
	Name graphql.String `json:"name"`

	// Optional id or name of the parser to assign to the ingest token. Parsers in packages can be referred to as "packagescope/packagename:parsername". (Optional)
	Parser *graphql.String `json:"parser,omitempty"`

	// Optional custom token string. This requires special permissions and root privileges. (Optional)
	CustomToken *graphql.String `json:"customToken,omitempty"`
}

// AddLabelScheduledSearch represents data for adding a label to a scheduled search.
type AddLabelScheduledSearch struct {

	// Name of the view of the scheduled search. (Required)
	ViewName graphql.String `json:"viewName"`

	// Id of the scheduled search. (Required)
	ID graphql.String `json:"id"`

	// Label for the scheduled search. (Required)
	Label graphql.String `json:"label"`
}

// AddLimitInput
type AddLimitInput struct {

	// (Required)
	LimitName graphql.String `json:"limitName"`

	// (Required)
	AllowLogin graphql.Boolean `json:"allowLogin"`

	// (Required)
	DailyIngest Long `json:"dailyIngest"`

	// (Required)
	Retention graphql.Int `json:"retention"`

	// (Required)
	AllowSelfService graphql.Boolean `json:"allowSelfService"`

	// (Optional)
	Expiration *Long `json:"expiration,omitempty"`

	// (Optional)
	ContractVersion *Organizations__ContractVersion `json:"contractVersion,omitempty"`

	// (Optional)
	UserLimit *graphql.Int `json:"userLimit,omitempty"`
}

// AddLimitV2Input
type AddLimitV2Input struct {

	// (Required)
	LimitName graphql.String `json:"limitName"`

	// (Required)
	AllowLogin graphql.Boolean `json:"allowLogin"`

	// (Required)
	DailyIngestContractualType Organizations__ContractualType `json:"dailyIngestContractualType"`

	// (Required)
	StorageContractualType Organizations__ContractualType `json:"storageContractualType"`

	// (Required)
	DailyScanContractualType Organizations__ContractualType `json:"dailyScanContractualType"`

	// (Required)
	MeasurementType Organizations__MeasurementType `json:"measurementType"`

	// (Required)
	Retention graphql.Int `json:"retention"`

	// (Required)
	MaxRetention graphql.Int `json:"maxRetention"`

	// (Required)
	AllowSelfService graphql.Boolean `json:"allowSelfService"`

	// (Required)
	DateType graphql.String `json:"dateType"`

	// (Required)
	Trial graphql.Boolean `json:"trial"`

	// (Required)
	AllowFlightControl graphql.Boolean `json:"allowFlightControl"`

	// (Optional)
	DailyIngest *Long `json:"dailyIngest,omitempty"`

	// (Optional)
	DailyScan *Long `json:"dailyScan,omitempty"`

	// (Optional)
	Expiration *Long `json:"expiration,omitempty"`

	// (Optional)
	UserLimit *graphql.Int `json:"userLimit,omitempty"`

	// (Optional)
	RepositoryLimit *graphql.Int `json:"repositoryLimit,omitempty"`
}

// AddRecentQueryInput
type AddRecentQueryInput struct {

	// (Required)
	ViewName graphql.String `json:"viewName"`

	// (Required)
	QueryArguments []InputDictionaryEntry `json:"queryArguments"`

	// (Required)
	QueryString graphql.String `json:"queryString"`

	// (Required)
	Start graphql.String `json:"start"`

	// (Required)
	End graphql.String `json:"end"`

	// (Required)
	IsLive graphql.Boolean `json:"isLive"`

	// (Optional)
	WidgetType *graphql.String `json:"widgetType,omitempty"`

	// (Optional)
	Options *JSON `json:"options,omitempty"`
}

// AddRoleInput
type AddRoleInput struct {

	// (Required)
	DisplayName graphql.String `json:"displayName"`

	// (Required)
	ViewPermissions []Permission `json:"viewPermissions"`

	// (Optional)
	Color *graphql.String `json:"color,omitempty"`

	// (Optional)
	SystemPermissions *[]SystemPermission `json:"systemPermissions,omitempty"`

	// (Optional)
	OrganizationPermissions *[]OrganizationPermission `json:"organizationPermissions,omitempty"`

	// (Optional)
	ObjectAction *ObjectAction `json:"objectAction,omitempty"`
}

// AddStarScheduledSearch represents data for adding a star to a scheduled search.
type AddStarScheduledSearch struct {

	// Name of the view of the scheduled search. (Required)
	ViewName graphql.String `json:"viewName"`

	// Id of the scheduled search. (Required)
	ID graphql.String `json:"id"`
}

// AddStarToAlert represents data for adding a star to an alert.
type AddStarToAlert struct {

	// Name of the view of the alert. (Required)
	ViewName graphql.String `json:"viewName"`

	// Id of the alert. (Required)
	ID graphql.String `json:"id"`
}

// AddStarToFieldInput
type AddStarToFieldInput struct {

	// (Required)
	FieldName graphql.String `json:"fieldName"`

	// (Required)
	SearchDomainName graphql.String `json:"searchDomainName"`
}

// AddStarToQueryInput
type AddStarToQueryInput struct {

	// (Required)
	SavedQueryID graphql.String `json:"savedQueryId"`

	// (Required)
	SearchDomainName graphql.String `json:"searchDomainName"`
}

// AddSubdomainInput
type AddSubdomainInput struct {

	// (Required)
	Subdomain graphql.String `json:"subdomain"`
}

// AddToBlocklistByIdInput represents data for adding to the blocklist.
type AddToBlocklistByIdInput struct {

	// The pattern to match. (Required)
	Pattern graphql.String `json:"pattern"`

	// Whether the pattern should be matched exactly or interpreted as a regex pattern. (Required)
	Type BlockedQueryMatcherType `json:"type"`

	// Limits the scope of the pattern to a specific view preventing matching queries from execution in that context only. (Optional)
	ViewID *graphql.String `json:"viewId,omitempty"`

	// Whether to apply the pattern globally. Requires the ManageCluster permission. (Optional)
	ClusterWide *graphql.Boolean `json:"clusterWide,omitempty"`
}

// AddToBlocklistInput represents data for adding to the blocklist.
type AddToBlocklistInput struct {

	// The pattern to match. (Required)
	Pattern graphql.String `json:"pattern"`

	// Whether the pattern should be matched exactly or interpreted as a regex pattern. (Required)
	Type BlockedQueryMatcherType `json:"type"`

	// Limits the scope of the pattern to a specific view preventing matching queries from execution in that context only. (Optional)
	ViewName *graphql.String `json:"viewName,omitempty"`

	// Whether to apply the pattern globally. Requires the ManageCluster permission. (Optional)
	ClusterWide *graphql.Boolean `json:"clusterWide,omitempty"`
}

// AddUserInput
type AddUserInput struct {

	// (Required)
	Username graphql.String `json:"username"`

	// (Optional)
	Company *graphql.String `json:"company,omitempty"`

	// (Optional)
	IsRoot *graphql.Boolean `json:"isRoot,omitempty"`

	// (Optional)
	FirstName *graphql.String `json:"firstName,omitempty"`

	// (Optional)
	LastName *graphql.String `json:"lastName,omitempty"`

	// (Optional)
	FullName *graphql.String `json:"fullName,omitempty"`

	// (Optional)
	Picture *graphql.String `json:"picture,omitempty"`

	// (Optional)
	Email *graphql.String `json:"email,omitempty"`

	// (Optional)
	CountryCode *graphql.String `json:"countryCode,omitempty"`

	// (Optional)
	StateCode *graphql.String `json:"stateCode,omitempty"`
}

// AddUserInputV2
type AddUserInputV2 struct {

	// (Required)
	Username graphql.String `json:"username"`

	// (Optional)
	Company *graphql.String `json:"company,omitempty"`

	// (Optional)
	IsRoot *graphql.Boolean `json:"isRoot,omitempty"`

	// (Optional)
	FirstName *graphql.String `json:"firstName,omitempty"`

	// (Optional)
	LastName *graphql.String `json:"lastName,omitempty"`

	// (Optional)
	FullName *graphql.String `json:"fullName,omitempty"`

	// (Optional)
	Picture *graphql.String `json:"picture,omitempty"`

	// (Optional)
	Email *graphql.String `json:"email,omitempty"`

	// (Optional)
	CountryCode *graphql.String `json:"countryCode,omitempty"`

	// (Optional)
	StateCode *graphql.String `json:"stateCode,omitempty"`

	// (Optional)
	SendInvite *graphql.Boolean `json:"sendInvite,omitempty"`

	// (Optional)
	VerificationToken *graphql.String `json:"verificationToken,omitempty"`

	// (Optional)
	IsOrgOwner *graphql.Boolean `json:"isOrgOwner,omitempty"`
}

// AddUsersToGroupInput
type AddUsersToGroupInput struct {

	// (Required)
	Users []graphql.String `json:"users"`

	// (Required)
	GroupID graphql.String `json:"groupId"`
}

// AliasInfoInput
type AliasInfoInput struct {

	// (Required)
	Source graphql.String `json:"source"`

	// (Required)
	Alias graphql.String `json:"alias"`
}

// AliasMappingInput represents [PREVIEW: This functionality is still under development and can change without warning.] Input object for creating a new alias mapping.
type AliasMappingInput struct {

	// (Required)
	Name graphql.String `json:"name"`

	// (Required)
	Tags []TagsInput `json:"tags"`

	// (Required)
	Aliases []AliasInfoInput `json:"aliases"`

	// (Optional)
	OriginalFieldsToKeep *[]graphql.String `json:"originalFieldsToKeep,omitempty"`
}

// AnalyticsBrowser
type AnalyticsBrowser struct {

	// (Required)
	Info AnalyticsBrowserInfo `json:"info"`

	// (Required)
	IsChrome graphql.Boolean `json:"isChrome"`

	// (Required)
	IsChromeHeadless graphql.Boolean `json:"isChromeHeadless"`

	// (Required)
	IsEdge graphql.Boolean `json:"isEdge"`

	// (Required)
	IsFirefox graphql.Boolean `json:"isFirefox"`

	// (Required)
	IsIE graphql.Boolean `json:"isIE"`

	// (Required)
	IsSafari graphql.Boolean `json:"isSafari"`
}

// AnalyticsBrowserInfo
type AnalyticsBrowserInfo struct {

	// (Optional)
	Name *graphql.String `json:"name,omitempty"`

	// (Optional)
	Version *graphql.String `json:"version,omitempty"`

	// (Optional)
	Major *graphql.String `json:"major,omitempty"`
}

// AnalyticsDevice
type AnalyticsDevice struct {

	// (Required)
	Info AnalyticsDeviceInfo `json:"info"`

	// (Required)
	IsConsole graphql.Boolean `json:"isConsole"`

	// (Required)
	IsDesktop graphql.Boolean `json:"isDesktop"`

	// (Required)
	IsMobile graphql.Boolean `json:"isMobile"`

	// (Required)
	IsTablet graphql.Boolean `json:"isTablet"`
}

// AnalyticsDeviceInfo
type AnalyticsDeviceInfo struct {

	// (Optional)
	Model *graphql.String `json:"model,omitempty"`

	// (Optional)
	Type *graphql.String `json:"type,omitempty"`

	// (Optional)
	Vendor *graphql.String `json:"vendor,omitempty"`
}

// AnalyticsEngine
type AnalyticsEngine struct {

	// (Required)
	Info AnalyticsInfo `json:"info"`

	// (Required)
	IsWebkit graphql.Boolean `json:"isWebkit"`
}

// AnalyticsFeature
type AnalyticsFeature struct {

	// (Required)
	Name graphql.String `json:"name"`

	// (Required)
	Value graphql.Boolean `json:"value"`
}

// AnalyticsInfo
type AnalyticsInfo struct {

	// (Required)
	Name graphql.String `json:"name"`

	// (Required)
	Version graphql.String `json:"version"`
}

// AnalyticsLog
type AnalyticsLog struct {

	// (Required)
	Category graphql.String `json:"category"`

	// (Required)
	Action graphql.String `json:"action"`

	// (Optional)
	Message *graphql.String `json:"message,omitempty"`
}

// AnalyticsLogWithTimestamp
type AnalyticsLogWithTimestamp struct {

	// (Required)
	EventID graphql.String `json:"eventId"`

	// (Required)
	Timestamp Long `json:"timestamp"`

	// (Required)
	Route graphql.String `json:"route"`

	// (Required)
	Action graphql.String `json:"action"`

	// (Required)
	System graphql.String `json:"system"`

	// (Required)
	Arguments []graphql.String `json:"arguments"`

	// (Required)
	Features []AnalyticsFeature `json:"features"`

	// (Required)
	Context graphql.String `json:"context"`

	// (Required)
	Metrics AnalyticsMetrics `json:"metrics"`

	// (Required)
	UserAgent AnalyticsUserAgent `json:"userAgent"`

	// (Optional)
	Feature *graphql.String `json:"feature,omitempty"`
}

// AnalyticsMetrics
type AnalyticsMetrics struct {

	// (Required)
	Fps graphql.Int `json:"fps"`
}

// AnalyticsOS
type AnalyticsOS struct {

	// (Required)
	Info AnalyticsInfo `json:"info"`

	// (Required)
	IsAndroid graphql.Boolean `json:"isAndroid"`

	// (Required)
	IsIOS graphql.Boolean `json:"isIOS"`

	// (Required)
	IsLinux graphql.Boolean `json:"isLinux"`

	// (Required)
	IsMacOS graphql.Boolean `json:"isMacOS"`

	// (Required)
	IsWindows graphql.Boolean `json:"isWindows"`
}

// AnalyticsUserAgent
type AnalyticsUserAgent struct {

	// (Required)
	Browser AnalyticsBrowser `json:"browser"`

	// (Required)
	Device AnalyticsDevice `json:"device"`

	// (Required)
	Engine AnalyticsEngine `json:"engine"`

	// (Required)
	Os AnalyticsOS `json:"os"`
}

// AnalyzeQueryArguments represents arguments for analyzeQuery.
type AnalyzeQueryArguments struct {

	// (Required)
	QueryString graphql.String `json:"queryString"`

	// (Required)
	Version LanguageVersionInputType `json:"version"`

	// (Optional)
	IsLive *graphql.Boolean `json:"isLive,omitempty"`

	// (Optional)
	Arguments *[]QueryArgumentInputType `json:"arguments,omitempty"`
}

// ArgumentInput
type ArgumentInput struct {

	// (Required)
	Key graphql.String `json:"key"`

	// (Required)
	Value graphql.String `json:"value"`
}

// AssertFieldMissingInput represents an assertion that an event output from a parser test case does not have a given field.
type AssertFieldMissingInput struct {

	// The field name to assert does not exist. (Required)
	FieldName graphql.String `json:"fieldName"`

	// The index of the output event to assert on. A parser can output zero to many events from a single input event, so the assertion should point to the specific event it should be asserted on. (Optional)
	EventIndex *graphql.Int `json:"eventIndex,omitempty"`
}

// AssertFieldValueEqualsInput represents an assertion that an event output from a parser test case has an expected value for a given field.
type AssertFieldValueEqualsInput struct {

	// The field name to assert the value of. (Required)
	FieldName graphql.String `json:"fieldName"`

	// The value the field is expected to contain. (Required)
	ExpectedValue graphql.String `json:"expectedValue"`

	// The index of the output event to assert on. A parser can output zero to many events from a single input event, so the assertion should point to the specific event it should be asserted on. (Optional)
	EventIndex *graphql.Int `json:"eventIndex,omitempty"`
}

// AssignOrganizationRoleToGroupInput
type AssignOrganizationRoleToGroupInput struct {

	// (Required)
	GroupID graphql.String `json:"groupId"`

	// (Required)
	RoleID graphql.String `json:"roleId"`
}

// AssignParserToIngestTokenInputV2 represents input data to assign a parser to an ingest token.
type AssignParserToIngestTokenInputV2 struct {

	// Name of the repository. (Required)
	RepositoryName graphql.String `json:"repositoryName"`

	// Name of the ingest token. (Required)
	TokenName graphql.String `json:"tokenName"`

	// Id or name of the parser to assign to the ingest token. Parsers in packages can be referred to as "packagescope/packagename:parsername". (Required)
	Parser graphql.String `json:"parser"`
}

// AssignRoleToGroupInput
type AssignRoleToGroupInput struct {

	// (Required)
	ViewID graphql.String `json:"viewId"`

	// (Required)
	GroupID graphql.String `json:"groupId"`

	// (Required)
	RoleID graphql.String `json:"roleId"`
}

// AssignSystemRoleToGroupInput
type AssignSystemRoleToGroupInput struct {

	// (Required)
	GroupID graphql.String `json:"groupId"`

	// (Required)
	RoleID graphql.String `json:"roleId"`
}

// BatchUpdateQueryOwnershipInput represents payload for specifying targets for batch updating query ownership.
type BatchUpdateQueryOwnershipInput struct {

	// The type to update. (Required)
	TargetType QueryOwnership_SelectionTargetType `json:"targetType"`

	// The set of ids to update. (Required)
	IDs []graphql.String `json:"ids"`
}

// BlockIngestOnOrgInput
type BlockIngestOnOrgInput struct {

	// (Required)
	BlockIngest graphql.Boolean `json:"blockIngest"`
}

// CachePolicyInput represents a policy for choosing which segments to cache on local disk when overcommiting local storage with bucket storage. This can be used to protect certain repositories for local storage, such that searching other repositories does not evict them. A cache policy in Humio divides segments into prioritized and non-prioritized segments. When segments needs to be evicted from local storage, we always try evicting non-prioritized segments before prioritized segments. A cache policy can be set either on one of three levels (in order of precedence): - Repo - Org - Globally When determining the cache policy for a repo we first check if there is a cache policy set on the repo. If none is set on the repo, we check the the org. If none is set there either we check the global setting.
type CachePolicyInput struct {

	// Prioritize caching segments younger than this. (Optional)
	PrioritizeMillis *Long `json:"prioritizeMillis,omitempty"`
}

// CancelRedactEventsInput
type CancelRedactEventsInput struct {

	// (Required)
	RepositoryName graphql.String `json:"repositoryName"`

	// (Required)
	RedactionTaskID graphql.String `json:"redactionTaskId"`
}

// CheckLocalFederatedConnectionInput represents data for checking a local federated connection.
type CheckLocalFederatedConnectionInput struct {

	// Name or id of the local view to connect with. (Required)
	TargetViewName graphql.String `json:"targetViewName"`

	// Id of the connection to check. (Optional)
	ConnectionID *graphql.String `json:"connectionId,omitempty"`

	// Additional tags that can be used to filter queries. (Optional)
	Tags *[]FederatedConnectionInputTag `json:"tags,omitempty"`

	// Filter query that restricts the data visible through this connection. (Optional)
	QueryPrefix *graphql.String `json:"queryPrefix,omitempty"`
}

// CheckRemoteFederatedConnectionInput represents data for checking a remote federated connection.
type CheckRemoteFederatedConnectionInput struct {

	// Public URL of the remote cluster to connect with. (Required)
	PublicURL graphql.String `json:"publicUrl"`

	// Id of the connection to check. Must be supplied if the token is not supplied. (Optional)
	ConnectionID *graphql.String `json:"connectionId,omitempty"`

	// Name of the federated view to which the connection belongs. Must be supplied if the token is not supplied. (Optional)
	FederatedViewName *graphql.String `json:"federatedViewName,omitempty"`

	// Access token for the remote view to connect with. Can be omitted if checking an existing connection with no token change. (Optional)
	Token *graphql.String `json:"token,omitempty"`

	// Additional tags that can be used to filter queries. (Optional)
	Tags *[]FederatedConnectionInputTag `json:"tags,omitempty"`

	// Filter query that restricts the data visible through this connection. (Optional)
	QueryPrefix *graphql.String `json:"queryPrefix,omitempty"`
}

// ClearErrorOnAlertInput represents data for clearing the error on an alert.
type ClearErrorOnAlertInput struct {

	// Name of the view of the alert. (Required)
	ViewName graphql.String `json:"viewName"`

	// Id of the alert. (Required)
	ID graphql.String `json:"id"`
}

// ClearErrorOnFilterAlertInput represents data for clearing the error on a filter alert.
type ClearErrorOnFilterAlertInput struct {

	// Name of the view of the filter alert. (Required)
	ViewName RepoOrViewName `json:"viewName"`

	// Id of the filter alert. (Required)
	ID graphql.String `json:"id"`
}

// ClearErrorOnScheduledSearchInput represents data for clearing the error on a scheduled search.
type ClearErrorOnScheduledSearchInput struct {

	// Name of the view of the scheduled search. (Required)
	ViewName graphql.String `json:"viewName"`

	// Id of the scheduled search. (Required)
	ID graphql.String `json:"id"`
}

// ClearFieldConfigurationsInput
type ClearFieldConfigurationsInput struct {

	// (Required)
	ViewOrRepositoryName graphql.String `json:"viewOrRepositoryName"`
}

// ClearRecentQueriesInput
type ClearRecentQueriesInput struct {

	// (Required)
	ViewOrRepositoryName graphql.String `json:"viewOrRepositoryName"`
}

// CloneParserInput represents input data to clone an existing parser.
type CloneParserInput struct {

	// Name of the new parser. (Required)
	NewParserName graphql.String `json:"newParserName"`

	// Name of the repository. (Required)
	RepositoryName graphql.String `json:"repositoryName"`

	// Id of the parser to clone. (Required)
	ParserIDToClone graphql.String `json:"parserIdToClone"`
}

// ColumnChange represents whether a column has been added or removed at the given index.
type ColumnChange struct {

	// Kind of change. (Required)
	ChangeKind ColumnChangeKind `json:"changeKind"`

	// Index of column to change. (Required)
	Index graphql.Int `json:"index"`
}

// ConfigurationFilter
type ConfigurationFilter struct {

	// (Required)
	NewQuery graphql.String `json:"newQuery"`

	// (Optional)
	OldQuery *graphql.String `json:"oldQuery,omitempty"`
}

// ConflictResolutionConfiguration
type ConflictResolutionConfiguration struct {

	// (Required)
	EntityType AssetType `json:"entityType"`

	// (Required)
	EntityName graphql.String `json:"entityName"`

	// (Required)
	ConflictResolution MergeStrategy `json:"conflictResolution"`
}

// CreateActionFromTemplateInput represents data for creating an action from a yaml template.
type CreateActionFromTemplateInput struct {

	// Name of the view of the action. (Required)
	ViewName RepoOrViewName `json:"viewName"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// YAML specification of the action. (Required)
	YamlTemplate YAML `json:"yamlTemplate"`
}

// CreateAlert represents data for creating an alert.
type CreateAlert struct {

	// Name of the view of the alert. (Required)
	ViewName graphql.String `json:"viewName"`

	// Name of the alert. (Required)
	Name graphql.String `json:"name"`

	// LogScale query to execute. (Required)
	QueryString graphql.String `json:"queryString"`

	// Start of the relative time interval for the query. (Required)
	QueryStart graphql.String `json:"queryStart"`

	// Throttle time in milliseconds. (Required)
	ThrottleTimeMillis Long `json:"throttleTimeMillis"`

	// List of ids or names for actions to fire on query result. Actions in packages can be referred to as "packagescope/packagename:actionname". (Required)
	Actions []graphql.String `json:"actions"`

	// Description of the alert. (Optional)
	Description *graphql.String `json:"description,omitempty"`

	// Field to throttle on. (Optional)
	ThrottleField *graphql.String `json:"throttleField,omitempty"`

	// The alert will run with the permissions of the user corresponding to this id if the queryOwnershipType field is set to User. If the queryOwnershipType is set to Organization, whilst runAsUserId is set, this will result in an error. If not specified, the alert will run with the permissions of the calling user. It requires the 'ChangeTriggersToRunAsOtherUsers' permission to set this field to a user id different from the calling user. (Optional)
	RunAsUserID *graphql.String `json:"runAsUserId,omitempty"`

	// Flag indicating whether the alert is enabled. (Optional)
	Enabled *graphql.Boolean `json:"enabled,omitempty"`

	// Labels attached to the alert. (Optional)
	Labels *[]graphql.String `json:"labels,omitempty"`

	// Ownership of the query run by this alert. If value is User, ownership will be based on the runAsUserId field. (Optional)
	QueryOwnershipType *QueryOwnershipType `json:"queryOwnershipType,omitempty"`
}

// CreateAlertFromTemplateInput represents data for creating an alert from a yaml template.
type CreateAlertFromTemplateInput struct {

	// Name of the view of the alert. (Required)
	ViewName RepoOrViewName `json:"viewName"`

	// Name of the alert. (Required)
	Name graphql.String `json:"name"`

	// YAML specification of the alert. (Required)
	YamlTemplate YAML `json:"yamlTemplate"`
}

// CreateAwsS3SqsIngestFeed represents data for creating an ingest feed that uses AWS S3 and SQS.
type CreateAwsS3SqsIngestFeed struct {

	// Name of the repository of the ingest feed. (Required)
	RepositoryName RepoOrViewName `json:"repositoryName"`

	// Name of the ingest feed. (Required)
	Name graphql.String `json:"name"`

	// The id or name of the parser that should be used to parse the ingest feed. Parsers in packages can be referred to as: "packagescope/packagename:parsername". (Required)
	Parser graphql.String `json:"parser"`

	// How to authenticate to AWS. (Required)
	Authentication IngestFeedAwsAuthenticationInput `json:"authentication"`

	// AWS SQS queue url. (Required)
	SqsURL graphql.String `json:"sqsUrl"`

	// The AWS region to connect to. (Required)
	Region graphql.String `json:"region"`

	// Is ingest from the ingest feed enabled?. (Required)
	Enabled graphql.Boolean `json:"enabled"`

	// The preprocessing to apply to an ingest feed before parsing. (Required)
	Preprocessing IngestFeedPreprocessingInput `json:"preprocessing"`

	// Compression scheme of the file. (Required)
	Compression IngestFeedCompression `json:"compression"`

	// Description of the ingest feed. (Optional)
	Description *graphql.String `json:"description,omitempty"`
}

// CreateCustomLinkInteractionInput
type CreateCustomLinkInteractionInput struct {

	// (Required)
	Path graphql.String `json:"path"`

	// (Required)
	CustomLinkInteractionInput CustomLinkInteractionInput `json:"customLinkInteractionInput"`
}

// CreateDashboardFromTemplateV2Input represents data for creating a dashboard from a yaml specification.
type CreateDashboardFromTemplateV2Input struct {

	// Name of the view of the dashboard. (Required)
	ViewName RepoOrViewName `json:"viewName"`

	// Name of the dashboard. (Required)
	Name graphql.String `json:"name"`

	// YAML specification of the dashboard. (Required)
	YamlTemplate YAML `json:"yamlTemplate"`
}

// CreateDashboardInput
type CreateDashboardInput struct {

	// (Required)
	SearchDomainName graphql.String `json:"searchDomainName"`

	// (Required)
	Name graphql.String `json:"name"`

	// (Optional)
	Labels *[]graphql.String `json:"labels,omitempty"`

	// (Optional)
	Widgets *[]WidgetInput `json:"widgets,omitempty"`

	// (Optional)
	Links *[]LinkInput `json:"links,omitempty"`

	// (Optional)
	DefaultFilterID *graphql.String `json:"defaultFilterId,omitempty"`

	// (Optional)
	Filters *[]FilterInput `json:"filters,omitempty"`

	// (Optional)
	Parameters *[]ParameterInput `json:"parameters,omitempty"`

	// (Optional)
	Description *graphql.String `json:"description,omitempty"`

	// (Optional)
	UpdateFrequency *DashboardUpdateFrequencyInput `json:"updateFrequency,omitempty"`
}

// CreateDashboardLinkInteractionInput
type CreateDashboardLinkInteractionInput struct {

	// (Required)
	Path graphql.String `json:"path"`

	// (Required)
	DashboardLinkInteractionInput DashboardLinkInteractionInput `json:"dashboardLinkInteractionInput"`
}

// CreateEmailAction represents data for creating an email action.
type CreateEmailAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// List of email addresses to send an email to. (Required)
	Recipients []graphql.String `json:"recipients"`

	// Defines whether the action should use the configured proxy to make web requests. (Required)
	UseProxy graphql.Boolean `json:"useProxy"`

	// Subject of the email. Can be templated with values from the result. (Optional)
	SubjectTemplate *graphql.String `json:"subjectTemplate,omitempty"`

	// Body of the email. Can be templated with values from the result. (Optional)
	BodyTemplate *graphql.String `json:"bodyTemplate,omitempty"`

	// Whether the result set should be be attached as a CSV file. (Optional)
	AttachCsv *graphql.Boolean `json:"attachCsv,omitempty"`
}

// CreateEventForwardingRule represents data for creating an event forwarding rule.
type CreateEventForwardingRule struct {

	// The name of the repository that the event forwarding rule is for. (Required)
	RepoName graphql.String `json:"repoName"`

	// The query string for filtering and mapping the events to forward. (Required)
	QueryString graphql.String `json:"queryString"`

	// The id of the event forwarder. (Required)
	EventForwarderID graphql.String `json:"eventForwarderId"`

	// (Optional)
	LanguageVersion *LanguageVersionEnum `json:"languageVersion,omitempty"`
}

// CreateFdrFeed represents data for creating an FDR feed.
type CreateFdrFeed struct {

	// Name of the repository of the FDR feed. (Required)
	RepositoryName graphql.String `json:"repositoryName"`

	// Name of the FDR feed. (Required)
	Name graphql.String `json:"name"`

	// The id or name of the parser that should be used to parse the FDR data. We recommend using the FDR parser from the crowdstrike/fdr package, which can be referred to as "crowdstrike/fdr:FDR". (Required)
	Parser graphql.String `json:"parser"`

	// AWS client id of the FDR feed. (Required)
	ClientID graphql.String `json:"clientId"`

	// AWS client secret of the FDR feed. (Required)
	ClientSecret graphql.String `json:"clientSecret"`

	// AWS SQS queue url of the FDR feed. (Required)
	SqsURL graphql.String `json:"sqsUrl"`

	// AWS S3 Identifier of the FDR feed. (Required)
	S3Identifier graphql.String `json:"s3Identifier"`

	// Description of the FDR feed. (Optional)
	Description *graphql.String `json:"description,omitempty"`

	// Is ingest from the FDR feed enabled?. (Optional)
	Enabled *graphql.Boolean `json:"enabled,omitempty"`
}

// CreateFieldAliasSchemaInput
type CreateFieldAliasSchemaInput struct {

	// (Required)
	Name graphql.String `json:"name"`

	// (Required)
	Fields []SchemaFieldInput `json:"fields"`

	// (Optional)
	AliasMappings *[]AliasMappingInput `json:"aliasMappings,omitempty"`
}

// CreateFilterAlert represents data for creating a filter alert.
type CreateFilterAlert struct {

	// Name of the view of the filter alert. (Required)
	ViewName RepoOrViewName `json:"viewName"`

	// Name of the filter alert. (Required)
	Name graphql.String `json:"name"`

	// LogScale query to execute. (Required)
	QueryString graphql.String `json:"queryString"`

	// List of ids or names for actions to fire on query result. Actions in packages can be referred to as "packagescope/packagename:actionname". (Required)
	ActionIDsOrNames []graphql.String `json:"actionIdsOrNames"`

	// Ownership of the query run by this filter alert. If value is User, ownership will be based on the runAsUserId field. (Required)
	QueryOwnershipType QueryOwnershipType `json:"queryOwnershipType"`

	// Description of the filter alert. (Optional)
	Description *graphql.String `json:"description,omitempty"`

	// Labels attached to the filter alert. (Optional)
	Labels *[]graphql.String `json:"labels,omitempty"`

	// Flag indicating whether the filter alert is enabled. (Optional)
	Enabled *graphql.Boolean `json:"enabled,omitempty"`

	// Allowed number of action triggers per minute for the filter alert. Please note that the maximum allowed number of triggers can vary based on the chosen actions. (Optional)
	TriggerLimit *graphql.Int `json:"triggerLimit,omitempty"`

	// The filter alert will run with the permissions of the user corresponding to this id if the queryOwnershipType field is set to User. If the queryOwnershipType is set to Organization, whilst runAsUserId is set, this will result in an error. If not specified, the filter alert will run with the permissions of the calling user. It requires the 'ChangeTriggersToRunAsOtherUsers' permission to set this field to a user id different from the calling user. (Optional)
	RunAsUserID *graphql.String `json:"runAsUserId,omitempty"`
}

// CreateHumioRepoAction represents data for creating a Humio repo action.
type CreateHumioRepoAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// Humio ingest token for the dataspace that the action should ingest into. (Required)
	IngestToken graphql.String `json:"ingestToken"`
}

// CreateIngestListenerV3Input represents input data to create an ingest listener.
type CreateIngestListenerV3Input struct {

	// Name of the repository. (Required)
	RepositoryName graphql.String `json:"repositoryName"`

	// The TCP/UDP port the ingest listener will listen on. (Required)
	Port graphql.Int `json:"port"`

	// The kind of listener; TCP, UDP, Netflow/UDP, GELF/UDP, GELF/TCP. (Required)
	Protocol IngestListenerProtocol `json:"protocol"`

	// Name of the ingest listener. (Required)
	Name graphql.String `json:"name"`

	// The ip address that the ingest listener will bind to. (Required)
	BindInterface graphql.String `json:"bindInterface"`

	// Id or name of the parser to assign to the ingest listener. Parsers in packages can be referred to as "packagescope/packagename:parsername". (Required)
	Parser graphql.String `json:"parser"`

	// The charset used to decode the event stream. (Required)
	Charset graphql.String `json:"charset"`

	// The vHost name for the ingest listener. (Optional)
	VHost *graphql.Int `json:"vHost,omitempty"`
}

// CreateKafkaEventForwarder represents data for creating a Kafka event forwarder.
type CreateKafkaEventForwarder struct {

	// Name of the event forwarder. (Required)
	Name graphql.String `json:"name"`

	// Description of the event forwarder. (Required)
	Description graphql.String `json:"description"`

	// The Kafka producer configuration used to forward events in the form of properties (x.y.z=abc). See https://library.humio.com/humio-server/ingesting-data-event-forwarders.html#kafka-configuration. (Required)
	Properties graphql.String `json:"properties"`

	// The Kafka topic the events should be forwarded to. (Required)
	Topic graphql.String `json:"topic"`

	// Is the event forwarder enabled. (Optional)
	Enabled *graphql.Boolean `json:"enabled,omitempty"`
}

// CreateLocalFederatedConnectionInput represents data for creating a local federated connection.
type CreateLocalFederatedConnectionInput struct {

	// Name or id of the federated view to add the connection to. (Required)
	FederatedViewName graphql.String `json:"federatedViewName"`

	// Name or id of the local view to connect with. (Required)
	TargetViewName graphql.String `json:"targetViewName"`

	// Additional tags that can be used to filter queries. (Optional)
	Tags *[]FederatedConnectionInputTag `json:"tags,omitempty"`

	// Filter query that restricts the data visible through this connection. (Optional)
	QueryPrefix *graphql.String `json:"queryPrefix,omitempty"`
}

// CreateOpsGenieAction represents data for creating an OpsGenie action.
type CreateOpsGenieAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// OpsGenie webhook url to send the request to. (Required)
	APIURL graphql.String `json:"apiUrl"`

	// Key to authenticate with OpsGenie. (Required)
	GenieKey graphql.String `json:"genieKey"`

	// Defines whether the action should use the configured proxy to make web requests. (Required)
	UseProxy graphql.Boolean `json:"useProxy"`
}

// CreateOrUpdateExternalFunctionInput represents the specification of an external function.
type CreateOrUpdateExternalFunctionInput struct {

	// The name of the external function. (Required)
	Name graphql.String `json:"name"`

	// The URL for the external function. (Required)
	ProcedureURL graphql.String `json:"procedureURL"`

	// The parameter specifications for the external function. (Required)
	Parameters []ParameterSpecificationInput `json:"parameters"`

	// The description for the external function. (Required)
	Description graphql.String `json:"description"`

	// The kind of external function. This defines how the external function is executed. (Required)
	Kind KindInput `json:"kind"`
}

// CreateOrganizationPermissionTokenInput
type CreateOrganizationPermissionTokenInput struct {

	// (Required)
	Name graphql.String `json:"name"`

	// (Required)
	Permissions []OrganizationPermission `json:"permissions"`

	// (Optional)
	ExpireAt *Long `json:"expireAt,omitempty"`

	// (Optional)
	IPFilterID *graphql.String `json:"ipFilterId,omitempty"`
}

// CreatePagerDutyAction represents data for creating a PagerDuty action.
type CreatePagerDutyAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// Severity level to give to the message. (Required)
	Severity graphql.String `json:"severity"`

	// Routing key to authenticate with PagerDuty. (Required)
	RoutingKey graphql.String `json:"routingKey"`

	// Defines whether the action should use the configured proxy to make web requests. (Required)
	UseProxy graphql.Boolean `json:"useProxy"`
}

// CreateParserFromTemplateInput represents data for creating a parser from a yaml template.
type CreateParserFromTemplateInput struct {

	// Name of the view to install the parser in. (Required)
	ViewName RepoOrViewName `json:"viewName"`

	// Name of the parser. (Required)
	Name graphql.String `json:"name"`

	// YAML specification of the parser. (Required)
	YamlTemplate YAML `json:"yamlTemplate"`
}

// CreateParserInput
type CreateParserInput struct {

	// (Required)
	Name graphql.String `json:"name"`

	// (Required)
	TestData []graphql.String `json:"testData"`

	// (Required)
	SourceCode graphql.String `json:"sourceCode"`

	// (Required)
	RepositoryName graphql.String `json:"repositoryName"`

	// (Required)
	TagFields []graphql.String `json:"tagFields"`

	// (Required)
	Force graphql.Boolean `json:"force"`

	// (Optional)
	LanguageVersion *LanguageVersionEnum `json:"languageVersion,omitempty"`
}

// CreateParserInputV2 represents input for creating a parser.
type CreateParserInputV2 struct {

	// The name to use for the parser. (Required)
	Name graphql.String `json:"name"`

	// Test cases that can be used to help verify that the parser works as expected. (Required)
	TestCases []TestCaseInput `json:"testCases"`

	// The parser script that is executed for every incoming event. (Required)
	SourceCode graphql.String `json:"sourceCode"`

	// The repository where the parser lives. (Required)
	RepositoryName RepoOrViewName `json:"repositoryName"`

	// Any fields which the parser should convert to tags after an event is parsed. (Required)
	TagFields []graphql.String `json:"tagFields"`

	// Allows saving a parser with a name that is already in use, by overwriting the parser that previously had the name. (Optional)
	OverwriteExisting *graphql.Boolean `json:"overwriteExisting,omitempty"`

	// The version of the Humio query language to use. (Optional)
	LanguageVersion *LanguageVersionEnum `json:"languageVersion,omitempty"`
}

// CreatePersonalUserTokenInput
type CreatePersonalUserTokenInput struct {

	// (Optional)
	ExpireAt *Long `json:"expireAt,omitempty"`

	// (Optional)
	IPFilterID *graphql.String `json:"ipFilterId,omitempty"`
}

// CreatePostMessageSlackAction represents data for creating a post message Slack action.
type CreatePostMessageSlackAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// Api token to authenticate with Slack. (Required)
	APIToken graphql.String `json:"apiToken"`

	// List of Slack channels to message. (Required)
	Channels []graphql.String `json:"channels"`

	// Fields to include within the Slack message. Can be templated with values from the result. (Required)
	Fields []SlackFieldEntryInput `json:"fields"`

	// Defines whether the action should use the configured proxy to make web requests. (Required)
	UseProxy graphql.Boolean `json:"useProxy"`
}

// CreateRemoteFederatedConnectionInput represents data for creating a remote federated connection.
type CreateRemoteFederatedConnectionInput struct {

	// Name or id of the federated view to add the connection to. (Required)
	FederatedViewName graphql.String `json:"federatedViewName"`

	// Public URL of the remote cluster to connect with. (Required)
	PublicURL graphql.String `json:"publicUrl"`

	// Access token for the remote view to connect with. (Required)
	Token graphql.String `json:"token"`

	// Additional tags that can be used to filter queries. (Optional)
	Tags *[]FederatedConnectionInputTag `json:"tags,omitempty"`

	// Filter query that restricts the data visible through this connection. (Optional)
	QueryPrefix *graphql.String `json:"queryPrefix,omitempty"`
}

// CreateSavedQueryInput
type CreateSavedQueryInput struct {

	// (Required)
	Name graphql.String `json:"name"`

	// (Required)
	ViewName graphql.String `json:"viewName"`

	// (Required)
	QueryString graphql.String `json:"queryString"`

	// (Optional)
	Start *graphql.String `json:"start,omitempty"`

	// (Optional)
	End *graphql.String `json:"end,omitempty"`

	// (Optional)
	IsLive *graphql.Boolean `json:"isLive,omitempty"`

	// (Optional)
	WidgetType *graphql.String `json:"widgetType,omitempty"`

	// (Optional)
	Options *graphql.String `json:"options,omitempty"`

	// (Optional)
	DashboardLinkInteractions *[]DashboardLinkInteractionInput `json:"dashboardLinkInteractions,omitempty"`

	// (Optional)
	CustomLinkInteractions *[]CustomLinkInteractionInput `json:"customLinkInteractions,omitempty"`

	// (Optional)
	SearchLinkInteractions *[]SearchLinkInteractionInput `json:"searchLinkInteractions,omitempty"`

	// (Optional)
	UpdateParametersInteractions *[]UpdateParametersInteractionInput `json:"updateParametersInteractions,omitempty"`
}

// CreateScheduledSearch represents data for creating a scheduled search.
type CreateScheduledSearch struct {

	// Name of the view of the scheduled search. (Required)
	ViewName graphql.String `json:"viewName"`

	// Name of the scheduled search. (Required)
	Name graphql.String `json:"name"`

	// LogScale query to execute. (Required)
	QueryString graphql.String `json:"queryString"`

	// Start of the relative time interval for the query. (Required)
	QueryStart graphql.String `json:"queryStart"`

	// End of the relative time interval for the query. (Required)
	QueryEnd graphql.String `json:"queryEnd"`

	// Cron pattern describing the schedule to execute the query on. (Required)
	Schedule graphql.String `json:"schedule"`

	// Time zone of the schedule. Currently this field only supports UTC offsets like 'UTC', 'UTC-01' or 'UTC+12:45'. (Required)
	TimeZone graphql.String `json:"timeZone"`

	// User-defined limit, which caps the number of missed searches to backfill, e.g. in the event of a shutdown. (Required)
	BackfillLimit graphql.Int `json:"backfillLimit"`

	// List of ids or names for actions to fire on query result. Actions in packages can be referred to as "packagescope/packagename:actionname". (Required)
	Actions []graphql.String `json:"actions"`

	// Description of the scheduled search. (Optional)
	Description *graphql.String `json:"description,omitempty"`

	// Flag indicating whether the scheduled search is enabled. (Optional)
	Enabled *graphql.Boolean `json:"enabled,omitempty"`

	// Labels attached to the scheduled search. (Optional)
	Labels *[]graphql.String `json:"labels,omitempty"`

	// The scheduled search will run with the permissions of the user corresponding to this id if the queryOwnershipType field is set to User. If the queryOwnershipType is set to Organization, whilst runAsUserId is set, this will result in an error. If not specified, the scheduled search will run with the permissions of the calling user. It requires the 'ChangeTriggersToRunAsOtherUsers' permission to set this field to a user id different from the calling user. (Optional)
	RunAsUserID *graphql.String `json:"runAsUserId,omitempty"`

	// Ownership of the query run by this scheduled search. If value is User, ownership will be based on the runAsUserId field. (Optional)
	QueryOwnershipType *QueryOwnershipType `json:"queryOwnershipType,omitempty"`
}

// CreateScheduledSearchFromTemplateInput represents data for creating a scheduled search from a yaml template.
type CreateScheduledSearchFromTemplateInput struct {

	// Name of the view of the scheduled search. (Required)
	ViewName RepoOrViewName `json:"viewName"`

	// Name of the scheduled search. (Required)
	Name graphql.String `json:"name"`

	// YAML specification of the scheduled search. (Required)
	YamlTemplate YAML `json:"yamlTemplate"`
}

// CreateSearchLinkInteractionInput
type CreateSearchLinkInteractionInput struct {

	// (Required)
	Path graphql.String `json:"path"`

	// (Required)
	SearchLinkInteractionInput SearchLinkInteractionInput `json:"searchLinkInteractionInput"`
}

// CreateSlackAction represents data for creating a Slack action.
type CreateSlackAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// Slack webhook url to send the request to. (Required)
	URL graphql.String `json:"url"`

	// Fields to include within the Slack message. Can be templated with values from the result. (Required)
	Fields []SlackFieldEntryInput `json:"fields"`

	// Defines whether the action should use the configured proxy to make web requests. (Required)
	UseProxy graphql.Boolean `json:"useProxy"`
}

// CreateSystemPermissionTokenInput
type CreateSystemPermissionTokenInput struct {

	// (Required)
	Name graphql.String `json:"name"`

	// (Required)
	Permissions []SystemPermission `json:"permissions"`

	// (Optional)
	ExpireAt *Long `json:"expireAt,omitempty"`

	// (Optional)
	IPFilterID *graphql.String `json:"ipFilterId,omitempty"`
}

// CreateUploadFileAction represents data for creating an upload file action.
type CreateUploadFileAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// File name for the uploaded file. (Required)
	FileName graphql.String `json:"fileName"`
}

// CreateVictorOpsAction represents data for creating a VictorOps action.
type CreateVictorOpsAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// Type of the VictorOps message to make. (Required)
	MessageType graphql.String `json:"messageType"`

	// VictorOps webhook url to send the request to. (Required)
	NotifyURL graphql.String `json:"notifyUrl"`

	// Defines whether the action should use the configured proxy to make web requests. (Required)
	UseProxy graphql.Boolean `json:"useProxy"`
}

// CreateViewPermissionsTokenInput
type CreateViewPermissionsTokenInput struct {

	// (Required)
	Name graphql.String `json:"name"`

	// (Required)
	ViewIDs []graphql.String `json:"viewIds"`

	// (Required)
	Permissions []Permission `json:"permissions"`

	// (Optional)
	ExpireAt *Long `json:"expireAt,omitempty"`

	// (Optional)
	IPFilterID *graphql.String `json:"ipFilterId,omitempty"`
}

// CreateWebhookAction represents data for creating a webhook action.
type CreateWebhookAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// Url to send the http(s) request to. (Required)
	URL graphql.String `json:"url"`

	// Method to use for the request. (Required)
	Method graphql.String `json:"method"`

	// Headers of the http(s) request. (Required)
	Headers []HttpHeaderEntryInput `json:"headers"`

	// Body of the http(s) request. Can be templated with values from the result. (Required)
	BodyTemplate graphql.String `json:"bodyTemplate"`

	// Flag indicating whether SSL should be ignored for the request. (Required)
	IgnoreSSL graphql.Boolean `json:"ignoreSSL"`

	// Defines whether the action should use the configured proxy to make web requests. (Required)
	UseProxy graphql.Boolean `json:"useProxy"`
}

// CustomLinkInteractionInput
type CustomLinkInteractionInput struct {

	// (Required)
	Name graphql.String `json:"name"`

	// (Required)
	URLTemplate graphql.String `json:"urlTemplate"`

	// (Required)
	OpenInNewTab graphql.Boolean `json:"openInNewTab"`

	// (Optional)
	TitleTemplate *graphql.String `json:"titleTemplate,omitempty"`

	// (Optional)
	URLEncodeArgs *graphql.Boolean `json:"urlEncodeArgs,omitempty"`

	// (Optional)
	FieldInteractionConditions *[]FieldInteractionConditionInput `json:"fieldInteractionConditions,omitempty"`
}

// DashboardLinkInteractionInput
type DashboardLinkInteractionInput struct {

	// (Required)
	Name graphql.String `json:"name"`

	// (Required)
	Arguments []ArgumentInput `json:"arguments"`

	// (Required)
	OpenInNewTab graphql.Boolean `json:"openInNewTab"`

	// (Required)
	UseWidgetTimeWindow graphql.Boolean `json:"useWidgetTimeWindow"`

	// (Optional)
	TitleTemplate *graphql.String `json:"titleTemplate,omitempty"`

	// (Optional)
	DashboardID *graphql.String `json:"dashboardId,omitempty"`

	// (Optional)
	DashboardName *graphql.String `json:"dashboardName,omitempty"`

	// (Optional)
	DashboardRepoOrViewName *RepoOrViewName `json:"dashboardRepoOrViewName,omitempty"`

	// (Optional)
	PackageSpecifier *UnversionedPackageSpecifier `json:"packageSpecifier,omitempty"`

	// (Optional)
	FieldInteractionConditions *[]FieldInteractionConditionInput `json:"fieldInteractionConditions,omitempty"`
}

// DashboardUpdateFrequencyInput
type DashboardUpdateFrequencyInput struct {

	// (Required)
	UpdateFrequencyType DashboardUpdateFrequency `json:"updateFrequencyType"`
}

// DeleteAction represents data for deleting an action.
type DeleteAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Id of the action. (Required)
	ID graphql.String `json:"id"`
}

// DeleteAlert represents data for deleting an alert.
type DeleteAlert struct {

	// Name of the view of the alert. (Required)
	ViewName graphql.String `json:"viewName"`

	// Id of the alert. (Required)
	ID graphql.String `json:"id"`
}

// DeleteDashboardInput
type DeleteDashboardInput struct {

	// (Required)
	ID graphql.String `json:"id"`
}

// DeleteDashboardInputV2 represents the data for deleting a dashboard.
type DeleteDashboardInputV2 struct {

	// The viewId containing the dashboard to delete. (Required)
	ViewID graphql.String `json:"viewId"`

	// The dashboardId to delete. (Required)
	DashboardID graphql.String `json:"dashboardId"`
}

// DeleteEventForwarderInput represents data for deleting an event forwarder.
type DeleteEventForwarderInput struct {

	// Id of the event forwarder. (Required)
	ID graphql.String `json:"id"`
}

// DeleteEventForwardingRule represents data for deleting an event forwarding rule.
type DeleteEventForwardingRule struct {

	// The name of the repository that the event forwarding rule is for. (Required)
	RepoName graphql.String `json:"repoName"`

	// The unique id for the event forwarding rule. (Required)
	ID graphql.String `json:"id"`
}

// DeleteFdrFeed represents data for deleting an FDR feed.
type DeleteFdrFeed struct {

	// Name of the repository of the FDR feed. (Required)
	RepositoryName graphql.String `json:"repositoryName"`

	// Id of the FDR feed. (Required)
	ID graphql.String `json:"id"`
}

// DeleteFederatedConnectionInput represents data for deleting a federated connection.
type DeleteFederatedConnectionInput struct {

	// Name or id of the federated view to delete the connection from. (Required)
	FederatedViewName graphql.String `json:"federatedViewName"`

	// Id of the connection to delete. (Required)
	ConnectionID graphql.String `json:"connectionId"`
}

// DeleteFieldAliasSchema
type DeleteFieldAliasSchema struct {

	// (Required)
	SchemaID graphql.String `json:"schemaId"`
}

// DeleteFilterAlert represents data for deleting a filter alert.
type DeleteFilterAlert struct {

	// Name of the view of the filter alert. (Required)
	ViewName RepoOrViewName `json:"viewName"`

	// Id of the filter alert. (Required)
	ID graphql.String `json:"id"`
}

// DeleteIngestFeed represents data for deleting an ingest feed.
type DeleteIngestFeed struct {

	// Name of the repository of the ingest feed. (Required)
	RepositoryName RepoOrViewName `json:"repositoryName"`

	// Id of the ingest feed. (Required)
	ID graphql.String `json:"id"`
}

// DeleteInteractionInput
type DeleteInteractionInput struct {

	// (Required)
	Path graphql.String `json:"path"`

	// (Required)
	ID graphql.String `json:"id"`
}

// DeleteSavedQueryInput
type DeleteSavedQueryInput struct {

	// (Required)
	ID graphql.String `json:"id"`

	// (Required)
	ViewName graphql.String `json:"viewName"`
}

// DeleteScheduledSearch represents data for deleting a scheduled search.
type DeleteScheduledSearch struct {

	// Name of the view of the scheduled search. (Required)
	ViewName graphql.String `json:"viewName"`

	// Id of the scheduled search. (Required)
	ID graphql.String `json:"id"`
}

// DeleteSearchDomainByIdInput
type DeleteSearchDomainByIdInput struct {

	// The id of the search domain. (Required)
	ID graphql.String `json:"id"`

	// Optional message to why the search domain was deleted. Will be added to the audit log. (Optional)
	DeleteMessage *graphql.String `json:"deleteMessage,omitempty"`
}

// DisableAlert represents data for disabling an alert.
type DisableAlert struct {

	// Name of the view of the alert. (Required)
	ViewName RepoOrViewName `json:"viewName"`

	// Id of the alert. (Required)
	ID graphql.String `json:"id"`
}

// DisableEventForwarderInput represents data for disabling an event forwarder.
type DisableEventForwarderInput struct {

	// Id of the event forwarder. (Required)
	ID graphql.String `json:"id"`
}

// DisableFieldAliasSchemaOnOrgInput
type DisableFieldAliasSchemaOnOrgInput struct {

	// (Required)
	SchemaID graphql.String `json:"schemaId"`
}

// DisableFieldAliasSchemaOnViewInput
type DisableFieldAliasSchemaOnViewInput struct {

	// (Required)
	ViewName graphql.String `json:"viewName"`

	// (Required)
	SchemaID graphql.String `json:"schemaId"`
}

// DisableFilterAlert represents data for disabling a filter alert.
type DisableFilterAlert struct {

	// Name of the view of the filter alert. (Required)
	ViewName RepoOrViewName `json:"viewName"`

	// Id of the filter alert. (Required)
	ID graphql.String `json:"id"`
}

// DisableOrganizationIocAccess represents data for disabling access to IOCs (indicators of compromise) for an organization.
type DisableOrganizationIocAccess struct {

	// Id of organization. (Required)
	OrganizationID graphql.String `json:"organizationId"`
}

// DisableStarScheduledSearch represents data for disabling a scheduled search.
type DisableStarScheduledSearch struct {

	// Name of the view of the scheduled search. (Required)
	ViewName graphql.String `json:"viewName"`

	// Id of the scheduled search. (Required)
	ID graphql.String `json:"id"`
}

// DynamicConfigInputObject
type DynamicConfigInputObject struct {

	// (Required)
	Config DynamicConfig `json:"config"`

	// (Required)
	Value graphql.String `json:"value"`
}

// EnableAlert represents data for enabling an alert.
type EnableAlert struct {

	// Name of the view of the alert. (Required)
	ViewName RepoOrViewName `json:"viewName"`

	// Id of the alert. (Required)
	ID graphql.String `json:"id"`
}

// EnableEventForwarderInput represents data for enabling an event forwarder.
type EnableEventForwarderInput struct {

	// Id of the event forwarder. (Required)
	ID graphql.String `json:"id"`
}

// EnableFieldAliasSchemaOnOrgInput
type EnableFieldAliasSchemaOnOrgInput struct {

	// (Required)
	SchemaID graphql.String `json:"schemaId"`
}

// EnableFieldAliasSchemaOnViewInput
type EnableFieldAliasSchemaOnViewInput struct {

	// (Required)
	ViewName graphql.String `json:"viewName"`

	// (Required)
	SchemaID graphql.String `json:"schemaId"`
}

// EnableFilterAlert represents data for enabling a filter alert.
type EnableFilterAlert struct {

	// Name of the view of the filter alert. (Required)
	ViewName RepoOrViewName `json:"viewName"`

	// Id of the filter alert. (Required)
	ID graphql.String `json:"id"`
}

// EnableOrganizationIocAccess represents data for enabling access to IOCs (indicators of compromise) for an organization.
type EnableOrganizationIocAccess struct {

	// Id of organization. (Required)
	OrganizationID graphql.String `json:"organizationId"`
}

// EnableStarScheduledSearch represents data for enabling a scheduled search.
type EnableStarScheduledSearch struct {

	// Name of the view of the scheduled search. (Required)
	ViewName graphql.String `json:"viewName"`

	// Id of the scheduled search. (Required)
	ID graphql.String `json:"id"`
}

// EnableWorkerQueryTracingInputType
type EnableWorkerQueryTracingInputType struct {

	// The quota key to enable tracing for. All queries belonging to this quota key will be traced. (Required)
	QuotaKey graphql.String `json:"quotaKey"`

	// The end timestamp for tracing. Tracing for this quota key will be disabled automatically once this time is reached. Will be clamped to be at most 15 minutes in the future. (Required)
	Expiry DateTime `json:"expiry"`
}

// EnabledInput represents enable or disable language restrictions.
type EnabledInput struct {

	// (Required)
	Version LanguageVersionEnum `json:"version"`

	// (Required)
	Enabled graphql.Boolean `json:"enabled"`
}

// EnforceSubdomainsInput
type EnforceSubdomainsInput struct {

	// (Required)
	Enforce graphql.Boolean `json:"enforce"`
}

// EntitySearchInputType
type EntitySearchInputType struct {

	// (Optional)
	SearchTerm *graphql.String `json:"searchTerm,omitempty"`

	// (Optional)
	PageSize *graphql.Int `json:"pageSize,omitempty"`

	// (Optional)
	PageBefore *graphql.String `json:"pageBefore,omitempty"`

	// (Optional)
	PageAfter *graphql.String `json:"pageAfter,omitempty"`

	// (Optional)
	Paths *[]graphql.String `json:"paths,omitempty"`

	// (Optional)
	SortBy *[]EntitySearchSortInfoType `json:"sortBy,omitempty"`
}

// EntitySearchSortInfoType
type EntitySearchSortInfoType struct {

	// (Required)
	Name graphql.String `json:"name"`

	// (Required)
	Order EntitySearchSortOrderType `json:"order"`
}

// FederatedConnectionInputTag
type FederatedConnectionInputTag struct {

	// (Required)
	Key graphql.String `json:"key"`

	// (Required)
	Value graphql.String `json:"value"`
}

// FieldConfigurationInput
type FieldConfigurationInput struct {

	// (Required)
	ViewID graphql.String `json:"viewId"`

	// (Required)
	FieldName graphql.String `json:"fieldName"`

	// (Required)
	JSON JSON `json:"json"`
}

// FieldInteractionConditionInput
type FieldInteractionConditionInput struct {

	// (Required)
	FieldName graphql.String `json:"fieldName"`

	// (Required)
	Operator FieldConditionOperatorType `json:"operator"`

	// (Required)
	Argument graphql.String `json:"argument"`
}

// FileFieldFilterType represents a field in a file and what value the field should have for a given entry to pass the filter.
type FileFieldFilterType struct {

	// (Required)
	Field graphql.String `json:"field"`

	// (Required)
	Values []graphql.String `json:"values"`
}

// FilterInput
type FilterInput struct {

	// (Required)
	ID graphql.String `json:"id"`

	// (Required)
	Name graphql.String `json:"name"`

	// (Required)
	Prefix graphql.String `json:"prefix"`
}

// FunctionListInput represents input list of function names.
type FunctionListInput struct {

	// (Required)
	Version LanguageVersionEnum `json:"version"`

	// (Required)
	Functions []graphql.String `json:"functions"`
}

// GenerateAlertFromPackageTemplateInput represents data for generating an unsaved alert object from a library package template.
type GenerateAlertFromPackageTemplateInput struct {

	// Name of the view of the alert. (Required)
	ViewName RepoOrViewName `json:"viewName"`

	// The id of the package that the alert was installed as part of. (Required)
	PackageID VersionedPackageSpecifier `json:"packageId"`

	// The name of the alert template in the package. (Required)
	TemplateName graphql.String `json:"templateName"`
}

// GenerateAlertFromTemplateInput represents data for generating an unsaved alert object from a yaml template.
type GenerateAlertFromTemplateInput struct {

	// Name of the view of the alert. (Required)
	ViewName RepoOrViewName `json:"viewName"`

	// YAML specification of the alert. (Required)
	YamlTemplate YAML `json:"yamlTemplate"`
}

// GenerateFilterAlertFromPackageTemplateInput represents data for generating an unsaved filter alert object from a library package template.
type GenerateFilterAlertFromPackageTemplateInput struct {

	// Name of the view of the filter alert. (Required)
	ViewName RepoOrViewName `json:"viewName"`

	// The id of the package of the filter alert template. (Required)
	PackageID VersionedPackageSpecifier `json:"packageId"`

	// The name of the filter alert template in the package. (Required)
	TemplateName graphql.String `json:"templateName"`
}

// GenerateFilterAlertFromTemplateInput represents data for generating an unsaved filter alert object from a yaml template.
type GenerateFilterAlertFromTemplateInput struct {

	// Name of the view of the filter alert. (Required)
	ViewName RepoOrViewName `json:"viewName"`

	// YAML specification of the filter alert. (Required)
	YamlTemplate YAML `json:"yamlTemplate"`
}

// GenerateScheduledSearchFromPackageTemplateInput represents data for generating an unsaved scheduled search object from a library package template.
type GenerateScheduledSearchFromPackageTemplateInput struct {

	// Name of the view of the scheduled search. (Required)
	ViewName RepoOrViewName `json:"viewName"`

	// The id of the package that the scheduled search was installed as part of. (Required)
	PackageID VersionedPackageSpecifier `json:"packageId"`

	// The name of the scheduled search template in the package. (Required)
	TemplateName graphql.String `json:"templateName"`
}

// GenerateScheduledSearchFromTemplateInput represents data for generating an unsaved scheduled search object from a yaml templat.
type GenerateScheduledSearchFromTemplateInput struct {

	// Name of the view of the scheduled search. (Required)
	ViewName RepoOrViewName `json:"viewName"`

	// YAML specification of the scheduled search. (Required)
	YamlTemplate YAML `json:"yamlTemplate"`
}

// GetExternalFunctionInput represents the input required to get an external function specification.
type GetExternalFunctionInput struct {

	// The name of the external function to fetch. (Required)
	Name graphql.String `json:"name"`

	// The view the external function should be accessible on. (Required)
	View graphql.String `json:"view"`
}

// GroupRoleAssignment
type GroupRoleAssignment struct {

	// (Required)
	GroupID graphql.String `json:"groupId"`

	// (Required)
	RoleID graphql.String `json:"roleId"`
}

// HttpHeaderEntryInput represents http(s) Header entry.
type HttpHeaderEntryInput struct {

	// Key of a http(s) header. (Required)
	Header graphql.String `json:"header"`

	// Value of a http(s) header. (Required)
	Value graphql.String `json:"value"`
}

// IPFilterIdInput
type IPFilterIdInput struct {

	// (Required)
	ID graphql.String `json:"id"`
}

// IPFilterInput
type IPFilterInput struct {

	// (Required)
	Name graphql.String `json:"name"`

	// (Required)
	IPFilter graphql.String `json:"ipFilter"`
}

// IPFilterUpdateInput
type IPFilterUpdateInput struct {

	// (Required)
	ID graphql.String `json:"id"`

	// (Optional)
	Name *graphql.String `json:"name,omitempty"`

	// (Optional)
	IPFilter *graphql.String `json:"ipFilter,omitempty"`
}

// IngestFeedAwsAuthenticationInput represents how to authenticate to AWS.
type IngestFeedAwsAuthenticationInput struct {

	// (Required)
	Kind IngestFeedAwsAuthenticationKind `json:"kind"`

	// Arn of the role to be assumed. (Optional)
	RoleArn *graphql.String `json:"roleArn,omitempty"`
}

// IngestFeedPreprocessingInput represents the preprocessing to apply to an ingest feed before parsing.
type IngestFeedPreprocessingInput struct {

	// (Required)
	Kind IngestFeedPreprocessingKind `json:"kind"`
}

// IngestPartitionInput
type IngestPartitionInput struct {

	// (Required)
	ID graphql.Int `json:"id"`

	// (Required)
	NodeIDs []graphql.Int `json:"nodeIds"`
}

// InputData
type InputData struct {

	// (Required)
	ID graphql.String `json:"id"`
}

// InputDictionaryEntry
type InputDictionaryEntry struct {

	// (Required)
	Key graphql.String `json:"key"`

	// (Required)
	Value graphql.String `json:"value"`
}

// InstallPackageFromRegistryInput
type InstallPackageFromRegistryInput struct {

	// (Required)
	ViewName RepoOrViewName `json:"viewName"`

	// (Required)
	PackageID VersionedPackageSpecifier `json:"packageId"`

	// (Optional)
	QueryOwnershipType *QueryOwnershipType `json:"queryOwnershipType,omitempty"`
}

// KindInput represents defines how the external function is executed.
type KindInput struct {

	// The name of the kind of external function. (Required)
	Name KindEnum `json:"name"`

	// The parameters that specify the key fields. Use for the 'Enrichment' functions. (Optional)
	ParametersDefiningKeyFields *[]graphql.String `json:"parametersDefiningKeyFields,omitempty"`

	// The names of the keys when they're returned from the external function. Use for the 'Enrichment' functions. (Optional)
	FixedKeyFields *[]graphql.String `json:"fixedKeyFields,omitempty"`
}

// LanguageVersionInputType represents a specific language version.
type LanguageVersionInputType struct {

	// The name of the language version. (Required)
	Name graphql.String `json:"name"`
}

// LinkInput
type LinkInput struct {

	// (Required)
	Name graphql.String `json:"name"`

	// (Required)
	Token graphql.String `json:"token"`
}

// LoginBridgeInput
type LoginBridgeInput struct {

	// (Required)
	Name graphql.String `json:"name"`

	// (Required)
	Description graphql.String `json:"description"`

	// (Required)
	Issuer graphql.String `json:"issuer"`

	// (Required)
	RemoteID graphql.String `json:"remoteId"`

	// (Required)
	LoginURL graphql.String `json:"loginUrl"`

	// (Required)
	RelayStateURL graphql.String `json:"relayStateUrl"`

	// (Required)
	SamlEntityID graphql.String `json:"samlEntityId"`

	// (Required)
	PrivateSamlCertificate graphql.String `json:"privateSamlCertificate"`

	// (Required)
	PublicSamlCertificate graphql.String `json:"publicSamlCertificate"`

	// (Required)
	AllowedUsers []graphql.String `json:"allowedUsers"`

	// (Required)
	GroupAttribute graphql.String `json:"groupAttribute"`

	// (Required)
	Groups []graphql.String `json:"groups"`

	// (Required)
	OrganizationIDAttributeName graphql.String `json:"organizationIdAttributeName"`

	// (Required)
	GenerateUserName graphql.Boolean `json:"generateUserName"`

	// (Required)
	TermsDescription graphql.String `json:"termsDescription"`

	// (Required)
	TermsLink graphql.String `json:"termsLink"`

	// (Optional)
	AdditionalAttributes *graphql.String `json:"additionalAttributes,omitempty"`

	// (Optional)
	OrganizationNameAttribute *graphql.String `json:"organizationNameAttribute,omitempty"`
}

// LoginBridgeUpdateInput
type LoginBridgeUpdateInput struct {

	// (Optional)
	Name *graphql.String `json:"name,omitempty"`

	// (Optional)
	Description *graphql.String `json:"description,omitempty"`

	// (Optional)
	Issuer *graphql.String `json:"issuer,omitempty"`

	// (Optional)
	RemoteID *graphql.String `json:"remoteId,omitempty"`

	// (Optional)
	LoginURL *graphql.String `json:"loginUrl,omitempty"`

	// (Optional)
	RelayStateURL *graphql.String `json:"relayStateUrl,omitempty"`

	// (Optional)
	SamlEntityID *graphql.String `json:"samlEntityId,omitempty"`

	// (Optional)
	PrivateSamlCertificate *graphql.String `json:"privateSamlCertificate,omitempty"`

	// (Optional)
	PublicSamlCertificate *graphql.String `json:"publicSamlCertificate,omitempty"`

	// (Optional)
	AllowedUsers *[]graphql.String `json:"allowedUsers,omitempty"`

	// (Optional)
	GroupAttribute *graphql.String `json:"groupAttribute,omitempty"`

	// (Optional)
	Groups *[]graphql.String `json:"groups,omitempty"`

	// (Optional)
	OrganizationIDAttributeName *graphql.String `json:"organizationIdAttributeName,omitempty"`

	// (Optional)
	AdditionalAttributes *graphql.String `json:"additionalAttributes,omitempty"`

	// (Optional)
	OrganizationNameAttribute *graphql.String `json:"organizationNameAttribute,omitempty"`

	// (Optional)
	GenerateUserName *graphql.Boolean `json:"generateUserName,omitempty"`

	// (Optional)
	TermsDescription *graphql.String `json:"termsDescription,omitempty"`

	// (Optional)
	TermsLink *graphql.String `json:"termsLink,omitempty"`
}

// MarkLimitDeletedInput
type MarkLimitDeletedInput struct {

	// (Required)
	LimitName graphql.String `json:"limitName"`

	// (Required)
	Deleted graphql.Boolean `json:"deleted"`
}

// MigrateLimitsInput
type MigrateLimitsInput struct {

	// (Required)
	CreateLogLimit graphql.Boolean `json:"createLogLimit"`

	// (Optional)
	DefaultLimit *graphql.String `json:"defaultLimit,omitempty"`
}

// NotificationInput
type NotificationInput struct {

	// (Required)
	Message graphql.String `json:"message"`

	// (Required)
	Target Targets `json:"target"`

	// (Required)
	Title graphql.String `json:"title"`

	// (Required)
	Dismissable graphql.Boolean `json:"dismissable"`

	// (Required)
	Severity NotificationSeverity `json:"severity"`

	// (Required)
	NotificationType NotificationTypes `json:"notificationType"`

	// (Optional)
	IDs *[]graphql.String `json:"ids,omitempty"`

	// (Optional)
	Link *graphql.String `json:"link,omitempty"`

	// (Optional)
	LinkDescription *graphql.String `json:"linkDescription,omitempty"`
}

// OidcConfigurationInput
type OidcConfigurationInput struct {

	// (Required)
	Name graphql.String `json:"name"`

	// (Required)
	ClientID graphql.String `json:"clientID"`

	// (Required)
	ClientSecret graphql.String `json:"clientSecret"`

	// (Required)
	Issuer graphql.String `json:"issuer"`

	// (Required)
	TokenEndpointAuthMethod graphql.String `json:"tokenEndpointAuthMethod"`

	// (Required)
	AuthorizationEndpoint graphql.String `json:"authorizationEndpoint"`

	// (Required)
	Domains []graphql.String `json:"domains"`

	// (Required)
	Scopes []graphql.String `json:"scopes"`

	// (Required)
	EnableDebug graphql.Boolean `json:"enableDebug"`

	// (Optional)
	TokenEndpoint *graphql.String `json:"tokenEndpoint,omitempty"`

	// (Optional)
	UserInfoEndpoint *graphql.String `json:"userInfoEndpoint,omitempty"`

	// (Optional)
	RegistrationEndpoint *graphql.String `json:"registrationEndpoint,omitempty"`

	// (Optional)
	GroupsClaim *graphql.String `json:"groupsClaim,omitempty"`

	// (Optional)
	JWKSEndpoint *graphql.String `json:"JWKSEndpoint,omitempty"`

	// (Optional)
	UserClaim *graphql.String `json:"userClaim,omitempty"`

	// (Optional)
	DefaultIdp *graphql.Boolean `json:"defaultIdp,omitempty"`

	// (Optional)
	HumioOwned *graphql.Boolean `json:"humioOwned,omitempty"`

	// (Optional)
	LazyCreateUsers *graphql.Boolean `json:"lazyCreateUsers,omitempty"`
}

// OrderByUserFieldInput
type OrderByUserFieldInput struct {

	// (Required)
	UserField OrderByUserField `json:"userField"`

	// (Required)
	Order OrderByDirection `json:"order"`
}

// OrganizationLimitsInput
type OrganizationLimitsInput struct {

	// Ingest in bytes. (Required)
	Ingest Long `json:"ingest"`

	// Retention in days. (Required)
	Retention graphql.Int `json:"retention"`

	// (Required)
	Users graphql.Int `json:"users"`

	// (Required)
	Expiration Long `json:"expiration"`

	// (Optional)
	AllowSelfService *graphql.Boolean `json:"allowSelfService,omitempty"`

	// (Optional)
	ContractVersion *Organizations__ContractVersion `json:"contractVersion,omitempty"`
}

// ParameterFilePropertiesInput
type ParameterFilePropertiesInput struct {

	// (Required)
	FileName graphql.String `json:"fileName"`

	// (Required)
	ValueColumn graphql.String `json:"valueColumn"`

	// (Required)
	ValueFilters []ParameterFileValueFilter `json:"valueFilters"`

	// (Optional)
	LabelColumn *graphql.String `json:"labelColumn,omitempty"`

	// (Optional)
	InvalidInputPatterns *[]graphql.String `json:"invalidInputPatterns,omitempty"`

	// (Optional)
	InvalidInputMessage *graphql.String `json:"invalidInputMessage,omitempty"`
}

// ParameterFileValueFilter
type ParameterFileValueFilter struct {

	// (Required)
	Field graphql.String `json:"field"`

	// (Required)
	Values []graphql.String `json:"values"`
}

// ParameterFixedListOption
type ParameterFixedListOption struct {

	// (Required)
	Label graphql.String `json:"label"`

	// (Required)
	Value graphql.String `json:"value"`
}

// ParameterFixedListPropertiesInput
type ParameterFixedListPropertiesInput struct {

	// (Required)
	Values []ParameterFixedListOption `json:"values"`
}

// ParameterFreeTextPropertiesInput
type ParameterFreeTextPropertiesInput struct {

	// (Optional)
	InvalidInputPatterns *[]graphql.String `json:"invalidInputPatterns,omitempty"`

	// (Optional)
	InvalidInputMessage *graphql.String `json:"invalidInputMessage,omitempty"`
}

// ParameterInput
type ParameterInput struct {

	// (Required)
	ID graphql.String `json:"id"`

	// (Required)
	Label graphql.String `json:"label"`

	// (Optional)
	DefaultValue *graphql.String `json:"defaultValue,omitempty"`

	// (Optional)
	Order *graphql.Int `json:"order,omitempty"`

	// (Optional)
	FreeTextOptions *ParameterFreeTextPropertiesInput `json:"freeTextOptions,omitempty"`

	// (Optional)
	QueryOptions *ParameterQueryPropertiesInput `json:"queryOptions,omitempty"`

	// (Optional)
	FixedListOptions *ParameterFixedListPropertiesInput `json:"fixedListOptions,omitempty"`

	// (Optional)
	FileOptions *ParameterFilePropertiesInput `json:"fileOptions,omitempty"`

	// [PREVIEW: The multi-value parameters feature is still in development.]. (Optional)
	IsMultiParam *graphql.Boolean `json:"isMultiParam,omitempty"`

	// [PREVIEW: The multi-value parameters feature is still in development.]. (Optional)
	DefaultMultiValues *[]graphql.String `json:"defaultMultiValues,omitempty"`
}

// ParameterQueryPropertiesInput
type ParameterQueryPropertiesInput struct {

	// (Required)
	QueryString graphql.String `json:"queryString"`

	// (Required)
	TimeWindow graphql.String `json:"timeWindow"`

	// (Required)
	OptionValueField graphql.String `json:"optionValueField"`

	// (Required)
	OptionLabelField graphql.String `json:"optionLabelField"`

	// (Required)
	UseDashboardTimeIfSet graphql.Boolean `json:"useDashboardTimeIfSet"`

	// (Optional)
	InvalidInputPatterns *[]graphql.String `json:"invalidInputPatterns,omitempty"`

	// (Optional)
	InvalidInputMessage *graphql.String `json:"invalidInputMessage,omitempty"`
}

// ParameterSpecificationInput represents the specification of a parameter.
type ParameterSpecificationInput struct {

	// The name of the parameter. (Required)
	Name graphql.String `json:"name"`

	// The type of the parameter". (Required)
	ParameterType ParameterTypeEnum `json:"parameterType"`

	// Restricts the smallest allowed value for parameters of type Long. (Optional)
	MinLong *Long `json:"minLong,omitempty"`

	// Restricts the largest allowed value for parameters of type Long. (Optional)
	MaxLong *Long `json:"maxLong,omitempty"`

	// Restricts the smallest allowed value for parameters of type Double. (Optional)
	MinDouble *graphql.Float `json:"minDouble,omitempty"`

	// Restricts the largest allowed value for parameters of type Double. (Optional)
	MaxDouble *graphql.Float `json:"maxDouble,omitempty"`

	// Restricts the minimum number of allowed elements for parameters of type Array. (Optional)
	MinLength *graphql.Int `json:"minLength,omitempty"`

	// Defines a default value of the parameter. (Optional)
	DefaultValue *[]graphql.String `json:"defaultValue,omitempty"`
}

// ParserTestRunInput represents input for testing a parser.
type ParserTestRunInput struct {

	// The name of the repository the parser is located in. This is part of the test output in the `#repo` field in each parsed event. (Required)
	RepositoryName graphql.String `json:"repositoryName"`

	// The name of the parser. This is part of the test output in the `#type` field in each parsed event. (Required)
	ParserName graphql.String `json:"parserName"`

	// The parser script to be tested. (Required)
	ParserScript graphql.String `json:"parserScript"`

	// The fields to tag in the parser. (Required)
	TagFields []graphql.String `json:"tagFields"`

	// The test cases to test the parser against. (Required)
	TestCases []TestCaseInput `json:"testCases"`
}

// QueryArgument represents an argument to a query.
type QueryArgument struct {

	// (Required)
	Name graphql.String `json:"name"`

	// (Required)
	Value graphql.String `json:"value"`
}

// QueryArgumentInputType represents an argument for a query.
type QueryArgumentInputType struct {

	// The name of the argument. (Required)
	Name graphql.String `json:"name"`

	// The value of the argument. (Required)
	Value graphql.String `json:"value"`
}

// QueryQuotaDefaultSettingsInput
type QueryQuotaDefaultSettingsInput struct {

	// (Required)
	Settings []QueryQuotaIntervalSettingInput `json:"settings"`
}

// QueryQuotaIntervalSettingInput
type QueryQuotaIntervalSettingInput struct {

	// (Required)
	Interval QueryQuotaInterval `json:"interval"`

	// (Required)
	MeasurementKind QueryQuotaMeasurementKind `json:"measurementKind"`

	// (Required)
	ValueKind QueryQuotaIntervalSettingKind `json:"valueKind"`

	// (Optional)
	Value *Long `json:"value,omitempty"`
}

// QueryQuotaUserSettingsInput
type QueryQuotaUserSettingsInput struct {

	// (Required)
	Username graphql.String `json:"username"`

	// (Required)
	Settings []QueryQuotaIntervalSettingInput `json:"settings"`
}

// RedactEventsInputType
type RedactEventsInputType struct {

	// The name of the repository to redact events in. (Required)
	RepositoryName graphql.String `json:"repositoryName"`

	// The start of the interval to perform redactions in. (Required)
	Start DateTime `json:"start"`

	// The end of the interval to perform redactions in. (Required)
	End DateTime `json:"end"`

	// The query to use for redaction. Any event returned by this query will be removed. (Required)
	Query graphql.String `json:"query"`

	// Optional message to log in the audit log for this action. (Optional)
	UserMessage *graphql.String `json:"userMessage,omitempty"`
}

// RemoveAlertLabel represents data for removing a label from an alert.
type RemoveAlertLabel struct {

	// Name of the view of the alert. (Required)
	ViewName graphql.String `json:"viewName"`

	// Id of the alert. (Required)
	ID graphql.String `json:"id"`

	// Label for the alert. (Required)
	Label graphql.String `json:"label"`
}

// RemoveAliasMappingInput represents [PREVIEW: This functionality is still under development and can change without warning.] Input object for field removeFieldAliasMapping.
type RemoveAliasMappingInput struct {

	// ID of the schema that the alias mapping exists on. (Required)
	SchemaID graphql.String `json:"schemaId"`

	// Alias mapping ID. (Required)
	AliasMappingID graphql.String `json:"aliasMappingId"`
}

// RemoveFromBlocklistInput represents data for removing a blocklist entry.
type RemoveFromBlocklistInput struct {

	// The ID of the blocklist entry to remove. (Required)
	ID graphql.String `json:"id"`
}

// RemoveLabelScheduledSearch represents data for removing a label.
type RemoveLabelScheduledSearch struct {

	// Name of the view of the scheduled search. (Required)
	ViewName graphql.String `json:"viewName"`

	// Id of the scheduled search. (Required)
	ID graphql.String `json:"id"`

	// Label for the scheduled search. (Required)
	Label graphql.String `json:"label"`
}

// RemoveLimitInput
type RemoveLimitInput struct {

	// (Required)
	LimitName graphql.String `json:"limitName"`
}

// RemoveOrganizationRoleFromGroupInput
type RemoveOrganizationRoleFromGroupInput struct {

	// (Required)
	GroupID graphql.String `json:"groupId"`

	// (Required)
	RoleID graphql.String `json:"roleId"`
}

// RemoveParserInput
type RemoveParserInput struct {

	// (Required)
	ID graphql.String `json:"id"`

	// (Required)
	RepositoryName graphql.String `json:"repositoryName"`
}

// RemoveRepoCachePolicyInput represents data to remove a repository cache policy.
type RemoveRepoCachePolicyInput struct {

	// Name of repository. (Required)
	RepositoryName graphql.String `json:"repositoryName"`
}

// RemoveRoleFromGroupInput
type RemoveRoleFromGroupInput struct {

	// (Required)
	ViewID graphql.String `json:"viewId"`

	// (Required)
	GroupID graphql.String `json:"groupId"`

	// (Required)
	RoleID graphql.String `json:"roleId"`
}

// RemoveSecondarySubdomainInput
type RemoveSecondarySubdomainInput struct {

	// (Required)
	Subdomain graphql.String `json:"subdomain"`
}

// RemoveStarFromAlert represents data for removing a star from an alert.
type RemoveStarFromAlert struct {

	// Name of the view of the alert. (Required)
	ViewName graphql.String `json:"viewName"`

	// Id of the alert. (Required)
	ID graphql.String `json:"id"`
}

// RemoveStarFromQueryInput
type RemoveStarFromQueryInput struct {

	// (Required)
	SavedQueryID graphql.String `json:"savedQueryId"`

	// (Required)
	SearchDomainName graphql.String `json:"searchDomainName"`
}

// RemoveStarScheduledSearch represents data for removing a star.
type RemoveStarScheduledSearch struct {

	// Name of the view of the scheduled search. (Required)
	ViewName graphql.String `json:"viewName"`

	// Id of the scheduled search. (Required)
	ID graphql.String `json:"id"`
}

// RemoveStarToFieldInput
type RemoveStarToFieldInput struct {

	// (Required)
	FieldName graphql.String `json:"fieldName"`

	// (Required)
	SearchDomainName graphql.String `json:"searchDomainName"`
}

// RemoveSystemRoleFromGroupInput
type RemoveSystemRoleFromGroupInput struct {

	// (Required)
	GroupID graphql.String `json:"groupId"`

	// (Required)
	RoleID graphql.String `json:"roleId"`
}

// RemoveUserByIdInput
type RemoveUserByIdInput struct {

	// (Required)
	ID graphql.String `json:"id"`
}

// RemoveUserInput
type RemoveUserInput struct {

	// (Required)
	Username graphql.String `json:"username"`
}

// RemoveUsersFromGroupInput
type RemoveUsersFromGroupInput struct {

	// (Required)
	Users []graphql.String `json:"users"`

	// (Required)
	GroupID graphql.String `json:"groupId"`
}

// RenameSearchDomainByIdInput
type RenameSearchDomainByIdInput struct {

	// The id of the search domain. (Required)
	ID graphql.String `json:"id"`

	// The new name of the search domain. (Required)
	NewName graphql.String `json:"newName"`

	// Optional message to why the search domain was renamed. Will be added to the audit log. (Optional)
	RenameMessage *graphql.String `json:"renameMessage,omitempty"`
}

// RepoFilterInput
type RepoFilterInput struct {

	// (Required)
	Name graphql.String `json:"name"`

	// (Required)
	Filter graphql.String `json:"filter"`
}

// RestoreDeletedSearchDomainInput
type RestoreDeletedSearchDomainInput struct {

	// The id of the search domain. (Required)
	ID graphql.String `json:"id"`
}

// ResubmitMarketoLeadData
type ResubmitMarketoLeadData struct {

	// (Optional)
	UtmParams *UtmParams `json:"utmParams,omitempty"`

	// (Optional)
	Zip *graphql.String `json:"zip,omitempty"`
}

// RevokeSessionInput
type RevokeSessionInput struct {

	// (Required)
	ID graphql.String `json:"id"`

	// (Required)
	RevocationType SessionRevocation__Type `json:"revocationType"`
}

// RotateTokenInputData
type RotateTokenInputData struct {

	// (Required)
	ID graphql.String `json:"id"`
}

// SchemaFieldInput
type SchemaFieldInput struct {

	// (Required)
	Name graphql.String `json:"name"`

	// (Optional)
	Description *graphql.String `json:"description,omitempty"`
}

// SearchLinkInteractionInput
type SearchLinkInteractionInput struct {

	// (Required)
	Name graphql.String `json:"name"`

	// (Required)
	QueryString graphql.String `json:"queryString"`

	// (Required)
	IsLive graphql.Boolean `json:"isLive"`

	// (Required)
	Arguments []ArgumentInput `json:"arguments"`

	// (Required)
	OpenInNewTab graphql.Boolean `json:"openInNewTab"`

	// (Required)
	UseWidgetTimeWindow graphql.Boolean `json:"useWidgetTimeWindow"`

	// (Optional)
	TitleTemplate *graphql.String `json:"titleTemplate,omitempty"`

	// (Optional)
	RepoOrViewName *RepoOrViewName `json:"repoOrViewName,omitempty"`

	// (Optional)
	FieldInteractionConditions *[]FieldInteractionConditionInput `json:"fieldInteractionConditions,omitempty"`
}

// ServiceLevelIndicatorLogArg
type ServiceLevelIndicatorLogArg struct {

	// (Required)
	FrontendVersion graphql.String `json:"frontendVersion"`

	// (Required)
	Content JSON `json:"content"`
}

// SessionInput
type SessionInput struct {

	// (Required)
	MaxInactivityPeriod Long `json:"maxInactivityPeriod"`

	// (Required)
	ForceReauthenticationAfter Long `json:"forceReauthenticationAfter"`
}

// SetDefaultSavedQueryInput
type SetDefaultSavedQueryInput struct {

	// (Required)
	ViewName graphql.String `json:"viewName"`

	// (Optional)
	SavedQueryID *graphql.String `json:"savedQueryId,omitempty"`
}

// SetGlobalDefaultCachePolicyInput represents data to set a global default cache policy.
type SetGlobalDefaultCachePolicyInput struct {

	// Policy to set. (Required)
	Policy CachePolicyInput `json:"policy"`
}

// SetLimitDisplayNameInput
type SetLimitDisplayNameInput struct {

	// (Required)
	LimitName graphql.String `json:"limitName"`

	// (Optional)
	DisplayName *graphql.String `json:"displayName,omitempty"`
}

// SetOrgDefaultCachePolicyInput represents data to set a organization default cache policy.
type SetOrgDefaultCachePolicyInput struct {

	// Policy to set. (Required)
	Policy CachePolicyInput `json:"policy"`
}

// SetPrimarySubdomainInput
type SetPrimarySubdomainInput struct {

	// (Required)
	Subdomain graphql.String `json:"subdomain"`
}

// SetRepoCachePolicyInput represents data to set a repo cache policy.
type SetRepoCachePolicyInput struct {

	// Name of repository. (Required)
	RepositoryName graphql.String `json:"repositoryName"`

	// Policy to set. (Required)
	Policy CachePolicyInput `json:"policy"`
}

// SetSubdomainSettingsInput
type SetSubdomainSettingsInput struct {

	// (Required)
	PrimarySubdomain graphql.String `json:"primarySubdomain"`

	// (Required)
	EnforceSubdomains graphql.Boolean `json:"enforceSubdomains"`

	// (Optional)
	SecondarySubdomains *[]graphql.String `json:"secondarySubdomains,omitempty"`
}

// SharedDashboardsSecurityPoliciesInput represents data for updating shared dashboards security policies.
type SharedDashboardsSecurityPoliciesInput struct {

	// Whether shared dashboard tokens should be enabled. (Required)
	SharedDashboardsEnabled graphql.Boolean `json:"sharedDashboardsEnabled"`

	// The IP filter that will be enforced on all shared dashboard tokens. (Optional)
	EnforceIPFilterID *graphql.String `json:"enforceIpFilterId,omitempty"`
}

// SlackFieldEntryInput represents slack message field entry.
type SlackFieldEntryInput struct {

	// Key of a Slack field. (Required)
	FieldName graphql.String `json:"fieldName"`

	// Value of a Slack field. (Required)
	Value graphql.String `json:"value"`
}

// SocialLoginSettingsInput
type SocialLoginSettingsInput struct {

	// (Required)
	SocialProviderProfile SocialProviderProfile `json:"socialProviderProfile"`

	// (Required)
	Filter SocialLoginField `json:"filter"`

	// (Required)
	AllowList []graphql.String `json:"allowList"`
}

// StopQueriesInput
type StopQueriesInput struct {

	// Whether to stop queries globally. Requires the ManageCluster permission. (Optional)
	ClusterWide *graphql.Boolean `json:"clusterWide,omitempty"`
}

// TagGroupingRuleInput represents the grouping rule for a given tag.
type TagGroupingRuleInput struct {

	// The tag name to which the rule will apply. (Required)
	TagName graphql.String `json:"tagName"`

	// The number of groups the tag will be split into. (Required)
	GroupCount graphql.Int `json:"groupCount"`
}

// TagsInput
type TagsInput struct {

	// (Required)
	Name graphql.String `json:"name"`

	// (Required)
	Value graphql.String `json:"value"`
}

// TestAwsS3SqsIngestFeed represents data for testing an ingest feed that uses AWS S3 and SQS.
type TestAwsS3SqsIngestFeed struct {

	// Name of the repository of the ingest feed. (Required)
	RepositoryName RepoOrViewName `json:"repositoryName"`

	// How to authenticate to AWS. (Required)
	Authentication IngestFeedAwsAuthenticationInput `json:"authentication"`

	// AWS SQS queue url. (Required)
	SqsURL graphql.String `json:"sqsUrl"`

	// The AWS region to connect to. (Required)
	Region graphql.String `json:"region"`
}

// TestCaseInput represents a test case for a parser.
type TestCaseInput struct {

	// The event to parse and test on. (Required)
	Event TestEventInput `json:"event"`

	// Any assertions to test that a field is not present in the parser output. (Optional)
	FieldMissingAssertions *[]AssertFieldMissingInput `json:"fieldMissingAssertions,omitempty"`

	// Any assertions to test that a field contains a specific value in the parser output. (Optional)
	FieldValueEqualsAssertions *[]AssertFieldValueEqualsInput `json:"fieldValueEqualsAssertions,omitempty"`
}

// TestEmailAction represents data for testing an email action.
type TestEmailAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// List of email addresses to send an email to. (Required)
	Recipients []graphql.String `json:"recipients"`

	// Defines whether the action should use the configured proxy to make web requests. (Required)
	UseProxy graphql.Boolean `json:"useProxy"`

	// Name of the action.. This is a mock value, the trigger does not have to exist. (Required)
	TriggerName graphql.String `json:"triggerName"`

	// JSON data representing one or more events. One event can be supplied as a JSON object. Multiple events must be supplied as a list of JSON objects. (Required)
	EventData graphql.String `json:"eventData"`

	// Subject of the email. Can be templated with values from the result. (Optional)
	SubjectTemplate *graphql.String `json:"subjectTemplate,omitempty"`

	// Body of the email. Can be templated with values from the result. (Optional)
	BodyTemplate *graphql.String `json:"bodyTemplate,omitempty"`

	// Whether the result set should be be attached as a CSV file. (Optional)
	AttachCsv *graphql.Boolean `json:"attachCsv,omitempty"`
}

// TestEventInput represents an event for a parser to parse during testing.
type TestEventInput struct {

	// The contents of `@rawString` field when the event begins parsing. (Required)
	RawString graphql.String `json:"rawString"`
}

// TestFdrFeed represents data for testing an FDR feed.
type TestFdrFeed struct {

	// Name of the repository of the FDR feed. (Required)
	RepositoryName graphql.String `json:"repositoryName"`

	// Id of an existing FDR feed. If no id is provided, the remaining input fields must be set. (Optional)
	FeedID *graphql.String `json:"feedId,omitempty"`

	// AWS client id to use in FDR feed test. If not set, the 'clientId' of the existing FDR feed will be used. (Optional)
	ClientID *graphql.String `json:"clientId,omitempty"`

	// AWS client secret to use in FDR feed test. If not set, the 'clientSecret' of the existing FDR feed will be used. (Optional)
	ClientSecret *graphql.String `json:"clientSecret,omitempty"`

	// AWS SQS queue url to use in FDR feed test. If not set, the 'sqsUrl' of the existing FDR feed will be used. (Optional)
	SqsURL *graphql.String `json:"sqsUrl,omitempty"`

	// AWS S3 identifier to use in FDR feed test. If not set, the 's3Identifier' of the existing FDR feed will be used. (Optional)
	S3Identifier *graphql.String `json:"s3Identifier,omitempty"`
}

// TestHumioRepoAction represents data for testing a Humio repo action.
type TestHumioRepoAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// Humio ingest token for the dataspace that the action should ingest into. (Required)
	IngestToken graphql.String `json:"ingestToken"`

	// Name of the action.. This is a mock value, the trigger does not have to exist. (Required)
	TriggerName graphql.String `json:"triggerName"`

	// JSON data representing one or more events. One event can be supplied as a JSON object. Multiple events must be supplied as a list of JSON objects. (Required)
	EventData graphql.String `json:"eventData"`
}

// TestKafkaEventForwarder represents data for testing a Kafka event forwarder.
type TestKafkaEventForwarder struct {

	// Name of the event forwarder. (Required)
	Name graphql.String `json:"name"`

	// Description of the event forwarder. (Required)
	Description graphql.String `json:"description"`

	// The Kafka producer configuration used to forward events in the form of properties (x.y.z=abc). See https://library.humio.com/humio-server/ingesting-data-event-forwarders.html#kafka-configuration. (Required)
	Properties graphql.String `json:"properties"`

	// The Kafka topic the events should be forwarded to. (Required)
	Topic graphql.String `json:"topic"`

	// Is the event forwarder enabled. (Optional)
	Enabled *graphql.Boolean `json:"enabled,omitempty"`
}

// TestOpsGenieAction represents data for testing an OpsGenie action.
type TestOpsGenieAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// OpsGenie webhook url to send the request to. (Required)
	APIURL graphql.String `json:"apiUrl"`

	// Key to authenticate with OpsGenie. (Required)
	GenieKey graphql.String `json:"genieKey"`

	// Defines whether the action should use the configured proxy to make web requests. (Required)
	UseProxy graphql.Boolean `json:"useProxy"`

	// Name of the action.. This is a mock value, the trigger does not have to exist. (Required)
	TriggerName graphql.String `json:"triggerName"`

	// JSON data representing one or more events. One event can be supplied as a JSON object. Multiple events must be supplied as a list of JSON objects. (Required)
	EventData graphql.String `json:"eventData"`
}

// TestPagerDutyAction represents data for testing a PagerDuty action.
type TestPagerDutyAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// Severity level to give to the message. (Required)
	Severity graphql.String `json:"severity"`

	// Routing key to authenticate with PagerDuty. (Required)
	RoutingKey graphql.String `json:"routingKey"`

	// Defines whether the action should use the configured proxy to make web requests. (Required)
	UseProxy graphql.Boolean `json:"useProxy"`

	// Name of the action.. This is a mock value, the trigger does not have to exist. (Required)
	TriggerName graphql.String `json:"triggerName"`

	// JSON data representing one or more events. One event can be supplied as a JSON object. Multiple events must be supplied as a list of JSON objects. (Required)
	EventData graphql.String `json:"eventData"`
}

// TestParserInputV2 represents input for testing a parser.
type TestParserInputV2 struct {

	// The name of the repository the parser is located in. (Required)
	RepositoryName graphql.String `json:"repositoryName"`

	// The id of the parser. (Required)
	ParserID graphql.String `json:"parserId"`

	// The name of the parser. (Required)
	ParserName graphql.String `json:"parserName"`

	// The parser script to be tested. (Required)
	ParserScript graphql.String `json:"parserScript"`

	// The events to test the parser on. (Required)
	TestData []graphql.String `json:"testData"`
}

// TestPostMessageSlackAction represents data for testing a post message Slack action.
type TestPostMessageSlackAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// Api token to authenticate with Slack. (Required)
	APIToken graphql.String `json:"apiToken"`

	// List of Slack channels to message. (Required)
	Channels []graphql.String `json:"channels"`

	// Fields to include within the Slack message. Can be templated with values from the result. (Required)
	Fields []SlackFieldEntryInput `json:"fields"`

	// Defines whether the action should use the configured proxy to make web requests. (Required)
	UseProxy graphql.Boolean `json:"useProxy"`

	// Name of the action.. This is a mock value, the trigger does not have to exist. (Required)
	TriggerName graphql.String `json:"triggerName"`

	// JSON data representing one or more events. One event can be supplied as a JSON object. Multiple events must be supplied as a list of JSON objects. (Required)
	EventData graphql.String `json:"eventData"`
}

// TestSlackAction represents data for testing a Slack action.
type TestSlackAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// Slack webhook url to send the request to. (Required)
	URL graphql.String `json:"url"`

	// Fields to include within the Slack message. Can be templated with values from the result. (Required)
	Fields []SlackFieldEntryInput `json:"fields"`

	// Defines whether the action should use the configured proxy to make web requests. (Required)
	UseProxy graphql.Boolean `json:"useProxy"`

	// Name of the action.. This is a mock value, the trigger does not have to exist. (Required)
	TriggerName graphql.String `json:"triggerName"`

	// JSON data representing one or more events. One event can be supplied as a JSON object. Multiple events must be supplied as a list of JSON objects. (Required)
	EventData graphql.String `json:"eventData"`
}

// TestUploadFileAction represents data for testing an upload file action.
type TestUploadFileAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// File name for the uploaded file. (Required)
	FileName graphql.String `json:"fileName"`

	// Name of the action.. This is a mock value, the trigger does not have to exist. (Required)
	TriggerName graphql.String `json:"triggerName"`

	// JSON data representing one or more events. One event can be supplied as a JSON object. Multiple events must be supplied as a list of JSON objects. (Required)
	EventData graphql.String `json:"eventData"`
}

// TestVictorOpsAction represents data for testing a VictorOps action.
type TestVictorOpsAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// Type of the VictorOps message to make. (Required)
	MessageType graphql.String `json:"messageType"`

	// VictorOps webhook url to send the request to. (Required)
	NotifyURL graphql.String `json:"notifyUrl"`

	// Defines whether the action should use the configured proxy to make web requests. (Required)
	UseProxy graphql.Boolean `json:"useProxy"`

	// Name of the action.. This is a mock value, the trigger does not have to exist. (Required)
	TriggerName graphql.String `json:"triggerName"`

	// JSON data representing one or more events. One event can be supplied as a JSON object. Multiple events must be supplied as a list of JSON objects. (Required)
	EventData graphql.String `json:"eventData"`
}

// TestWebhookAction represents data for testing a webhook action.
type TestWebhookAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// Url to send the http(s) request to. (Required)
	URL graphql.String `json:"url"`

	// Method to use for the request. (Required)
	Method graphql.String `json:"method"`

	// Headers of the http(s) request. (Required)
	Headers []HttpHeaderEntryInput `json:"headers"`

	// Body of the http(s) request. Can be templated with values from the result. (Required)
	BodyTemplate graphql.String `json:"bodyTemplate"`

	// Flag indicating whether SSL should be ignored for the request. (Required)
	IgnoreSSL graphql.Boolean `json:"ignoreSSL"`

	// Defines whether the action should use the configured proxy to make web requests. (Required)
	UseProxy graphql.Boolean `json:"useProxy"`

	// Name of the action.. This is a mock value, the trigger does not have to exist. (Required)
	TriggerName graphql.String `json:"triggerName"`

	// JSON data representing one or more events. One event can be supplied as a JSON object. Multiple events must be supplied as a list of JSON objects. (Required)
	EventData graphql.String `json:"eventData"`
}

// TokenInput
type TokenInput struct {

	// (Required)
	Token graphql.String `json:"token"`
}

// TokenSecurityPoliciesInput represents data for updating token security policies.
type TokenSecurityPoliciesInput struct {

	// Whether personal user tokens should be enabled. (Required)
	PersonalUserTokensEnabled graphql.Boolean `json:"personalUserTokensEnabled"`

	// Whether view permission tokens should be enabled. (Required)
	ViewPermissionTokensEnabled graphql.Boolean `json:"viewPermissionTokensEnabled"`

	// Whether it should be allowed to change permissions on existing view permission tokens. (Required)
	ViewPermissionTokensAllowPermissionUpdates graphql.Boolean `json:"viewPermissionTokensAllowPermissionUpdates"`

	// Whether organization permission tokens should be enabled. (Required)
	OrganizationPermissionTokensEnabled graphql.Boolean `json:"organizationPermissionTokensEnabled"`

	// Whether it should be allowed to change permissions on existing organization permission tokens. (Required)
	OrganizationPermissionTokensAllowPermissionUpdates graphql.Boolean `json:"organizationPermissionTokensAllowPermissionUpdates"`

	// Maximum time in ms a personal user token can be used before expiring (TTL). (Optional)
	PersonalUserTokensEnforceExpirationAfterMs *Long `json:"personalUserTokensEnforceExpirationAfterMs,omitempty"`

	// The IP filter that will be enforced on all personal user tokens. (Optional)
	PersonalUserTokensEnforceIPFilterID *graphql.String `json:"personalUserTokensEnforceIpFilterId,omitempty"`

	// Maximum time in ms a view permission token can be used before expiring (TTL). (Optional)
	ViewPermissionTokensEnforceExpirationAfterMs *Long `json:"viewPermissionTokensEnforceExpirationAfterMs,omitempty"`

	// The IP filter that will be enforced on all view permission tokens. (Optional)
	ViewPermissionTokensEnforceIPFilterID *graphql.String `json:"viewPermissionTokensEnforceIpFilterId,omitempty"`

	// Maximum time in ms an organization permission token can be used before expiring (TTL). (Optional)
	OrganizationPermissionTokensEnforceExpirationAfterMs *Long `json:"organizationPermissionTokensEnforceExpirationAfterMs,omitempty"`

	// The IP filter that will be enforced on all organization permission tokens. (Optional)
	OrganizationPermissionTokensEnforceIPFilterID *graphql.String `json:"organizationPermissionTokensEnforceIpFilterId,omitempty"`

	// Whether system permission tokens should be enabled. (Optional)
	SystemPermissionTokensEnabled *graphql.Boolean `json:"systemPermissionTokensEnabled,omitempty"`

	// Maximum time in ms a system permission token can be used before expiring (TTL). (Optional)
	SystemPermissionTokensEnforceExpirationAfterMs *Long `json:"systemPermissionTokensEnforceExpirationAfterMs,omitempty"`

	// The IP filter that will be enforced on all system permission tokens. (Optional)
	SystemPermissionTokensEnforceIPFilterID *graphql.String `json:"systemPermissionTokensEnforceIpFilterId,omitempty"`

	// Whether it should be allowed to change permissions on existing system permission tokens. (Optional)
	SystemPermissionTokensAllowPermissionUpdates *graphql.Boolean `json:"systemPermissionTokensAllowPermissionUpdates,omitempty"`
}

// TriggerPollIngestFeed represents data for trigger polling an ingest feed.
type TriggerPollIngestFeed struct {

	// Name of the repository of the ingest feed. (Required)
	RepositoryName RepoOrViewName `json:"repositoryName"`

	// Id of the ingest feed. (Required)
	ID graphql.String `json:"id"`
}

// UpdateAlert represents data for updating an alert.
type UpdateAlert struct {

	// Name of the view of the alert. (Required)
	ViewName graphql.String `json:"viewName"`

	// Id of the alert. (Required)
	ID graphql.String `json:"id"`

	// Name of the alert. (Required)
	Name graphql.String `json:"name"`

	// LogScale query to execute. (Required)
	QueryString graphql.String `json:"queryString"`

	// Start of the relative time interval for the query. (Required)
	QueryStart graphql.String `json:"queryStart"`

	// Throttle time in milliseconds. (Required)
	ThrottleTimeMillis Long `json:"throttleTimeMillis"`

	// Flag indicating whether the alert is enabled. (Required)
	Enabled graphql.Boolean `json:"enabled"`

	// List of ids or names for actions to fire on query result. Actions in packages can be referred to as "packagescope/packagename:actionname". (Required)
	Actions []graphql.String `json:"actions"`

	// Labels attached to the alert. (Required)
	Labels []graphql.String `json:"labels"`

	// Description of the alert. (Optional)
	Description *graphql.String `json:"description,omitempty"`

	// Field to throttle on. (Optional)
	ThrottleField *graphql.String `json:"throttleField,omitempty"`

	// The alert will run with the permissions of the user corresponding to this id if the queryOwnershipType field is set to User. If the queryOwnershipType is set to Organization, whilst runAsUserId is set, this will result in an error. If not specified, the alert will run with the permissions of the calling user. It requires the 'ChangeTriggersToRunAsOtherUsers' permission to set this field to a user id different from the calling user. (Optional)
	RunAsUserID *graphql.String `json:"runAsUserId,omitempty"`

	// Ownership of the query run by this alert. If value is User, ownership will be based on the runAsUserId field. (Optional)
	QueryOwnershipType *QueryOwnershipType `json:"queryOwnershipType,omitempty"`
}

// UpdateAwsS3SqsIngestFeed represents data for updating an ingest feed which uses AWS S3 with SQS. The update is a delta update.
type UpdateAwsS3SqsIngestFeed struct {

	// Name of the repository of the ingest feed. (Required)
	RepositoryName RepoOrViewName `json:"repositoryName"`

	// Id of the ingest feed. (Required)
	ID graphql.String `json:"id"`

	// Name of the ingest feed. (Optional)
	Name *graphql.String `json:"name,omitempty"`

	// If the description should be cleared, supply an `UpdateDescription` object with no value or a `null` value. If the description should be changed, supply an `UpdateDescription`object with the desired value. (Optional)
	Description *UpdateIngestFeedDescription `json:"description,omitempty"`

	// The id or name of the parser that should be used to parse the ingest feed. Parsers in packages can be referred to as: "packagescope/packagename:parsername". (Optional)
	Parser *graphql.String `json:"parser,omitempty"`

	// How to authenticate to AWS. (Optional)
	Authentication *IngestFeedAwsAuthenticationInput `json:"authentication,omitempty"`

	// AWS SQS queue url. (Optional)
	SqsURL *graphql.String `json:"sqsUrl,omitempty"`

	// The AWS region to connect to. (Optional)
	Region *graphql.String `json:"region,omitempty"`

	// Is ingest from the ingest feed enabled?. (Optional)
	Enabled *graphql.Boolean `json:"enabled,omitempty"`

	// The preprocessing to apply to an ingest feed before parsing. (Optional)
	Preprocessing *IngestFeedPreprocessingInput `json:"preprocessing,omitempty"`

	// Compression scheme of the file. (Optional)
	Compression *IngestFeedCompression `json:"compression,omitempty"`
}

// UpdateCustomLinkInteractionInput
type UpdateCustomLinkInteractionInput struct {

	// (Required)
	Path graphql.String `json:"path"`

	// (Required)
	InteractionID graphql.String `json:"interactionId"`

	// (Required)
	CustomLinkInteractionInput CustomLinkInteractionInput `json:"customLinkInteractionInput"`
}

// UpdateDashboardInput
type UpdateDashboardInput struct {

	// (Required)
	ID graphql.String `json:"id"`

	// (Optional)
	Name *graphql.String `json:"name,omitempty"`

	// (Optional)
	Labels *[]graphql.String `json:"labels,omitempty"`

	// (Optional)
	Widgets *[]WidgetInput `json:"widgets,omitempty"`

	// (Optional)
	Links *[]LinkInput `json:"links,omitempty"`

	// (Optional)
	DefaultFilterID *graphql.String `json:"defaultFilterId,omitempty"`

	// (Optional)
	Filters *[]FilterInput `json:"filters,omitempty"`

	// (Optional)
	Parameters *[]ParameterInput `json:"parameters,omitempty"`

	// (Optional)
	Description *graphql.String `json:"description,omitempty"`

	// (Optional)
	TimeJumpSizeInMs *graphql.Int `json:"timeJumpSizeInMs,omitempty"`

	// (Optional)
	UpdateFrequency *DashboardUpdateFrequencyInput `json:"updateFrequency,omitempty"`

	// (Optional)
	DefaultSharedTimeStart *graphql.String `json:"defaultSharedTimeStart,omitempty"`

	// (Optional)
	DefaultSharedTimeEnd *graphql.String `json:"defaultSharedTimeEnd,omitempty"`

	// (Optional)
	DefaultSharedTimeEnabled *graphql.Boolean `json:"defaultSharedTimeEnabled,omitempty"`
}

// UpdateDashboardLinkInteractionInput
type UpdateDashboardLinkInteractionInput struct {

	// (Required)
	Path graphql.String `json:"path"`

	// (Required)
	InteractionID graphql.String `json:"interactionId"`

	// (Required)
	DashboardLinkInteractionInput DashboardLinkInteractionInput `json:"dashboardLinkInteractionInput"`
}

// UpdateDefaultQueryPrefixInput
type UpdateDefaultQueryPrefixInput struct {

	// (Required)
	GroupID graphql.String `json:"groupId"`

	// (Optional)
	QueryPrefix *graphql.String `json:"queryPrefix,omitempty"`
}

// UpdateDefaultRoleInput
type UpdateDefaultRoleInput struct {

	// (Required)
	GroupID graphql.String `json:"groupId"`

	// (Optional)
	RoleID *graphql.String `json:"roleId,omitempty"`
}

// UpdateDescription represents type for updating the description. If the description should be cleared, supply an `UpdateDescription` object with no value or a `null` value. If the description should be changed, supply an `UpdateDescription`object with the desired value.
type UpdateDescription struct {

	// Description of the FDR feed. (Optional)
	Value *graphql.String `json:"value,omitempty"`
}

// UpdateEmailAction represents data for updating an email action.
type UpdateEmailAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Id of the action. (Required)
	ID graphql.String `json:"id"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// List of email addresses to send an email to. (Required)
	Recipients []graphql.String `json:"recipients"`

	// Defines whether the action should use the configured proxy to make web requests. (Required)
	UseProxy graphql.Boolean `json:"useProxy"`

	// Subject of the email. Can be templated with values from the result. (Optional)
	SubjectTemplate *graphql.String `json:"subjectTemplate,omitempty"`

	// Body of the email. Can be templated with values from the result. (Optional)
	BodyTemplate *graphql.String `json:"bodyTemplate,omitempty"`

	// Whether the result set should be be attached as a CSV file. (Optional)
	AttachCsv *graphql.Boolean `json:"attachCsv,omitempty"`
}

// UpdateEventForwardingRule represents data for updating an event forwarding rule.
type UpdateEventForwardingRule struct {

	// The name of the repository that the event forwarding rule is for. (Required)
	RepoName graphql.String `json:"repoName"`

	// The unique id for the event forwarding rule. (Required)
	ID graphql.String `json:"id"`

	// The query string for filtering and mapping the events to forward. (Required)
	QueryString graphql.String `json:"queryString"`

	// The id of the event forwarder. (Required)
	EventForwarderID graphql.String `json:"eventForwarderId"`

	// (Optional)
	LanguageVersion *LanguageVersionEnum `json:"languageVersion,omitempty"`
}

// UpdateFdrFeed represents data for updating an FDR feed. Note that the fields, apart from `id` and `repositoryName`, only need to be supplied if the field should be changed.
type UpdateFdrFeed struct {

	// Name of the repository of the FDR feed. (Required)
	RepositoryName graphql.String `json:"repositoryName"`

	// Id of the FDR feed. (Required)
	ID graphql.String `json:"id"`

	// Name of the FDR feed. If the field should not be updated, leave it out or let the value be `null`. (Optional)
	Name *graphql.String `json:"name,omitempty"`

	// Description of the FDR feed. If the field should not be updated, leave it out or let the value be `null`. If the description should be cleared, supply an `UpdateDescription` object with no value or a `null` value. If the description should be changed, supply an `UpdateDescription`object with the desired value. (Optional)
	Description *UpdateDescription `json:"description,omitempty"`

	// The id or name of the parser that should be used to parse the FDR data. We recommend using the FDR parser from the crowdstrike/fdr package, which can be referred to as "crowdstrike/fdr:FDR". If the field should not be updated, leave it out or let the value be `null`. (Optional)
	Parser *graphql.String `json:"parser,omitempty"`

	// AWS client id of the FDR feed. If the field should not be updated, leave it out or let the value be `null`. (Optional)
	ClientID *graphql.String `json:"clientId,omitempty"`

	// AWS client secret of the FDR feed. If the field should not be updated, leave it out or let the value be `null`. (Optional)
	ClientSecret *graphql.String `json:"clientSecret,omitempty"`

	// AWS SQS queue url of the FDR feed. If the field should not be updated, leave it out or let the value be `null`. (Optional)
	SqsURL *graphql.String `json:"sqsUrl,omitempty"`

	// AWS S3 Identifier of the FDR feed. If the field should not be updated, leave it out or let the value be `null`. (Optional)
	S3Identifier *graphql.String `json:"s3Identifier,omitempty"`

	// Is ingest from the FDR feed enabled? If the field should not be updated, leave it out or let the value be `null`. (Optional)
	Enabled *graphql.Boolean `json:"enabled,omitempty"`
}

// UpdateFdrFeedControl represents data for updating the administrator control of an FDR feed.
type UpdateFdrFeedControl struct {

	// Name of the repository of the FDR feed. (Required)
	RepositoryName graphql.String `json:"repositoryName"`

	// Id of the FDR feed. (Required)
	ID graphql.String `json:"id"`

	// Maximum number of nodes to poll FDR feed with If the value should be cleared, supply an `UpdateLong` object the with no value or a `null` value. If the setting should be changed, supply a `UpdateLong` object with the desired value. If this value is left out the underlying value will not change. (Optional)
	MaxNodes *UpdateLong `json:"maxNodes,omitempty"`

	// Maximum amount of files downloaded from s3 in parallel for a single node. If the value should be cleared, supply an `UpdateLong` object the with no value or a `null` value. If the setting should be changed, supply a `UpdateLong` object with the desired value. If this value is left out the underlying value will not change. (Optional)
	FileDownloadParallelism *UpdateLong `json:"fileDownloadParallelism,omitempty"`
}

// UpdateFieldAliasMappingInput represents [PREVIEW: This functionality is still under development and can change without warning.] Input object for field updateFieldAliasAliasMapping.
type UpdateFieldAliasMappingInput struct {

	// ID of the schema that the alias mapping exists on. (Required)
	SchemaID graphql.String `json:"schemaId"`

	// Alias mapping ID. (Required)
	AliasMappingID graphql.String `json:"aliasMappingId"`

	// Name of the Alias mapping. Overrides the existing name. If not supplied then the name will be unchanged. (Optional)
	Name *graphql.String `json:"name,omitempty"`

	// Tags of the alias mapping. Overrides the existing tags. If not supplied then the tags will be unchanged. (Optional)
	Tags *[]TagsInput `json:"tags,omitempty"`

	// (Optional)
	Aliases *[]AliasInfoInput `json:"aliases,omitempty"`

	// Source fields that are aliased, but should still be available in query. Overrides the existing values for this field. If not supplied then this field will be unchanged. (Optional)
	OriginalFieldsToKeep *[]graphql.String `json:"originalFieldsToKeep,omitempty"`
}

// UpdateFieldAliasSchemaInput represents [PREVIEW: This functionality is still under development and can change without warning.] Input object for field updateFieldAliasSchema.
type UpdateFieldAliasSchemaInput struct {

	// Schema ID. (Required)
	ID graphql.String `json:"id"`

	// Name of the schema. Overrides the existing name. If not supplied then the name will be unchanged. (Optional)
	Name *graphql.String `json:"name,omitempty"`

	// Fields of the schema. Overrides the existing fields. If not supplied then the fields will be unchanged. (Optional)
	Fields *[]SchemaFieldInput `json:"fields,omitempty"`

	// Alias mappings on the schema. Overrides the existing alias mappings. If not supplied then the alias mapping will be unchanged. (Optional)
	AliasMappings *[]AliasMappingInput `json:"aliasMappings,omitempty"`
}

// UpdateFilterAlert represents data for updating a filter alert.
type UpdateFilterAlert struct {

	// Name of the view of the filter alert. (Required)
	ViewName RepoOrViewName `json:"viewName"`

	// Id of the filter alert. (Required)
	ID graphql.String `json:"id"`

	// Name of the filter alert. (Required)
	Name graphql.String `json:"name"`

	// LogScale query to execute. (Required)
	QueryString graphql.String `json:"queryString"`

	// List of ids or names for actions to fire on query result. Actions in packages can be referred to as "packagescope/packagename:actionname". (Required)
	ActionIDsOrNames []graphql.String `json:"actionIdsOrNames"`

	// Labels attached to the filter alert. (Required)
	Labels []graphql.String `json:"labels"`

	// Flag indicating whether the filter alert is enabled. (Required)
	Enabled graphql.Boolean `json:"enabled"`

	// Allowed number of action triggers per minute for the filter alert. Please note that the maximum allowed number of triggers can vary based on the chosen actions. (Required)
	TriggerLimit graphql.Int `json:"triggerLimit"`

	// Ownership of the query run by this filter alert. If value is User, ownership will be based on the runAsUserId field. (Required)
	QueryOwnershipType QueryOwnershipType `json:"queryOwnershipType"`

	// Description of the filter alert. (Optional)
	Description *graphql.String `json:"description,omitempty"`

	// The filter alert will run with the permissions of the user corresponding to this id if the queryOwnershipType field is set to User. If the queryOwnershipType is set to Organization, whilst runAsUserId is set, this will result in an error. If not specified, the filter alert will run with the permissions of the calling user. It requires the 'ChangeTriggersToRunAsOtherUsers' permission to set this field to a user id different from the calling user. (Optional)
	RunAsUserID *graphql.String `json:"runAsUserId,omitempty"`
}

// UpdateGroupInput
type UpdateGroupInput struct {

	// (Required)
	GroupID graphql.String `json:"groupId"`

	// (Optional)
	DisplayName *graphql.String `json:"displayName,omitempty"`

	// (Optional)
	LookupName *graphql.String `json:"lookupName,omitempty"`
}

// UpdateHumioRepoAction represents data for updating a Humio repo action.
type UpdateHumioRepoAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Id of the action. (Required)
	ID graphql.String `json:"id"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// Humio ingest token for the dataspace that the action should ingest into. (Required)
	IngestToken graphql.String `json:"ingestToken"`
}

// UpdateIngestFeedDescription represents type for updating the description. If the description should be cleared, supply an `UpdateDescription` object with no value or a `null` value. If the description should be changed, supply an `UpdateDescription`object with the desired value.
type UpdateIngestFeedDescription struct {

	// Type for updating the description. If the description should be cleared, supply an `UpdateDescription` object with no value or a `null` value. If the description should be changed, supply an `UpdateDescription`object with the desired value. (Optional)
	Description *graphql.String `json:"description,omitempty"`
}

// UpdateIngestListenerV3Input represents input data to update an ingest listener.
type UpdateIngestListenerV3Input struct {

	// id of the ingest listener. (Required)
	ID graphql.String `json:"id"`

	// Name of the repository. (Required)
	RepositoryName graphql.String `json:"repositoryName"`

	// The port the ingest listener will listen on. (Required)
	Port graphql.Int `json:"port"`

	// The kind of listener; TCP, UDP, Netflow/UDP, GELF/UDP, GELF/TCP. (Required)
	Protocol IngestListenerProtocol `json:"protocol"`

	// Name of the ingest listener. (Required)
	Name graphql.String `json:"name"`

	// The ip address the ingest listener will bind to. (Required)
	BindInterface graphql.String `json:"bindInterface"`

	// Id or name of the parser to assign to the ingest listener. Parsers in packages can be referred to as "packagescope/packagename:parsername". (Required)
	Parser graphql.String `json:"parser"`

	// The charset used to decode the event stream. (Required)
	Charset graphql.String `json:"charset"`

	// The vHost name for the ingest listener. (Optional)
	VHost *graphql.Int `json:"vHost,omitempty"`
}

// UpdateKafkaEventForwarder represents data for updating a Kafka event forwarder.
type UpdateKafkaEventForwarder struct {

	// Id of the event forwarder. (Required)
	ID graphql.String `json:"id"`

	// Name of the event forwarder. (Required)
	Name graphql.String `json:"name"`

	// Description of the event forwarder. (Required)
	Description graphql.String `json:"description"`

	// The Kafka producer configuration used to forward events in the form of properties (x.y.z=abc). See https://library.humio.com/humio-server/ingesting-data-event-forwarders.html#kafka-configuration. (Required)
	Properties graphql.String `json:"properties"`

	// The Kafka topic the events should be forwarded to. (Required)
	Topic graphql.String `json:"topic"`

	// Is the event forwarder enabled. (Optional)
	Enabled *graphql.Boolean `json:"enabled,omitempty"`
}

// UpdateLimitInput
type UpdateLimitInput struct {

	// (Required)
	LimitName graphql.String `json:"limitName"`

	// (Optional)
	AllowLogin *graphql.Boolean `json:"allowLogin,omitempty"`

	// (Optional)
	DailyIngest *Long `json:"dailyIngest,omitempty"`

	// (Optional)
	Retention *graphql.Int `json:"retention,omitempty"`

	// (Optional)
	AllowSelfService *graphql.Boolean `json:"allowSelfService,omitempty"`

	// (Optional)
	Expiration *Long `json:"expiration,omitempty"`

	// (Optional)
	ContractVersion *Organizations__ContractVersion `json:"contractVersion,omitempty"`

	// (Optional)
	UserLimit *graphql.Int `json:"userLimit,omitempty"`
}

// UpdateLimitInputV2
type UpdateLimitInputV2 struct {

	// (Required)
	ID graphql.String `json:"id"`

	// (Optional)
	Name *graphql.String `json:"name,omitempty"`

	// (Optional)
	AllowLogin *graphql.Boolean `json:"allowLogin,omitempty"`

	// (Optional)
	DailyIngest *Long `json:"dailyIngest,omitempty"`

	// (Optional)
	DailyIngestContractualType *Organizations__ContractualType `json:"dailyIngestContractualType,omitempty"`

	// (Optional)
	StorageContractualType *Organizations__ContractualType `json:"storageContractualType,omitempty"`

	// (Optional)
	DailyScanContractualType *Organizations__ContractualType `json:"dailyScanContractualType,omitempty"`

	// (Optional)
	MeasurementType *Organizations__MeasurementType `json:"measurementType,omitempty"`

	// (Optional)
	DailyScan *Long `json:"dailyScan,omitempty"`

	// (Optional)
	Retention *graphql.Int `json:"retention,omitempty"`

	// (Optional)
	MaxRetention *graphql.Int `json:"maxRetention,omitempty"`

	// (Optional)
	AllowSelfService *graphql.Boolean `json:"allowSelfService,omitempty"`

	// (Optional)
	Expiration *Long `json:"expiration,omitempty"`

	// (Optional)
	UserLimit *graphql.Int `json:"userLimit,omitempty"`

	// (Optional)
	DateType *graphql.String `json:"dateType,omitempty"`

	// (Optional)
	Trial *graphql.Boolean `json:"trial,omitempty"`

	// (Optional)
	AllowFlightControl *graphql.Boolean `json:"allowFlightControl,omitempty"`

	// (Optional)
	RepositoryLimit *graphql.Int `json:"repositoryLimit,omitempty"`
}

// UpdateLocalFederatedConnectionInput represents data for updating a local federated connection.
type UpdateLocalFederatedConnectionInput struct {

	// Name or id of the federated view that has the connection. (Required)
	FederatedViewName graphql.String `json:"federatedViewName"`

	// Id of the connection to update. (Required)
	ConnectionID graphql.String `json:"connectionId"`

	// Name or id of the local view to connect with. (Optional)
	TargetViewName *graphql.String `json:"targetViewName,omitempty"`

	// Additional tags that can be used to filter queries. (Optional)
	Tags *[]FederatedConnectionInputTag `json:"tags,omitempty"`

	// Filter query that restricts the data visible through this connection. (Optional)
	QueryPrefix *graphql.String `json:"queryPrefix,omitempty"`
}

// UpdateLong represents if the value should be cleared, supply an `UpdateLong` object the with no value or a `null` value. If the setting should be changed, supply a `UpdateLong` object with the desired value.
type UpdateLong struct {

	// (Optional)
	Value *graphql.Int `json:"value,omitempty"`
}

// UpdateOidcConfigurationInput
type UpdateOidcConfigurationInput struct {

	// (Required)
	ID graphql.String `json:"id"`

	// (Required)
	Name graphql.String `json:"name"`

	// (Required)
	ClientID graphql.String `json:"clientID"`

	// (Required)
	ClientSecret graphql.String `json:"clientSecret"`

	// (Required)
	Issuer graphql.String `json:"issuer"`

	// (Required)
	TokenEndpointAuthMethod graphql.String `json:"tokenEndpointAuthMethod"`

	// (Required)
	AuthorizationEndpoint graphql.String `json:"authorizationEndpoint"`

	// (Required)
	Domains []graphql.String `json:"domains"`

	// (Required)
	Scopes []graphql.String `json:"scopes"`

	// (Required)
	UserClaim graphql.String `json:"userClaim"`

	// (Required)
	EnableDebug graphql.Boolean `json:"enableDebug"`

	// (Optional)
	TokenEndpoint *graphql.String `json:"tokenEndpoint,omitempty"`

	// (Optional)
	UserInfoEndpoint *graphql.String `json:"userInfoEndpoint,omitempty"`

	// (Optional)
	RegistrationEndpoint *graphql.String `json:"registrationEndpoint,omitempty"`

	// (Optional)
	GroupsClaim *graphql.String `json:"groupsClaim,omitempty"`

	// (Optional)
	JWKSEndpoint *graphql.String `json:"JWKSEndpoint,omitempty"`

	// (Optional)
	DefaultIdp *graphql.Boolean `json:"defaultIdp,omitempty"`

	// (Optional)
	HumioOwned *graphql.Boolean `json:"humioOwned,omitempty"`

	// (Optional)
	LazyCreateUsers *graphql.Boolean `json:"lazyCreateUsers,omitempty"`
}

// UpdateOpsGenieAction represents data for updating an OpsGenie action.
type UpdateOpsGenieAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Id of the action. (Required)
	ID graphql.String `json:"id"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// OpsGenie webhook url to send the request to. (Required)
	APIURL graphql.String `json:"apiUrl"`

	// Key to authenticate with OpsGenie. (Required)
	GenieKey graphql.String `json:"genieKey"`

	// Defines whether the action should use the configured proxy to make web requests. (Required)
	UseProxy graphql.Boolean `json:"useProxy"`
}

// UpdateOrganizationPermissionsTokenPermissionsInput
type UpdateOrganizationPermissionsTokenPermissionsInput struct {

	// (Required)
	ID graphql.String `json:"id"`

	// (Required)
	Permissions []OrganizationPermission `json:"permissions"`
}

// UpdatePackageFromRegistryInput
type UpdatePackageFromRegistryInput struct {

	// (Required)
	ViewName RepoOrViewName `json:"viewName"`

	// (Required)
	PackageID VersionedPackageSpecifier `json:"packageId"`

	// (Required)
	ConflictResolutions []ConflictResolutionConfiguration `json:"conflictResolutions"`

	// (Optional)
	QueryOwnershipType *QueryOwnershipType `json:"queryOwnershipType,omitempty"`
}

// UpdatePagerDutyAction represents data for updating a PagerDuty action.
type UpdatePagerDutyAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Id of the action. (Required)
	ID graphql.String `json:"id"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// Severity level to give to the message. (Required)
	Severity graphql.String `json:"severity"`

	// Routing key to authenticate with PagerDuty. (Required)
	RoutingKey graphql.String `json:"routingKey"`

	// Defines whether the action should use the configured proxy to make web requests. (Required)
	UseProxy graphql.Boolean `json:"useProxy"`
}

// UpdateParametersInteractionInput
type UpdateParametersInteractionInput struct {

	// (Required)
	Name graphql.String `json:"name"`

	// (Required)
	Arguments []ArgumentInput `json:"arguments"`

	// (Required)
	UseWidgetTimeWindow graphql.Boolean `json:"useWidgetTimeWindow"`

	// (Optional)
	TitleTemplate *graphql.String `json:"titleTemplate,omitempty"`

	// (Optional)
	FieldInteractionConditions *[]FieldInteractionConditionInput `json:"fieldInteractionConditions,omitempty"`
}

// UpdateParserInput represents input for updating a parser.
type UpdateParserInput struct {

	// The repository where the parser lives. (Optional)
	RepositoryName *graphql.String `json:"repositoryName,omitempty"`

	// The ID of the parser to update. (Optional)
	ID *graphql.String `json:"id,omitempty"`

	// The name to use for the parser. (Optional)
	Name *graphql.String `json:"name,omitempty"`

	// Test events that can be parsed by the parser. (Optional)
	TestData *[]graphql.String `json:"testData,omitempty"`

	// [PREVIEW: Allows parser to have more extensive test cases than the `testData` field allows. If both `testCases` and `testData` are passed in, then `testCases` is the one that is used.]. (Optional)
	TestCases *[]TestCaseInput `json:"testCases,omitempty"`

	// The parser script that is executed for every incoming event. (Optional)
	SourceCode *graphql.String `json:"sourceCode,omitempty"`

	// Any fields which the parser should convert to tags after an event is parsed. (Optional)
	TagFields *[]graphql.String `json:"tagFields,omitempty"`

	// A list of fields that will be removed from the event before it's parsed. These fields will not be included when calculating usage. (Optional)
	FieldsToBeRemovedBeforeParsing *[]graphql.String `json:"fieldsToBeRemovedBeforeParsing,omitempty"`

	// The version of the Humio query language to use. (Optional)
	LanguageVersion *LanguageVersionEnum `json:"languageVersion,omitempty"`
}

// UpdatePostMessageSlackAction represents data for updating a post-message Slack action.
type UpdatePostMessageSlackAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Id of the action. (Required)
	ID graphql.String `json:"id"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// Api token to authenticate with Slack. (Required)
	APIToken graphql.String `json:"apiToken"`

	// List of Slack channels to message. (Required)
	Channels []graphql.String `json:"channels"`

	// Fields to include within the Slack message. Can be templated with values from the result. (Required)
	Fields []SlackFieldEntryInput `json:"fields"`

	// Defines whether the action should use the configured proxy to make web requests. (Required)
	UseProxy graphql.Boolean `json:"useProxy"`
}

// UpdateQueryPrefixInput
type UpdateQueryPrefixInput struct {

	// (Required)
	QueryPrefix graphql.String `json:"queryPrefix"`

	// (Required)
	ViewID graphql.String `json:"viewId"`

	// (Required)
	GroupID graphql.String `json:"groupId"`
}

// UpdateRemoteFederatedConnectionInput represents data for updating a remote federated connection.
type UpdateRemoteFederatedConnectionInput struct {

	// Name or id of the federated view that has the connection. (Required)
	FederatedViewName graphql.String `json:"federatedViewName"`

	// Id of the connection to update. (Required)
	ConnectionID graphql.String `json:"connectionId"`

	// Public URL of the remote cluster to connect with. (Optional)
	PublicURL *graphql.String `json:"publicUrl,omitempty"`

	// Access token for the remote view to connect with. (Optional)
	Token *graphql.String `json:"token,omitempty"`

	// Additional tags that can be used to filter queries. (Optional)
	Tags *[]FederatedConnectionInputTag `json:"tags,omitempty"`

	// Filter query that restricts the data visible through this connection. (Optional)
	QueryPrefix *graphql.String `json:"queryPrefix,omitempty"`
}

// UpdateRepoDataTypeInputObject
type UpdateRepoDataTypeInputObject struct {

	// (Required)
	DataspaceID graphql.String `json:"dataspaceId"`

	// (Required)
	RepoDataType RepositoryDataType `json:"repoDataType"`
}

// UpdateRepoLimitIdInputObject
type UpdateRepoLimitIdInputObject struct {

	// (Required)
	DataspaceID graphql.String `json:"dataspaceId"`

	// (Required)
	LimitID graphql.String `json:"limitId"`
}

// UpdateRoleInput
type UpdateRoleInput struct {

	// (Required)
	RoleID graphql.String `json:"roleId"`

	// (Required)
	DisplayName graphql.String `json:"displayName"`

	// (Required)
	ViewPermissions []Permission `json:"viewPermissions"`

	// (Optional)
	Description *graphql.String `json:"description,omitempty"`

	// (Optional)
	Color *graphql.String `json:"color,omitempty"`

	// (Optional)
	SystemPermissions *[]SystemPermission `json:"systemPermissions,omitempty"`

	// (Optional)
	OrganizationPermissions *[]OrganizationPermission `json:"organizationPermissions,omitempty"`

	// (Optional)
	ObjectAction *ObjectAction `json:"objectAction,omitempty"`
}

// UpdateSavedQueryInput
type UpdateSavedQueryInput struct {

	// (Required)
	ID graphql.String `json:"id"`

	// (Required)
	ViewName graphql.String `json:"viewName"`

	// (Optional)
	Name *graphql.String `json:"name,omitempty"`

	// (Optional)
	QueryString *graphql.String `json:"queryString,omitempty"`

	// (Optional)
	Start *graphql.String `json:"start,omitempty"`

	// (Optional)
	End *graphql.String `json:"end,omitempty"`

	// (Optional)
	IsLive *graphql.Boolean `json:"isLive,omitempty"`

	// (Optional)
	WidgetType *graphql.String `json:"widgetType,omitempty"`

	// (Optional)
	Options *graphql.String `json:"options,omitempty"`

	// (Optional)
	DashboardLinkInteractions *[]DashboardLinkInteractionInput `json:"dashboardLinkInteractions,omitempty"`

	// (Optional)
	CustomLinkInteractions *[]CustomLinkInteractionInput `json:"customLinkInteractions,omitempty"`

	// (Optional)
	SearchLinkInteractions *[]SearchLinkInteractionInput `json:"searchLinkInteractions,omitempty"`

	// (Optional)
	UpdateParametersInteractions *[]UpdateParametersInteractionInput `json:"updateParametersInteractions,omitempty"`
}

// UpdateScheduledSearch represents data for updating a scheduled search.
type UpdateScheduledSearch struct {

	// Name of the view of the scheduled search. (Required)
	ViewName graphql.String `json:"viewName"`

	// Id of the scheduled search. (Required)
	ID graphql.String `json:"id"`

	// Name of the scheduled search. (Required)
	Name graphql.String `json:"name"`

	// LogScale query to execute. (Required)
	QueryString graphql.String `json:"queryString"`

	// Start of the relative time interval for the query. (Required)
	QueryStart graphql.String `json:"queryStart"`

	// End of the relative time interval for the query. (Required)
	QueryEnd graphql.String `json:"queryEnd"`

	// Cron pattern describing the schedule to execute the query on. (Required)
	Schedule graphql.String `json:"schedule"`

	// Time zone of the schedule. Currently this field only supports UTC offsets like 'UTC', 'UTC-01' or 'UTC+12:45'. (Required)
	TimeZone graphql.String `json:"timeZone"`

	// User-defined limit, which caps the number of missed searches to backfill, e.g. in the event of a shutdown. (Required)
	BackfillLimit graphql.Int `json:"backfillLimit"`

	// Flag indicating whether the scheduled search is enabled. (Required)
	Enabled graphql.Boolean `json:"enabled"`

	// List of ids or names for actions to fire on query result. Actions in packages can be referred to as "packagescope/packagename:actionname". (Required)
	Actions []graphql.String `json:"actions"`

	// Labels attached to the scheduled search. (Required)
	Labels []graphql.String `json:"labels"`

	// Description of the scheduled search. (Optional)
	Description *graphql.String `json:"description,omitempty"`

	// The scheduled search will run with the permissions of the user corresponding to this id if the queryOwnershipType field is set to User. If the queryOwnershipType is set to Organization, whilst runAsUserId is set, this will result in an error. If not specified, the scheduled search will run with the permissions of the calling user. It requires the 'ChangeTriggersToRunAsOtherUsers' permission to set this field to a user id different from the calling user. (Optional)
	RunAsUserID *graphql.String `json:"runAsUserId,omitempty"`

	// Ownership of the query run by this scheduled search. If value is User, ownership will be based on the runAsUserId field. (Optional)
	QueryOwnershipType *QueryOwnershipType `json:"queryOwnershipType,omitempty"`
}

// UpdateSearchLinkInteractionInput
type UpdateSearchLinkInteractionInput struct {

	// (Required)
	Path graphql.String `json:"path"`

	// (Required)
	InteractionID graphql.String `json:"interactionId"`

	// (Required)
	SearchLinkInteractionInput SearchLinkInteractionInput `json:"searchLinkInteractionInput"`
}

// UpdateSlackAction represents data for updating a Slack action.
type UpdateSlackAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Id of the action. (Required)
	ID graphql.String `json:"id"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// Slack webhook url to send the request to. (Required)
	URL graphql.String `json:"url"`

	// Fields to include within the Slack message. Can be templated with values from the result. (Required)
	Fields []SlackFieldEntryInput `json:"fields"`

	// Defines whether the action should use the configured proxy to make web requests. (Required)
	UseProxy graphql.Boolean `json:"useProxy"`
}

// UpdateSubscriptionInputObject
type UpdateSubscriptionInputObject struct {

	// (Required)
	Subscription Organizations__Subscription `json:"subscription"`

	// (Optional)
	TrialDays *graphql.Int `json:"trialDays,omitempty"`
}

// UpdateSystemPermissionsTokenPermissionsInput
type UpdateSystemPermissionsTokenPermissionsInput struct {

	// (Required)
	ID graphql.String `json:"id"`

	// (Required)
	Permissions []SystemPermission `json:"permissions"`
}

// UpdateUploadFileAction represents data for updating an upload file action.
type UpdateUploadFileAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Id of the action. (Required)
	ID graphql.String `json:"id"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// File name for the uploaded file. (Required)
	FileName graphql.String `json:"fileName"`
}

// UpdateUserByIdInput
type UpdateUserByIdInput struct {

	// (Required)
	UserID graphql.String `json:"userId"`

	// (Optional)
	Company *graphql.String `json:"company,omitempty"`

	// (Optional)
	IsRoot *graphql.Boolean `json:"isRoot,omitempty"`

	// (Optional)
	Username *graphql.String `json:"username,omitempty"`

	// (Optional)
	FirstName *graphql.String `json:"firstName,omitempty"`

	// (Optional)
	LastName *graphql.String `json:"lastName,omitempty"`

	// (Optional)
	FullName *graphql.String `json:"fullName,omitempty"`

	// (Optional)
	Picture *graphql.String `json:"picture,omitempty"`

	// (Optional)
	Email *graphql.String `json:"email,omitempty"`

	// (Optional)
	CountryCode *graphql.String `json:"countryCode,omitempty"`

	// (Optional)
	StateCode *graphql.String `json:"stateCode,omitempty"`
}

// UpdateVictorOpsAction represents data for updating a VictorOps action.
type UpdateVictorOpsAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Id of the action. (Required)
	ID graphql.String `json:"id"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// Type of the VictorOps message to make. (Required)
	MessageType graphql.String `json:"messageType"`

	// VictorOps webhook url to send the request to. (Required)
	NotifyURL graphql.String `json:"notifyUrl"`

	// Defines whether the action should use the configured proxy to make web requests. (Required)
	UseProxy graphql.Boolean `json:"useProxy"`
}

// UpdateViewPermissionsTokenPermissionsInput
type UpdateViewPermissionsTokenPermissionsInput struct {

	// (Required)
	ID graphql.String `json:"id"`

	// (Required)
	Permissions []Permission `json:"permissions"`
}

// UpdateWebhookAction represents data for updating a webhook action.
type UpdateWebhookAction struct {

	// Name of the view of the action. (Required)
	ViewName graphql.String `json:"viewName"`

	// Id of the action. (Required)
	ID graphql.String `json:"id"`

	// Name of the action. (Required)
	Name graphql.String `json:"name"`

	// Url to send the http(s) request to. (Required)
	URL graphql.String `json:"url"`

	// Method to use for the request. (Required)
	Method graphql.String `json:"method"`

	// Headers of the http(s) request. (Required)
	Headers []HttpHeaderEntryInput `json:"headers"`

	// Body of the http(s) request. Can be templated with values from the result. (Required)
	BodyTemplate graphql.String `json:"bodyTemplate"`

	// Flag indicating whether SSL should be ignored for the request. (Required)
	IgnoreSSL graphql.Boolean `json:"ignoreSSL"`

	// Defines whether the action should use the configured proxy to make web requests. (Required)
	UseProxy graphql.Boolean `json:"useProxy"`
}

// UpgradeAccountData
type UpgradeAccountData struct {

	// (Required)
	LastName graphql.String `json:"lastName"`

	// (Required)
	Company graphql.String `json:"company"`

	// (Required)
	Email graphql.String `json:"email"`

	// (Optional)
	FirstName *graphql.String `json:"firstName,omitempty"`

	// (Optional)
	Purpose *Purposes `json:"purpose,omitempty"`

	// (Optional)
	PhoneNumber *graphql.String `json:"phoneNumber,omitempty"`

	// (Optional)
	CountryCode *graphql.String `json:"countryCode,omitempty"`

	// (Optional)
	StateCode *graphql.String `json:"stateCode,omitempty"`

	// (Optional)
	Comment *graphql.String `json:"comment,omitempty"`
}

// UserRoleAssignment
type UserRoleAssignment struct {

	// (Required)
	UserID graphql.String `json:"userId"`

	// (Required)
	RoleID graphql.String `json:"roleId"`
}

// UtmParams
type UtmParams struct {

	// (Required)
	Campaign graphql.String `json:"campaign"`

	// (Required)
	Content graphql.String `json:"content"`

	// (Required)
	Medium graphql.String `json:"medium"`

	// (Required)
	Source graphql.String `json:"source"`

	// (Required)
	Term graphql.String `json:"term"`
}

// ViewConnectionInput represents the repositories this view will read from.
type ViewConnectionInput struct {

	// The name of the connected repository. (Required)
	RepositoryName graphql.String `json:"repositoryName"`

	// The filter applied to all results from the repository. (Required)
	Filter graphql.String `json:"filter"`

	// (Optional)
	LanguageVersion *LanguageVersionEnum `json:"languageVersion,omitempty"`
}

// WidgetInput
type WidgetInput struct {

	// (Required)
	ID graphql.String `json:"id"`

	// (Required)
	Title graphql.String `json:"title"`

	// (Required)
	X graphql.Int `json:"x"`

	// (Required)
	Y graphql.Int `json:"y"`

	// (Required)
	Width graphql.Int `json:"width"`

	// (Required)
	Height graphql.Int `json:"height"`

	// (Optional)
	Description *graphql.String `json:"description,omitempty"`

	// (Optional)
	QueryOptions *WidgetQueryPropertiesInput `json:"queryOptions,omitempty"`

	// (Optional)
	NoteOptions *WidgetNotePropertiesInput `json:"noteOptions,omitempty"`

	// (Optional)
	LinkOptions *WidgetLinkPropertiesInput `json:"linkOptions,omitempty"`
}

// WidgetLinkPropertiesInput
type WidgetLinkPropertiesInput struct {

	// (Required)
	Labels []graphql.String `json:"labels"`
}

// WidgetNotePropertiesInput
type WidgetNotePropertiesInput struct {

	// (Required)
	Text graphql.String `json:"text"`

	// (Optional)
	BackgroundColor *graphql.String `json:"backgroundColor,omitempty"`

	// (Optional)
	TextColor *graphql.String `json:"textColor,omitempty"`
}

// WidgetQueryPropertiesInput
type WidgetQueryPropertiesInput struct {

	// (Required)
	QueryString graphql.String `json:"queryString"`

	// (Required)
	Start graphql.String `json:"start"`

	// (Required)
	End graphql.String `json:"end"`

	// (Required)
	WidgetType graphql.String `json:"widgetType"`

	// (Optional)
	Options *graphql.String `json:"options,omitempty"`

	// (Optional)
	DashboardLinkInteractions *[]DashboardLinkInteractionInput `json:"dashboardLinkInteractions,omitempty"`

	// (Optional)
	CustomLinkInteractions *[]CustomLinkInteractionInput `json:"customLinkInteractions,omitempty"`

	// (Optional)
	SearchLinkInteractions *[]SearchLinkInteractionInput `json:"searchLinkInteractions,omitempty"`

	// (Optional)
	UpdateParametersInteractions *[]UpdateParametersInteractionInput `json:"updateParametersInteractions,omitempty"`
}

// deleteExternalFunctionInput represents the input required to delete an external function specification.
type deleteExternalFunctionInput struct {

	// The name of the external function to delete. (Required)
	Name graphql.String `json:"name"`
}
