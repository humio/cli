// Code generated by generate.go; DO NOT EDIT.
package api

import graphql "github.com/cli/shurcooL-graphql"

// The following type declarations are manually curated in cmd/api_gen/generate.go.
type DateTime = string // Expected in ISO-8601 instant format, e.g. "2024-04-30T18:00:00.00Z"
type Email = string
type JSON = string
type Long = int64
type Markdown = string
type PackageName = string
type PackageScope = string
type PackageTag = string
type PackageVersion = string
type RepoOrViewName = string
type SemanticVersion = string
type URL = string
type UnversionedPackageSpecifier = string
type UrlOrData = string
type VersionedPackageSpecifier = string
type YAML = string

// End of manually curated type declarations.

type AddGroupMutation struct {
	Group Group
}

type AddRecentQuery struct {
	RecentQueries []RecentQuery
}

type AddRoleMutation struct {
	Role Role
}

type AddStarToFieldMutation struct {
	StarredFields []graphql.String
}

type AddUsersToGroupMutation struct {
	Group Group
}

// AssertionFailureOnField represents different ways in which an assertion may fail.
type AssertionFailureOnField struct {
	FieldUnexpectedlyPresent
	FieldHadUnexpectedValue
	FieldHadConflictingAssertions
	AssertionOnFieldWasOrphaned
}

// AssertionOnFieldWasOrphaned represents this occurs when an assertion was set to run on some output event that wasn't produced by the parser. That is, the assertion may be set to run on output event number 2, but the parser only produced one event.
type AssertionOnFieldWasOrphaned struct {
	// FieldName represents field being asserted on.
	FieldName graphql.String
}

type AssignOrganizationRoleToGroupMutation struct {
	Group GroupOrganizationRole
}

type AssignRoleToGroupMutation struct {
	Group SearchDomainRole
}

type AssignSystemRoleToGroupMutation struct {
	Group GroupSystemRole
}

type BlockIngestMutation struct {
	Repository Repository
}

type BooleanResultType struct {
	Result graphql.Boolean
}

type CopyDashboardMutation struct {
	Dashboard Dashboard
}

type CreateActionFromPackageTemplateMutation struct {
	Action Action
}

type CreateAlertFromPackageTemplateMutation struct {
	Alert Alert
}

type CreateDashboardFromPackageTemplateMutation struct {
	Dashboard Dashboard
}

type CreateDashboardMutation struct {
	Dashboard Dashboard
}

type CreateParserFromPackageTemplateMutation struct {
	Parser Parser
}

type CreateParserMutation struct {
	Parser Parser
}

type CreateRepositoryMutation struct {
	Repository Repository
}

type CreateSavedQueryFromPackageTemplateMutation struct {
	SavedQuery SavedQuery
}

type CreateSavedQueryPayload struct {
	SavedQuery SavedQuery
}

type DeleteDashboardMutation struct {
	Dashboard Dashboard
}

// EnrolledCollector represents information about an enrolled collector.
type EnrolledCollector struct {
	ID        graphql.String
	ConfigID  *graphql.String
	MachineID graphql.String
}

// EventField represents a single field in an event with a name and a value.
type EventField struct {
	// FieldName represents the name of the field.
	FieldName graphql.String
	// Value represents the value of the field.
	Value graphql.String
}

// Field represents a single field in an event with a key and a value.
type Field struct {
	// Key represents the key of the field.
	Key graphql.String
	// Value represents the value of the field.
	Value graphql.String
}

// FieldHadConflictingAssertions represents assertion results can be uniquely identified by the output event index and the field name they operate on. So if the same field on the same event has multiple assertions attached, this failure is produced.
type FieldHadConflictingAssertions struct {
	// FieldName represents field being asserted on.
	FieldName graphql.String
}

// FieldHadUnexpectedValue represents an assertion was made that a field had some value, and this assertion failed due to an unexpected value for the field.
type FieldHadUnexpectedValue struct {
	// FieldName represents field being asserted on.
	FieldName graphql.String
	// ExpectedValue represents value that was asserted to be contained in the field.
	ExpectedValue graphql.String
	// ActualValue represents the actual value of the field. Note that this is null in the case where the field wasn't present at all.
	ActualValue *graphql.String
}

// FieldUnexpectedlyPresent represents an assertion was made that a field should not be present, and this assertion failed.
type FieldUnexpectedlyPresent struct {
	// FieldName represents field being asserted on.
	FieldName graphql.String
	// ActualValue represents the value that the field contained.
	ActualValue graphql.String
}

// FileParameterValueFilter represents a filter to reduce entries from files down to those with a matching value in the field.
type FileParameterValueFilter struct {
	Field  graphql.String
	Values []graphql.String
}

// FixedListParameterOption represents an option in a fixed list parameter.
type FixedListParameterOption struct {
	Label graphql.String
	Value graphql.String
}

type FleetConfigurationTest struct {
	CollectorIDs []graphql.String
	ConfigID     graphql.String
}

// HTTPHeaderEntry represents a http request header.
type HTTPHeaderEntry struct {
	// Header represents key of a http(s) header.
	Header graphql.String
	// Value represents value of a http(s) header.
	Value graphql.String
}

type InstallPackageFromRegistryResult struct {
	Package Package2
}

type InstallPackageFromZipResult struct {
	WasSuccessful graphql.Boolean
}

type InteractionID struct {
	ID graphql.String
}

// OAuthProvider represents an OAuth Identity Provider.
type OAuthProvider struct {
	ID          graphql.String
	ClientID    graphql.String
	RedirectURL graphql.String
}

// OIDCProvider represents an OIDC identity provider.
type OIDCProvider struct {
	ID                    graphql.String
	ClientID              graphql.String
	RedirectURL           graphql.String
	AuthorizationEndpoint *graphql.String
	ServiceName           *graphql.String
	Scopes                []graphql.String
	FederatedIdp          *graphql.String
}

// OrganizationLink represents a link between two organizations.
type OrganizationLink struct {
	ParentOrganization Organization
	ChildOrganization  Organization
}

// OutputEvent represents an event produced by a parser in a test run.
type OutputEvent struct {
	// Fields represents the fields of the event.
	Fields []EventField
}

type PackageUpdateResult struct {
	Package Package2
}

// ParseEventResult represents the result of parsing a single test event.
type ParseEventResult struct {
	// Status represents the status of parsing the test event.
	Status ParseEventStatus
	// ErrorMessage represents a potential error message.
	ErrorMessage *graphql.String
	// Events represents the parsed events. Can be empty if the test was dropped by the parser or contain one or more events.
	Events []ParsedEvent
}

// ParsedEvent represents a parsed event.
type ParsedEvent struct {
	// Fields represents the fields of the event.
	Fields []Field
}

// ParserTestCaseFailuresForOutput represents contains any test failures that relates to a specific output event. This is a key-value pair, where the index of the output event is the key, and the failures are the value.
type ParserTestCaseFailuresForOutput struct {
	// OutputEventIndex represents the index of the output event which these failures pertain to. Note that there may be failures pointing to non-existing output events, if e.g. an assertion was made on an output event which was not produced.
	OutputEventIndex graphql.Int
	// Failures represents failures for the output event.
	Failures ParserTestCaseOutputFailures
}

// ParserTestCaseOutputFailures represents failures for an output event.
type ParserTestCaseOutputFailures struct {
	// ParsingErrors represents any errors produced by the parser when creating an output event.
	ParsingErrors []graphql.String
	// AssertionFailuresOnFields represents any assertion failures on the given output event. Note that all assertion failures can be uniquely identified by the output event index and the field name they operate on.
	AssertionFailuresOnFields []AssertionFailureOnField
}

// ParserTestCaseResult represents the output for parsing and verifying a test case.
type ParserTestCaseResult struct {
	// OutputEvents represents the events produced by the parser. Contains zero to many events, as a parser can both drop events, or produce multiple output events from a single input.
	OutputEvents []OutputEvent
	// OutputFailures represents any failures produced during testing. If the list is empty, the test case can be considered to have passed. If the list contains elements, they are key-value pairs to be treated as a map-construct, where the index of the output event is the key, and the failures are the value.
	OutputFailures []ParserTestCaseFailuresForOutput
}

// ParserTestRunAborted represents a parser test result, where an unexpected error occurred during parsing.
type ParserTestRunAborted struct {
	ErrorMessage graphql.String
}

// ParserTestRunCompleted represents a parser test result, where all test cases were parsed and assertions run. Each result is given in the same order as the test cases were put in, so they can be matched by index.
type ParserTestRunCompleted struct {
	// Results represents the results for running each test case.
	Results []ParserTestCaseResult
}

// ParserTestRunOutput represents the output of running all the parser test cases.
type ParserTestRunOutput struct {
	ParserTestRunCompleted
	ParserTestRunAborted
}

// QueryQuotaDefaultSettings represents default Query Quota Settings for users which have not had specific settings assigned.
type QueryQuotaDefaultSettings struct {
	// Settings represents list of the rules that apply.
	Settings []QueryQuotaIntervalSetting
}

type RemoveGroupMutation struct {
	Group Group
}

type RemoveParserMutation struct {
	Parser Parser
}

type RemoveStarToFieldMutation struct {
	StarredFields []graphql.String
}

type RemoveUserByIDMutation struct {
	User User
}

type RemoveUserMutation struct {
	User User
}

type RemoveUsersFromGroupMutation struct {
	Group Group
}

type SavedQueryIsStarred struct {
	ID        graphql.String
	IsStarred graphql.Boolean
}

type SavedQueryStarredUpdate struct {
	SavedQuery SavedQueryIsStarred
}

// SlackFieldEntry represents field entry in a Slack message.
type SlackFieldEntry struct {
	// FieldName represents key of a Slack field.
	FieldName graphql.String
	// Value represents value of a Slack field.
	Value graphql.String
}

// TestFdrErrorResult represents collection of errors, which occurred during test.
type TestFdrErrorResult struct {
	// Errors represents list of test errors.
	Errors []error
}

// TestFdrRequestError represents an error, which occurred when making a request towards an AWS resource.
type TestFdrRequestError struct {
	// ResourceName represents name of the AWS resource, which the request was made towards.
	ResourceName graphql.String
	// Message represents message specifying the request error.
	Message graphql.String
}

// TestFdrResult represents result of testing an FDR feed.
type TestFdrResult struct {
	TestFdrErrorResult
	TestFdrSuccessResult
}

// TestFdrSuccessResult represents test was a success.
type TestFdrSuccessResult struct {
	// Result represents this field is always 'true'.
	Result graphql.Boolean
}

// TestFdrValidationError represents a validation error related to a particular input field.
type TestFdrValidationError struct {
	// FieldName represents name of the field, which the error relates to.
	FieldName graphql.String
	// Message represents message specifying the validation error.
	Message graphql.String
}

// TestParserErrorResult represents an error occurred while running the parser and no events were parsed.
type TestParserErrorResult struct {
	// ErrorMessage represents an error message.
	ErrorMessage graphql.String
}

// TestParserResultV2 represents the result of running the parser on all the test events.
type TestParserResultV2 struct {
	TestParserSuccessResultV2
	TestParserErrorResult
}

// TestParserSuccessResultV2 represents the parser produced results for each test event.
type TestParserSuccessResultV2 struct {
	// Results represents the results of parsing the test events.
	Results []ParseEventResult
}

// TestResult represents the result of the test.
type TestResult struct {
	// Success represents true if the test was a success, false otherwise.
	Success graphql.Boolean
	// Message represents a message explaining the test result.
	Message graphql.String
}

type UnassignIngestTokenMutation struct {
	Repository Repository
}

type UnassignOrganizationRoleFromGroup struct {
	Group Group
}

type UnassignRoleFromGroup struct {
	Group Group
}

type UnassignSystemRoleFromGroup struct {
	Group Group
}

type UnblockIngestMutation struct {
	Repository Repository
}

type UnregisterNodeMutation struct {
	Cluster Cluster
}

type UpdateDashboardMutation struct {
	Dashboard Dashboard
}

type UpdateDefaultQueryPrefixMutation struct {
	Group Group
}

type UpdateDescriptionMutation struct {
	Description graphql.String
}

type UpdateGroupMutation struct {
	Group Group
}

type UpdateParserMutation struct {
	Parser Parser
}

type UpdateQueryPrefixMutation struct {
	Group Group
}

type UpdateRetentionMutation struct {
	Repository SearchDomain
}

type UpdateRoleMutation struct {
	Role Role
}

type UpdateSavedQueryPayload struct {
	SavedQuery SavedQuery
}

type UpdateUserByIDMutation struct {
	User User
}

type UpdateUserMutation struct {
	User User
}

// Error represents fDR test errors.
type Error struct {
	TestFdrValidationError
	TestFdrRequestError
}

type SetAutomaticSearching struct {
	AutomaticSearch graphql.Boolean
}

type UpdateDefaultRoleMutation struct {
	Group Group
}

// UserOrPendingUser represents a user or pending user, depending on whether an invitation was sent.
type UserOrPendingUser struct {
	User
	PendingUser
}

type AccessTokenValidatorResultType struct {
	SessionID              *graphql.String
	ShowTermsAndConditions *ShowTermsAndConditions
}

// Account represents a user account.
type Account struct {
	ID                           graphql.String
	EnabledFeaturesForAccount    []FeatureFlag
	Username                     graphql.String
	IsRoot                       graphql.Boolean
	IsOrganizationRoot           graphql.Boolean
	FullName                     *graphql.String
	FirstName                    *graphql.String
	LastName                     *graphql.String
	PhoneNumber                  *graphql.String
	Email                        *graphql.String
	Picture                      *graphql.String
	Settings                     UserSettings
	CreatedAt                    DateTime
	CountryCode                  *graphql.String
	StateCode                    *graphql.String
	Company                      *graphql.String
	CanCreateCloudTrialRepo      graphql.Boolean
	IsCloudProAccount            graphql.Boolean
	CanCreateRepo                graphql.Boolean
	ExternalPermissions          graphql.Boolean
	ExternalGroupSynchronization graphql.Boolean
	CurrentOrganization          Organization
	Announcement                 *Notification
	// NotificationsV2 represents [PREVIEW: New sorting and filtering options might be added.].
	NotificationsV2     NotificationsResultSet
	Token               *PersonalUserToken
	FieldConfigurations []FieldConfiguration
}

// ActionSecurityPolicies represents security policies for actions in the organization.
type ActionSecurityPolicies struct {
	// EmailActionEnabled represents indicates if email actions can be configured and triggered.
	EmailActionEnabled graphql.Boolean
	// EmailActionRecipientAllowList represents allow list of glob patterns for acceptable email action recipients. Empty means no recipients allowed whereas null means all.
	EmailActionRecipientAllowList *[]graphql.String
	// RepoActionEnabled represents indicates if repository actions can be configured and triggered.
	RepoActionEnabled graphql.Boolean
	// OpsGenieActionEnabled represents indicates if OpsGenie actions can be configured and triggered.
	OpsGenieActionEnabled graphql.Boolean
	// PagerDutyActionEnabled represents indicates if PagerDuty actions can be configured and triggered.
	PagerDutyActionEnabled graphql.Boolean
	// SlackSingleChannelActionEnabled represents indicates if single channel Slack actions can be configured and triggered.
	SlackSingleChannelActionEnabled graphql.Boolean
	// SlackMultiChannelActionEnabled represents indicates if multi channel Slack actions can be configured and triggered.
	SlackMultiChannelActionEnabled graphql.Boolean
	// UploadFileActionEnabled represents indicates if upload file actions can be configured and triggered.
	UploadFileActionEnabled graphql.Boolean
	// VictorOpsActionEnabled represents indicates if VictorOps actions can be configured and triggered.
	VictorOpsActionEnabled graphql.Boolean
	// WebhookActionEnabled represents indicates if Webhook actions can be configured and triggered.
	WebhookActionEnabled graphql.Boolean
	// WebhookActionURLAllowList represents allow list of glob patterns for acceptable webhook URLs. Empty means no recipients allowed whereas null means all.
	WebhookActionURLAllowList *[]graphql.String
}

type ActionTemplate struct {
	Name         graphql.String
	DisplayName  graphql.String
	YamlTemplate graphql.String
	// Type represents the type of action.
	Type ActionType
}

type ActiveSchemaOnView struct {
	ViewName     RepoOrViewName
	SchemaID     graphql.String
	Is1to1Linked graphql.Boolean
}

// AggregateAlert represents an aggregate alert.
type AggregateAlert struct {
	// ID represents id of the aggregate alert.
	ID graphql.String
	// Name represents name of the aggregate alert.
	Name graphql.String
	// Description represents description of the aggregate alert.
	Description *graphql.String
	// QueryString represents logScale query to execute.
	QueryString graphql.String
	// Actions represents list of actions to fire on query result.
	Actions []Action
	// Labels represents labels attached to the aggregate alert.
	Labels []graphql.String
	// Enabled represents flag indicating whether the aggregate alert is enabled.
	Enabled graphql.Boolean
	// ThrottleTimeSeconds represents throttle time in seconds.
	ThrottleTimeSeconds *Long
	// ThrottleField represents a field to throttle on. Can only be set if throttleTimeSeconds is set.
	ThrottleField *graphql.String
	// LastTriggered represents unix timestamp for last execution of trigger.
	LastTriggered *Long
	// LastErrorTime represents unix timestamp for last error.
	LastErrorTime *Long
	// LastError represents last error encountered while running the aggregate alert.
	LastError *graphql.String
	// LastWarnings represents last warnings encountered while running the aggregate alert.
	LastWarnings []graphql.String
	// YamlTemplate represents yAML specification of the aggregate alert.
	YamlTemplate YAML
	// PackageID represents the id of the package of the aggregate alert template.
	PackageID *VersionedPackageSpecifier
	// Package represents the package that the aggregate alert was installed as part of.
	Package *PackageInstallation
	// QueryOwnership represents ownership of the query run by this alert.
	QueryOwnership QueryOwnership
}

type AggregateAlertTemplate struct {
	Name         graphql.String
	DisplayName  graphql.String
	YamlTemplate YAML
	Labels       []graphql.String
}

// Alert represents an alert.
type Alert struct {
	// ID represents id of the alert.
	ID graphql.String
	// Name represents name of the alert.
	Name      graphql.String
	AssetType AssetType
	// RunAsUser represents id of user which the alert is running as.
	RunAsUser *User
	// DisplayName represents name of the alert.
	DisplayName graphql.String
	// Description represents name of the alert.
	Description *graphql.String
	// QueryString represents logScale query to execute.
	QueryString graphql.String
	// QueryStart represents start of the relative time interval for the query.
	QueryStart graphql.String
	// ThrottleTimeMillis represents throttle time in milliseconds.
	ThrottleTimeMillis Long
	// ThrottleField represents field to throttle on.
	ThrottleField *graphql.String
	// TimeOfLastTrigger represents unix timestamp for when the alert was last triggered.
	TimeOfLastTrigger *Long
	// Enabled represents flag indicating whether the alert is enabled.
	Enabled graphql.Boolean
	// Actions represents list of ids for actions to fire on query result.
	Actions []graphql.String
	// ActionsV2 represents list of ids for actions to fire on query result.
	ActionsV2 []Action
	// LastError represents last error encountered while running the alert.
	LastError *graphql.String
	// LastWarnings represents last warnings encountered while running the alert.
	LastWarnings []graphql.String
	// Labels represents labels attached to the alert.
	Labels []graphql.String
	// IsStarred represents flag indicating whether the calling user has 'starred' the alert.
	IsStarred graphql.Boolean
	// YamlTemplate represents a YAML formatted string that describes the alert.
	YamlTemplate graphql.String
	// PackageID represents the id of the package that the alert was installed as part of.
	PackageID *VersionedPackageSpecifier
	// Package represents the package that the alert was installed as part of.
	Package *PackageInstallation
	// QueryOwnership represents ownership of the query run by this alert.
	QueryOwnership QueryOwnership
}

type AlertTemplate struct {
	Name         graphql.String
	DisplayName  graphql.String
	YamlTemplate graphql.String
	Labels       []graphql.String
}

type AliasInfo struct {
	Source graphql.String
	Alias  graphql.String
}

type AliasMapping struct {
	ID                   graphql.String
	Name                 graphql.String
	Tags                 []TagInfo
	Aliases              []AliasInfo
	OriginalFieldsToKeep []graphql.String
}

// AnalyzeQueryInfo represents result of analyzing a query.
type AnalyzeQueryInfo struct {
	ValidateQuery QueryValidationInfo
}

// BlockedQuery represents a regex pattern used to filter queries before they are executed.
type BlockedQuery struct {
	ID                    graphql.String
	ExpiresAt             *DateTime
	ExpiresInMilliseconds *graphql.Int
	Pattern               graphql.String
	Type                  BlockedQueryMatcherType
	View                  *View
	// Organization represents the organization owning the pattern or view, if any.
	Organization          *Organization
	LimitedToOrganization graphql.Boolean
}

// BucketStorageConfig represents bucket storage configuration for the organization.
type BucketStorageConfig struct {
	// TargetBucketId1 represents the primary bucket storage of the organization.
	TargetBucketId1 graphql.String
	// TargetBucketId2 represents the secondary bucket storage of the organization.
	TargetBucketId2 *graphql.String
}

// CachePolicy represents a policy for choosing which segments to cache on local disk when overcommiting local storage with bucket storage. This can be used to protect certain repositories for local storage, such that searching other repositories does not evict them. A cache policy in Humio divides segments into prioritized and non-prioritized segments. When segments needs to be evicted from local storage, we always try evicting non-prioritized segments before prioritized segments. A cache policy can be set either on one of three levels (in order of precedence): - Repo - Org - Globally When determining the cache policy for a repo we first check if there is a cache policy set on the repo. If none is set on the repo, we check the the org. If none is set there either we check the global setting.
type CachePolicy struct {
	// PrioritizeMillis represents prioritize caching segments younger than this.
	PrioritizeMillis *Long
}

// ChildOrganizationsResultSet represents an organization search result set.
type ChildOrganizationsResultSet struct {
	// TotalResults represents the total number of matching results.
	TotalResults graphql.Int
	// Results represents the paginated result set.
	Results []Organization
}

// Client represents identifies a client of the query.
type Client struct {
	ExternalID graphql.String
	IP         *graphql.String
	User       *graphql.String
}

// Cluster represents information about the Humio cluster.
type Cluster struct {
	Nodes                                []ClusterNode
	ClusterManagementSettings            ClusterManagementSettings
	ClusterInfoAgeSeconds                graphql.Float
	UnderReplicatedSegmentSize           graphql.Float
	OverReplicatedSegmentSize            graphql.Float
	MissingSegmentSize                   graphql.Float
	ProperlyReplicatedSegmentSize        graphql.Float
	InBucketStorageSegmentSize           graphql.Float
	PendingBucketStorageSegmentSize      graphql.Float
	PendingBucketStorageRiskySegmentSize graphql.Float
	TargetUnderReplicatedSegmentSize     graphql.Float
	TargetOverReplicatedSegmentSize      graphql.Float
	TargetMissingSegmentSize             graphql.Float
	TargetProperlyReplicatedSegmentSize  graphql.Float
	IngestPartitions                     []IngestPartition
	IngestPartitionsWarnings             []graphql.String
	SuggestedIngestPartitions            []IngestPartition
	StoragePartitions                    []StoragePartition
	StoragePartitionsWarnings            []graphql.String
	SuggestedStoragePartitions           []StoragePartition
	StorageReplicationFactor             *graphql.Int
	DigestReplicationFactor              *graphql.Int
	Stats                                ClusterStats
	// DefaultCachePolicy represents [PREVIEW: Cache policies are a limited feature and is subject to change] The default cache policy of this cluster.
	DefaultCachePolicy *CachePolicy
}

type ClusterConnectionTag struct {
	Key   graphql.String
	Value graphql.String
}

// ClusterManagementSettings represents settings for the Humio cluster.
type ClusterManagementSettings struct {
	// SegmentReplicationFactor represents replication factor for segments.
	SegmentReplicationFactor graphql.Int
	// DigestReplicationFactor represents replication factor for the digesters.
	DigestReplicationFactor graphql.Int
	// MinHostAlivePercentageToEnableClusterRebalancing represents percentage of all hosts relevant to a particular cluster rebalance operation that need to be alive before we allow the system to automatically execute the operation. Cluster rebalance operations currently include reassigning digest work, and moving existing segments to balance disk usage. Value is between 0 and 100, both inclusive.
	MinHostAlivePercentageToEnableClusterRebalancing graphql.Int
	// AllowUpdateDesiredDigesters represents whether or not desired digesters are allowed to be updated automatically.
	AllowUpdateDesiredDigesters graphql.Boolean
	// AllowRebalanceExistingSegments represents true if the cluster should allow moving existing segments between nodes to achieve a better data distribution.
	AllowRebalanceExistingSegments graphql.Boolean
}

// ClusterNode represents a node in the a Humio Cluster.
type ClusterNode struct {
	ID                    graphql.Int
	Name                  graphql.String
	Zone                  *graphql.String
	URI                   graphql.String
	UUID                  graphql.String
	HumioVersion          graphql.String
	SupportedTasks        []NodeTaskEnum
	AssignedTasks         *[]NodeTaskEnum
	UnassignedTasks       *[]NodeTaskEnum
	ConsideredAliveUntil  *DateTime
	ClusterInfoAgeSeconds graphql.Float
	// InboundSegmentSize represents the size in GB of data this node needs to receive.
	InboundSegmentSize graphql.Float
	// OutboundSegmentSize represents the size in GB of data this node has that others need.
	OutboundSegmentSize                   graphql.Float
	CanBeSafelyUnregistered               graphql.Boolean
	ReasonsNodeCannotBeSafelyUnregistered ReasonsNodeCannotBeSafelyUnregistered
	// CurrentSize represents the size in GB of data currently on this node.
	CurrentSize graphql.Float
	// PrimarySize represents the size in GB of the data currently on this node that are in the primary storage location.
	PrimarySize graphql.Float
	// SecondarySize represents the size in GB of the data currently on this node that are in the secondary storage location. Zero if no secondary is configured.
	SecondarySize graphql.Float
	// TotalSizeOfPrimary represents the total size in GB of the primary storage location on this node.
	TotalSizeOfPrimary graphql.Float
	// TotalSizeOfSecondary represents the total size in GB of the secondary storage location on this node. Zero if no secondary is configured.
	TotalSizeOfSecondary graphql.Float
	// FreeOnPrimary represents the size in GB of the free space on this node of the primary storage location.
	FreeOnPrimary graphql.Float
	// FreeOnSecondary represents the size in GB of the free space on this node of the secondary storage location. Zero if no secondary is configured.
	FreeOnSecondary graphql.Float
	// WipSize represents the size in GB of work-in-progress data files.
	WipSize graphql.Float
	// TargetSize represents the size in GB of data once the node has received the data allocated to it.
	TargetSize graphql.Float
	// SolitarySegmentSize represents the size in GB of data that only exists on this node - i.e. only one replica exists in the cluster.
	SolitarySegmentSize graphql.Float
	// IsAvailable represents a flag indicating whether the node is considered up or down by the cluster coordinated. This is based on the `lastHeartbeat` field.
	IsAvailable graphql.Boolean
	// LastHeartbeat represents the last time a heartbeat was received from the node.
	LastHeartbeat DateTime
	// TimeSinceLastHeartbeat represents the time since a heartbeat was received from the node.
	TimeSinceLastHeartbeat Long
	// IsBeingEvicted represents a flag indicating whether the node is marked for eviction. The Falcon LogScale cluster will start to move segments, digesters and queries away from any node marked for eviction.
	IsBeingEvicted *graphql.Boolean
	// EvictionStatus represents contains data describing the status of eviction.
	EvictionStatus EvictionStatus
	// HasStorageRole represents true if the machine the node runs on has local segment storage.
	HasStorageRole graphql.Boolean
	// HasDigestRole represents true if the machine the node runs on has the possibility to process kafka partitions.
	HasDigestRole graphql.Boolean
	// BootedAt represents the time at which the host booted.
	BootedAt DateTime
	// TimeSinceBooted represents the time since last boot.
	TimeSinceBooted Long
}

// ClusterStats represents global stats for the cluster.
type ClusterStats struct {
	CompressedByteSize           Long
	UncompressedByteSize         Long
	CompressedByteSizeOfMerged   Long
	UncompressedByteSizeOfMerged Long
}

// ConnectionAspectErrorType represents a key-value pair from a connection aspect to an error message pertaining to that aspect.
type ConnectionAspectErrorType struct {
	// Aspect represents a connection aspect.
	Aspect ConnectionAspect
	// Error represents an error message for the connection, tagged by the relevant aspect.
	Error graphql.String
}

// CrossOrgViewConnection represents represents the connection between a view and an underlying repository in another organization.
type CrossOrgViewConnection struct {
	// ID represents iD of the underlying repository.
	ID graphql.String
	// Name represents name of the underlying repository.
	Name graphql.String
	// Filter represents the filter applied to all results from the repository.
	Filter          graphql.String
	LanguageVersion LanguageVersion
	// OrgID represents iD of the organization containing the underlying repository.
	OrgID graphql.String
}

// CrowdStrikeIocStatus represents the status the local database of CrowdStrike IOCs.
type CrowdStrikeIocStatus struct {
	DatabaseTables []IocTableInfo
}

type CurrentStats struct {
	Ingest      Ingest
	StoredData  StoredData
	ScannedData ScannedData
	Users       UsersLimit
}

// CurrentUsageQueryResult represents query result for current usage.
type CurrentUsageQueryResult struct {
	QueryInProgress
	CurrentStats
}

type CustomLinkInteraction struct {
	URLTemplate   graphql.String
	OpenInNewTab  graphql.Boolean
	URLEncodeArgs graphql.Boolean
}

// Dashboard represents represents information about a dashboard.
type Dashboard struct {
	ID          graphql.String
	Name        graphql.String
	Description *graphql.String
	AssetType   AssetType
	// TemplateYaml represents a YAML formatted string that describes the dashboard. It does not contain links or permissions, and is safe to share and use for making copies of a dashboard.
	TemplateYaml             graphql.String
	DisplayName              graphql.String
	Labels                   []graphql.String
	Widgets                  []Widget
	ReadOnlyTokens           []DashboardLink
	Filters                  []DashboardFilter
	Parameters               []DashboardParameter
	UpdateFrequency          DashboardUpdateFrequencyType
	IsStarred                graphql.Boolean
	DefaultFilter            *DashboardFilter
	DefaultSharedTimeStart   graphql.String
	DefaultSharedTimeEnd     graphql.String
	TimeJumpSizeInMs         *graphql.Int
	DefaultSharedTimeEnabled graphql.Boolean
	SearchDomain             SearchDomain
	PackageID                *VersionedPackageSpecifier
	Package                  *PackageInstallation
}

// DashboardFilter represents a saved configuration for filtering dashboard widgets.
type DashboardFilter struct {
	ID           graphql.String
	Name         graphql.String
	PrefixFilter graphql.String
}

// DashboardLink represents a token that can be used to access the dashboard without logging in. Useful for e.g. wall mounted dashboards or public dashboards.
type DashboardLink struct {
	Name      graphql.String
	Token     graphql.String
	CreatedBy graphql.String
	// IPFilter represents the ip filter for the dashboard link.
	IPFilter *IPFilter
	// QueryOwnership represents ownership of the queries run by this shared dashboard.
	QueryOwnership QueryOwnership
}

type DashboardLinkInteraction struct {
	Arguments           []DictionaryEntryType
	DashboardReference  DashboardLinkInteractionDashboardReference
	OpenInNewTab        graphql.Boolean
	UseWidgetTimeWindow graphql.Boolean
}

// DashboardLinkInteractionDashboardReference represents a reference to a dashboard either by id or name.
type DashboardLinkInteractionDashboardReference struct {
	ID               *graphql.String
	Name             *graphql.String
	RepoOrViewName   *RepoOrViewName
	PackageSpecifier *UnversionedPackageSpecifier
}

// DashboardPage represents a page of dashboards.
type DashboardPage struct {
	PageInfo PageType
	Page     []Dashboard
}

type DashboardTemplate struct {
	Name         graphql.String
	DisplayName  graphql.String
	YamlTemplate graphql.String
	Labels       []graphql.String
}

// DashboardUpdateFrequencyType represents the frequency at which a dashboard fetches new results for widgets.
type DashboardUpdateFrequencyType struct {
	NeverDashboardUpdateFrequency
	RealTimeDashboardUpdateFrequency
}

// Datasource represents a datasource, e.g. file name or system sending data to Humio.
type Datasource struct {
	Name            graphql.String
	OldestTimestamp DateTime
	NewestTimestamp DateTime
	Tags            []Tag
	// SizeAtIngest represents the size in Gigabytes of the data from this data source before compression.
	SizeAtIngest graphql.Float
	// SizeOnDisk represents this size in Gigabytes of the data from this data source currently on disk.
	SizeOnDisk graphql.Float
	// SizeAtIngestOfMerged represents the size in Gigabytes of the data from this data source before compression, but only for the parts that are now part of a merged segment file.
	SizeAtIngestOfMerged graphql.Float
	// SizeOnDiskOfMerged represents this size in Gigabytes of the data from this data source currently on disk, but only for the parts that are now part of a merged segment file.
	SizeOnDiskOfMerged graphql.Float
}

// DeleteEvents represents a deletion of a set of events.
type DeleteEvents struct {
	ID              graphql.String
	Created         DateTime
	Start           DateTime
	End             DateTime
	Query           graphql.String
	CreatedByUser   *graphql.String
	LanguageVersion LanguageVersion
}

// DictionaryEntryType represents entry into a list of unordered key-value pairs with unique keys.
type DictionaryEntryType struct {
	Key   graphql.String
	Value graphql.String
}

// DynamicConfigKeyValueType represents a key value pair of a dynamic config and the accompanying value.
type DynamicConfigKeyValueType struct {
	// DynamicConfigKey represents the dynamic config key.
	DynamicConfigKey DynamicConfig
	// DynamicConfigValue represents the dynamic config value.
	DynamicConfigValue graphql.String
}

type EntitySearchResultEntity struct {
	ViewInteractionEntry
}

type EntitySearchResultEntry struct {
	Cursor graphql.String
	Entity EntitySearchResultEntity
}

// EventForwarderForSelection represents an event forwarder.
type EventForwarderForSelection struct {
	// ID represents id of the event forwarder.
	ID graphql.String
	// Name represents name of the event forwarder.
	Name graphql.String
	// Description represents description of the event forwarder.
	Description graphql.String
	Enabled     graphql.Boolean
	// Kind represents the kind of event forwarder.
	Kind EventForwarderKind
}

// EventForwardingRule represents an event forwarding rule.
type EventForwardingRule struct {
	// ID represents the unique id for the event forwarding rule.
	ID graphql.String
	// QueryString represents the query string for filtering and mapping the events to forward.
	QueryString graphql.String
	// EventForwarderID represents the id of the event forwarder.
	EventForwarderID graphql.String
	// CreatedAt represents the unix timestamp the event forwarder was created.
	CreatedAt       *Long
	LanguageVersion LanguageVersion
}

// EvictionStatus represents fields that helps describe the status of eviction.
type EvictionStatus struct {
	CurrentlyUnderReplicatedBytes Long
	TotalSegmentBytes             Long
	IsDigester                    graphql.Boolean
	BytesThatExistOnlyOnThisNode  graphql.Float
}

// ExternalFunctionSpecificationOutput represents the specification of an external function.
type ExternalFunctionSpecificationOutput struct {
	// Name represents the name of the external function.
	Name graphql.String
	// ProcedureURL represents the URL for the external function.
	ProcedureURL graphql.String
	// Parameters represents the parameter specifications for the external function.
	Parameters []ParameterSpecificationOutput
	// Description represents the description for the external function.
	Description graphql.String
	// Kind represents the kind of external function. This defines how the external function is executed.
	Kind KindOutput
}

// FdrFeed represents information about an FDR feed.
type FdrFeed struct {
	// ID represents id of the FDR feed.
	ID graphql.String
	// Name represents name of the FDR feed.
	Name graphql.String
	// Description represents description of the FDR feed.
	Description *graphql.String
	// ParserID represents the id of the parser that is used to parse the FDR data.
	ParserID graphql.String
	// ClientID represents aWS client id of the FDR feed.
	ClientID graphql.String
	// SqsURL represents aWS SQS queue url of the FDR feed.
	SqsURL graphql.String
	// S3Identifier represents aWS S3 Identifier of the FDR feed.
	S3Identifier graphql.String
	// Enabled represents is ingest from the FDR feed enabled?.
	Enabled graphql.Boolean
}

// FdrFeedControl represents administrator control for an FDR feed.
type FdrFeedControl struct {
	// ID represents id of the FDR feed.
	ID graphql.String
	// MaxNodes represents maximum number of nodes to poll FDR feed with.
	MaxNodes *graphql.Int
	// FileDownloadParallelism represents maximum amount of files downloaded from s3 in parallel for a single node.
	FileDownloadParallelism *graphql.Int
}

// FeatureFlagV2 represents feature flags with details.
type FeatureFlagV2 struct {
	Flag         FeatureFlag
	Description  graphql.String
	Experimental graphql.Boolean
}

type FieldAliasSchema struct {
	ID        graphql.String
	Name      graphql.String
	Fields    []SchemaField
	Instances []AliasMapping
	Version   graphql.String
}

type FieldAliasSchemasInfo struct {
	Schemas              []FieldAliasSchema
	ActiveSchemaOnOrg    *graphql.String
	ActiveSchemasOnViews []ActiveSchemaOnView
}

// FieldConfiguration represents presentation preferences used when a field is added to table and event list widgets in the UI.
type FieldConfiguration struct {
	// FieldName represents the field the configuration is associated with.
	FieldName graphql.String
	// Config represents a JSON object containing the column properties applied to the column when it is added to a widget.
	Config JSON
}

// FieldHasValue represents an assertion that an event output from a parser test case has an expected value for a given field.
type FieldHasValue struct {
	// FieldName represents field to assert on.
	FieldName graphql.String
	// ExpectedValue represents value expected to be contained in the field.
	ExpectedValue graphql.String
}

// File represents a file upload to Humio for use with the `match` query function. You can see them under the Files page in the UI.
type File struct {
	ContentHash   graphql.String
	NameAndPath   FileNameAndPath
	CreatedAt     DateTime
	CreatedBy     graphql.String
	ModifiedAt    DateTime
	FileSizeBytes *Long
	ModifiedBy    graphql.String
	PackageID     *VersionedPackageSpecifier
	Package       *PackageInstallation
}

type FileNameAndPath struct {
	Name graphql.String
	// Path represents paths for files can be one of two types: absolute or relative. Absolute paths start with a slash, and relative paths start without a slash, like Unix paths. Every repository or view in the system is considered a "folder" in its own right, meaning that every relative path is relative to the current view. An absolute path points to something that can be addressed from any view, and a relative path points to a file located inside the view. If there is no path, it means the file is located at your current location.
	Path *graphql.String
}

// FilesConfig represents the config for lookup files.
type FilesConfig struct {
	MaxFileUploadSize graphql.Int
}

// FilterAlert represents a filter alert.
type FilterAlert struct {
	// ID represents id of the filter alert.
	ID graphql.String
	// Name represents name of the filter alert.
	Name graphql.String
	// Description represents description of the filter alert.
	Description *graphql.String
	// QueryString represents logScale query to execute.
	QueryString graphql.String
	// Actions represents list of ids for actions to fire on query result.
	Actions []Action
	// Labels represents labels attached to the filter alert.
	Labels []graphql.String
	// Enabled represents flag indicating whether the filter alert is enabled.
	Enabled graphql.Boolean
	// ThrottleTimeSeconds represents throttle time in seconds.
	ThrottleTimeSeconds *Long
	// ThrottleField represents a field to throttle on. Can only be set if throttleTimeSeconds is set.
	ThrottleField *graphql.String
	// LastTriggered represents unix timestamp for last execution of trigger.
	LastTriggered *Long
	// LastErrorTime represents unix timestamp for last error.
	LastErrorTime *Long
	// LastError represents last error encountered while running the filter alert.
	LastError *graphql.String
	// LastWarnings represents last warnings encountered while running the filter alert.
	LastWarnings []graphql.String
	// YamlTemplate represents yAML specification of the filter alert.
	YamlTemplate YAML
	// PackageID represents the id of the package that the alert was installed as part of.
	PackageID *VersionedPackageSpecifier
	// Package represents the package that the alert was installed as part of.
	Package *PackageInstallation
	// QueryOwnership represents ownership of the query run by this alert.
	QueryOwnership QueryOwnership
}

// FilterAlertConfig represents the default config for filter alerts.
type FilterAlertConfig struct {
	// FilterAlertEmailTriggerLimit represents maximum trigger limit for filter alerts with one or more email actions.
	FilterAlertEmailTriggerLimit graphql.Int
	// FilterAlertNonEmailTriggerLimit represents maximum trigger limit for filter alerts with no email actions.
	FilterAlertNonEmailTriggerLimit graphql.Int
}

type FilterAlertTemplate struct {
	Name         graphql.String
	DisplayName  graphql.String
	YamlTemplate YAML
	Labels       []graphql.String
}

type FleetInstallationToken struct {
	Token                 graphql.String
	Name                  graphql.String
	AssignedConfiguration *LogCollectorConfiguration
	InstallationCommands  LogCollectorInstallCommand
}

// Group represents a group.
type Group struct {
	ID                       graphql.String
	DisplayName              graphql.String
	DefaultQueryPrefix       *graphql.String
	DefaultRole              *Role
	DefaultSearchDomainCount graphql.Int
	LookupName               *graphql.String
	SearchDomainCount        graphql.Int
	Roles                    []SearchDomainRole
	SearchDomainRoles        []SearchDomainRole
	SearchDomainRolesByName  *SearchDomainRole
	SystemRoles              []GroupSystemRole
	OrganizationRoles        []GroupOrganizationRole
	QueryPrefixes            []QueryPrefixes
	UserCount                graphql.Int
	Users                    []User
}

type GroupFilterInfo struct {
	Total    graphql.Int
	Added    graphql.Int
	Removed  graphql.Int
	NoChange graphql.Int
}

// GroupOrganizationRole represents the organization roles of the group.
type GroupOrganizationRole struct {
	Role Role
}

// GroupPage represents a page of groups in an organization.
type GroupPage struct {
	PageInfo PageType
	Page     []Group
}

// GroupResultSetType represents the groups query result set.
type GroupResultSetType struct {
	// TotalResults represents the total number of matching results.
	TotalResults graphql.Int
	// Results represents the paginated result set.
	Results []Group
}

// GroupSearchDomainRole represents the role assigned to a group in a SearchDomain.
type GroupSearchDomainRole struct {
	Role         Role
	SearchDomain SearchDomain
	Group        Group
}

// GroupSystemRole represents the system roles of the group.
type GroupSystemRole struct {
	Role Role
}

// HealthStatus represents health status of the service.
type HealthStatus struct {
	// Status represents the latest status from the service.
	Status graphql.String
	// Message represents the latest health status message from the service.
	Message graphql.String
}

// HumioMetadata represents represents information about the Humio instance.
type HumioMetadata struct {
	// IsFeatureFlagEnabled represents returns enabled features that are likely in beta.
	IsFeatureFlagEnabled graphql.Boolean
	ExternalPermissions  graphql.Boolean
	Version              graphql.String
	// IsClusterBeingUpdated represents [PREVIEW: Experimental field used to improve the user experience during cluster upgrades.] An indication whether or not the cluster is being updated. This is based off of differences in the cluster node versions.
	IsClusterBeingUpdated graphql.Boolean
	// MinimumNodeVersion represents [PREVIEW: Experimental field used to improve the user experience during cluster upgrades.] The lowest detected node version in the cluster.
	MinimumNodeVersion     graphql.String
	Environment            EnvironmentType
	ClusterID              graphql.String
	FalconDataConnectorURL *graphql.String
	Regions                []RegionSelectData
	// AwsRegions represents [PREVIEW: Experimental feature, not ready for production.] List of supported AWS regions.
	AwsRegions []graphql.String
	// IngestFeedAwsRoleArn represents [PREVIEW: Experimental feature, not ready for production.] Cluster AWS IAM role arn (Amazon Resource Name) used to assume role for ingest feeds.
	IngestFeedAwsRoleArn *graphql.String
	// AwsIngestFeedsConfigurationStatus represents [PREVIEW: Experimental feature, not ready for production.] Configuration status for AWS ingest feeds.
	AwsIngestFeedsConfigurationStatus  IngestFeedConfigurationStatus
	SharedDashboardsEnabled            graphql.Boolean
	PersonalUserTokensEnabled          graphql.Boolean
	GlobalAllowListEmailActionsEnabled graphql.Boolean
	IsAutomaticUpdateCheckingEnabled   graphql.Boolean
	// AuthenticationMethod represents the authentication method used for the cluster node.
	AuthenticationMethod            AuthenticationMethod
	OrganizationMultiMode           graphql.Boolean
	OrganizationMode                OrganizationMode
	SandboxesEnabled                graphql.Boolean
	ExternalGroupSynchronization    graphql.Boolean
	AllowActionsNotUseProxy         graphql.Boolean
	IsUsingSMTP                     graphql.Boolean
	IsPendingUsersEnabled           graphql.Boolean
	ScheduledSearchMaxBackfillLimit *graphql.Int
	IsExternalManaged               graphql.Boolean
	IsAPIExplorerEnabled            graphql.Boolean
	EulaURL                         graphql.String
	// DeleteBackupAfter represents the time in ms after which a repository has been marked for deletion it will no longer be restorable.
	DeleteBackupAfter          Long
	MaxCsvFileUploadSizeBytes  Long
	MaxJSONFileUploadSizeBytes Long
	// FilterAlertConfig represents the filter alert config.
	FilterAlertConfig FilterAlertConfig
	// FilesConfig represents the lookup files config.
	FilesConfig FilesConfig
}

// HumioQuery represents a Humio query.
type HumioQuery struct {
	LanguageVersion LanguageVersion
	QueryString     graphql.String
	Arguments       []DictionaryEntryType
	Start           graphql.String
	End             graphql.String
	IsLive          graphql.Boolean
}

// IPFilter represents an IP Filter.
type IPFilter struct {
	// ID represents the unique id for the ip filter.
	ID graphql.String
	// Name represents the name for the ip filter.
	Name graphql.String
	// IPFilter represents the ip filter.
	IPFilter graphql.String
}

type IdentityProviderAuth struct {
	ID                   graphql.String
	Name                 graphql.String
	AuthenticationMethod AuthenticationMethodAuth
}

type Ingest struct {
	CurrentBytes Long
	Limit        UsageLimit
}

// IngestFeed represents an ingest feed.
type IngestFeed struct {
	// ID represents id of the ingest feed.
	ID graphql.String
	// Name represents name of the ingest feed.
	Name graphql.String
	// Description represents description of the ingest feed.
	Description *graphql.String
	// Parser represents parser used to parse the ingest feed.
	Parser *Parser
	// Enabled represents is ingest from the ingest feed enabled?.
	Enabled graphql.Boolean
	// Source represents the source which this ingest feed will ingest from.
	Source IngestFeedSource
	// CreatedAt represents unix timestamp for when this feed was created.
	CreatedAt Long
	// ExecutionInfo represents details about how the ingest feed is running.
	ExecutionInfo *IngestFeedExecutionInfo
}

// IngestFeedAwsAuthentication represents how to authenticate to AWS.
type IngestFeedAwsAuthentication struct {
	IngestFeedAwsAuthenticationIamRole
}

// IngestFeedAwsAuthenticationIamRole represents iAM role authentication.
type IngestFeedAwsAuthenticationIamRole struct {
	// RoleArn represents arn of the role to be assumed.
	RoleArn graphql.String
	// ExternalID represents external Id to the role to be assumed.
	ExternalID graphql.String
}

// IngestFeedConfigurationStatus represents represents the configuration status of the ingest feed feature on the cluster.
type IngestFeedConfigurationStatus struct {
	IsConfigured graphql.Boolean
}

// IngestFeedExecutionInfo represents details about how the ingest feed is running.
type IngestFeedExecutionInfo struct {
	// LatestActivity represents unix timestamp of the latest activity for the feed.
	LatestActivity *Long
	// StatusMessage represents details about the status of the ingest feed.
	StatusMessage *IngestFeedStatus
}

// IngestFeedPreprocessing represents the preprocessing to apply to an ingest feed before parsing.
type IngestFeedPreprocessing struct {
	IngestFeedPreprocessingSplitNewline
	IngestFeedPreprocessingSplitAwsRecords
}

// IngestFeedPreprocessingSplitAwsRecords represents interpret the input as AWS JSON record format and emit each record as an event.
type IngestFeedPreprocessingSplitAwsRecords struct {
	// Kind represents the kind of preprocessing to do.
	Kind IngestFeedPreprocessingKind
}

// IngestFeedPreprocessingSplitNewline represents interpret the input as newline-delimited and emit each line as an event.
type IngestFeedPreprocessingSplitNewline struct {
	// Kind represents the kind of preprocessing to do.
	Kind IngestFeedPreprocessingKind
}

// IngestFeedQueryResultSet represents the ingest feed query result set.
type IngestFeedQueryResultSet struct {
	// TotalResults represents the total number of matching results.
	TotalResults graphql.Int
	// Results represents the paginated result set.
	Results []IngestFeed
}

// IngestFeedS3SqsSource represents an ingest feed that polls data from S3 and is notified via SQS.
type IngestFeedS3SqsSource struct {
	// SqsURL represents aWS SQS queue url.
	SqsURL graphql.String
	// Preprocessing represents the preprocessing to apply to an ingest feed before parsing.
	Preprocessing IngestFeedPreprocessing
	// AwsAuthentication represents how to authenticate to AWS.
	AwsAuthentication IngestFeedAwsAuthentication
	// Compression represents compression scheme of the file.
	Compression IngestFeedCompression
	// Region represents the AWS region to connect to.
	Region graphql.String
}

// IngestFeedSource represents the source from which to download from an ingest feed.
type IngestFeedSource struct {
	IngestFeedS3SqsSource
}

// IngestFeedStatus represents details about the status of the ingest feed.
type IngestFeedStatus struct {
	// Problem represents description of the problem with the ingest feed.
	Problem graphql.String
	// TerseProblem represents terse description of the problem with the ingest feed.
	TerseProblem *graphql.String
	// StatusTimestamp represents timestamp, in milliseconds, of when the status message was set.
	StatusTimestamp Long
	// Cause represents cause of the problem with the ingest feed.
	Cause *IngestFeedStatusCause
}

// IngestFeedStatusCause represents details about the cause of the problem.
type IngestFeedStatusCause struct {
	// Cause represents description of the cause of the problem.
	Cause graphql.String
	// TerseCause represents terse description of the cause of the problem.
	TerseCause *graphql.String
}

// IngestListener represents ingest Listeners listen on a port for UDP or TCP traffic, used with SysLog.
type IngestListener struct {
	ID         graphql.String
	Repository Repository
	// Port represents the TCP/UDP port to listen to.
	Port graphql.Int
	// Protocol represents the network protocol data is sent through.
	Protocol IngestListenerProtocol
	// Charset represents the charset used to decode the event stream. Available charsets depend on the JVM running the Humio instance. Names and aliases can be found at http://www.iana.org/assignments/character-sets/character-sets.xhtml.
	Charset graphql.String
	// VHost represents specify which host should open the socket. By default this field is empty and all hosts will open a socket. This field can be used to select only one host to open the socket.
	VHost *graphql.Int
	Name  graphql.String
	// BindInterface represents the ip address this listener will bind to. By default (leaving this field empty) it will bind to 0.0.0.0 - all interfaces. Using this field it is also possible to specify the address to bind to. In a cluster setup it is also possible to specify if only one machine should open a socket - The vhost field is used for that.
	BindInterface graphql.String
	// Parser represents the parser configured to parse data for the listener. This returns null if the parser has been removed since the listener was created.
	Parser *Parser
}

// IngestPartition represents a cluster ingest partition. It assigns cluster nodes with the responsibility of ingesting data.
type IngestPartition struct {
	ID graphql.Int
	// NodeIDs represents the ids of the node responsible executing real-time queries for the partition and writing events to time series. The list is ordered so that the first node is the primary node and the rest are followers ready to take over if the primary fails.
	NodeIDs []graphql.Int
}

// IngestToken represents an API ingest token used for sending data to Humio.
type IngestToken struct {
	Name   graphql.String
	Token  graphql.String
	Parser *Parser
}

// IocTableInfo represents the status of an IOC database table.
type IocTableInfo struct {
	// Name represents the name of the indicator type in this table.
	Name   graphql.String
	Status IocTableStatus
	// LastUpdated represents the number of milliseconds since epoch that the IOC database was last updated.
	LastUpdated *Long
	// Count represents the number of indicators in the database.
	Count graphql.Int
}

// IPDatabaseInfo represents represents information about the IP database used by Humio.
type IPDatabaseInfo struct {
	// DbFilePath represents the absolute file path of the file containing the database.
	DbFilePath graphql.String
	// UpdateStrategy represents the update strategy used for the IP Database.
	UpdateStrategy graphql.String
	// Metadata represents metadata about the IP Database used by Humio.
	Metadata *IpDatabaseMetadata
}

// IPDatabaseMetadata represents represents metadata about the IP database used by Humio.
type IPDatabaseMetadata struct {
	// Type represents the type of database.
	Type graphql.String
	// BuildDate represents the date on which the database was build.
	BuildDate DateTime
	// Description represents the description of the database.
	Description graphql.String
	// DbFileMd5 represents the md5 hash of the file containing the database.
	DbFileMd5 graphql.String
}

type KafkaClusterDescription struct {
	ClusterID          graphql.String
	Nodes              []KafkaNode
	Controller         KafkaNode
	LogDirDescriptions []KafkaLogDir
	GlobalEventsTopic  KafkaTopicDescription
	IngestTopic        KafkaTopicDescription
	ChatterTopic       KafkaTopicDescription
}

type KafkaLogDir struct {
	NodeID          graphql.Int
	Path            graphql.String
	Error           *graphql.String
	TopicPartitions []KafkaNodeTopicPartitionLogDescription
}

type KafkaNode struct {
	ID   graphql.Int
	Host *graphql.String
	Port graphql.Int
	Rack *graphql.String
}

type KafkaNodeTopicPartitionLogDescription struct {
	TopicPartition KafkaTopicPartition
	Offset         Long
	Size           Long
	IsFuture       graphql.Boolean
}

type KafkaTopicConfig struct {
	Key   graphql.String
	Value graphql.String
}

type KafkaTopicConfigs struct {
	Configs        []KafkaTopicConfig
	DefaultConfigs []KafkaTopicConfig
}

type KafkaTopicDescription struct {
	Name       graphql.String
	Config     KafkaTopicConfigs
	Partitions []KafkaTopicPartitionDescription
}

type KafkaTopicPartition struct {
	Topic     graphql.String
	Partition graphql.Int
}

type KafkaTopicPartitionDescription struct {
	Partition      graphql.Int
	Leader         graphql.Int
	Replicas       []graphql.Int
	InSyncReplicas []graphql.Int
}

// KindOutput represents defines how the external function is executed.
type KindOutput struct {
	// Name represents the name of the kind of external function.
	Name KindEnum
	// ParametersDefiningKeyFields represents the parameters that specify the key fields. Use for the 'Enrichment' functions.
	ParametersDefiningKeyFields *[]graphql.String
	// FixedKeyFields represents the names of the keys when they're returned from the external function. Use for the 'Enrichment' functions.
	FixedKeyFields *[]graphql.String
}

type LanguageVersion struct {
	// Name represents if non-null, this is a version known by the current version of Humio.
	Name *LanguageVersionEnum
	// FutureName represents if non-null, this is a version stored by a future Humio version.
	FutureName *graphql.String
	// Version represents the language version.
	Version LanguageVersionOutputType
	// IsKnown represents if false, this version isn't recognized by the current version of Humio. It must have been stored by a future Humio version. This can happen if Humio was upgraded, and subsequently downgraded (rolled back).
	IsKnown graphql.Boolean
}

// LanguageVersionOutputType represents a specific language version.
type LanguageVersionOutputType struct {
	// Name represents the name of the language version. The name is case insensitive.
	Name graphql.String
}

// Limit represents a Limit added to the organization.
type Limit struct {
	// LimitName represents the limit name.
	LimitName graphql.String
	// AllowLogin represents if the limit allows logging in.
	AllowLogin graphql.Boolean
	// DailyIngest represents the daily ingest allowed for the limit.
	DailyIngest Long
	// Retention represents the retention in days allowed for the limit.
	Retention graphql.Int
	// AllowSelfService represents if the limit allows self service.
	AllowSelfService graphql.Boolean
	// DeletedDate represents the deleted date for the limit.
	DeletedDate *Long
}

// LimitV2 represents a Limit added to the organization.
type LimitV2 struct {
	// ID represents the id.
	ID graphql.String
	// LimitName represents the limit name.
	LimitName graphql.String
	// DisplayName represents the display name of the limit.
	DisplayName graphql.String
	// AllowLogin represents if the limit allows logging in.
	AllowLogin graphql.Boolean
	// DailyIngest represents the daily ingest allowed for the limit.
	DailyIngest contractual
	// StorageLimit represents the amount of storage allowed for the limit.
	StorageLimit contractual
	// DataScannedLimit represents the data scanned measurement allowed for the limit.
	DataScannedLimit contractual
	// MeasurementPoint represents the usage measurement type used for the limit.
	MeasurementPoint Organizations__MeasurementType
	// UserLimit represents the user seats allowed for the limit.
	UserLimit contractual
	// RepoLimit represents the number of repositories allowed for the limit.
	RepoLimit *graphql.Int
	// Retention represents the retention in days for the limit, that's the contracted value.
	Retention graphql.Int
	// MaxRetention represents the max retention in days allowed for the limit, this can be greater than or equal to retention.
	MaxRetention graphql.Int
	// AllowSelfService represents if the limit allows self service.
	AllowSelfService graphql.Boolean
	// DeletedDate represents the deleted date for the limit.
	DeletedDate *Long
	// ExpirationDate represents the expiration date for the limit.
	ExpirationDate *Long
	// Trial represents if the limit is a trial.
	Trial graphql.Boolean
	// AllowFlightControl represents if the customer is allowed flight control.
	AllowFlightControl graphql.Boolean
	// DataType represents data type for the limit, all repositories linked to the limit will get this datatype logged in usage.
	DataType graphql.String
	// Repositories represents repositories attached to the limit.
	Repositories []Repository
}

// LimitedScheduledReport represents all data related to a scheduled report accessible with a readonly scheduled report access token.
type LimitedScheduledReport struct {
	// ID represents id of the scheduled report execution.
	ID graphql.String
	// DashboardName represents name of the dashboard referenced by the report.
	DashboardName graphql.String
	// DashboardDisplayName represents display name of the dashboard referenced by the report.
	DashboardDisplayName graphql.String
	// DashboardSharedTimeInterval represents shared time interval of the dashboard referenced by the report.
	DashboardSharedTimeInterval *SharedDashboardTimeInterval
	// DashboardWidgets represents widgets of the dashboard referenced by the report.
	DashboardWidgets []Widget
	// RepoOrViewName represents the name of the repository or view queries are executed against.
	RepoOrViewName RepoOrViewName
	// Layout represents layoutDescription.
	Layout ScheduledReportLayout
}

// LogCollector represents a fleet search result entry.
type LogCollector struct {
	// ID represents if the collector is enrolled this is its id.
	ID *graphql.String
	// Hostname represents the hostname.
	Hostname graphql.String
	// System represents the host system.
	System graphql.String
	// Version represents version.
	Version graphql.String
	// LastActivity represents last activity recorded.
	LastActivity graphql.String
	// IngestLast24H represents ingest last 24h.
	IngestLast24H Long
	// IPAddress represents ip address.
	IPAddress  *graphql.String
	LogSources []LogCollectorLogSource
	// MachineID represents log collector machineId.
	MachineID graphql.String
	// ConfigName represents contains the name of any manually assigned config.
	ConfigName *graphql.String
	// ConfigID represents contains the id of any manually assigned config.
	ConfigID         *graphql.String
	Configurations   []LogCollectorConfigInfo
	Errors           []graphql.String
	CfgTestID        *graphql.String
	CPUAverage5Min   *graphql.Float
	MemoryMax5Min    *Long
	DiskMax5Min      *graphql.Float
	Change           *Changes
	Groups           []LogCollectorGroup
	WantedVersion    *graphql.String
	DebugLogging     *LogCollectorDebugLogging
	TimeOfUpdate     *DateTime
	UsesRemoteUpdate graphql.Boolean
}

type LogCollectorConfigInfo struct {
	ID         graphql.String
	Name       graphql.String
	Group      *LogCollectorGroup
	Assignment LogCollectorConfigurationAssignmentType
}

// LogCollectorConfiguration represents a configuration file for a log collector.
type LogCollectorConfiguration struct {
	ID                  graphql.String
	Name                graphql.String
	Yaml                *graphql.String
	Draft               *graphql.String
	Version             graphql.Int
	YamlCharactersCount graphql.Int
	ModifiedAt          DateTime
	DraftModifiedAt     *DateTime
	ModifiedBy          graphql.String
	Instances           graphql.Int
	Description         *graphql.String
	IsTestRunning       graphql.Boolean
}

type LogCollectorConfigurationProblemAtPath struct {
	Summary graphql.String
	Details *graphql.String
	Path    graphql.String
	Number  graphql.Int
}

type LogCollectorDebugLogging struct {
	LogCollectorDebugLoggingStatic
}

type LogCollectorDebugLoggingStatic struct {
	URL   *graphql.String
	Token graphql.String
	Level graphql.String
}

type LogCollectorGroup struct {
	ID             graphql.String
	Name           graphql.String
	Filter         *graphql.String
	Configurations []LogCollectorConfiguration
	CollectorCount *graphql.Int
	WantedVersion  *graphql.String
}

type LogCollectorInstallCommand struct {
	WindowsCommand graphql.String
	LinuxCommand   graphql.String
	MacosCommand   graphql.String
}

// LogCollectorInstaller represents provides information about an installer of the Humio Log Collector.
type LogCollectorInstaller struct {
	// Name represents installer file name.
	Name graphql.String
	// URL represents uRL to fetch installer from.
	URL graphql.String
	// Version represents humio Log Collector version.
	Version graphql.String
	// Architecture represents installer CPU architecture.
	Architecture graphql.String
	// Type represents installer type (deb, rpm or msi).
	Type graphql.String
	// Size represents installer file size.
	Size graphql.Int
	// ConfigExample represents config file example.
	ConfigExample *graphql.String
	// Icon represents icon file name.
	Icon *graphql.String
}

type LogCollectorLogSource struct {
	SourceName graphql.String
	SourceType graphql.String
	SinkType   graphql.String
	Parser     *graphql.String
	Repository *graphql.String
}

type LogCollectorMergedConfiguration struct {
	Problems []LogCollectorConfigurationProblemAtPath
	Content  graphql.String
}

type LoginBridge struct {
	Name                          graphql.String
	Issuer                        graphql.String
	Description                   graphql.String
	RemoteID                      graphql.String
	LoginURL                      graphql.String
	RelayStateUURL                graphql.String
	SamlEntityID                  graphql.String
	PublicSamlCertificate         graphql.String
	GroupAttribute                graphql.String
	OrganizationIDAttributeName   graphql.String
	OrganizationNameAttributeName *graphql.String
	AdditionalAttributes          *graphql.String
	Groups                        []graphql.String
	AllowedUsers                  []User
	GenerateUserName              graphql.Boolean
	TermsDescription              graphql.String
	TermsLink                     graphql.String
	ShowTermsAndConditions        graphql.Boolean
	// AnyUserAlreadyLoggedInViaLoginBridge represents true if any user in this organization has logged in to CrowdStream via LogScale. Requires manage organizations permissions.
	AnyUserAlreadyLoggedInViaLoginBridge graphql.Boolean
}

type LoginBridgeRequest struct {
	SamlResponse graphql.String
	LoginURL     graphql.String
	RelayState   graphql.String
}

type LookupFileTemplate struct {
	Name        graphql.String
	DisplayName graphql.String
	Content     graphql.String
}

// Marketplace represents a place to Humio find packages.
type Marketplace struct {
	// CategoryGroups represents gets all categories in the marketplace.
	CategoryGroups []MarketplaceCategoryGroup
}

// MarketplaceCategory represents a category that can be used to filter search results in the marketplace.
type MarketplaceCategory struct {
	// Title represents a display string for the category.
	Title graphql.String
	// ID represents the id is used to filter the searches.
	ID graphql.String
}

// MarketplaceCategoryGroup represents a grouping of categories that can be used to filter search results in the marketplace.
type MarketplaceCategoryGroup struct {
	// Title represents a display string for the category group.
	Title graphql.String
	// Categories represents the categories that are members of the group.
	Categories []MarketplaceCategory
}

type MonthlyIngest struct {
	Monthly []UsageOnDay
}

// MonthlyIngestQueryResult represents query result for monthly ingest.
type MonthlyIngestQueryResult struct {
	QueryInProgress
	MonthlyIngest
}

type MonthlyStorage struct {
	Monthly []StorageOnDay
}

// MonthlyStorageQueryResult represents query result for monthly storage.
type MonthlyStorageQueryResult struct {
	QueryInProgress
	MonthlyStorage
}

type NeverDashboardUpdateFrequency struct {
	Name graphql.String
}

// Notification represents a notification.
type Notification struct {
	// ID represents the unique id for the notification.
	ID graphql.String
	// Title represents the title of the notification.
	Title graphql.String
	// Message represents the message for the notification.
	Message graphql.String
	// Dismissable represents whether the notification is dismissable.
	Dismissable graphql.Boolean
	// Severity represents the severity of the notification.
	Severity NotificationSeverity
	// Type represents the type of the notification.
	Type NotificationTypes
	// Link represents link accompanying the notification.
	Link *graphql.String
	// LinkDescription represents description for the link.
	LinkDescription *graphql.String
}

// NotificationsResultSet represents paginated response for notifications.
type NotificationsResultSet struct {
	// TotalResults represents the total number of matching results.
	TotalResults graphql.Int
	// Results represents the paginated result set.
	Results []Notification
}

type OnlyTotal struct {
	Total graphql.Int
}

// Organization represents an Organization.
type Organization struct {
	// ID represents the unique id for the Organization.
	ID graphql.String
	// Cid represents the CID corresponding to the organization.
	Cid *graphql.String
	// Name represents the name for the Organization.
	Name graphql.String
	// Description represents the description for the Organization, can be null.
	Description *graphql.String
	// Details represents details about the organization.
	Details OrganizationDetails
	// Stats represents stats of the organization.
	Stats OrganizationStats
	// Configs represents organization configurations and settings.
	Configs OrganizationConfigs
	// SearchDomains represents search domains in the organization.
	SearchDomains []SearchDomain
	// ReadonlyDashboardIPFilter represents iP filter for readonly dashboard links.
	ReadonlyDashboardIPFilter *graphql.String
	// CreatedAt represents created date.
	CreatedAt *Long
	// DeletedAt represents if the organization has been marked for deletion, this indicates the day it was deleted.
	DeletedAt *Long
	// TrialStartedAt represents trial started at.
	TrialStartedAt *Long
	// PublicURL represents public url for the Organization.
	PublicURL *graphql.String
	// IngestURL represents ingest url for the Organization.
	IngestURL *graphql.String
	// IsActionAllowed represents check if the current user has a given permission in the organization.
	IsActionAllowed graphql.Boolean
	// Limits represents limits assigned to the organization.
	Limits []Limit
	// LimitsV2 represents limits assigned to the organizations.
	LimitsV2                     []LimitV2
	ExternalPermissions          graphql.Boolean
	ExternalGroupSynchronization graphql.Boolean
	// DefaultCachePolicy represents [PREVIEW: Cache policies are a limited feature and is subject to change] The default cache policy of this organization.
	DefaultCachePolicy *CachePolicy
}

// OrganizationConfigs represents configurations for the organization.
type OrganizationConfigs struct {
	// Session represents session settings.
	Session OrganizationSession
	// SocialLogin represents social login settings.
	SocialLogin []SocialLoginSettings
	// Subdomains represents subdomain configuration for the organization.
	Subdomains *SubdomainConfig
	// BucketStorage represents bucket storage configuration for the organization.
	BucketStorage *BucketStorageConfig
	// Actions represents security policies for actions in the organization.
	Actions *ActionSecurityPolicies
	// Tokens represents security policies for tokens in the organization.
	Tokens *TokenSecurityPolicies
	// SharedDashboards represents security policies for shared dashboard tokens in the organization.
	SharedDashboards *SharedDashboardsSecurityPolicies
	// LoginBridge represents login bridge.
	LoginBridge *LoginBridge
	// BlockingIngest represents whether the organization is currently blocking ingest.
	BlockingIngest graphql.Boolean
}

// OrganizationDetails represents details about the organization.
type OrganizationDetails struct {
	// Notes represents notes of the organization (root only).
	Notes graphql.String
	// Industry represents industry of the organization.
	Industry graphql.String
	// UseCases represents industry of the organization.
	UseCases []Organizations__UseCases
	// Subscription represents subscription of the organization.
	Subscription Organizations__Subscription
	// TrialEndDate represents trial end date of the organization if any.
	TrialEndDate *Long
	// Limits represents limits of the organization.
	Limits OrganizationLimits
	// Country represents the country of the organization.
	Country graphql.String
	// IocAccess represents determines whether an organization has access to IOCs (indicators of compromise).
	IocAccess *graphql.Boolean
}

// OrganizationLimits represents limits of the organization.
type OrganizationLimits struct {
	// DailyIngest represents daily ingest allowed.
	DailyIngest Long
	// Retention represents days of retention allowed.
	Retention graphql.Int
	// Users represents max amount of users allowed.
	Users graphql.Int
	// LicenseExpirationDate represents license expiration date.
	LicenseExpirationDate *Long
	// AllowSelfService represents whether self service is enabled for the Organization, allowing features like creating repositories and setting retention.
	AllowSelfService graphql.Boolean
	// LastSyncDate represents last contract synchronization date.
	LastSyncDate *Long
	// MissingContract represents whether the contract is missing for the organization. None for non accounts, true if account and has no contract and false if contract was found and used.
	MissingContract *graphql.Boolean
	// ContractVersion represents contract version.
	ContractVersion Organizations__ContractVersion
}

// OrganizationSearchResultEntry represents an organization search result entry.
type OrganizationSearchResultEntry struct {
	// OrganizationID represents the unique id for the Organization.
	OrganizationID graphql.String
	// OrganizationName represents the name of the Organization.
	OrganizationName graphql.String
	// SearchMatch represents the string matching the search.
	SearchMatch graphql.String
	// EntityID represents the id of the entity matched.
	EntityID graphql.String
	// Subscription represents the subscription type of the organization.
	Subscription Organizations__Subscription
	// Type represents the type of the search result match.
	Type Organizations__SearchEntryType
	// UserCount represents the amount of users in the organization.
	UserCount graphql.Int
	// ViewCount represents the amount of repositories and views in the organization.
	ViewCount graphql.Int
	// ByteVolume represents the total data volume in bytes that the organization is currently using.
	ByteVolume Long
	// TrialEndDate represents the end date of the trial if applicable.
	TrialEndDate *Long
	// CreatedAt represents the time when the organization was created.
	CreatedAt Long
	// DeletedAt represents if the organization has been marked for deletion, this indicates the time when the organization was marked.
	DeletedAt *Long
	// Organization represents the relevant organization for the result.
	Organization Organization
}

// OrganizationSearchResultSet represents an organization search result set.
type OrganizationSearchResultSet struct {
	// TotalResults represents the total number of matching results.
	TotalResults graphql.Int
	// Results represents the paginated result set.
	Results []OrganizationSearchResultEntry
}

// OrganizationSession represents session configuration for the organization.
type OrganizationSession struct {
	// MaxInactivityPeriod represents the maximum time in ms the user is allowed to be inactive.
	MaxInactivityPeriod Long
	// ForceReauthenticationAfter represents the time in ms after which the user is forced to reauthenticate.
	ForceReauthenticationAfter Long
}

// OrganizationStats represents stats of the organization.
type OrganizationStats struct {
	// DataVolumeCompressed represents total compressed data volume used by the organization.
	DataVolumeCompressed Long
	// DataVolume represents total data volume used by the organization.
	DataVolume Long
	// DailyIngest represents the total daily ingest of the organization.
	DailyIngest Long
	// UserCount represents the number of users in the organization.
	UserCount graphql.Int
}

// Package2 represents a Humio package.
type Package2 struct {
	ID                       VersionedPackageSpecifier
	Scope                    PackageScope
	Name                     PackageName
	Version                  PackageVersion
	Description              *graphql.String
	IconURL                  *UrlOrData
	Author                   PackageAuthor
	Contributors             []PackageAuthor
	LicenseURL               URL
	MinHumioVersion          SemanticVersion
	Readme                   *Markdown
	DashboardTemplates       []DashboardTemplate
	SavedQueryTemplates      []SavedQueryTemplate
	ParserTemplates          []ParserTemplate
	AlertTemplates           []AlertTemplate
	FilterAlertTemplates     []FilterAlertTemplate
	AggregateAlertTemplates  []AggregateAlertTemplate
	LookupFileTemplates      []LookupFileTemplate
	ActionTemplates          []ActionTemplate
	ScheduledSearchTemplates []ScheduledSearchTemplate
	ViewInteractionTemplates []ViewInteractionTemplate
	Type                     PackageType
	// VersionsOnMarketplace represents the available versions of the package on the marketplace.
	VersionsOnMarketplace []RegistryPackageVersionInfo
}

// PackageAuthor represents the author of a package.
type PackageAuthor struct {
	Name  graphql.String
	Email *Email
}

// PackageInstallation represents a package installation.
type PackageInstallation struct {
	ID          VersionedPackageSpecifier
	InstalledBy UserAndTimestamp
	UpdatedBy   UserAndTimestamp
	Source      PackageInstallationSourceType
	// AvailableUpdate represents finds updates on a package. It also looks for updates on packages that were installed manually, in case e.g. test versions of a package have been distributed prior to the full release.
	AvailableUpdate *PackageVersion
	Package         Package2
}

// PackageRegistrySearchResultItem represents information about a package that matches a search in a package registry.
type PackageRegistrySearchResultItem struct {
	ID               VersionedPackageSpecifier
	Description      *graphql.String
	IconURL          *UrlOrData
	Type             PackageType
	InstalledVersion *VersionedPackageSpecifier
	// IsLatestVersionSupported represents true if the current version of Humio supports the latest version of this package.
	IsLatestVersionSupported graphql.Boolean
	// MinHumioVersionOfLatest represents the version of Humio required to run the latest version of this package.
	MinHumioVersionOfLatest SemanticVersion
}

type PageType struct {
	Number            graphql.Int
	TotalNumberOfRows graphql.Int
	Total             graphql.Int
}

// ParameterSpecificationOutput represents the specification of a parameter.
type ParameterSpecificationOutput struct {
	// Name represents the name of the parameter.
	Name graphql.String
	// ParameterType represents the type of the parameter".
	ParameterType ParameterTypeEnum
	// MinLong represents restricts the smallest allowed value for parameters of type Long.
	MinLong *Long
	// MaxLong represents restricts the largest allowed value for parameters of type Long.
	MaxLong *Long
	// MinDouble represents restricts the smallest allowed value for parameters of type Double.
	MinDouble *graphql.Float
	// MaxDouble represents restricts the largest allowed value for parameters of type Double.
	MaxDouble *graphql.Float
	// MinLength represents restricts the minimum number of allowed elements for parameters of type Array.
	MinLength *graphql.Int
	// DefaultValue represents defines a default value of the parameter.
	DefaultValue *[]graphql.String
}

// ParameterValue represents parameterValueType Description.
type ParameterValue struct {
	// ID represents idDescription.
	ID graphql.String
	// Value represents valueDescription.
	Value graphql.String
}

// Parser represents a configured parser for incoming data.
type Parser struct {
	// ID represents the id of the parser.
	ID graphql.String
	// Name represents the name of the parser.
	Name graphql.String
	// DisplayName represents the full name of the parser including package information if part of an application.
	DisplayName graphql.String
	// Description represents the description of the parser.
	Description *graphql.String
	AssetType   AssetType
	// IsBuiltIn represents true if the parser is one of Humio's built-in parsers.
	IsBuiltIn graphql.Boolean
	// Script represents the parser script that is executed for every incoming event.
	Script graphql.String
	// SourceCode represents the source code of the parser.
	SourceCode      graphql.String
	LanguageVersion LanguageVersion
	// FieldsToTag represents fields that are used as tags.
	FieldsToTag []graphql.String
	// TagFields represents the fields to use as tags.
	TagFields []graphql.String
	// FieldsToBeRemovedBeforeParsing represents a list of fields that will be removed from the event before it's parsed. These fields will not be included when calculating usage.
	FieldsToBeRemovedBeforeParsing []graphql.String
	// YamlTemplate represents a template that can be used to recreate the parser.
	YamlTemplate YAML
	// TestData represents saved test data (e.g. log lines) that you can use to test the parser.
	TestData []graphql.String
	// TestCases represents test cases that can be used to help verify that the parser works as expected.
	TestCases []ParserTestCase
	PackageID *VersionedPackageSpecifier
	Package   *PackageInstallation
}

type ParserTemplate struct {
	Name         graphql.String
	DisplayName  graphql.String
	YamlTemplate graphql.String
}

// ParserTestCase represents a test case for a parser.
type ParserTestCase struct {
	// Event represents the event to parse and test on.
	Event ParserTestEvent
	// OutputAssertions represents assertions on the shape of the test case output events. The list consists of key-value pairs to be treated as a map-construct, where the index of the output event is the key, and the assertions are the value.
	OutputAssertions []ParserTestCaseAssertionsForOutput
}

// ParserTestCaseAssertionsForOutput represents assertions on the shape of the given output event. It is a key-value pair, where the index of the output event is the key, and the assertions are the value.
type ParserTestCaseAssertionsForOutput struct {
	// OutputEventIndex represents the index of the output event which the assertions should apply to.
	OutputEventIndex graphql.Int
	// Assertions represents assertions on the shape of a given test case output event.
	Assertions ParserTestCaseOutputAssertions
}

// ParserTestCaseOutputAssertions represents assertions on the shape of a given test case output event.
type ParserTestCaseOutputAssertions struct {
	// FieldsNotPresent represents names of fields which should not be present on the output event.
	FieldsNotPresent []graphql.String
	// FieldsHaveValues represents names of fields and their expected value on the output event. These are key-value pairs, and should be treated as a map-construct.
	FieldsHaveValues []FieldHasValue
}

// ParserTestEvent represents an event for a parser to parse during testing.
type ParserTestEvent struct {
	// RawString represents the contents of the `@rawstring` field when the event begins parsing.
	RawString graphql.String
}

// PendingUser represents a pending user. I.e. a user that was invited to join an organization.
type PendingUser struct {
	// ID represents the id or token for the pending user.
	ID graphql.String
	// Idp represents whether IDP is enabled for the organization.
	Idp graphql.Boolean
	// CreatedAt represents the time the pending user was created.
	CreatedAt Long
	// InvitedByEmail represents the email of the user that invited the pending user.
	InvitedByEmail graphql.String
	// InvitedByName represents the name of the user that invited the pending user.
	InvitedByName graphql.String
	// OrgName represents the name of the organization the the pending user is about to join.
	OrgName graphql.String
	// NewUserEmail represents the email of the pending user.
	NewUserEmail graphql.String
	// PendingUserState represents the current organization state for the user, if any.
	PendingUserState PendingUserState
}

type Query struct {
	// AnalyzeQuery represents analyze a query for certain properties.
	AnalyzeQuery AnalyzeQueryInfo
	// AsnDatabaseInfo represents returns information about the IP ASN database used by the LogScale instance.
	AsnDatabaseInfo IpDatabaseInfo
	// BlockedQueries represents this fetches the list of blocked query patterns.
	BlockedQueries []BlockedQuery
	// CheckDomain represents this is used to check if a given domain is valid.
	CheckDomain graphql.Boolean
	// CheckLocalClusterConnection represents validate a local cluster connection.
	CheckLocalClusterConnection LocalClusterConnectionStatus
	// CheckRemoteClusterConnection represents validate a remote cluster connection.
	CheckRemoteClusterConnection RemoteClusterConnectionStatus
	// ChildOrganizations represents [PREVIEW: Feature still in development] Get linked child organizations.
	ChildOrganizations ChildOrganizationsResultSet
	// Cluster represents this is used to retrieve information about a cluster.
	Cluster Cluster
	// ClusterManagementSettings represents return the cluster management settings for this Humio cluster.
	ClusterManagementSettings *ClusterManagementSettings
	// CurrentUser represents this returns the current authenticated user.
	CurrentUser User
	// DashboardsPage represents this is used to retrieve a dashboard.
	DashboardsPage DashboardPage
	// DebugCache represents [PREVIEW: Internal debugging] For internal debugging.
	DebugCache graphql.String
	// DynamicConfig represents this returns the current value for the dynamic configuration.
	DynamicConfig graphql.String
	// DynamicConfigs represents returns all dynamic configurations. Requires root access.
	DynamicConfigs []DynamicConfigKeyValueType
	// Entities represents [PREVIEW: Under development].
	Entities SearchResult
	// EventForwarders represents this will list all of the event forwarders associated with an organization.
	EventForwarders []EventForwarder
	// ExceededQueryQuotas represents this is used to determine if a given user has exceeded their query quota.
	ExceededQueryQuotas []QueryQuotaExceeded
	// FeatureFlags represents [PREVIEW: All flags should be considered as beta features. Enabling features that are marked as experimental is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] List feature flags depending on filters and context.
	FeatureFlags []FeatureFlagV2
	// FetchOIDCMetadataFromDiscoveryEndpoint represents this can fetch the OIDC metadata from the discovery (.well-known/openid-configuration) endpoint provided.
	FetchOIDCMetadataFromDiscoveryEndpoint WellKnownEndpointDetails
	// FetchSamlMetadataFromDiscoveryEndpoint represents this will fetch the SAML metadata from the discovery endpoint provided.
	FetchSamlMetadataFromDiscoveryEndpoint SamlMetadata
	// FieldAliasSchemaOnView represents [PREVIEW: This functionality is still under development and can change without warning.] Retrieve the active schema and its field aliases on the given view.
	FieldAliasSchemaOnView *FieldAliasSchema
	// FieldAliasSchemas represents [PREVIEW: This functionality is still under development and can change without warning.] Retrieve all schemas for field aliases.
	FieldAliasSchemas FieldAliasSchemasInfo
	// FindIdentityProvider represents this will find information on the identity provider.
	FindIdentityProvider IdentityProviderAuth
	// FleetInstallationToken represents [PREVIEW: Under development.].
	FleetInstallationToken *FleetInstallationToken
	// FleetInstallationTokens represents [PREVIEW: Under development.].
	FleetInstallationTokens []FleetInstallationToken
	// GenerateAggregateAlertFromPackageTemplate represents [PREVIEW: Experimental feature, not ready for production.] Generate an unsaved aggregate alert from a package alert template.
	GenerateAggregateAlertFromPackageTemplate UnsavedAggregateAlert
	// GenerateAggregateAlertFromTemplate represents [PREVIEW: Experimental feature, not ready for production.] Generate an unsaved aggregate alert from a yaml template.
	GenerateAggregateAlertFromTemplate UnsavedAggregateAlert
	// GenerateAlertFromPackageTemplate represents generate an unsaved alert from a package alert template.
	GenerateAlertFromPackageTemplate UnsavedAlert
	// GenerateAlertFromTemplate represents generate an unsaved alert from a yaml template.
	GenerateAlertFromTemplate UnsavedAlert
	// GenerateFilterAlertFromPackageTemplate represents generate an unsaved filter alert from a package alert template.
	GenerateFilterAlertFromPackageTemplate UnsavedFilterAlert
	// GenerateFilterAlertFromTemplate represents generate an unsaved filter alert from a yaml template.
	GenerateFilterAlertFromTemplate UnsavedFilterAlert
	// GenerateScheduledSearchFromPackageTemplate represents generate an unsaved scheduled search from a package scheduled search template.
	GenerateScheduledSearchFromPackageTemplate UnsavedScheduledSearch
	// GenerateScheduledSearchFromTemplate represents generate an unsaved scheduled search from a yaml template.
	GenerateScheduledSearchFromTemplate UnsavedScheduledSearch
	// GetExternalFunction represents [PREVIEW: Experimental prototype not ready for production use] Look up an external function specification.
	GetExternalFunction *ExternalFunctionSpecificationOutput
	// GetFileContent represents this is used to get content of a file.
	GetFileContent UploadedFileSnapshot
	// GetLogCollectorDebugLogging represents [PREVIEW: Under development.].
	GetLogCollectorDebugLogging *LogCollectorDebugLogging
	// GetLogCollectorInstanceDebugLogging represents [PREVIEW: Under development.].
	GetLogCollectorInstanceDebugLogging *LogCollectorDebugLogging
	// Group represents used to get information on a specified group.
	Group Group
	// GroupByDisplayName represents used to get information on groups by a given display name.
	GroupByDisplayName Group
	// GroupsPage represents all defined groups in an organization.
	GroupsPage GroupPage
	// HasOrgRoot represents this will check whether an organization has an organization root.
	HasOrgRoot graphql.Boolean
	// IdentityProvider represents this is used to get information on a specific identity provider.
	IdentityProvider  IdentityProviderAuthentication
	IdentityProviders []IdentityProviderAuthentication
	// InstalledLicense represents this returns information about the license for the LogScale instance, if any license installed.
	InstalledLicense *License
	// InstalledPackage represents provides details for a specific package installed on a specific view.
	InstalledPackage *PackageInstallation
	// IocDatabaseInfo represents used to get information on the IOC database used by the LogScale instance.
	IocDatabaseInfo CrowdStrikeIocStatus
	// IPDatabaseInfo represents this returns information about the IP location database used by the LogScale instance.
	IPDatabaseInfo IpDatabaseInfo
	// IPFilters represents returns a list of IP filters.
	IPFilters []IPFilter
	// KafkaCluster represents this will return information about the Kafka cluster.
	KafkaCluster KafkaClusterDescription
	// LanguageRestrictions represents [PREVIEW: Internal testing.] Used to get language restrictions for language version.
	LanguageRestrictions QueryLanguageRestriction
	// ListNotifications represents used to list all notifications currently set in the system. This requires root access.
	ListNotifications []Notification
	// LogCollectorConfiguration represents [PREVIEW: Under development.].
	LogCollectorConfiguration LogCollectorConfiguration
	// LogCollectorInstallers represents list available Log Collector installers.
	LogCollectorInstallers *[]LogCollectorInstaller
	// LogCollectorMergedConfiguration represents [PREVIEW: Under development.].
	LogCollectorMergedConfiguration LogCollectorMergedConfiguration
	// LogCollectorVersionsAvailable represents list versions available through Remote Update for the LogScale Collector.
	LogCollectorVersionsAvailable []graphql.String
	LoginBridgeRequest            LoginBridgeRequest
	Marketplace                   Marketplace
	// Meta represents this will return information about the LogScale instance.
	Meta                 HumioMetadata
	OidcIdentityProvider OidcIdentityProvider
	// Organization represents get the current organization.
	Organization Organization
	// PendingUser represents get a pending user.
	PendingUser PendingUser
	// PendingUsers represents get a pending user.
	PendingUsers []PendingUser
	// ProxyOrganization represents proxy query through a specific organization. Root operation.
	ProxyOrganization Query
	// QueryAnalysis represents [PREVIEW: Internal testing.].
	QueryAnalysis queryAnalysis
	// QueryAssistance represents [PREVIEW: in development.] Return the query assistance for the given search, as well as the assistant version.
	QueryAssistance           QueryAssistantResult
	QueryQuotaDefaultSettings []QueryQuotaIntervalSetting
	QueryQuotaUsage           []QueryQuotaUsage
	QueryQuotaUserSettings    []QueryQuotaUserSettings
	// QuerySearchDomains represents query search domains with organization filter.
	QuerySearchDomains SearchDomainSearchResultSet
	// RedactEvents represents fetch the list of active event redaction jobs.
	RedactEvents []DeleteEvents
	Repositories []Repository
	// Repository represents lookup a given repository by name.
	Repository Repository
	// Role represents a given role.
	Role Role
	// Roles represents all defined roles.
	Roles []Role
	// RolesInOrgForChangingUserAccess represents all defined roles in org.
	RolesInOrgForChangingUserAccess []Role
	// RolesPage represents searchable paginated roles.
	RolesPage RolePage
	// RunningQueries represents returns running queries.
	RunningQueries       RunningQueries
	SamlIdentityProvider SamlIdentityProvider
	SavedQuery           SavedQuery
	// ScheduledReport represents [PREVIEW: ScheduledReports are under development] Get scheduled report information using a scheduled report access token.
	ScheduledReport LimitedScheduledReport
	SearchDomain    SearchDomain
	SearchDomains   []SearchDomain
	// SearchDomainsPage represents paged searchDomains.
	SearchDomainsPage SearchDomainPage
	// SearchFleet represents [PREVIEW: Under development.] Get paginated search results.
	SearchFleet SearchFleetUnion
	// SearchLogCollectorConfigurations represents [PREVIEW: Under development.] Search log collector configurations.
	SearchLogCollectorConfigurations SearchLogCollectorConfigurationResultSet
	// SearchLogCollectorGroups represents [PREVIEW: Under development.] Search log collector configurations.
	SearchLogCollectorGroups SearchLogCollectorGroupsResultSet
	// SearchOrganizations represents get paginated search results. (Root operation).
	SearchOrganizations OrganizationSearchResultSet
	// ServicesMetadata represents [PREVIEW: Part of the ScheduledReports feature under development] Metadata from all registered services.
	ServicesMetadata []ServiceMetadata
	// Sessions represents paginated search results for tokens.
	Sessions SessionQueryResultSet
	// SharedDashboards represents gets a shared dashboard by it's shared link token.
	SharedDashboards  SharedDashboard
	StarredDashboards []Dashboard
	// TokenForFleetManagement represents [PREVIEW: Under development.] Token for fleet management.
	TokenForFleetManagement graphql.String
	// Tokens represents paginated search results for tokens.
	Tokens TokenQueryResultSet
	// Usage represents [PREVIEW: BETA feature.].
	Usage UsageStats
	// User represents a user in the system.
	User *User
	// Users represents requires manage cluster permission; Returns all users in the system.
	Users                               []User
	UsersAndGroupsForChangingUserAccess UsersAndGroupsSearchResultSet
	// UsersPage represents requires either root access, org owner access or permission to manage users in at least one repository or view. Returns a page of all users in an organization.
	UsersPage UsersPage
	// UsersWithoutOrganizations represents return users without organizations.
	UsersWithoutOrganizations []User
	// ValidateAccessToken represents validate the Access Token.
	ValidateAccessToken graphql.String
	// ValidateAccessTokenV2 represents validate the Access Token.
	ValidateAccessTokenV2 AccessTokenValidatorResultType
	// ValidateQuery represents [PREVIEW: Internal testing.] Check that a query compiles.
	ValidateQuery QueryValidationResult
	// ValidateToken represents validate the JWT Token.
	ValidateToken graphql.Boolean
	// Viewer represents the currently authenticated user's account.
	Viewer Account
	// ViewerOpt represents the currently authenticated user's account if any.
	ViewerOpt *Account
	// WorkerQueryTracingState represents [PREVIEW: Internal debugging tool, do not use without explicit instruction from support] Get the list of keys being used to select queries for tracing on workers.
	WorkerQueryTracingState WorkerQueryTracingState
}

// QueryAssistantAssistance represents either a successful assistance result, or an error.
type QueryAssistantAssistance struct {
	QueryAssistantSuccess
	QueryAssistantError
}

type QueryAssistantDiagnostic struct {
	Message  QueryAssistantDiagnosticMessage
	Position *QueryAssistantDiagnosticPosition
	Severity QueryAssistantDiagnosticSeverity
}

type QueryAssistantDiagnosticMessage struct {
	What  graphql.String
	Terse graphql.String
	Code  graphql.String
}

type QueryAssistantDiagnosticPosition struct {
	Column      graphql.Int
	Line        graphql.Int
	BeginOffset graphql.Int
	EndOffset   graphql.Int
	LongString  graphql.String
}

type QueryAssistantError struct {
	Error graphql.String
}

// QueryAssistantResult represents an assistance result and a version of the query assistant.
type QueryAssistantResult struct {
	// Version represents the assistant version.
	Version graphql.String
	// Assistance represents the query assistance for the given search.
	Assistance QueryAssistantAssistance
}

type QueryAssistantSuccess struct {
	Result      graphql.String
	Diagnostics []QueryAssistantDiagnostic
}

// QueryBasedWidgetInteraction represents an interaction for a query based widget.
type QueryBasedWidgetInteraction struct {
	Name          graphql.String
	TitleTemplate *graphql.String
	Conditions    []WidgetInteractionCondition
	TypeInfo      QueryBasedWidgetInteractionTypeInfo
}

type QueryBasedWidgetInteractionTypeInfo struct {
	DashboardLinkInteraction
	CustomLinkInteraction
	SearchLinkInteraction
	UpdateParametersInteraction
}

// QueryDiagnostic represents a diagnostic message from query validation.
type QueryDiagnostic struct {
	// Message represents [PREVIEW: Internal testing.].
	Message graphql.String
	// Code represents [PREVIEW: Internal testing.].
	Code graphql.String
	// Severity represents [PREVIEW: Internal testing.].
	Severity Severity
}

// QueryDiagnosticInfoOutputType represents diagnostic information for a query.
type QueryDiagnosticInfoOutputType struct {
	// Message represents the diagnostic message.
	Message graphql.String
	// Code represents the code for the diagnostic.
	Code graphql.String
	// Severity represents the severity of the diagnostic.
	Severity graphql.String
}

type QueryInProgress struct {
	QueryID graphql.String
}

// QueryLanguageRestriction represents language restrictions for language version.
type QueryLanguageRestriction struct {
	Version          LanguageVersion
	AllowedFunctions []graphql.String
	Enabled          graphql.Boolean
}

type QueryPrefixes struct {
	ViewID      graphql.String
	QueryPrefix graphql.String
}

type QueryQuotaExceeded struct {
	Kind     QueryQuotaMeasurementKind
	ResetsAt Long
}

type QueryQuotaIntervalSetting struct {
	Interval        QueryQuotaInterval
	MeasurementKind QueryQuotaMeasurementKind
	Value           *Long
	ValueKind       QueryQuotaIntervalSettingKind
	Source          QueryQuotaIntervalSettingSource
}

type QueryQuotaUsage struct {
	Interval   QueryQuotaInterval
	QueryCount graphql.Int
	StaticCost Long
	LiveCost   Long
}

// QueryQuotaUserSettings represents query Quota Settings for a particular user.
type QueryQuotaUserSettings struct {
	// Username represents username of the user for which these Query Quota Settings apply.
	Username graphql.String
	// Settings represents list of the settings that apply.
	Settings []QueryQuotaIntervalSetting
}

// QueryValidationInfo represents result of query validation.
type QueryValidationInfo struct {
	IsValid     graphql.Boolean
	Diagnostics []QueryDiagnosticInfoOutputType
}

// QueryValidationResult represents result of validating a query.
type QueryValidationResult struct {
	// IsValid represents [PREVIEW: Internal testing.].
	IsValid graphql.Boolean
	// Diagnostics represents [PREVIEW: Internal testing.].
	Diagnostics []QueryDiagnostic
}

type RealTimeDashboardUpdateFrequency struct {
	Name graphql.String
}

// ReasonsNodeCannotBeSafelyUnregistered represents a map from reasons why a node might not be able to be unregistered safely, to the boolean value indicating whether a given reason applies to this node. For a node to be unregistered without any undue disruption, none of the reasons must apply.
type ReasonsNodeCannotBeSafelyUnregistered struct {
	IsAlive                         graphql.Boolean
	LeadsDigest                     graphql.Boolean
	HasUnderReplicatedData          graphql.Boolean
	HasDataThatExistsOnlyOnThisNode graphql.Boolean
}

type RecentQuery struct {
	LanguageVersion LanguageVersion
	Query           HumioQuery
	RunAt           DateTime
	WidgetType      *graphql.String
	WidgetOptions   *JSON
}

// RegionSelectData represents information about regions.
type RegionSelectData struct {
	Name    graphql.String
	URL     graphql.String
	IconURL graphql.String
}

// RegistryPackageVersionInfo represents info about a version of a Humio Package.
type RegistryPackageVersionInfo struct {
	// Version represents the package version.
	Version SemanticVersion
	// MinHumioVersion represents the minimum version of Humio required to run the package.
	MinHumioVersion SemanticVersion
}

type RepositoriesUsageQueryResult struct {
	// TotalResults represents the total number of matching results.
	TotalResults graphql.Int
	// Results represents the paginated result set.
	Results []RepositoryUsageValue
}

// RepositoriesUsageQueryResultTypes represents query result for repositories usage data.
type RepositoriesUsageQueryResultTypes struct {
	QueryInProgress
	RepositoriesUsageQueryResult
}

type RepositoryUsageValue struct {
	Name       *graphql.String
	ValueBytes Long
	Percentage graphql.Float
	ID         graphql.String
}

type Role struct {
	ID                      graphql.String
	DisplayName             graphql.String
	Color                   *graphql.String
	Description             *graphql.String
	ViewPermissions         []Permission
	SystemPermissions       []SystemPermission
	OrganizationPermissions []OrganizationPermission
	GroupsCount             graphql.Int
	UsersCount              graphql.Int
	Users                   []User
	GroupsV2                GroupResultSetType
	Groups                  []Group
}

// RolePage represents a page of roles.
type RolePage struct {
	PageInfo PageType
	Page     []Role
}

// RolesResultSetType represents the roles query result set.
type RolesResultSetType struct {
	// TotalResults represents the total number of matching results.
	TotalResults graphql.Int
	// Results represents the paginated result set.
	Results []Role
}

// RunningQueries represents queries that are currently being executed.
type RunningQueries struct {
	// UpdateAvailableIn represents number of milliseconds until next update is available.
	UpdateAvailableIn Long
	// TotalNumberOfQueries represents total number of queries being executed.
	TotalNumberOfQueries graphql.Int
	// TotalNumberOfLiveQueries represents total number of live queries being executed.
	TotalNumberOfLiveQueries graphql.Int
	// TotalNumberOfClients represents total number of clients querying.
	TotalNumberOfClients graphql.Int
	// TotalSkippedBytes represents total size of skipped bytes for all queries being executed.
	TotalSkippedBytes Long
	// TotalIncludedBytes represents total size of included bytes for all queries being executed.
	TotalIncludedBytes Long
	// TotalQueuedBytes represents total size of remaining bytes to be processed for all queries being executed.
	TotalQueuedBytes Long
	// Queries represents queries being executed, at most 1000 queries are returned.
	Queries []RunningQuery
}

// RunningQuery represents a query that is currently being executed.
type RunningQuery struct {
	ID             graphql.String
	Clients        []Client
	InitiatedBy    *graphql.String
	IsLive         graphql.Boolean
	IsHistoricDone graphql.Boolean
	QueryInput     graphql.String
	QueryPrefix    graphql.String
	CoordinatorID  graphql.String
	TotalWork      graphql.Int
	WorkDone       graphql.Int
	View           graphql.String
	// Organization represents the organization owning the query, if any.
	Organization        *Organization
	TimeInMillis        Long
	TimeQueuedInMillis  Long
	IsDashboard         graphql.Boolean
	EstimatedTotalBytes Long
	SkippedBytes        Long
	IncludedBytes       Long
	ProcessedEvents     Long
	// MapMillis represents static CPU time spent since query started.
	MapMillis graphql.Float
	// DeltaMapMillis represents static CPU time spent the last 30 seconds.
	DeltaMapMillis graphql.Float
	// LiveMillis represents live CPU time spent since query started.
	LiveMillis graphql.Float
	// DeltaLiveMillis represents live CPU time spent the last 30 seconds.
	DeltaLiveMillis       graphql.Float
	MapAllocations        Long
	LiveAllocations       Long
	ReduceAllocations     Long
	TotalAllocations      Long
	DeltaTotalAllocations Long
	TimeInterval          graphql.String
	TimeZoneOffSetMinutes graphql.Int
	QueryArgs             graphql.String
	Status                graphql.String
	// TotalCost represents total cost calculation.
	TotalCost graphql.Float
	// LiveCost represents live cost calculation.
	LiveCost graphql.Float
	// StaticCost represents static cost calculation.
	StaticCost graphql.Float
	// DeltaTotalCost represents total cost calculation last 30 seconds.
	DeltaTotalCost graphql.Float
	// DeltaLiveCost represents live cost calculation last 30 seconds.
	DeltaLiveCost graphql.Float
	// DeltaStaticCost represents static cost calculation last 30 seconds.
	DeltaStaticCost graphql.Float
}

// S3Configuration represents configuration for S3 archiving. E.g. bucket name and region.
type S3Configuration struct {
	// Bucket represents s3 bucket name for storing archived data. Example: acme-bucket.
	Bucket graphql.String
	// Region represents the region the S3 bucket belongs to. Example: eu-central-1.
	Region graphql.String
	// StartFrom represents do not archive logs older than this.
	StartFrom *DateTime
	// Disabled represents whether the archiving has been disabled.
	Disabled *graphql.Boolean
	// Format represents the format to store the archived data in on S3.
	Format *S3ArchivingFormat
	// TagOrderInName represents array of names of tag fields to use in that order in the output file names.
	TagOrderInName []graphql.String
}

type SamlMetadata struct {
	EntityID    graphql.String
	SignOnURL   graphql.String
	Certificate graphql.String
}

// SavedQuery represents a query saved for later use.
type SavedQuery struct {
	// TemplateYaml represents a YAML formatted string that describes the saved query.
	TemplateYaml graphql.String
	ID           graphql.String
	Name         graphql.String
	DisplayName  graphql.String
	Description  *graphql.String
	AssetType    AssetType
	Query        HumioQuery
	IsStarred    graphql.Boolean
	WidgetType   graphql.String
	Options      JSON
	PackageID    *VersionedPackageSpecifier
	Package      *PackageInstallation
	// Interactions represents [PREVIEW: Saved query interactions feature is under preview].
	Interactions []QueryBasedWidgetInteraction
}

type SavedQueryTemplate struct {
	Name         graphql.String
	DisplayName  graphql.String
	YamlTemplate graphql.String
}

type ScannedData struct {
	CurrentBytes Long
	Limit        UsageLimit
}

// ScheduledReport represents information about a scheduled report.
type ScheduledReport struct {
	// ID represents idDescription.
	ID graphql.String
	// Name represents nameDescription.
	Name graphql.String
	// IsPasswordDefined represents passwordDescription.
	IsPasswordDefined graphql.Boolean
	// Enabled represents enabledDescription.
	Enabled graphql.Boolean
	// Status represents statusDescription.
	Status graphql.String
	// Description represents descriptionDescription.
	Description graphql.String
	// DashboardID represents dashboardIdDescription.
	DashboardID graphql.String
	// Dashboard represents dashboardDescription.
	Dashboard Dashboard
	// LastReportSent represents lastReportSentDescription.
	LastReportSent graphql.String
	// CreatedBy represents createdByDescription.
	CreatedBy *User
	// CreationDate represents creationDateDescription.
	CreationDate graphql.String
	// SharedTime represents sharedTimeDescription.
	SharedTime graphql.Boolean
	// TimeWindowFrom represents timeWindowFromDescription.
	TimeWindowFrom graphql.String
	// TimeWindowTo represents timeWindowToDescription.
	TimeWindowTo graphql.String
	// ScheduleFrequency represents scheduleFrequencyDescription.
	ScheduleFrequency graphql.String
	// ScheduleFrequencyEvery represents scheduleFrequencyEveryDescription.
	ScheduleFrequencyEvery graphql.String
	// ScheduleFrequencyTime represents scheduleFrequencyTimeDescription.
	ScheduleFrequencyTime graphql.String
	// ScheduleFrequencyTimeZone represents scheduleFrequencyTimeZoneDescription.
	ScheduleFrequencyTimeZone graphql.String
	// ScheduleFrequencyOn represents scheduleFrequencyOnZoneDescription.
	ScheduleFrequencyOn []graphql.String
	// ScheduleStartDate represents scheduleStartDateDescription.
	ScheduleStartDate graphql.String
	// ScheduleEndDate represents scheduleEndDateDescription.
	ScheduleEndDate graphql.String
	// Labels represents labelsDescription.
	Labels []graphql.String
	// Parameters represents parametersDescription.
	Parameters []ParameterValue
	// ActionIDs represents actionIdsDescription.
	ActionIDs []graphql.String
	// Layout represents layoutDescription.
	Layout ScheduledReportLayout
}

// ScheduledReportLayout represents information about a scheduled report layout.
type ScheduledReportLayout struct {
	// PaperSize represents paperSizeDescription.
	PaperSize graphql.String
	// PaperOrientation represents paperOrientationDescription.
	PaperOrientation graphql.String
	// PaperLayout represents paperLayoutDescription.
	PaperLayout graphql.String
	// ShowDescription represents showDescriptionDescription.
	ShowDescription *graphql.Boolean
	// ShowTitleFrontpage represents showTitleFrontpageDescription.
	ShowTitleFrontpage graphql.Boolean
	// ShowParameters represents showParametersDescription.
	ShowParameters graphql.Boolean
	// MaxNumberOfRows represents maxNumberOfRowsDescription.
	MaxNumberOfRows graphql.Int
	// ShowTitleHeader represents showTitleHeaderDescription.
	ShowTitleHeader graphql.Boolean
	// ShowExportDate represents showExportDateDescription.
	ShowExportDate graphql.Boolean
	// FooterShowPageNumbers represents footerShowPageNumbersDescription.
	FooterShowPageNumbers graphql.Boolean
}

// ScheduledSearch represents information about a scheduled search.
type ScheduledSearch struct {
	// ID represents id of the scheduled search.
	ID graphql.String
	// Name represents name of the scheduled search.
	Name graphql.String
	// Description represents description of the scheduled search.
	Description *graphql.String
	// QueryString represents logScale query to execute.
	QueryString graphql.String
	// Start represents start of the relative time interval for the query.
	Start graphql.String
	// End represents end of the relative time interval for the query.
	End graphql.String
	// TimeZone represents time zone of the schedule. Currently this field only supports UTC offsets like 'UTC', 'UTC-01' or 'UTC+12:45'.
	TimeZone graphql.String
	// Schedule represents cron pattern describing the schedule to execute the query on.
	Schedule graphql.String
	// BackfillLimit represents user-defined limit, which caps the number of missed searches to backfill, e.g. in the event of a shutdown.
	BackfillLimit graphql.Int
	// Enabled represents flag indicating whether the scheduled search is enabled.
	Enabled graphql.Boolean
	// Actions represents list of Ids for actions to fire on query result.
	Actions []graphql.String
	// ActionsV2 represents list of actions to fire on query result.
	ActionsV2 []Action
	// RunAsUser represents id of user which the scheduled search is running as.
	RunAsUser *User
	// LastScheduledSearch represents unix timestamp for end of last query execution.
	LastScheduledSearch *Long
	// TimeOfNextPlannedExecution represents unix timestamp for next planned search.
	TimeOfNextPlannedExecution *Long
	// LastError represents last error encountered while running the search.
	LastError *graphql.String
	// LastWarnings represents last warnings encountered while running the scheduled search.
	LastWarnings []graphql.String
	// Labels represents labels added to the scheduled search.
	Labels []graphql.String
	// IsStarred represents flag indicating whether the calling user has 'starred' the scheduled search.
	IsStarred graphql.Boolean
	// YamlTemplate represents a template that can be used to recreate the scheduled search.
	YamlTemplate YAML
	PackageID    *VersionedPackageSpecifier
	Package      *PackageInstallation
	// QueryOwnership represents ownership of the query run by this scheduled search.
	QueryOwnership QueryOwnership
}

type ScheduledSearchTemplate struct {
	Name         graphql.String
	DisplayName  graphql.String
	YamlTemplate graphql.String
	Labels       []graphql.String
}

type SchemaField struct {
	Name        graphql.String
	Description *graphql.String
}

// SearchDomainPage represents a page of searchDomains.
type SearchDomainPage struct {
	PageInfo PageType
	Page     []SearchDomain
}

// SearchDomainRole represents the role assigned in a searchDomain.
type SearchDomainRole struct {
	SearchDomain SearchDomain
	Role         Role
}

// SearchDomainSearchResultSet represents the search domain search result set.
type SearchDomainSearchResultSet struct {
	// TotalResults represents the total number of matching results.
	TotalResults graphql.Int
	// Results represents the paginated result set.
	Results []SearchDomain
}

// SearchFleetInProgress represents the fleet search has not finished yet.
type SearchFleetInProgress struct {
	QueryState       graphql.String
	TotalResultsInfo SearchFleetTotalResultInfo
	// TotalResults represents the total number of matching results.
	TotalResults graphql.Int
	// Results represents the paginated result set.
	Results []LogCollector
}

// SearchFleetResultSet represents a fleet search result set.
type SearchFleetResultSet struct {
	QueryState       graphql.String
	TotalResultsInfo SearchFleetTotalResultInfo
	// TotalResults represents the total number of matching results.
	TotalResults graphql.Int
	// Results represents the paginated result set.
	Results []LogCollector
}

// SearchFleetTotalResultInfo represents information about the returned result set.
type SearchFleetTotalResultInfo struct {
	OnlyTotal
	GroupFilterInfo
}

// SearchFleetUnion represents query result for search fleet.
type SearchFleetUnion struct {
	SearchFleetResultSet
	SearchFleetInProgress
}

type SearchLinkInteraction struct {
	RepoOrViewName      *RepoOrViewName
	QueryString         graphql.String
	Arguments           []DictionaryEntryType
	OpenInNewTab        graphql.Boolean
	UseWidgetTimeWindow graphql.Boolean
}

// SearchLogCollectorConfigurationResultSet represents a log collector configuration search result set.
type SearchLogCollectorConfigurationResultSet struct {
	// TotalResults represents the total number of matching results.
	TotalResults graphql.Int
	// Results represents the paginated result set.
	Results []LogCollectorConfiguration
}

// SearchLogCollectorGroupsResultSet represents a log collector group search result set.
type SearchLogCollectorGroupsResultSet struct {
	// TotalResults represents the total number of matching results.
	TotalResults graphql.Int
	// Results represents the paginated result set.
	Results []LogCollectorGroup
}

type SearchResult struct {
	// TotalResults represents the total number of results that matched the search query. Only [pageSize] elements will be returned.
	TotalResults graphql.Int
	Data         []EntitySearchResultEntry
}

// ServiceMetadata represents metadata about a registered service.
type ServiceMetadata struct {
	// Name represents the name of the service.
	Name graphql.String
	// ServiceType represents the type of the service.
	ServiceType graphql.String
	// EndpointURL represents the endpoint of the service.
	EndpointURL graphql.String
	// Version represents the version of the service.
	Version graphql.String
	// HealthStatus represents the health status of the service.
	HealthStatus HealthStatus
}

// Session represents an active session.
type Session struct {
	// ID represents the id of the session.
	ID graphql.String
	// ClientInfo represents client info.
	ClientInfo graphql.String
	// City represents approximate city from IP.
	City *graphql.String
	// Country represents country from IP.
	Country *graphql.String
	// IP represents the IP of the client when the session was created.
	IP graphql.String
	// User represents the user that created the session.
	User User
	// CreatedAt represents the time at which the session was created.
	CreatedAt *Long
	// LastActivityAt represents the time at which the session was last active.
	LastActivityAt *Long
	// IsCurrentSession represents if the session is the current session for the user.
	IsCurrentSession graphql.Boolean
}

// SessionQueryResultSet represents the session query result set.
type SessionQueryResultSet struct {
	// TotalResults represents the total number of matching results.
	TotalResults graphql.Int
	// Results represents the paginated result set.
	Results []Session
}

// SharedDashboard represents represents information about a dashboard shared through a link.
type SharedDashboard struct {
	ID          graphql.String
	Name        graphql.String
	DisplayName graphql.String
	// IPFilter represents the ip filter on the shared dashboard.
	IPFilter           *IPFilter
	SharedTimeInterval *SharedDashboardTimeInterval
	// RepoOrViewName represents the name of the repository or view queries are executed against.
	RepoOrViewName RepoOrViewName
	Widgets        []Widget
}

// SharedDashboardTimeInterval represents time Interval that is active on all dashboard widgets.
type SharedDashboardTimeInterval struct {
	IsLive graphql.Boolean
	Start  graphql.String
	End    graphql.String
}

// SharedDashboardsSecurityPolicies represents security policies for shared dashboards in the organization.
type SharedDashboardsSecurityPolicies struct {
	// SharedDashboardsEnabled represents whether shared dashboard tokens are enabled.
	SharedDashboardsEnabled graphql.Boolean
	// EnforceIPFilter represents the IP filter that is enforced on all shared dashboards.
	EnforceIPFilter *IPFilter
}

// SocialLoginSettings represents social login configuration for the organization.
type SocialLoginSettings struct {
	// Provider represents social provider.
	Provider SocialProviderProfile
	// Filter represents filter.
	Filter SocialLoginField
	// AllowList represents allowed users.
	AllowList []User
}

// SourceEventsQueryResultType represents returns a query that gives the underlying events for some specified fields. queryArguments are names of free variables in the query, prefixed with a ?.For example, 'foo=?bar | count()' has the queryArgument bar.
type SourceEventsQueryResultType struct {
	// Query represents [PREVIEW: Internal testing.].
	Query *graphql.String
	// QueryArguments represents [PREVIEW: Internal testing.].
	QueryArguments []graphql.String
	// Diagnostics represents [PREVIEW: Internal testing.].
	Diagnostics []QueryDiagnostic
}

type StorageOnDay struct {
	Date         DateTime
	StorageBytes Long
	Limit        UsageLimit
}

// StoragePartition represents a cluster storage partition. It assigns cluster nodes with the responsibility of storing a segment data.
type StoragePartition struct {
	ID graphql.Int
	// NodeIDs represents a list of ids for the nodes responsible for the partition. The list is ordered so that the first node is the primary node and the rest are followers.
	NodeIDs []graphql.Int
}

type StoredData struct {
	CurrentBytes Long
	Limit        UsageLimit
}

// SubdomainConfig represents subdomain configuration for the organization.
type SubdomainConfig struct {
	// PrimarySubdomain represents the primary subdomain of the organization.
	PrimarySubdomain graphql.String
	// SecondarySubdomains represents the secondary subdomains of the organization.
	SecondarySubdomains []graphql.String
	// EnforceSubdomains represents enforceSubdomain, if set to true the organization can only be accessed by the subdomain, otherwise it can also be accessed directly at the cluster domain url.
	EnforceSubdomains graphql.Boolean
}

// Tag represents a tag on a datasource.
type Tag struct {
	Key   graphql.String
	Value graphql.String
}

// TagGroupingRule represents describes the number of groups that tag values get distributed into for a given tag.
type TagGroupingRule struct {
	TagName    graphql.String
	GroupCount graphql.Int
}

type TagInfo struct {
	Name  graphql.String
	Value graphql.String
}

// TokenQueryResultSet represents the token query result set.
type TokenQueryResultSet struct {
	// TotalResults represents the total number of matching results.
	TotalResults graphql.Int
	// Results represents the paginated result set.
	Results []Token
}

// TokenSecurityPolicies represents security policies for tokens in the organization.
type TokenSecurityPolicies struct {
	// PersonalUserTokensEnabled represents whether personal user tokens are enabled.
	PersonalUserTokensEnabled graphql.Boolean
	// PersonalUserTokensEnforceExpirationAfterMs represents maximum time in ms a personal user token can be used before expiring (TTL).
	PersonalUserTokensEnforceExpirationAfterMs *Long
	// PersonalUserTokensEnforceIPFilter represents the IP filter that is enforced on all personal user tokens.
	PersonalUserTokensEnforceIPFilter *IPFilter
	// ViewPermissionTokensEnabled represents whether view permission tokens are enabled.
	ViewPermissionTokensEnabled graphql.Boolean
	// ViewPermissionTokensEnforceExpirationAfterMs represents maximum time in ms a view permission token can be used before expiring (TTL).
	ViewPermissionTokensEnforceExpirationAfterMs *Long
	// ViewPermissionTokensEnforceIPFilter represents the IP filter that is enforced on all view permission tokens.
	ViewPermissionTokensEnforceIPFilter *IPFilter
	// ViewPermissionTokensAllowPermissionUpdates represents whether it is allowed to change permissions on existing view permission tokens.
	ViewPermissionTokensAllowPermissionUpdates *graphql.Boolean
	// OrganizationPermissionTokensEnabled represents whether organization permission tokens are enabled.
	OrganizationPermissionTokensEnabled graphql.Boolean
	// OrganizationPermissionTokensEnforceExpirationAfterMs represents maximum time in ms a organization permission token can be used before expiring (TTL).
	OrganizationPermissionTokensEnforceExpirationAfterMs *Long
	// OrganizationPermissionTokensEnforceIPFilter represents the IP filter that is enforced on all organization permission tokens.
	OrganizationPermissionTokensEnforceIPFilter *IPFilter
	// OrganizationPermissionTokensAllowPermissionUpdates represents whether it is allowed to change permissions on existing organization permission tokens.
	OrganizationPermissionTokensAllowPermissionUpdates *graphql.Boolean
	// SystemPermissionTokensEnabled represents whether system permission tokens are enabled.
	SystemPermissionTokensEnabled graphql.Boolean
	// SystemPermissionTokensEnforceExpirationAfterMs represents maximum time in ms a system permission token can be used before expiring (TTL).
	SystemPermissionTokensEnforceExpirationAfterMs *Long
	// SystemPermissionTokensEnforceIPFilter represents the IP filter that is enforced on all system permission tokens.
	SystemPermissionTokensEnforceIPFilter *IPFilter
	// SystemPermissionTokensAllowPermissionUpdates represents whether it is allowed to change permissions on existing system permission tokens.
	SystemPermissionTokensAllowPermissionUpdates *graphql.Boolean
}

type UnlimitedUsage struct {
	Unlimited graphql.Boolean
}

// UnsavedAggregateAlert represents an unsaved aggregate alert.
type UnsavedAggregateAlert struct {
	// Name represents name of the aggregate alert.
	Name graphql.String
	// Description represents description of the aggregate alert.
	Description *graphql.String
	// QueryString represents logScale query to execute.
	QueryString graphql.String
	// Actions represents list of actions to fire on query result.
	Actions []Action
	// Labels represents labels attached to the aggregate alert.
	Labels []graphql.String
	// Enabled represents flag indicating whether the aggregate alert is enabled.
	Enabled graphql.Boolean
	// ThrottleTimeSeconds represents throttle time in seconds.
	ThrottleTimeSeconds *Long
	// ThrottleField represents a field to throttle on. Can only be set if throttleTimeSeconds is set.
	ThrottleField *graphql.String
}

// UnsavedAlert represents an unsaved alert.
type UnsavedAlert struct {
	// Name represents name of the alert.
	Name graphql.String
	// Description represents description of the alert.
	Description *graphql.String
	// QueryString represents logScale query to execute.
	QueryString graphql.String
	// QueryStart represents start of the relative time interval for the query.
	QueryStart graphql.String
	// ThrottleTimeMillis represents throttle time in milliseconds.
	ThrottleTimeMillis Long
	// ThrottleField represents field to throttle on.
	ThrottleField *graphql.String
	// Actions represents list of ids for actions to fire on query result.
	Actions []Action
	// Labels represents labels attached to the alert.
	Labels []graphql.String
	// Enabled represents flag indicating whether the alert is enabled.
	Enabled graphql.Boolean
}

// UnsavedFilterAlert represents an unsaved filter alert.
type UnsavedFilterAlert struct {
	// Name represents name of the filter alert.
	Name graphql.String
	// Description represents description of the filter alert.
	Description *graphql.String
	// QueryString represents logScale query to execute.
	QueryString graphql.String
	// Actions represents list of ids for actions to fire on query result.
	Actions []Action
	// Labels represents labels attached to the filter alert.
	Labels []graphql.String
	// Enabled represents flag indicating whether the filter alert is enabled.
	Enabled graphql.Boolean
	// ThrottleTimeSeconds represents throttle time in seconds.
	ThrottleTimeSeconds *Long
	// ThrottleField represents a field to throttle on. Can only be set if throttleTimeSeconds is set.
	ThrottleField *graphql.String
}

// UnsavedScheduledSearch represents an unsaved scheduled search.
type UnsavedScheduledSearch struct {
	// Name represents name of the scheduled search.
	Name graphql.String
	// Description represents description of the scheduled search.
	Description *graphql.String
	// QueryString represents logScale query to execute.
	QueryString graphql.String
	// Start represents start of the relative time interval for the query.
	Start graphql.String
	// End represents end of the relative time interval for the query.
	End graphql.String
	// Schedule represents cron pattern describing the schedule to execute the query on.
	Schedule graphql.String
	// TimeZone represents time zone of the schedule. Currently this field only supports UTC offsets like 'UTC', 'UTC-01' or 'UTC+12:45'.
	TimeZone graphql.String
	// BackfillLimit represents user-defined limit, which caps the number of missed searches to backfill, e.g. in the event of a shutdown.
	BackfillLimit graphql.Int
	// Actions represents list of Ids for actions to fire on query result.
	Actions []Action
	// Labels represents labels attached to the scheduled search.
	Labels []graphql.String
	// Enabled represents flag indicating whether the scheduled search is enabled.
	Enabled graphql.Boolean
}

type UpdateParametersInteraction struct {
	Arguments           []DictionaryEntryType
	UseWidgetTimeWindow graphql.Boolean
}

// UploadedFileSnapshot represents an uploaded file snapshot.
type UploadedFileSnapshot struct {
	NameAndPath     FileNameAndPath
	Headers         []graphql.String
	Lines           [][]graphql.String
	TotalLinesCount Long
	Limit           graphql.Int
	Offset          graphql.Int
	FilterString    *graphql.String
}

// UsageLimit represents contractual usage limit. If you are above you should renegotiate your contract.
type UsageLimit struct {
	UsageLimitDefined
	UnlimitedUsage
}

type UsageLimitDefined struct {
	Limit Long
}

type UsageOnDay struct {
	Date               DateTime
	IngestBytes        Long
	AverageIngestBytes *Long
	Limit              UsageLimit
}

type UsageStats struct {
	// CurrentStats represents current usage measurements and limits for ingest, storage, scanned data and users.
	CurrentStats        CurrentUsageQueryResult
	MonthlyIngest       MonthlyIngestQueryResult
	MonthlyStoredData   MonthlyStorageQueryResult
	FirstUsageTimeStamp Long
	RepositoriesIngest  RepositoriesUsageQueryResultTypes
	RepositoriesStorage RepositoriesUsageQueryResultTypes
}

// User represents a user profile.
type User struct {
	ID graphql.String
	// DisplayName represents fullName if present, otherwise username.
	DisplayName                  graphql.String
	Username                     graphql.String
	IsRoot                       graphql.Boolean
	IsOrgRoot                    graphql.Boolean
	FullName                     *graphql.String
	FirstName                    *graphql.String
	LastName                     *graphql.String
	PhoneNumber                  *graphql.String
	Email                        *graphql.String
	Picture                      *graphql.String
	CreatedAt                    DateTime
	CountryCode                  *graphql.String
	StateCode                    *graphql.String
	Company                      *graphql.String
	UserOrGroupSearchDomainRoles UserOrGroupSearchDomainRoleResultSet
	GroupSearchDomainRoles       []GroupSearchDomainRole
	SearchDomainRoles            []SearchDomainRole
	SearchDomainRolesByName      *SearchDomainRole
	// RolesV2 represents [PREVIEW: Feature currently being iterated on. Changes may occur.] The roles assigned to the user through a group.
	RolesV2 RolesResultSetType
	// GroupsV2 represents [PREVIEW: Feature currently being iterated on. Changes may occur.] The groups the user is a member of.
	GroupsV2 GroupResultSetType
	// Groups represents the groups the user is a member of.
	Groups []Group
	// Permissions represents permissions of the user.
	Permissions []UserPermissions
	// PermissionsPage represents a page of user permissions.
	PermissionsPage UserPermissionsPage
	// AllowedSystemActions represents returns the actions the user is allowed to perform in the system.
	AllowedSystemActions []SystemAction
	// AllowedOrganizationActions represents returns the actions the user is allowed to perform in the organization.
	AllowedOrganizationActions []OrganizationAction
}

type UserAndTimestamp struct {
	Username  graphql.String
	User      *User
	Timestamp DateTime
}

// UserOrGroup represents a user or a group.
type UserOrGroup struct {
	Group
	User
}

// UserOrGroupSearchDomainRole represents a user or a group role.
type UserOrGroupSearchDomainRole struct {
	GroupSearchDomainRole
	SearchDomainRole
}

// UserOrGroupSearchDomainRoleResultSet represents a page of users or group roles.
type UserOrGroupSearchDomainRoleResultSet struct {
	// TotalResults represents the total number of matching results.
	TotalResults graphql.Int
	Results      []UserOrGroupSearchDomainRole
}

// UserPermissions represents permissions of the user.
type UserPermissions struct {
	SearchDomain    SearchDomain
	QueryPrefix     graphql.String
	ViewPermissions []Permission
}

// UserPermissionsPage represents a page of user permissions.
type UserPermissionsPage struct {
	PageInfo PageType
	Page     []UserPermissions
}

type UserSettings struct {
	IsCommunityMessageDismissed          graphql.Boolean
	IsGettingStartedMessageDismissed     graphql.Boolean
	IsWelcomeMessageDismissed            graphql.Boolean
	IsEventListOrderedWithNewestAtBottom graphql.Boolean
	IsPackageDocsMessageDismissed        graphql.Boolean
	IsFieldPanelOpenByDefault            graphql.Boolean
	IsAutomaticSearchEnabled             graphql.Boolean
	IsDarkModeMessageDismissed           graphql.Boolean
	UITheme                              UiTheme
	StarredDashboards                    []graphql.String
	StarredSearchDomains                 []graphql.String
	StarredAlerts                        []graphql.String
	// FeatureAnnouncementsToShow represents [PREVIEW: We are iterating on our feature announcements, and may change this again].
	FeatureAnnouncementsToShow []FeatureAnnouncement
	IsQuickStartCompleted      graphql.Boolean
	// DefaultTimeZone represents [PREVIEW: Experimental feature to overwrite default browser timezone].
	DefaultTimeZone *graphql.String
	// IsAutomaticHighlightingEnabled represents [PREVIEW: Experimental user setting value for a feature which allow for automatic highlighting on the search page].
	IsAutomaticHighlightingEnabled        graphql.Boolean
	IsResizableQueryFieldMessageDismissed graphql.Boolean
}

// Users represents a paginated set of users.
type Users struct {
	// TotalUsers represents the total number of users.
	TotalUsers graphql.Int
	// Users represents the paginated set of users.
	Users []User
}

// UsersAndGroupsSearchResultSet represents a page of users and groups.
type UsersAndGroupsSearchResultSet struct {
	// TotalResults represents the total number of matching results.
	TotalResults graphql.Int
	Results      []UserOrGroup
}

type UsersLimit struct {
	CurrentBytes graphql.Int
	Limit        UsageLimit
}

// UsersPage represents a page of users.
type UsersPage struct {
	PageInfo PageType
	Page     []User
}

// ViewConnection represents represents the connection between a view and an underlying repository.
type ViewConnection struct {
	// Repository represents the underlying repository.
	Repository Repository
	// Filter represents the filter applied to all results from the repository.
	Filter          graphql.String
	LanguageVersion LanguageVersion
}

// ViewInteraction represents an interaction available across search and dashboards.
type ViewInteraction struct {
	ID          graphql.String
	Name        graphql.String
	DisplayName graphql.String
	Description *graphql.String
	AssetType   AssetType
	PackageID   *VersionedPackageSpecifier
	Package     *PackageInstallation
}

// ViewInteractionEntry represents a defined view interaction.
type ViewInteractionEntry struct {
	ID          graphql.String
	Cursor      graphql.String
	View        SearchDomain
	Interaction QueryBasedWidgetInteraction
	PackageID   *VersionedPackageSpecifier
	Package     *PackageInstallation
}

type ViewInteractionTemplate struct {
	Name         graphql.String
	DisplayName  graphql.String
	YamlTemplate graphql.String
}

type WellKnownEndpointDetails struct {
	Issuer                  graphql.String
	AuthorizationEndpoint   *graphql.String
	JwksEndpoint            *graphql.String
	RegistrationEndpoint    *graphql.String
	TokenEndpoint           *graphql.String
	TokenEndpointAuthMethod graphql.String
	UserInfoEndpoint        *graphql.String
}

type WidgetInteractionCondition struct {
	FieldName graphql.String
	Operator  FieldConditionOperatorType
	Argument  graphql.String
}

// WorkerQueryTracingItem represents a key being traced by worker query tracing.
type WorkerQueryTracingItem struct {
	Key    graphql.String
	Expiry Long
}

// WorkerQueryTracingState represents the state of worker query tracing.
type WorkerQueryTracingState struct {
	Items []WorkerQueryTracingItem
}

type Drilldowns struct {
	// SourceEventsForFieldsQuery represents [PREVIEW: Internal testing.] Get the query that returns the underlying events for the given fields.
	SourceEventsForFieldsQuery SourceEventsQueryResultType
}

// QueryAnalysis represents a namespace for various query analyses and transformations.
type QueryAnalysis struct {
	Drilldowns drilldowns
	// IsValidFilterAlertQuery represents checks if a query is fit for use for a filter alert.
	IsValidFilterAlertQuery graphql.Boolean
	// IsAggregate represents the query contains an aggregator.
	IsAggregate graphql.Boolean
	// IsSinglePhase represents the query does not contain a join-like function.
	IsSinglePhase graphql.Boolean
	// FilterPart represents the query string up to the first aggregator.
	FilterPart graphql.String
}
