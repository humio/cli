// Code generated by generate.go; DO NOT EDIT.
package api

import "github.com/cli/shurcooL-graphql"

// ActionType represents the type of action this template is for.
type ActionType string

// The type of action this template is for.
const (
	ActionTypeEmail              ActionType = "Email"
	ActionTypeLogScaleRepository ActionType = "LogScaleRepository"
	ActionTypeOpsGenie           ActionType = "OpsGenie"
	ActionTypePagerDuty          ActionType = "PagerDuty"
	ActionTypeSlackMulti         ActionType = "SlackMulti"
	ActionTypeSlackSingle        ActionType = "SlackSingle"
	ActionTypeUploadFile         ActionType = "UploadFile"
	ActionTypeVictorOps          ActionType = "VictorOps"
	ActionTypeWebhook            ActionType = "Webhook"
)

func ValidActionType(s string) (ActionType, bool) {
	switch s {
	case "Email":
		return ActionTypeEmail, true
	case "LogScaleRepository":
		return ActionTypeLogScaleRepository, true
	case "OpsGenie":
		return ActionTypeOpsGenie, true
	case "PagerDuty":
		return ActionTypePagerDuty, true
	case "SlackMulti":
		return ActionTypeSlackMulti, true
	case "SlackSingle":
		return ActionTypeSlackSingle, true
	case "UploadFile":
		return ActionTypeUploadFile, true
	case "VictorOps":
		return ActionTypeVictorOps, true
	case "Webhook":
		return ActionTypeWebhook, true
	}
	return ActionType(""), false
}

type AssetType string

const (
	AssetTypeInteraction     AssetType = "Interaction"
	AssetTypeScheduledSearch AssetType = "ScheduledSearch"
	AssetTypeAction          AssetType = "Action"
	AssetTypeFile            AssetType = "File"
	AssetTypeFilterAlert     AssetType = "FilterAlert"
	AssetTypeAlert           AssetType = "Alert"
	AssetTypeParser          AssetType = "Parser"
	AssetTypeSavedQuery      AssetType = "SavedQuery"
	AssetTypeDashboard       AssetType = "Dashboard"
)

func ValidAssetType(s string) (AssetType, bool) {
	switch s {
	case "Interaction":
		return AssetTypeInteraction, true
	case "ScheduledSearch":
		return AssetTypeScheduledSearch, true
	case "Action":
		return AssetTypeAction, true
	case "File":
		return AssetTypeFile, true
	case "FilterAlert":
		return AssetTypeFilterAlert, true
	case "Alert":
		return AssetTypeAlert, true
	case "Parser":
		return AssetTypeParser, true
	case "SavedQuery":
		return AssetTypeSavedQuery, true
	case "Dashboard":
		return AssetTypeDashboard, true
	}
	return AssetType(""), false
}

type BlockedQueryMatcherType string

const (
	BlockedQueryMatcherTypeExact BlockedQueryMatcherType = "EXACT"
	BlockedQueryMatcherTypeRegex BlockedQueryMatcherType = "REGEX"
)

func ValidBlockedQueryMatcherType(s string) (BlockedQueryMatcherType, bool) {
	switch s {
	case "EXACT":
		return BlockedQueryMatcherTypeExact, true
	case "REGEX":
		return BlockedQueryMatcherTypeRegex, true
	}
	return BlockedQueryMatcherType(""), false
}

type Changes string

const (
	ChangesRemoved  Changes = "Removed"
	ChangesAdded    Changes = "Added"
	ChangesNoChange Changes = "NoChange"
)

func ValidChanges(s string) (Changes, bool) {
	switch s {
	case "Removed":
		return ChangesRemoved, true
	case "Added":
		return ChangesAdded, true
	case "NoChange":
		return ChangesNoChange, true
	}
	return Changes(""), false
}

type ColumnChangeKind string

const (
	ColumnChangeKindRemove ColumnChangeKind = "Remove"
	ColumnChangeKindAdd    ColumnChangeKind = "Add"
)

func ValidColumnChangeKind(s string) (ColumnChangeKind, bool) {
	switch s {
	case "Remove":
		return ColumnChangeKindRemove, true
	case "Add":
		return ColumnChangeKindAdd, true
	}
	return ColumnChangeKind(""), false
}

// ConnectionAspect represents a value denoting some aspect of a federated connection.
type ConnectionAspect string

// A value denoting some aspect of a federated connection.
const (
	ConnectionAspectTag         ConnectionAspect = "Tag"
	ConnectionAspectQueryPrefix ConnectionAspect = "QueryPrefix"
	ConnectionAspectOther       ConnectionAspect = "Other"
	ConnectionAspectTargetView  ConnectionAspect = "TargetView"
	ConnectionAspectPublicURL   ConnectionAspect = "PublicUrl"
	ConnectionAspectToken       ConnectionAspect = "Token"
)

func ValidConnectionAspect(s string) (ConnectionAspect, bool) {
	switch s {
	case "Tag":
		return ConnectionAspectTag, true
	case "QueryPrefix":
		return ConnectionAspectQueryPrefix, true
	case "Other":
		return ConnectionAspectOther, true
	case "TargetView":
		return ConnectionAspectTargetView, true
	case "PublicUrl":
		return ConnectionAspectPublicURL, true
	case "Token":
		return ConnectionAspectToken, true
	}
	return ConnectionAspect(""), false
}

// DashboardUpdateFrequency represents the frequency at which a dashboard updates its results.
type DashboardUpdateFrequency string

// The frequency at which a dashboard updates its results.
const (
	DashboardUpdateFrequencyRealTime DashboardUpdateFrequency = "RealTime"
	DashboardUpdateFrequencyNever    DashboardUpdateFrequency = "Never"
)

func ValidDashboardUpdateFrequency(s string) (DashboardUpdateFrequency, bool) {
	switch s {
	case "RealTime":
		return DashboardUpdateFrequencyRealTime, true
	case "Never":
		return DashboardUpdateFrequencyNever, true
	}
	return DashboardUpdateFrequency(""), false
}

// DynamicConfig represents a dynamic configuration.
type DynamicConfig string

// A dynamic configuration.
const (
	DynamicConfigBlockSignup                                      DynamicConfig = "BlockSignup"
	DynamicConfigDisableUserTracking                              DynamicConfig = "DisableUserTracking"
	DynamicConfigDisableAnalyticsJob                              DynamicConfig = "DisableAnalyticsJob"
	DynamicConfigMaxAccessTokenTTL                                DynamicConfig = "MaxAccessTokenTTL"
	DynamicConfigRejectIngestOnParserExceedingFraction            DynamicConfig = "RejectIngestOnParserExceedingFraction"
	DynamicConfigQueryPartitionAutoBalance                        DynamicConfig = "QueryPartitionAutoBalance"
	DynamicConfigQueryCoordinatorMaxHeapFraction                  DynamicConfig = "QueryCoordinatorMaxHeapFraction"
	DynamicConfigPruneCommunityLockedOrganizationsAfterHours      DynamicConfig = "PruneCommunityLockedOrganizationsAfterHours"
	DynamicConfigPruneMissingTosAcceptanceOrganizationsAfterHours DynamicConfig = "PruneMissingTOSAcceptanceOrganizationsAfterHours"
	DynamicConfigDisableViewWithSameNameCleanup                   DynamicConfig = "DisableViewWithSameNameCleanup"
	DynamicConfigMaxIngestRequestSize                             DynamicConfig = "MaxIngestRequestSize"
	DynamicConfigJoinRowLimit                                     DynamicConfig = "JoinRowLimit"
	DynamicConfigJoinDefaultLimit                                 DynamicConfig = "JoinDefaultLimit"
	DynamicConfigSelfJoinLimit                                    DynamicConfig = "SelfJoinLimit"
	DynamicConfigStateRowLimit                                    DynamicConfig = "StateRowLimit"
	DynamicConfigQueryMemoryLimit                                 DynamicConfig = "QueryMemoryLimit"
	DynamicConfigLiveQueryMemoryLimit                             DynamicConfig = "LiveQueryMemoryLimit"
	DynamicConfigQueryCoordinatorMemoryLimit                      DynamicConfig = "QueryCoordinatorMemoryLimit"
	DynamicConfigGroupDefaultLimit                                DynamicConfig = "GroupDefaultLimit"
	DynamicConfigGroupMaxLimit                                    DynamicConfig = "GroupMaxLimit"
	DynamicConfigQueryResultRowCountLimit                         DynamicConfig = "QueryResultRowCountLimit"
	DynamicConfigParserThrottlingAllocationFactor                 DynamicConfig = "ParserThrottlingAllocationFactor"
	DynamicConfigUndersizedMergingRetentionPercentage             DynamicConfig = "UndersizedMergingRetentionPercentage"
	DynamicConfigStaticQueryFractionOfCores                       DynamicConfig = "StaticQueryFractionOfCores"
	DynamicConfigTargetMaxRateForDatasource                       DynamicConfig = "TargetMaxRateForDatasource"
	DynamicConfigDelayIngestResponseDueToIngestLagMaxFactor       DynamicConfig = "DelayIngestResponseDueToIngestLagMaxFactor"
	DynamicConfigDelayIngestResponseDueToIngestLagThreshold       DynamicConfig = "DelayIngestResponseDueToIngestLagThreshold"
	DynamicConfigDelayIngestResponseDueToIngestLagScale           DynamicConfig = "DelayIngestResponseDueToIngestLagScale"
	DynamicConfigSampleIntervalForDatasourceRates                 DynamicConfig = "SampleIntervalForDatasourceRates"
	DynamicConfigFdrMaxNodesPerFeed                               DynamicConfig = "FdrMaxNodesPerFeed"
	DynamicConfigBucketStorageWriteVersion                        DynamicConfig = "BucketStorageWriteVersion"
	DynamicConfigBucketStorageKeySchemeVersion                    DynamicConfig = "BucketStorageKeySchemeVersion"
	DynamicConfigBucketStorageUploadInfrequentThresholdDays       DynamicConfig = "BucketStorageUploadInfrequentThresholdDays"
	DynamicConfigMinimumHumioVersion                              DynamicConfig = "MinimumHumioVersion"
	DynamicConfigDebugAuditRequestTrace                           DynamicConfig = "DebugAuditRequestTrace"
	DynamicConfigFlushSegmentsAndGlobalOnShutdown                 DynamicConfig = "FlushSegmentsAndGlobalOnShutdown"
	DynamicConfigGracePeriodBeforeDeletingDeadEphemeralHostsMs    DynamicConfig = "GracePeriodBeforeDeletingDeadEphemeralHostsMs"
	DynamicConfigFdrS3fileSizeMax                                 DynamicConfig = "FdrS3FileSizeMax"
	DynamicConfigEnableDemoData                                   DynamicConfig = "EnableDemoData"
	DynamicConfigMaxNumberOfOrganizations                         DynamicConfig = "MaxNumberOfOrganizations"
	DynamicConfigNumberOfDaysToRemoveStaleOrganizationsAfter      DynamicConfig = "NumberOfDaysToRemoveStaleOrganizationsAfter"
	DynamicConfigIsAutomaticUpdateCheckingAllowed                 DynamicConfig = "IsAutomaticUpdateCheckingAllowed"
	DynamicConfigExternalFunctionRequestResponseSizeLimitBytes    DynamicConfig = "ExternalFunctionRequestResponseSizeLimitBytes"
	DynamicConfigExternalFunctionRequestResponseEventCountLimit   DynamicConfig = "ExternalFunctionRequestResponseEventCountLimit"
	DynamicConfigReplaceAnsiEscapeCodes                           DynamicConfig = "ReplaceANSIEscapeCodes"
	DynamicConfigDisableInconsistencyDetectionJob                 DynamicConfig = "DisableInconsistencyDetectionJob"
	DynamicConfigDeleteDuplicatedNameViewsAfterMerging            DynamicConfig = "DeleteDuplicatedNameViewsAfterMerging"
	DynamicConfigMaxQueryPenaltyCreditForBlockedQueriesFactor     DynamicConfig = "MaxQueryPenaltyCreditForBlockedQueriesFactor"
	DynamicConfigMaxConcurrentQueriesOnWorker                     DynamicConfig = "MaxConcurrentQueriesOnWorker"
	DynamicConfigIngestFeedAwsProcessingDownloadBufferSize        DynamicConfig = "IngestFeedAwsProcessingDownloadBufferSize"
	DynamicConfigIngestFeedAwsProcessingEventBufferSize           DynamicConfig = "IngestFeedAwsProcessingEventBufferSize"
	DynamicConfigIngestFeedAwsProcessingEventsPerBatch            DynamicConfig = "IngestFeedAwsProcessingEventsPerBatch"
	DynamicConfigIngestFeedAwsDownloadMaxObjectSize               DynamicConfig = "IngestFeedAwsDownloadMaxObjectSize"
	DynamicConfigIngestFeedGovernorGainPerCore                    DynamicConfig = "IngestFeedGovernorGainPerCore"
	DynamicConfigIngestFeedGovernorCycleDuration                  DynamicConfig = "IngestFeedGovernorCycleDuration"
	DynamicConfigIngestFeedGovernorIngestDelayLow                 DynamicConfig = "IngestFeedGovernorIngestDelayLow"
	DynamicConfigIngestFeedGovernorIngestDelayHigh                DynamicConfig = "IngestFeedGovernorIngestDelayHigh"
	DynamicConfigIngestFeedGovernorRateOverride                   DynamicConfig = "IngestFeedGovernorRateOverride"
	DynamicConfigMaxCsvFileUploadSizeBytes                        DynamicConfig = "MaxCsvFileUploadSizeBytes"
	DynamicConfigMaxJSONFileUploadSizeBytes                       DynamicConfig = "MaxJsonFileUploadSizeBytes"
	DynamicConfigMatchFilesMaxHeapFraction                        DynamicConfig = "MatchFilesMaxHeapFraction"
	DynamicConfigGraphQlSelectionSizeLimit                        DynamicConfig = "GraphQLSelectionSizeLimit"
	DynamicConfigUnauthenticatedGraphQlSelectionSizeLimit         DynamicConfig = "UnauthenticatedGraphQLSelectionSizeLimit"
)

func ValidDynamicConfig(s string) (DynamicConfig, bool) {
	switch s {
	case "BlockSignup":
		return DynamicConfigBlockSignup, true
	case "DisableUserTracking":
		return DynamicConfigDisableUserTracking, true
	case "DisableAnalyticsJob":
		return DynamicConfigDisableAnalyticsJob, true
	case "MaxAccessTokenTTL":
		return DynamicConfigMaxAccessTokenTTL, true
	case "RejectIngestOnParserExceedingFraction":
		return DynamicConfigRejectIngestOnParserExceedingFraction, true
	case "QueryPartitionAutoBalance":
		return DynamicConfigQueryPartitionAutoBalance, true
	case "QueryCoordinatorMaxHeapFraction":
		return DynamicConfigQueryCoordinatorMaxHeapFraction, true
	case "PruneCommunityLockedOrganizationsAfterHours":
		return DynamicConfigPruneCommunityLockedOrganizationsAfterHours, true
	case "PruneMissingTOSAcceptanceOrganizationsAfterHours":
		return DynamicConfigPruneMissingTosAcceptanceOrganizationsAfterHours, true
	case "DisableViewWithSameNameCleanup":
		return DynamicConfigDisableViewWithSameNameCleanup, true
	case "MaxIngestRequestSize":
		return DynamicConfigMaxIngestRequestSize, true
	case "JoinRowLimit":
		return DynamicConfigJoinRowLimit, true
	case "JoinDefaultLimit":
		return DynamicConfigJoinDefaultLimit, true
	case "SelfJoinLimit":
		return DynamicConfigSelfJoinLimit, true
	case "StateRowLimit":
		return DynamicConfigStateRowLimit, true
	case "QueryMemoryLimit":
		return DynamicConfigQueryMemoryLimit, true
	case "LiveQueryMemoryLimit":
		return DynamicConfigLiveQueryMemoryLimit, true
	case "QueryCoordinatorMemoryLimit":
		return DynamicConfigQueryCoordinatorMemoryLimit, true
	case "GroupDefaultLimit":
		return DynamicConfigGroupDefaultLimit, true
	case "GroupMaxLimit":
		return DynamicConfigGroupMaxLimit, true
	case "QueryResultRowCountLimit":
		return DynamicConfigQueryResultRowCountLimit, true
	case "ParserThrottlingAllocationFactor":
		return DynamicConfigParserThrottlingAllocationFactor, true
	case "UndersizedMergingRetentionPercentage":
		return DynamicConfigUndersizedMergingRetentionPercentage, true
	case "StaticQueryFractionOfCores":
		return DynamicConfigStaticQueryFractionOfCores, true
	case "TargetMaxRateForDatasource":
		return DynamicConfigTargetMaxRateForDatasource, true
	case "DelayIngestResponseDueToIngestLagMaxFactor":
		return DynamicConfigDelayIngestResponseDueToIngestLagMaxFactor, true
	case "DelayIngestResponseDueToIngestLagThreshold":
		return DynamicConfigDelayIngestResponseDueToIngestLagThreshold, true
	case "DelayIngestResponseDueToIngestLagScale":
		return DynamicConfigDelayIngestResponseDueToIngestLagScale, true
	case "SampleIntervalForDatasourceRates":
		return DynamicConfigSampleIntervalForDatasourceRates, true
	case "FdrMaxNodesPerFeed":
		return DynamicConfigFdrMaxNodesPerFeed, true
	case "BucketStorageWriteVersion":
		return DynamicConfigBucketStorageWriteVersion, true
	case "BucketStorageKeySchemeVersion":
		return DynamicConfigBucketStorageKeySchemeVersion, true
	case "BucketStorageUploadInfrequentThresholdDays":
		return DynamicConfigBucketStorageUploadInfrequentThresholdDays, true
	case "MinimumHumioVersion":
		return DynamicConfigMinimumHumioVersion, true
	case "DebugAuditRequestTrace":
		return DynamicConfigDebugAuditRequestTrace, true
	case "FlushSegmentsAndGlobalOnShutdown":
		return DynamicConfigFlushSegmentsAndGlobalOnShutdown, true
	case "GracePeriodBeforeDeletingDeadEphemeralHostsMs":
		return DynamicConfigGracePeriodBeforeDeletingDeadEphemeralHostsMs, true
	case "FdrS3FileSizeMax":
		return DynamicConfigFdrS3fileSizeMax, true
	case "EnableDemoData":
		return DynamicConfigEnableDemoData, true
	case "MaxNumberOfOrganizations":
		return DynamicConfigMaxNumberOfOrganizations, true
	case "NumberOfDaysToRemoveStaleOrganizationsAfter":
		return DynamicConfigNumberOfDaysToRemoveStaleOrganizationsAfter, true
	case "IsAutomaticUpdateCheckingAllowed":
		return DynamicConfigIsAutomaticUpdateCheckingAllowed, true
	case "ExternalFunctionRequestResponseSizeLimitBytes":
		return DynamicConfigExternalFunctionRequestResponseSizeLimitBytes, true
	case "ExternalFunctionRequestResponseEventCountLimit":
		return DynamicConfigExternalFunctionRequestResponseEventCountLimit, true
	case "ReplaceANSIEscapeCodes":
		return DynamicConfigReplaceAnsiEscapeCodes, true
	case "DisableInconsistencyDetectionJob":
		return DynamicConfigDisableInconsistencyDetectionJob, true
	case "DeleteDuplicatedNameViewsAfterMerging":
		return DynamicConfigDeleteDuplicatedNameViewsAfterMerging, true
	case "MaxQueryPenaltyCreditForBlockedQueriesFactor":
		return DynamicConfigMaxQueryPenaltyCreditForBlockedQueriesFactor, true
	case "MaxConcurrentQueriesOnWorker":
		return DynamicConfigMaxConcurrentQueriesOnWorker, true
	case "IngestFeedAwsProcessingDownloadBufferSize":
		return DynamicConfigIngestFeedAwsProcessingDownloadBufferSize, true
	case "IngestFeedAwsProcessingEventBufferSize":
		return DynamicConfigIngestFeedAwsProcessingEventBufferSize, true
	case "IngestFeedAwsProcessingEventsPerBatch":
		return DynamicConfigIngestFeedAwsProcessingEventsPerBatch, true
	case "IngestFeedAwsDownloadMaxObjectSize":
		return DynamicConfigIngestFeedAwsDownloadMaxObjectSize, true
	case "IngestFeedGovernorGainPerCore":
		return DynamicConfigIngestFeedGovernorGainPerCore, true
	case "IngestFeedGovernorCycleDuration":
		return DynamicConfigIngestFeedGovernorCycleDuration, true
	case "IngestFeedGovernorIngestDelayLow":
		return DynamicConfigIngestFeedGovernorIngestDelayLow, true
	case "IngestFeedGovernorIngestDelayHigh":
		return DynamicConfigIngestFeedGovernorIngestDelayHigh, true
	case "IngestFeedGovernorRateOverride":
		return DynamicConfigIngestFeedGovernorRateOverride, true
	case "MaxCsvFileUploadSizeBytes":
		return DynamicConfigMaxCsvFileUploadSizeBytes, true
	case "MaxJsonFileUploadSizeBytes":
		return DynamicConfigMaxJSONFileUploadSizeBytes, true
	case "MatchFilesMaxHeapFraction":
		return DynamicConfigMatchFilesMaxHeapFraction, true
	case "GraphQLSelectionSizeLimit":
		return DynamicConfigGraphQlSelectionSizeLimit, true
	case "UnauthenticatedGraphQLSelectionSizeLimit":
		return DynamicConfigUnauthenticatedGraphQlSelectionSizeLimit, true
	}
	return DynamicConfig(""), false
}

// EnabledInScope represents scope of feature flag enablement.
type EnabledInScope string

// Scope of feature flag enablement.
const (
	EnabledInScopeGlobalScope       EnabledInScope = "GlobalScope"
	EnabledInScopeOrganizationScope EnabledInScope = "OrganizationScope"
	EnabledInScopeUserScope         EnabledInScope = "UserScope"
	EnabledInScopeDisabled          EnabledInScope = "Disabled"
)

func ValidEnabledInScope(s string) (EnabledInScope, bool) {
	switch s {
	case "GlobalScope":
		return EnabledInScopeGlobalScope, true
	case "OrganizationScope":
		return EnabledInScopeOrganizationScope, true
	case "UserScope":
		return EnabledInScopeUserScope, true
	case "Disabled":
		return EnabledInScopeDisabled, true
	}
	return EnabledInScope(""), false
}

type EntitySearchSortOrderType string

const (
	EntitySearchSortOrderTypeDescending EntitySearchSortOrderType = "Descending"
	EntitySearchSortOrderTypeAscending  EntitySearchSortOrderType = "Ascending"
)

func ValidEntitySearchSortOrderType(s string) (EntitySearchSortOrderType, bool) {
	switch s {
	case "Descending":
		return EntitySearchSortOrderTypeDescending, true
	case "Ascending":
		return EntitySearchSortOrderTypeAscending, true
	}
	return EntitySearchSortOrderType(""), false
}

type EnvironmentType string

const (
	EnvironmentTypeOn_prem      EnvironmentType = "ON_PREM"
	EnvironmentTypeOn_cloud     EnvironmentType = "ON_CLOUD"
	EnvironmentTypeOn_community EnvironmentType = "ON_COMMUNITY"
)

func ValidEnvironmentType(s string) (EnvironmentType, bool) {
	switch s {
	case "ON_PREM":
		return EnvironmentTypeOn_prem, true
	case "ON_CLOUD":
		return EnvironmentTypeOn_cloud, true
	case "ON_COMMUNITY":
		return EnvironmentTypeOn_community, true
	}
	return EnvironmentType(""), false
}

// EventForwarderKind represents the kind of an event forwarder.
type EventForwarderKind string

// The kind of an event forwarder.
const (
	EventForwarderKindKafka EventForwarderKind = "Kafka"
)

func ValidEventForwarderKind(s string) (EventForwarderKind, bool) {
	switch s {
	case "Kafka":
		return EventForwarderKindKafka, true
	}
	return EventForwarderKind(""), false
}

type FeatureAnnouncement string

const (
	FeatureAnnouncementFilterMatchHighlighting  FeatureAnnouncement = "FilterMatchHighlighting"
	FeatureAnnouncementOrganizationOwnedQueries FeatureAnnouncement = "OrganizationOwnedQueries"
	FeatureAnnouncementInteractions             FeatureAnnouncement = "Interactions"
	FeatureAnnouncementFieldInteractions        FeatureAnnouncement = "FieldInteractions"
	FeatureAnnouncementPuffinRebranding         FeatureAnnouncement = "PuffinRebranding"
	FeatureAnnouncementFetchMoreOnFieldsPanel   FeatureAnnouncement = "FetchMoreOnFieldsPanel"
	FeatureAnnouncementToolPanel                FeatureAnnouncement = "ToolPanel"
)

func ValidFeatureAnnouncement(s string) (FeatureAnnouncement, bool) {
	switch s {
	case "FilterMatchHighlighting":
		return FeatureAnnouncementFilterMatchHighlighting, true
	case "OrganizationOwnedQueries":
		return FeatureAnnouncementOrganizationOwnedQueries, true
	case "Interactions":
		return FeatureAnnouncementInteractions, true
	case "FieldInteractions":
		return FeatureAnnouncementFieldInteractions, true
	case "PuffinRebranding":
		return FeatureAnnouncementPuffinRebranding, true
	case "FetchMoreOnFieldsPanel":
		return FeatureAnnouncementFetchMoreOnFieldsPanel, true
	case "ToolPanel":
		return FeatureAnnouncementToolPanel, true
	}
	return FeatureAnnouncement(""), false
}

// FeatureFlag represents represents a feature flag.
type FeatureFlag string

// Represents a feature flag.
const (
	FeatureFlagExportToBucket                            FeatureFlag = "ExportToBucket"                            // [PREVIEW: This functionality is still under development and can change without warning.] Export data to bucket storage.
	FeatureFlagRepeatingQueries                          FeatureFlag = "RepeatingQueries"                          // [PREVIEW: This functionality is still under development and can change without warning.] Enable repeating queries. Can be used instead of live queries for functions having limitations around live queries.
	FeatureFlagCustomIngestTokens                        FeatureFlag = "CustomIngestTokens"                        // [PREVIEW: This functionality is still under development and can change without warning.] Enable custom ingest tokens not generated by Humio.
	FeatureFlagPermissionTokens                          FeatureFlag = "PermissionTokens"                          // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Enable permission tokens.
	FeatureFlagDefaultRolesForGroups                     FeatureFlag = "DefaultRolesForGroups"                     // [PREVIEW: This functionality is still under development and can change without warning.] Assign default roles for groups.
	FeatureFlagNewOrganizationLimits                     FeatureFlag = "NewOrganizationLimits"                     // [PREVIEW: This functionality is still under development and can change without warning.] Use new organization limits.
	FeatureFlagCookieAuthServerSide                      FeatureFlag = "CookieAuthServerSide"                      // [PREVIEW: This functionality is still under development and can change without warning.] Authenticate cookies server-side.
	FeatureFlagArrayFunctions                            FeatureFlag = "ArrayFunctions"                            // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Enable ArrayFunctions in query language.
	FeatureFlagGeographyFunctions                        FeatureFlag = "GeographyFunctions"                        // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Enable geography functions in query language.
	FeatureFlagRollingRestart                            FeatureFlag = "RollingRestart"                            // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Enable rolling restart of Humio.
	FeatureFlagCachePolicies                             FeatureFlag = "CachePolicies"                             // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Prioritize newer over older segments.
	FeatureFlagMultiClusterSearch                        FeatureFlag = "MultiClusterSearch"                        // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Enable searching across Humio clusters.
	FeatureFlagSubdomainForOrganizations                 FeatureFlag = "SubdomainForOrganizations"                 // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Enable subdomains for current cluster.
	FeatureFlagManagedRepositories                       FeatureFlag = "ManagedRepositories"                       // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Enable Humio Managed repositories. The customer is not permitted to change certain configurations in a Humio Managed repository.
	FeatureFlagManagedRepositoriesAllowFdrConfig         FeatureFlag = "ManagedRepositoriesAllowFDRConfig"         // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Allow users to configure FDR feeds for managed repositories.
	FeatureFlagFleetRemoteConfiguration                  FeatureFlag = "FleetRemoteConfiguration"                  // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Fleet remote configuration features.
	FeatureFlagUsagePageUsingIngestAfterFieldRemovalSize FeatureFlag = "UsagePageUsingIngestAfterFieldRemovalSize" // [PREVIEW: This functionality is still under development and can change without warning.] The UsagePage shows data from ingestAfterFieldRemovalSize instead of segmentWriteBytes.
	FeatureFlagFalconDataConnector                       FeatureFlag = "FalconDataConnector"                       // [PREVIEW: This functionality is still under development and can change without warning.] Enable falcon data connector.
	FeatureFlagSleepFunction                             FeatureFlag = "SleepFunction"                             // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Flag for testing, does nothing.
	FeatureFlagFleetRemoteConfigurationTest              FeatureFlag = "FleetRemoteConfigurationTest"              // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Enable functionality related to test of fleet configurations.
	FeatureFlagLoginBridge                               FeatureFlag = "LoginBridge"                               // [PREVIEW: This functionality is still under development and can change without warning.] Enable login bridge.
	FeatureFlagMacosInstallerForLogCollector             FeatureFlag = "MacosInstallerForLogCollector"             // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Enables download of macos installer for logcollector through fleet management.
	FeatureFlagLogAverageUsage                           FeatureFlag = "LogAverageUsage"                           // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Enables UsageJob to log average usage as part of usage log.
	FeatureFlagFleetPolicies                             FeatureFlag = "FleetPolicies"                             // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Enables fleet management configuration policies.
	FeatureFlagFleetCollectorMetrics                     FeatureFlag = "FleetCollectorMetrics"                     // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Enables fleet management collector metrics.
	FeatureFlagPreMergeMiniSegments                      FeatureFlag = "PreMergeMiniSegments"                      // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Pre-merge mini-segments.
	FeatureFlagFleetLiveQueries                          FeatureFlag = "FleetLiveQueries"                          // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Use live queries in fleet management.
	FeatureFlagFleetCollectorDebugLogging                FeatureFlag = "FleetCollectorDebugLogging"                // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Enables fleet management collector debug logging.
	FeatureFlagUseNewQueryScheduler                      FeatureFlag = "UseNewQueryScheduler"                      // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Use the new fair-across-users query scheduler.
	FeatureFlagExternalFunctions                         FeatureFlag = "ExternalFunctions"                         // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] External Functions.
	FeatureFlagRestartLiveQueriesOnFileChanged           FeatureFlag = "RestartLiveQueriesOnFileChanged"           // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Enable restarting live queries when a file it uses is updated. If disabled, lookup files are swapped while the queries are still running..
	FeatureFlagFieldAliasing                             FeatureFlag = "FieldAliasing"                             // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Field Aliasing.
	FeatureFlagRoundsBasedQueryPolling                   FeatureFlag = "RoundsBasedQueryPolling"                   // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Enable experimental round based query polling functionality.
	FeatureFlagQueryAssistant                            FeatureFlag = "QueryAssistant"                            // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Enable the LogScale Query Assistant.
	FeatureFlagFlightControl                             FeatureFlag = "FlightControl"                             // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Enable Flight Control support in cluster.
	FeatureFlagOrganizationSecurityPolicies              FeatureFlag = "OrganizationSecurityPolicies"              // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Enable organization level security policies. For instance the ability to only enable certain action types.
	FeatureFlagOrganizationQueryOwnership                FeatureFlag = "OrganizationQueryOwnership"                // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Enable organization query ownership that allows running queries on behalf of the organization.
	FeatureFlagScheduledReports                          FeatureFlag = "ScheduledReports"                          // [PREVIEW: This functionality is still under development and can change without warning. THIS FUNCTIONALITY IS EXPERIMENTAL: Enabling experimental functionality is strongly discouraged and can lead to Humio ending up in a bad state beyond repair.] Enable Scheduled Reports.
)

func ValidFeatureFlag(s string) (FeatureFlag, bool) {
	switch s {
	case "ExportToBucket":
		return FeatureFlagExportToBucket, true
	case "RepeatingQueries":
		return FeatureFlagRepeatingQueries, true
	case "CustomIngestTokens":
		return FeatureFlagCustomIngestTokens, true
	case "PermissionTokens":
		return FeatureFlagPermissionTokens, true
	case "DefaultRolesForGroups":
		return FeatureFlagDefaultRolesForGroups, true
	case "NewOrganizationLimits":
		return FeatureFlagNewOrganizationLimits, true
	case "CookieAuthServerSide":
		return FeatureFlagCookieAuthServerSide, true
	case "ArrayFunctions":
		return FeatureFlagArrayFunctions, true
	case "GeographyFunctions":
		return FeatureFlagGeographyFunctions, true
	case "RollingRestart":
		return FeatureFlagRollingRestart, true
	case "CachePolicies":
		return FeatureFlagCachePolicies, true
	case "MultiClusterSearch":
		return FeatureFlagMultiClusterSearch, true
	case "SubdomainForOrganizations":
		return FeatureFlagSubdomainForOrganizations, true
	case "ManagedRepositories":
		return FeatureFlagManagedRepositories, true
	case "ManagedRepositoriesAllowFDRConfig":
		return FeatureFlagManagedRepositoriesAllowFdrConfig, true
	case "FleetRemoteConfiguration":
		return FeatureFlagFleetRemoteConfiguration, true
	case "UsagePageUsingIngestAfterFieldRemovalSize":
		return FeatureFlagUsagePageUsingIngestAfterFieldRemovalSize, true
	case "FalconDataConnector":
		return FeatureFlagFalconDataConnector, true
	case "SleepFunction":
		return FeatureFlagSleepFunction, true
	case "FleetRemoteConfigurationTest":
		return FeatureFlagFleetRemoteConfigurationTest, true
	case "LoginBridge":
		return FeatureFlagLoginBridge, true
	case "MacosInstallerForLogCollector":
		return FeatureFlagMacosInstallerForLogCollector, true
	case "LogAverageUsage":
		return FeatureFlagLogAverageUsage, true
	case "FleetPolicies":
		return FeatureFlagFleetPolicies, true
	case "FleetCollectorMetrics":
		return FeatureFlagFleetCollectorMetrics, true
	case "PreMergeMiniSegments":
		return FeatureFlagPreMergeMiniSegments, true
	case "FleetLiveQueries":
		return FeatureFlagFleetLiveQueries, true
	case "FleetCollectorDebugLogging":
		return FeatureFlagFleetCollectorDebugLogging, true
	case "UseNewQueryScheduler":
		return FeatureFlagUseNewQueryScheduler, true
	case "ExternalFunctions":
		return FeatureFlagExternalFunctions, true
	case "RestartLiveQueriesOnFileChanged":
		return FeatureFlagRestartLiveQueriesOnFileChanged, true
	case "FieldAliasing":
		return FeatureFlagFieldAliasing, true
	case "RoundsBasedQueryPolling":
		return FeatureFlagRoundsBasedQueryPolling, true
	case "QueryAssistant":
		return FeatureFlagQueryAssistant, true
	case "FlightControl":
		return FeatureFlagFlightControl, true
	case "OrganizationSecurityPolicies":
		return FeatureFlagOrganizationSecurityPolicies, true
	case "OrganizationQueryOwnership":
		return FeatureFlagOrganizationQueryOwnership, true
	case "ScheduledReports":
		return FeatureFlagScheduledReports, true
	}
	return FeatureFlag(""), false
}

// FieldConditionOperatorType represents field condition comparison operator type.
type FieldConditionOperatorType string

// Field condition comparison operator type.
const (
	FieldConditionOperatorTypeEqual       FieldConditionOperatorType = "Equal"
	FieldConditionOperatorTypeNotEqual    FieldConditionOperatorType = "NotEqual"
	FieldConditionOperatorTypeContains    FieldConditionOperatorType = "Contains"
	FieldConditionOperatorTypeNotContains FieldConditionOperatorType = "NotContains"
	FieldConditionOperatorTypeStartsWith  FieldConditionOperatorType = "StartsWith"
	FieldConditionOperatorTypeEndsWith    FieldConditionOperatorType = "EndsWith"
	FieldConditionOperatorTypePresent     FieldConditionOperatorType = "Present"
	FieldConditionOperatorTypeNotPresent  FieldConditionOperatorType = "NotPresent"
	FieldConditionOperatorTypeUnknown     FieldConditionOperatorType = "Unknown"
)

func ValidFieldConditionOperatorType(s string) (FieldConditionOperatorType, bool) {
	switch s {
	case "Equal":
		return FieldConditionOperatorTypeEqual, true
	case "NotEqual":
		return FieldConditionOperatorTypeNotEqual, true
	case "Contains":
		return FieldConditionOperatorTypeContains, true
	case "NotContains":
		return FieldConditionOperatorTypeNotContains, true
	case "StartsWith":
		return FieldConditionOperatorTypeStartsWith, true
	case "EndsWith":
		return FieldConditionOperatorTypeEndsWith, true
	case "Present":
		return FieldConditionOperatorTypePresent, true
	case "NotPresent":
		return FieldConditionOperatorTypeNotPresent, true
	case "Unknown":
		return FieldConditionOperatorTypeUnknown, true
	}
	return FieldConditionOperatorType(""), false
}

type FleetConfiguration__SortBy string

const (
	FleetConfiguration__SortByName         FleetConfiguration__SortBy = "Name"
	FleetConfiguration__SortByModifiedBy   FleetConfiguration__SortBy = "ModifiedBy"
	FleetConfiguration__SortByInstances    FleetConfiguration__SortBy = "Instances"
	FleetConfiguration__SortBySize         FleetConfiguration__SortBy = "Size"
	FleetConfiguration__SortByLastModified FleetConfiguration__SortBy = "LastModified"
)

func ValidFleetConfiguration__SortBy(s string) (FleetConfiguration__SortBy, bool) {
	switch s {
	case "Name":
		return FleetConfiguration__SortByName, true
	case "ModifiedBy":
		return FleetConfiguration__SortByModifiedBy, true
	case "Instances":
		return FleetConfiguration__SortByInstances, true
	case "Size":
		return FleetConfiguration__SortBySize, true
	case "LastModified":
		return FleetConfiguration__SortByLastModified, true
	}
	return FleetConfiguration__SortBy(""), false
}

type Fleet__SortBy string

const (
	Fleet__SortByHostname       Fleet__SortBy = "Hostname"
	Fleet__SortBySystem         Fleet__SortBy = "System"
	Fleet__SortByVersion        Fleet__SortBy = "Version"
	Fleet__SortByIngest         Fleet__SortBy = "Ingest"
	Fleet__SortByLastActivity   Fleet__SortBy = "LastActivity"
	Fleet__SortByConfigName     Fleet__SortBy = "ConfigName"
	Fleet__SortByCPUAverage5min Fleet__SortBy = "CpuAverage5Min"
	Fleet__SortByMemoryMax5min  Fleet__SortBy = "MemoryMax5Min"
	Fleet__SortByDiskMax5min    Fleet__SortBy = "DiskMax5Min"
	Fleet__SortByChange         Fleet__SortBy = "Change"
)

func ValidFleet__SortBy(s string) (Fleet__SortBy, bool) {
	switch s {
	case "Hostname":
		return Fleet__SortByHostname, true
	case "System":
		return Fleet__SortBySystem, true
	case "Version":
		return Fleet__SortByVersion, true
	case "Ingest":
		return Fleet__SortByIngest, true
	case "LastActivity":
		return Fleet__SortByLastActivity, true
	case "ConfigName":
		return Fleet__SortByConfigName, true
	case "CpuAverage5Min":
		return Fleet__SortByCPUAverage5min, true
	case "MemoryMax5Min":
		return Fleet__SortByMemoryMax5min, true
	case "DiskMax5Min":
		return Fleet__SortByDiskMax5min, true
	case "Change":
		return Fleet__SortByChange, true
	}
	return Fleet__SortBy(""), false
}

// IngestFeedAwsAuthenticationKind represents the kind of AWS authentication to use.
type IngestFeedAwsAuthenticationKind string

// The kind of AWS authentication to use.
const (
	IngestFeedAwsAuthenticationKindIamRole IngestFeedAwsAuthenticationKind = "IamRole" // IAM role authentication.
)

func ValidIngestFeedAwsAuthenticationKind(s string) (IngestFeedAwsAuthenticationKind, bool) {
	switch s {
	case "IamRole":
		return IngestFeedAwsAuthenticationKindIamRole, true
	}
	return IngestFeedAwsAuthenticationKind(""), false
}

// IngestFeedCompression represents compression scheme of the file.
type IngestFeedCompression string

// Compression scheme of the file.
const (
	IngestFeedCompressionAuto IngestFeedCompression = "Auto"
	IngestFeedCompressionGzip IngestFeedCompression = "Gzip"
	IngestFeedCompressionNone IngestFeedCompression = "None"
)

func ValidIngestFeedCompression(s string) (IngestFeedCompression, bool) {
	switch s {
	case "Auto":
		return IngestFeedCompressionAuto, true
	case "Gzip":
		return IngestFeedCompressionGzip, true
	case "None":
		return IngestFeedCompressionNone, true
	}
	return IngestFeedCompression(""), false
}

// IngestFeedPreprocessingKind represents the kind of preprocessing to do.
type IngestFeedPreprocessingKind string

// The kind of preprocessing to do.
const (
	IngestFeedPreprocessingKindSplitAwsRecords IngestFeedPreprocessingKind = "SplitAwsRecords" // Interpret the input as AWS JSON record format and emit each record as an event.
	IngestFeedPreprocessingKindSplitNewline    IngestFeedPreprocessingKind = "SplitNewline"    // Interpret the input as newline-delimited and emit each line as an event.
)

func ValidIngestFeedPreprocessingKind(s string) (IngestFeedPreprocessingKind, bool) {
	switch s {
	case "SplitAwsRecords":
		return IngestFeedPreprocessingKindSplitAwsRecords, true
	case "SplitNewline":
		return IngestFeedPreprocessingKindSplitNewline, true
	}
	return IngestFeedPreprocessingKind(""), false
}

type IngestFeeds__SortBy string

const (
	IngestFeeds__SortByCreatedTimeStamp IngestFeeds__SortBy = "CreatedTimeStamp"
	IngestFeeds__SortByName             IngestFeeds__SortBy = "Name"
)

func ValidIngestFeeds__SortBy(s string) (IngestFeeds__SortBy, bool) {
	switch s {
	case "CreatedTimeStamp":
		return IngestFeeds__SortByCreatedTimeStamp, true
	case "Name":
		return IngestFeeds__SortByName, true
	}
	return IngestFeeds__SortBy(""), false
}

type IngestFeeds__Type string

const (
	IngestFeeds__TypeAwsS3sqs IngestFeeds__Type = "AwsS3Sqs"
)

func ValidIngestFeeds__Type(s string) (IngestFeeds__Type, bool) {
	switch s {
	case "AwsS3Sqs":
		return IngestFeeds__TypeAwsS3sqs, true
	}
	return IngestFeeds__Type(""), false
}

// IngestListenerProtocol represents the network protocol a ingest listener uses.
type IngestListenerProtocol string

// The network protocol a ingest listener uses.
const (
	IngestListenerProtocolUDP         IngestListenerProtocol = "UDP"         // UDP Protocol.
	IngestListenerProtocolTCP         IngestListenerProtocol = "TCP"         // TCP Protocol.
	IngestListenerProtocolGelf_udp    IngestListenerProtocol = "GELF_UDP"    // Gelf over UDP Protocol.
	IngestListenerProtocolGelf_tcp    IngestListenerProtocol = "GELF_TCP"    // Gelf over TCP Protocol.
	IngestListenerProtocolNetflow_udp IngestListenerProtocol = "NETFLOW_UDP" // Netflow over UDP.
)

func ValidIngestListenerProtocol(s string) (IngestListenerProtocol, bool) {
	switch s {
	case "UDP":
		return IngestListenerProtocolUDP, true
	case "TCP":
		return IngestListenerProtocolTCP, true
	case "GELF_UDP":
		return IngestListenerProtocolGelf_udp, true
	case "GELF_TCP":
		return IngestListenerProtocolGelf_tcp, true
	case "NETFLOW_UDP":
		return IngestListenerProtocolNetflow_udp, true
	}
	return IngestListenerProtocol(""), false
}

type IocTableStatus string

const (
	IocTableStatusUnauthorized IocTableStatus = "Unauthorized"
	IocTableStatusUnavailable  IocTableStatus = "Unavailable"
	IocTableStatusOk           IocTableStatus = "Ok"
)

func ValidIocTableStatus(s string) (IocTableStatus, bool) {
	switch s {
	case "Unauthorized":
		return IocTableStatusUnauthorized, true
	case "Unavailable":
		return IocTableStatusUnavailable, true
	case "Ok":
		return IocTableStatusOk, true
	}
	return IocTableStatus(""), false
}

// KindEnum represents the kind of the external function.
type KindEnum string

// The kind of the external function.
const (
	KindEnumSource     KindEnum = "Source"
	KindEnumGeneral    KindEnum = "General"
	KindEnumEnrichment KindEnum = "Enrichment"
)

func ValidKindEnum(s string) (KindEnum, bool) {
	switch s {
	case "Source":
		return KindEnumSource, true
	case "General":
		return KindEnumGeneral, true
	case "Enrichment":
		return KindEnumEnrichment, true
	}
	return KindEnum(""), false
}

// LanguageVersionEnum represents the version of the Humio query language to use.
type LanguageVersionEnum string

// The version of the Humio query language to use.
const (
	LanguageVersionEnumLegacy      LanguageVersionEnum = "legacy"
	LanguageVersionEnumXdr1        LanguageVersionEnum = "xdr1"
	LanguageVersionEnumXdrdetects1 LanguageVersionEnum = "xdrdetects1"
	LanguageVersionEnumFilteralert LanguageVersionEnum = "filteralert"
	LanguageVersionEnumFederated1  LanguageVersionEnum = "federated1"
)

func ValidLanguageVersionEnum(s string) (LanguageVersionEnum, bool) {
	switch s {
	case "legacy":
		return LanguageVersionEnumLegacy, true
	case "xdr1":
		return LanguageVersionEnumXdr1, true
	case "xdrdetects1":
		return LanguageVersionEnumXdrdetects1, true
	case "filteralert":
		return LanguageVersionEnumFilteralert, true
	case "federated1":
		return LanguageVersionEnumFederated1, true
	}
	return LanguageVersionEnum(""), false
}

// LocalTargetType represents indicates whether the target of a local federated connection is a view or a repo.
type LocalTargetType string

// Indicates whether the target of a local federated connection is a view or a repo.
const (
	LocalTargetTypeView LocalTargetType = "View"
	LocalTargetTypeRepo LocalTargetType = "Repo"
)

func ValidLocalTargetType(s string) (LocalTargetType, bool) {
	switch s {
	case "View":
		return LocalTargetTypeView, true
	case "Repo":
		return LocalTargetTypeRepo, true
	}
	return LocalTargetType(""), false
}

type LogCollectorConfigurationAssignmentType string

const (
	LogCollectorConfigurationAssignmentTypeConfigurationFilter LogCollectorConfigurationAssignmentType = "ConfigurationFilter"
	LogCollectorConfigurationAssignmentTypeManual              LogCollectorConfigurationAssignmentType = "Manual"
	LogCollectorConfigurationAssignmentTypeTest                LogCollectorConfigurationAssignmentType = "Test"
)

func ValidLogCollectorConfigurationAssignmentType(s string) (LogCollectorConfigurationAssignmentType, bool) {
	switch s {
	case "ConfigurationFilter":
		return LogCollectorConfigurationAssignmentTypeConfigurationFilter, true
	case "Manual":
		return LogCollectorConfigurationAssignmentTypeManual, true
	case "Test":
		return LogCollectorConfigurationAssignmentTypeTest, true
	}
	return LogCollectorConfigurationAssignmentType(""), false
}

type MergeStrategy string

const (
	MergeStrategyTheirs MergeStrategy = "Theirs"
	MergeStrategyOurs   MergeStrategy = "Ours"
)

func ValidMergeStrategy(s string) (MergeStrategy, bool) {
	switch s {
	case "Theirs":
		return MergeStrategyTheirs, true
	case "Ours":
		return MergeStrategyOurs, true
	}
	return MergeStrategy(""), false
}

// NodeTaskEnum represents assignable node task.
type NodeTaskEnum string

// Assignable node task.
const (
	NodeTaskEnumStorage NodeTaskEnum = "storage"
	NodeTaskEnumDigest  NodeTaskEnum = "digest"
	NodeTaskEnumQuery   NodeTaskEnum = "query"
)

func ValidNodeTaskEnum(s string) (NodeTaskEnum, bool) {
	switch s {
	case "storage":
		return NodeTaskEnumStorage, true
	case "digest":
		return NodeTaskEnumDigest, true
	case "query":
		return NodeTaskEnumQuery, true
	}
	return NodeTaskEnum(""), false
}

type NotificationSeverity string

const (
	NotificationSeveritySuccess NotificationSeverity = "Success"
	NotificationSeverityInfo    NotificationSeverity = "Info"
	NotificationSeverityWarning NotificationSeverity = "Warning"
	NotificationSeverityError   NotificationSeverity = "Error"
)

func ValidNotificationSeverity(s string) (NotificationSeverity, bool) {
	switch s {
	case "Success":
		return NotificationSeveritySuccess, true
	case "Info":
		return NotificationSeverityInfo, true
	case "Warning":
		return NotificationSeverityWarning, true
	case "Error":
		return NotificationSeverityError, true
	}
	return NotificationSeverity(""), false
}

type NotificationTypes string

const (
	NotificationTypesBanner       NotificationTypes = "Banner"
	NotificationTypesAnnouncement NotificationTypes = "Announcement"
	NotificationTypesBell         NotificationTypes = "Bell"
)

func ValidNotificationTypes(s string) (NotificationTypes, bool) {
	switch s {
	case "Banner":
		return NotificationTypesBanner, true
	case "Announcement":
		return NotificationTypesAnnouncement, true
	case "Bell":
		return NotificationTypesBell, true
	}
	return NotificationTypes(""), false
}

type ObjectAction string

const (
	ObjectActionUnknown             ObjectAction = "Unknown"
	ObjectActionReadOnlyAndHidden   ObjectAction = "ReadOnlyAndHidden"
	ObjectActionReadWriteAndVisible ObjectAction = "ReadWriteAndVisible"
)

func ValidObjectAction(s string) (ObjectAction, bool) {
	switch s {
	case "Unknown":
		return ObjectActionUnknown, true
	case "ReadOnlyAndHidden":
		return ObjectActionReadOnlyAndHidden, true
	case "ReadWriteAndVisible":
		return ObjectActionReadWriteAndVisible, true
	}
	return ObjectAction(""), false
}

type OrderBy string

const (
	OrderByDesc OrderBy = "DESC"
	OrderByAsc  OrderBy = "ASC"
)

func ValidOrderBy(s string) (OrderBy, bool) {
	switch s {
	case "DESC":
		return OrderByDesc, true
	case "ASC":
		return OrderByAsc, true
	}
	return OrderBy(""), false
}

// OrderByDirection represents orderByDirection.
type OrderByDirection string

// OrderByDirection.
const (
	OrderByDirectionDesc OrderByDirection = "DESC"
	OrderByDirectionAsc  OrderByDirection = "ASC"
)

func ValidOrderByDirection(s string) (OrderByDirection, bool) {
	switch s {
	case "DESC":
		return OrderByDirectionDesc, true
	case "ASC":
		return OrderByDirectionAsc, true
	}
	return OrderByDirection(""), false
}

// OrderByUserField represents orderByUserField.
type OrderByUserField string

// OrderByUserField.
const (
	OrderByUserFieldFullname    OrderByUserField = "FULLNAME"
	OrderByUserFieldUsername    OrderByUserField = "USERNAME"
	OrderByUserFieldDisplayname OrderByUserField = "DISPLAYNAME"
)

func ValidOrderByUserField(s string) (OrderByUserField, bool) {
	switch s {
	case "FULLNAME":
		return OrderByUserFieldFullname, true
	case "USERNAME":
		return OrderByUserFieldUsername, true
	case "DISPLAYNAME":
		return OrderByUserFieldDisplayname, true
	}
	return OrderByUserField(""), false
}

// OrganizationAction represents actions a user may perform on an organization.
type OrganizationAction string

// Actions a user may perform on an organization.
const (
	OrganizationActionAdministerPermissions             OrganizationAction = "AdministerPermissions"
	OrganizationActionCreateRepository                  OrganizationAction = "CreateRepository"
	OrganizationActionCreateView                        OrganizationAction = "CreateView"
	OrganizationActionChangeReadOnlyDashboardFilter     OrganizationAction = "ChangeReadOnlyDashboardFilter"
	OrganizationActionCreateUser                        OrganizationAction = "CreateUser"
	OrganizationActionConfigureIdp                      OrganizationAction = "ConfigureIdp"
	OrganizationActionChangeSessions                    OrganizationAction = "ChangeSessions"
	OrganizationActionChangeOrganizationSettings        OrganizationAction = "ChangeOrganizationSettings"
	OrganizationActionCreateTrialRepository             OrganizationAction = "CreateTrialRepository"
	OrganizationActionUseCustomEmailTemplate            OrganizationAction = "UseCustomEmailTemplate"
	OrganizationActionViewLoginBridge                   OrganizationAction = "ViewLoginBridge"
	OrganizationActionViewUsage                         OrganizationAction = "ViewUsage"
	OrganizationActionConfigureIPFilters                OrganizationAction = "ConfigureIPFilters"
	OrganizationActionDeleteRepositoryOrView            OrganizationAction = "DeleteRepositoryOrView"
	OrganizationActionChangeFleetManagement             OrganizationAction = "ChangeFleetManagement"
	OrganizationActionViewFleetManagement               OrganizationAction = "ViewFleetManagement"
	OrganizationActionUseRemoteConfig                   OrganizationAction = "UseRemoteConfig"
	OrganizationActionChangeTriggersToRunAsOtherUsers   OrganizationAction = "ChangeTriggersToRunAsOtherUsers"
	OrganizationActionChangeEventForwarders             OrganizationAction = "ChangeEventForwarders"
	OrganizationActionViewRunningQueries                OrganizationAction = "ViewRunningQueries"
	OrganizationActionBlockQueries                      OrganizationAction = "BlockQueries"
	OrganizationActionAdministerTokens                  OrganizationAction = "AdministerTokens"
	OrganizationActionManageUsers                       OrganizationAction = "ManageUsers"
	OrganizationActionViewIPFilters                     OrganizationAction = "ViewIpFilters"
	OrganizationActionDownloadMacOsInstaller            OrganizationAction = "DownloadMacOsInstaller"
	OrganizationActionSecurityPoliciesEnabled           OrganizationAction = "SecurityPoliciesEnabled"
	OrganizationActionChangeSecurityPolicies            OrganizationAction = "ChangeSecurityPolicies"
	OrganizationActionFleetManagementConfigTestEnabled  OrganizationAction = "FleetManagementConfigTestEnabled"
	OrganizationActionQueryAssistant                    OrganizationAction = "QueryAssistant"
	OrganizationActionOrganizationQueryOwnershipEnabled OrganizationAction = "OrganizationQueryOwnershipEnabled"
	OrganizationActionUsePersonalToken                  OrganizationAction = "UsePersonalToken"
	OrganizationActionChangeExternalFunctions           OrganizationAction = "ChangeExternalFunctions"
	OrganizationActionAddFederatedView                  OrganizationAction = "AddFederatedView"
	OrganizationActionViewFalconDataConnectorURL        OrganizationAction = "ViewFalconDataConnectorUrl"
	OrganizationActionManageSchemas                     OrganizationAction = "ManageSchemas"
)

func ValidOrganizationAction(s string) (OrganizationAction, bool) {
	switch s {
	case "AdministerPermissions":
		return OrganizationActionAdministerPermissions, true
	case "CreateRepository":
		return OrganizationActionCreateRepository, true
	case "CreateView":
		return OrganizationActionCreateView, true
	case "ChangeReadOnlyDashboardFilter":
		return OrganizationActionChangeReadOnlyDashboardFilter, true
	case "CreateUser":
		return OrganizationActionCreateUser, true
	case "ConfigureIdp":
		return OrganizationActionConfigureIdp, true
	case "ChangeSessions":
		return OrganizationActionChangeSessions, true
	case "ChangeOrganizationSettings":
		return OrganizationActionChangeOrganizationSettings, true
	case "CreateTrialRepository":
		return OrganizationActionCreateTrialRepository, true
	case "UseCustomEmailTemplate":
		return OrganizationActionUseCustomEmailTemplate, true
	case "ViewLoginBridge":
		return OrganizationActionViewLoginBridge, true
	case "ViewUsage":
		return OrganizationActionViewUsage, true
	case "ConfigureIPFilters":
		return OrganizationActionConfigureIPFilters, true
	case "DeleteRepositoryOrView":
		return OrganizationActionDeleteRepositoryOrView, true
	case "ChangeFleetManagement":
		return OrganizationActionChangeFleetManagement, true
	case "ViewFleetManagement":
		return OrganizationActionViewFleetManagement, true
	case "UseRemoteConfig":
		return OrganizationActionUseRemoteConfig, true
	case "ChangeTriggersToRunAsOtherUsers":
		return OrganizationActionChangeTriggersToRunAsOtherUsers, true
	case "ChangeEventForwarders":
		return OrganizationActionChangeEventForwarders, true
	case "ViewRunningQueries":
		return OrganizationActionViewRunningQueries, true
	case "BlockQueries":
		return OrganizationActionBlockQueries, true
	case "AdministerTokens":
		return OrganizationActionAdministerTokens, true
	case "ManageUsers":
		return OrganizationActionManageUsers, true
	case "ViewIpFilters":
		return OrganizationActionViewIPFilters, true
	case "DownloadMacOsInstaller":
		return OrganizationActionDownloadMacOsInstaller, true
	case "SecurityPoliciesEnabled":
		return OrganizationActionSecurityPoliciesEnabled, true
	case "ChangeSecurityPolicies":
		return OrganizationActionChangeSecurityPolicies, true
	case "FleetManagementConfigTestEnabled":
		return OrganizationActionFleetManagementConfigTestEnabled, true
	case "QueryAssistant":
		return OrganizationActionQueryAssistant, true
	case "OrganizationQueryOwnershipEnabled":
		return OrganizationActionOrganizationQueryOwnershipEnabled, true
	case "UsePersonalToken":
		return OrganizationActionUsePersonalToken, true
	case "ChangeExternalFunctions":
		return OrganizationActionChangeExternalFunctions, true
	case "AddFederatedView":
		return OrganizationActionAddFederatedView, true
	case "ViewFalconDataConnectorUrl":
		return OrganizationActionViewFalconDataConnectorURL, true
	case "ManageSchemas":
		return OrganizationActionManageSchemas, true
	}
	return OrganizationAction(""), false
}

type OrganizationMode string

const (
	OrganizationModeSingle  OrganizationMode = "Single"
	OrganizationModeMulti   OrganizationMode = "Multi"
	OrganizationModeMultiV2 OrganizationMode = "MultiV2"
)

func ValidOrganizationMode(s string) (OrganizationMode, bool) {
	switch s {
	case "Single":
		return OrganizationModeSingle, true
	case "Multi":
		return OrganizationModeMulti, true
	case "MultiV2":
		return OrganizationModeMultiV2, true
	}
	return OrganizationMode(""), false
}

// OrganizationPermission represents organization permissions..
type OrganizationPermission string

// Organization permissions..
const (
	OrganizationPermissionExportOrganization                     OrganizationPermission = "ExportOrganization"
	OrganizationPermissionChangeOrganizationPermissions          OrganizationPermission = "ChangeOrganizationPermissions"
	OrganizationPermissionChangeIdentityProviders                OrganizationPermission = "ChangeIdentityProviders"
	OrganizationPermissionCreateRepository                       OrganizationPermission = "CreateRepository"
	OrganizationPermissionManageUsers                            OrganizationPermission = "ManageUsers"
	OrganizationPermissionViewUsage                              OrganizationPermission = "ViewUsage"
	OrganizationPermissionChangeOrganizationSettings             OrganizationPermission = "ChangeOrganizationSettings"
	OrganizationPermissionChangeIPFilters                        OrganizationPermission = "ChangeIPFilters"
	OrganizationPermissionChangeSessions                         OrganizationPermission = "ChangeSessions"
	OrganizationPermissionChangeAllViewOrRepositoryPermissions   OrganizationPermission = "ChangeAllViewOrRepositoryPermissions"
	OrganizationPermissionIngestAcrossAllReposWithinOrganization OrganizationPermission = "IngestAcrossAllReposWithinOrganization"
	OrganizationPermissionDeleteAllRepositories                  OrganizationPermission = "DeleteAllRepositories"
	OrganizationPermissionDeleteAllViews                         OrganizationPermission = "DeleteAllViews"
	OrganizationPermissionViewAllInternalNotifications           OrganizationPermission = "ViewAllInternalNotifications"
	OrganizationPermissionChangeFleetManagement                  OrganizationPermission = "ChangeFleetManagement"
	OrganizationPermissionViewFleetManagement                    OrganizationPermission = "ViewFleetManagement"
	OrganizationPermissionChangeTriggersToRunAsOtherUsers        OrganizationPermission = "ChangeTriggersToRunAsOtherUsers"
	OrganizationPermissionMonitorQueries                         OrganizationPermission = "MonitorQueries"
	OrganizationPermissionBlockQueries                           OrganizationPermission = "BlockQueries"
	OrganizationPermissionChangeSecurityPolicies                 OrganizationPermission = "ChangeSecurityPolicies"
	OrganizationPermissionChangeExternalFunctions                OrganizationPermission = "ChangeExternalFunctions"
)

func ValidOrganizationPermission(s string) (OrganizationPermission, bool) {
	switch s {
	case "ExportOrganization":
		return OrganizationPermissionExportOrganization, true
	case "ChangeOrganizationPermissions":
		return OrganizationPermissionChangeOrganizationPermissions, true
	case "ChangeIdentityProviders":
		return OrganizationPermissionChangeIdentityProviders, true
	case "CreateRepository":
		return OrganizationPermissionCreateRepository, true
	case "ManageUsers":
		return OrganizationPermissionManageUsers, true
	case "ViewUsage":
		return OrganizationPermissionViewUsage, true
	case "ChangeOrganizationSettings":
		return OrganizationPermissionChangeOrganizationSettings, true
	case "ChangeIPFilters":
		return OrganizationPermissionChangeIPFilters, true
	case "ChangeSessions":
		return OrganizationPermissionChangeSessions, true
	case "ChangeAllViewOrRepositoryPermissions":
		return OrganizationPermissionChangeAllViewOrRepositoryPermissions, true
	case "IngestAcrossAllReposWithinOrganization":
		return OrganizationPermissionIngestAcrossAllReposWithinOrganization, true
	case "DeleteAllRepositories":
		return OrganizationPermissionDeleteAllRepositories, true
	case "DeleteAllViews":
		return OrganizationPermissionDeleteAllViews, true
	case "ViewAllInternalNotifications":
		return OrganizationPermissionViewAllInternalNotifications, true
	case "ChangeFleetManagement":
		return OrganizationPermissionChangeFleetManagement, true
	case "ViewFleetManagement":
		return OrganizationPermissionViewFleetManagement, true
	case "ChangeTriggersToRunAsOtherUsers":
		return OrganizationPermissionChangeTriggersToRunAsOtherUsers, true
	case "MonitorQueries":
		return OrganizationPermissionMonitorQueries, true
	case "BlockQueries":
		return OrganizationPermissionBlockQueries, true
	case "ChangeSecurityPolicies":
		return OrganizationPermissionChangeSecurityPolicies, true
	case "ChangeExternalFunctions":
		return OrganizationPermissionChangeExternalFunctions, true
	}
	return OrganizationPermission(""), false
}

type OrganizationsLinks__SortBy string

const (
	OrganizationsLinks__SortByCid   OrganizationsLinks__SortBy = "Cid"
	OrganizationsLinks__SortByOrgID OrganizationsLinks__SortBy = "OrgId"
	OrganizationsLinks__SortByName  OrganizationsLinks__SortBy = "Name"
)

func ValidOrganizationsLinks__SortBy(s string) (OrganizationsLinks__SortBy, bool) {
	switch s {
	case "Cid":
		return OrganizationsLinks__SortByCid, true
	case "OrgId":
		return OrganizationsLinks__SortByOrgID, true
	case "Name":
		return OrganizationsLinks__SortByName, true
	}
	return OrganizationsLinks__SortBy(""), false
}

type Organizations__ContractVersion string

const (
	Organizations__ContractVersionUnknown  Organizations__ContractVersion = "Unknown"
	Organizations__ContractVersionVersion1 Organizations__ContractVersion = "Version1"
	Organizations__ContractVersionVersion2 Organizations__ContractVersion = "Version2"
)

func ValidOrganizations__ContractVersion(s string) (Organizations__ContractVersion, bool) {
	switch s {
	case "Unknown":
		return Organizations__ContractVersionUnknown, true
	case "Version1":
		return Organizations__ContractVersionVersion1, true
	case "Version2":
		return Organizations__ContractVersionVersion2, true
	}
	return Organizations__ContractVersion(""), false
}

type Organizations__ContractualType string

const (
	Organizations__ContractualTypeLimited   Organizations__ContractualType = "Limited"
	Organizations__ContractualTypeUnlimited Organizations__ContractualType = "Unlimited"
	Organizations__ContractualTypeIgnored   Organizations__ContractualType = "Ignored"
)

func ValidOrganizations__ContractualType(s string) (Organizations__ContractualType, bool) {
	switch s {
	case "Limited":
		return Organizations__ContractualTypeLimited, true
	case "Unlimited":
		return Organizations__ContractualTypeUnlimited, true
	case "Ignored":
		return Organizations__ContractualTypeIgnored, true
	}
	return Organizations__ContractualType(""), false
}

type Organizations__ForeignType string

const (
	Organizations__ForeignTypeUnknown Organizations__ForeignType = "Unknown"
	Organizations__ForeignTypeRole    Organizations__ForeignType = "Role"
	Organizations__ForeignTypeGroup   Organizations__ForeignType = "Group"
	Organizations__ForeignTypeIdp     Organizations__ForeignType = "Idp"
	Organizations__ForeignTypeView    Organizations__ForeignType = "View"
	Organizations__ForeignTypeUser    Organizations__ForeignType = "User"
)

func ValidOrganizations__ForeignType(s string) (Organizations__ForeignType, bool) {
	switch s {
	case "Unknown":
		return Organizations__ForeignTypeUnknown, true
	case "Role":
		return Organizations__ForeignTypeRole, true
	case "Group":
		return Organizations__ForeignTypeGroup, true
	case "Idp":
		return Organizations__ForeignTypeIdp, true
	case "View":
		return Organizations__ForeignTypeView, true
	case "User":
		return Organizations__ForeignTypeUser, true
	}
	return Organizations__ForeignType(""), false
}

type Organizations__MeasurementType string

const (
	Organizations__MeasurementTypeSegmentWriteSize    Organizations__MeasurementType = "SegmentWriteSize"
	Organizations__MeasurementTypeProcessedEventsSize Organizations__MeasurementType = "ProcessedEventsSize"
)

func ValidOrganizations__MeasurementType(s string) (Organizations__MeasurementType, bool) {
	switch s {
	case "SegmentWriteSize":
		return Organizations__MeasurementTypeSegmentWriteSize, true
	case "ProcessedEventsSize":
		return Organizations__MeasurementTypeProcessedEventsSize, true
	}
	return Organizations__MeasurementType(""), false
}

type Organizations__Operation string

const (
	Organizations__OperationRemove Organizations__Operation = "Remove"
	Organizations__OperationAdd    Organizations__Operation = "Add"
)

func ValidOrganizations__Operation(s string) (Organizations__Operation, bool) {
	switch s {
	case "Remove":
		return Organizations__OperationRemove, true
	case "Add":
		return Organizations__OperationAdd, true
	}
	return Organizations__Operation(""), false
}

type Organizations__SearchEntryType string

const (
	Organizations__SearchEntryTypeOrganization Organizations__SearchEntryType = "Organization"
	Organizations__SearchEntryTypeRepository   Organizations__SearchEntryType = "Repository"
	Organizations__SearchEntryTypeView         Organizations__SearchEntryType = "View"
	Organizations__SearchEntryTypeUser         Organizations__SearchEntryType = "User"
)

func ValidOrganizations__SearchEntryType(s string) (Organizations__SearchEntryType, bool) {
	switch s {
	case "Organization":
		return Organizations__SearchEntryTypeOrganization, true
	case "Repository":
		return Organizations__SearchEntryTypeRepository, true
	case "View":
		return Organizations__SearchEntryTypeView, true
	case "User":
		return Organizations__SearchEntryTypeUser, true
	}
	return Organizations__SearchEntryType(""), false
}

type Organizations__SortBy string

const (
	Organizations__SortByUserCount    Organizations__SortBy = "UserCount"
	Organizations__SortByName         Organizations__SortBy = "Name"
	Organizations__SortByVolume       Organizations__SortBy = "Volume"
	Organizations__SortByViewCount    Organizations__SortBy = "ViewCount"
	Organizations__SortBySubscription Organizations__SortBy = "Subscription"
	Organizations__SortByCreatedAt    Organizations__SortBy = "CreatedAt"
)

func ValidOrganizations__SortBy(s string) (Organizations__SortBy, bool) {
	switch s {
	case "UserCount":
		return Organizations__SortByUserCount, true
	case "Name":
		return Organizations__SortByName, true
	case "Volume":
		return Organizations__SortByVolume, true
	case "ViewCount":
		return Organizations__SortByViewCount, true
	case "Subscription":
		return Organizations__SortBySubscription, true
	case "CreatedAt":
		return Organizations__SortByCreatedAt, true
	}
	return Organizations__SortBy(""), false
}

type Organizations__Subscription string

const (
	Organizations__SubscriptionPaying               Organizations__Subscription = "Paying"
	Organizations__SubscriptionTrial                Organizations__Subscription = "Trial"
	Organizations__SubscriptionPreTrial             Organizations__Subscription = "PreTrial"
	Organizations__SubscriptionPostTrial            Organizations__Subscription = "PostTrial"
	Organizations__SubscriptionUnlimitedPoC         Organizations__Subscription = "UnlimitedPoC"
	Organizations__SubscriptionClusterOwner         Organizations__Subscription = "ClusterOwner"
	Organizations__SubscriptionComplementary        Organizations__Subscription = "Complementary"
	Organizations__SubscriptionOnPremMonitor        Organizations__Subscription = "OnPremMonitor"
	Organizations__SubscriptionMissingTosAcceptance Organizations__Subscription = "MissingTOSAcceptance"
	Organizations__SubscriptionCommunityLocked      Organizations__Subscription = "CommunityLocked"
	Organizations__SubscriptionCommunityUnlocked    Organizations__Subscription = "CommunityUnlocked"
	Organizations__SubscriptionPartner              Organizations__Subscription = "Partner"
	Organizations__SubscriptionInternal             Organizations__Subscription = "Internal"
	Organizations__SubscriptionChurned              Organizations__Subscription = "Churned"
	Organizations__SubscriptionUnknown              Organizations__Subscription = "Unknown"
)

func ValidOrganizations__Subscription(s string) (Organizations__Subscription, bool) {
	switch s {
	case "Paying":
		return Organizations__SubscriptionPaying, true
	case "Trial":
		return Organizations__SubscriptionTrial, true
	case "PreTrial":
		return Organizations__SubscriptionPreTrial, true
	case "PostTrial":
		return Organizations__SubscriptionPostTrial, true
	case "UnlimitedPoC":
		return Organizations__SubscriptionUnlimitedPoC, true
	case "ClusterOwner":
		return Organizations__SubscriptionClusterOwner, true
	case "Complementary":
		return Organizations__SubscriptionComplementary, true
	case "OnPremMonitor":
		return Organizations__SubscriptionOnPremMonitor, true
	case "MissingTOSAcceptance":
		return Organizations__SubscriptionMissingTosAcceptance, true
	case "CommunityLocked":
		return Organizations__SubscriptionCommunityLocked, true
	case "CommunityUnlocked":
		return Organizations__SubscriptionCommunityUnlocked, true
	case "Partner":
		return Organizations__SubscriptionPartner, true
	case "Internal":
		return Organizations__SubscriptionInternal, true
	case "Churned":
		return Organizations__SubscriptionChurned, true
	case "Unknown":
		return Organizations__SubscriptionUnknown, true
	}
	return Organizations__Subscription(""), false
}

type Organizations__UseCases string

const (
	Organizations__UseCasesUnknown                Organizations__UseCases = "Unknown"
	Organizations__UseCasesIoT                    Organizations__UseCases = "IoT"
	Organizations__UseCasesSecurity               Organizations__UseCases = "Security"
	Organizations__UseCasesOperations             Organizations__UseCases = "Operations"
	Organizations__UseCasesApplicationDevelopment Organizations__UseCases = "ApplicationDevelopment"
)

func ValidOrganizations__UseCases(s string) (Organizations__UseCases, bool) {
	switch s {
	case "Unknown":
		return Organizations__UseCasesUnknown, true
	case "IoT":
		return Organizations__UseCasesIoT, true
	case "Security":
		return Organizations__UseCasesSecurity, true
	case "Operations":
		return Organizations__UseCasesOperations, true
	case "ApplicationDevelopment":
		return Organizations__UseCasesApplicationDevelopment, true
	}
	return Organizations__UseCases(""), false
}

type PackageInstallationSourceType string

const (
	PackageInstallationSourceTypeHumioHub PackageInstallationSourceType = "HumioHub"
	PackageInstallationSourceTypeZipFile  PackageInstallationSourceType = "ZipFile"
)

func ValidPackageInstallationSourceType(s string) (PackageInstallationSourceType, bool) {
	switch s {
	case "HumioHub":
		return PackageInstallationSourceTypeHumioHub, true
	case "ZipFile":
		return PackageInstallationSourceTypeZipFile, true
	}
	return PackageInstallationSourceType(""), false
}

type PackageType string

const (
	PackageTypeApplication PackageType = "application"
	PackageTypeLibrary     PackageType = "library"
)

func ValidPackageType(s string) (PackageType, bool) {
	switch s {
	case "application":
		return PackageTypeApplication, true
	case "library":
		return PackageTypeLibrary, true
	}
	return PackageType(""), false
}

// ParameterTypeEnum represents the parameter types.
type ParameterTypeEnum string

// The parameter types.
const (
	ParameterTypeEnumField       ParameterTypeEnum = "Field"
	ParameterTypeEnumString      ParameterTypeEnum = "String"
	ParameterTypeEnumLong        ParameterTypeEnum = "Long"
	ParameterTypeEnumDouble      ParameterTypeEnum = "Double"
	ParameterTypeEnumArrayField  ParameterTypeEnum = "ArrayField"
	ParameterTypeEnumArrayString ParameterTypeEnum = "ArrayString"
	ParameterTypeEnumArrayLong   ParameterTypeEnum = "ArrayLong"
	ParameterTypeEnumArrayDouble ParameterTypeEnum = "ArrayDouble"
)

func ValidParameterTypeEnum(s string) (ParameterTypeEnum, bool) {
	switch s {
	case "Field":
		return ParameterTypeEnumField, true
	case "String":
		return ParameterTypeEnumString, true
	case "Long":
		return ParameterTypeEnumLong, true
	case "Double":
		return ParameterTypeEnumDouble, true
	case "ArrayField":
		return ParameterTypeEnumArrayField, true
	case "ArrayString":
		return ParameterTypeEnumArrayString, true
	case "ArrayLong":
		return ParameterTypeEnumArrayLong, true
	case "ArrayDouble":
		return ParameterTypeEnumArrayDouble, true
	}
	return ParameterTypeEnum(""), false
}

// ParseEventStatus represents staus of parsing a test event.
type ParseEventStatus string

// Staus of parsing a test event.
const (
	ParseEventStatusSuccess        ParseEventStatus = "success"        // The event was parsed successfully.
	ParseEventStatusParseError     ParseEventStatus = "parseError"     // There was an error parsing the event.
	ParseEventStatusTimestampError ParseEventStatus = "timestampError" // There was an error extracting a timestamp from the event.
)

func ValidParseEventStatus(s string) (ParseEventStatus, bool) {
	switch s {
	case "success":
		return ParseEventStatusSuccess, true
	case "parseError":
		return ParseEventStatusParseError, true
	case "timestampError":
		return ParseEventStatusTimestampError, true
	}
	return ParseEventStatus(""), false
}

// PendingUserState represents the current organization state for the user.
type PendingUserState string

// The current organization state for the user.
const (
	PendingUserStateNoOrganization                         PendingUserState = "NoOrganization"
	PendingUserStateSingleUserOrganization                 PendingUserState = "SingleUserOrganization"
	PendingUserStateMultiUserOrganizationOnlyOwnerConflict PendingUserState = "MultiUserOrganizationOnlyOwnerConflict"
	PendingUserStateMultiUserOrganizationNoConflict        PendingUserState = "MultiUserOrganizationNoConflict"
	PendingUserStateUserExistsNoOrganization               PendingUserState = "UserExistsNoOrganization"
	PendingUserStateUserExistsDeletedOrganization          PendingUserState = "UserExistsDeletedOrganization"
)

func ValidPendingUserState(s string) (PendingUserState, bool) {
	switch s {
	case "NoOrganization":
		return PendingUserStateNoOrganization, true
	case "SingleUserOrganization":
		return PendingUserStateSingleUserOrganization, true
	case "MultiUserOrganizationOnlyOwnerConflict":
		return PendingUserStateMultiUserOrganizationOnlyOwnerConflict, true
	case "MultiUserOrganizationNoConflict":
		return PendingUserStateMultiUserOrganizationNoConflict, true
	case "UserExistsNoOrganization":
		return PendingUserStateUserExistsNoOrganization, true
	case "UserExistsDeletedOrganization":
		return PendingUserStateUserExistsDeletedOrganization, true
	}
	return PendingUserState(""), false
}

// Permission represents permissions on a view.
type Permission string

// Permissions on a view.
const (
	PermissionChangeUserAccess                  Permission = "ChangeUserAccess"
	PermissionChangeTriggersAndActions          Permission = "ChangeTriggersAndActions" // Permission to administer alerts, scheduled searches and actions.
	PermissionChangeDashboards                  Permission = "ChangeDashboards"
	PermissionChangeDashboardReadonlyToken      Permission = "ChangeDashboardReadonlyToken"
	PermissionChangeFiles                       Permission = "ChangeFiles"
	PermissionChangeInteractions                Permission = "ChangeInteractions"
	PermissionChangeParsers                     Permission = "ChangeParsers"
	PermissionChangeSavedQueries                Permission = "ChangeSavedQueries"
	PermissionConnectView                       Permission = "ConnectView"
	PermissionChangeDataDeletionPermissions     Permission = "ChangeDataDeletionPermissions"
	PermissionChangeRetention                   Permission = "ChangeRetention"
	PermissionChangeDefaultSearchSettings       Permission = "ChangeDefaultSearchSettings"
	PermissionChangeS3archivingSettings         Permission = "ChangeS3ArchivingSettings"
	PermissionDeleteDataSources                 Permission = "DeleteDataSources"
	PermissionDeleteRepositoryOrView            Permission = "DeleteRepositoryOrView"
	PermissionDeleteEvents                      Permission = "DeleteEvents"
	PermissionReadAccess                        Permission = "ReadAccess"
	PermissionChangeIngestTokens                Permission = "ChangeIngestTokens"
	PermissionChangePackages                    Permission = "ChangePackages"
	PermissionChangeViewOrRepositoryDescription Permission = "ChangeViewOrRepositoryDescription"
	PermissionChangeConnections                 Permission = "ChangeConnections"
	PermissionEventForwarding                   Permission = "EventForwarding" // Permission to administer event forwarding rules.
	PermissionQueryDashboard                    Permission = "QueryDashboard"
	PermissionChangeViewOrRepositoryPermissions Permission = "ChangeViewOrRepositoryPermissions"
	PermissionChangeFdrFeeds                    Permission = "ChangeFdrFeeds"
	PermissionOrganizationOwnedQueries          Permission = "OrganizationOwnedQueries"
	PermissionReadExternalFunctions             Permission = "ReadExternalFunctions"
	PermissionChangeIngestFeeds                 Permission = "ChangeIngestFeeds"
	PermissionChangeScheduledReports            Permission = "ChangeScheduledReports"
)

func ValidPermission(s string) (Permission, bool) {
	switch s {
	case "ChangeUserAccess":
		return PermissionChangeUserAccess, true
	case "ChangeTriggersAndActions":
		return PermissionChangeTriggersAndActions, true
	case "ChangeDashboards":
		return PermissionChangeDashboards, true
	case "ChangeDashboardReadonlyToken":
		return PermissionChangeDashboardReadonlyToken, true
	case "ChangeFiles":
		return PermissionChangeFiles, true
	case "ChangeInteractions":
		return PermissionChangeInteractions, true
	case "ChangeParsers":
		return PermissionChangeParsers, true
	case "ChangeSavedQueries":
		return PermissionChangeSavedQueries, true
	case "ConnectView":
		return PermissionConnectView, true
	case "ChangeDataDeletionPermissions":
		return PermissionChangeDataDeletionPermissions, true
	case "ChangeRetention":
		return PermissionChangeRetention, true
	case "ChangeDefaultSearchSettings":
		return PermissionChangeDefaultSearchSettings, true
	case "ChangeS3ArchivingSettings":
		return PermissionChangeS3archivingSettings, true
	case "DeleteDataSources":
		return PermissionDeleteDataSources, true
	case "DeleteRepositoryOrView":
		return PermissionDeleteRepositoryOrView, true
	case "DeleteEvents":
		return PermissionDeleteEvents, true
	case "ReadAccess":
		return PermissionReadAccess, true
	case "ChangeIngestTokens":
		return PermissionChangeIngestTokens, true
	case "ChangePackages":
		return PermissionChangePackages, true
	case "ChangeViewOrRepositoryDescription":
		return PermissionChangeViewOrRepositoryDescription, true
	case "ChangeConnections":
		return PermissionChangeConnections, true
	case "EventForwarding":
		return PermissionEventForwarding, true
	case "QueryDashboard":
		return PermissionQueryDashboard, true
	case "ChangeViewOrRepositoryPermissions":
		return PermissionChangeViewOrRepositoryPermissions, true
	case "ChangeFdrFeeds":
		return PermissionChangeFdrFeeds, true
	case "OrganizationOwnedQueries":
		return PermissionOrganizationOwnedQueries, true
	case "ReadExternalFunctions":
		return PermissionReadExternalFunctions, true
	case "ChangeIngestFeeds":
		return PermissionChangeIngestFeeds, true
	case "ChangeScheduledReports":
		return PermissionChangeScheduledReports, true
	}
	return Permission(""), false
}

// PermissionType represents the type of permission.
type PermissionType string

// The type of permission.
const (
	PermissionTypeViewPermission         PermissionType = "ViewPermission"
	PermissionTypeOrganizationPermission PermissionType = "OrganizationPermission"
	PermissionTypeSystemPermission       PermissionType = "SystemPermission"
)

func ValidPermissionType(s string) (PermissionType, bool) {
	switch s {
	case "ViewPermission":
		return PermissionTypeViewPermission, true
	case "OrganizationPermission":
		return PermissionTypeOrganizationPermission, true
	case "SystemPermission":
		return PermissionTypeSystemPermission, true
	}
	return PermissionType(""), false
}

type Purposes string

const (
	PurposesMsp    Purposes = "MSP"
	PurposesItOps  Purposes = "ITOps"
	PurposesIot    Purposes = "IOT"
	PurposesSecOps Purposes = "SecOps"
	PurposesDevOps Purposes = "DevOps"
)

func ValidPurposes(s string) (Purposes, bool) {
	switch s {
	case "MSP":
		return PurposesMsp, true
	case "ITOps":
		return PurposesItOps, true
	case "IOT":
		return PurposesIot, true
	case "SecOps":
		return PurposesSecOps, true
	case "DevOps":
		return PurposesDevOps, true
	}
	return Purposes(""), false
}

type QueryAssistantDiagnosticSeverity string

const (
	QueryAssistantDiagnosticSeverityHint        QueryAssistantDiagnosticSeverity = "Hint"
	QueryAssistantDiagnosticSeverityInformation QueryAssistantDiagnosticSeverity = "Information"
	QueryAssistantDiagnosticSeverityWarning     QueryAssistantDiagnosticSeverity = "Warning"
	QueryAssistantDiagnosticSeverityError       QueryAssistantDiagnosticSeverity = "Error"
)

func ValidQueryAssistantDiagnosticSeverity(s string) (QueryAssistantDiagnosticSeverity, bool) {
	switch s {
	case "Hint":
		return QueryAssistantDiagnosticSeverityHint, true
	case "Information":
		return QueryAssistantDiagnosticSeverityInformation, true
	case "Warning":
		return QueryAssistantDiagnosticSeverityWarning, true
	case "Error":
		return QueryAssistantDiagnosticSeverityError, true
	}
	return QueryAssistantDiagnosticSeverity(""), false
}

// QueryOwnershipType represents the type of query ownership.
type QueryOwnershipType string

// The type of query ownership.
const (
	QueryOwnershipTypeUser         QueryOwnershipType = "User"         // Queries run on behalf of user.
	QueryOwnershipTypeOrganization QueryOwnershipType = "Organization" // Queries run on behalf of the organization.
)

func ValidQueryOwnershipType(s string) (QueryOwnershipType, bool) {
	switch s {
	case "User":
		return QueryOwnershipTypeUser, true
	case "Organization":
		return QueryOwnershipTypeOrganization, true
	}
	return QueryOwnershipType(""), false
}

// QueryOwnership_SelectionTargetType represents the target type to select.
type QueryOwnership_SelectionTargetType string

// The target type to select.
const (
	QueryOwnership_SelectionTargetTypePersistentQuery QueryOwnership_SelectionTargetType = "PersistentQuery" // A single trigger or shared dashboard.
	QueryOwnership_SelectionTargetTypeView            QueryOwnership_SelectionTargetType = "View"            // All triggers and shared dashboard connected to this view.
	QueryOwnership_SelectionTargetTypeOrganization    QueryOwnership_SelectionTargetType = "Organization"    // All triggers and shared dashboards within the organization.
)

func ValidQueryOwnership_SelectionTargetType(s string) (QueryOwnership_SelectionTargetType, bool) {
	switch s {
	case "PersistentQuery":
		return QueryOwnership_SelectionTargetTypePersistentQuery, true
	case "View":
		return QueryOwnership_SelectionTargetTypeView, true
	case "Organization":
		return QueryOwnership_SelectionTargetTypeOrganization, true
	}
	return QueryOwnership_SelectionTargetType(""), false
}

type QueryQuotaInterval string

const (
	QueryQuotaIntervalPerDay        QueryQuotaInterval = "PerDay"
	QueryQuotaIntervalPerHour       QueryQuotaInterval = "PerHour"
	QueryQuotaIntervalPerTenMinutes QueryQuotaInterval = "PerTenMinutes"
	QueryQuotaIntervalPerMinute     QueryQuotaInterval = "PerMinute"
)

func ValidQueryQuotaInterval(s string) (QueryQuotaInterval, bool) {
	switch s {
	case "PerDay":
		return QueryQuotaIntervalPerDay, true
	case "PerHour":
		return QueryQuotaIntervalPerHour, true
	case "PerTenMinutes":
		return QueryQuotaIntervalPerTenMinutes, true
	case "PerMinute":
		return QueryQuotaIntervalPerMinute, true
	}
	return QueryQuotaInterval(""), false
}

type QueryQuotaIntervalSettingKind string

const (
	QueryQuotaIntervalSettingKindLimitless QueryQuotaIntervalSettingKind = "Limitless"
	QueryQuotaIntervalSettingKindLimited   QueryQuotaIntervalSettingKind = "Limited"
)

func ValidQueryQuotaIntervalSettingKind(s string) (QueryQuotaIntervalSettingKind, bool) {
	switch s {
	case "Limitless":
		return QueryQuotaIntervalSettingKindLimitless, true
	case "Limited":
		return QueryQuotaIntervalSettingKindLimited, true
	}
	return QueryQuotaIntervalSettingKind(""), false
}

type QueryQuotaIntervalSettingSource string

const (
	QueryQuotaIntervalSettingSourceDefault       QueryQuotaIntervalSettingSource = "Default"
	QueryQuotaIntervalSettingSourceUserSpecified QueryQuotaIntervalSettingSource = "UserSpecified"
)

func ValidQueryQuotaIntervalSettingSource(s string) (QueryQuotaIntervalSettingSource, bool) {
	switch s {
	case "Default":
		return QueryQuotaIntervalSettingSourceDefault, true
	case "UserSpecified":
		return QueryQuotaIntervalSettingSourceUserSpecified, true
	}
	return QueryQuotaIntervalSettingSource(""), false
}

type QueryQuotaMeasurementKind string

const (
	QueryQuotaMeasurementKindStaticCost QueryQuotaMeasurementKind = "StaticCost"
	QueryQuotaMeasurementKindLiveCost   QueryQuotaMeasurementKind = "LiveCost"
	QueryQuotaMeasurementKindQueryCount QueryQuotaMeasurementKind = "QueryCount"
)

func ValidQueryQuotaMeasurementKind(s string) (QueryQuotaMeasurementKind, bool) {
	switch s {
	case "StaticCost":
		return QueryQuotaMeasurementKindStaticCost, true
	case "LiveCost":
		return QueryQuotaMeasurementKindLiveCost, true
	case "QueryCount":
		return QueryQuotaMeasurementKindQueryCount, true
	}
	return QueryQuotaMeasurementKind(""), false
}

type RepositoriesUsageQuerySortBy string

const (
	RepositoriesUsageQuerySortByName       RepositoriesUsageQuerySortBy = "Name"
	RepositoriesUsageQuerySortByUsageValue RepositoriesUsageQuerySortBy = "UsageValue"
)

func ValidRepositoriesUsageQuerySortBy(s string) (RepositoriesUsageQuerySortBy, bool) {
	switch s {
	case "Name":
		return RepositoriesUsageQuerySortByName, true
	case "UsageValue":
		return RepositoriesUsageQuerySortByUsageValue, true
	}
	return RepositoriesUsageQuerySortBy(""), false
}

// RepositoryDataType represents the data type of a repository. Indicates which type of data the repository is restricted to - e.g. 'Falcon' for repository intended for Falcon data.
type RepositoryDataType string

// The data type of a repository. Indicates which type of data the repository is restricted to - e.g. 'Falcon' for repository intended for Falcon data.
const (
	RepositoryDataTypeFalcon  RepositoryDataType = "FALCON"
	RepositoryDataTypeAnydata RepositoryDataType = "ANYDATA"
)

func ValidRepositoryDataType(s string) (RepositoryDataType, bool) {
	switch s {
	case "FALCON":
		return RepositoryDataTypeFalcon, true
	case "ANYDATA":
		return RepositoryDataTypeAnydata, true
	}
	return RepositoryDataType(""), false
}

// RepositoryType represents the repository type of a repository.
type RepositoryType string

// The repository type of a repository.
const (
	RepositoryTypePersonal RepositoryType = "PERSONAL"
	RepositoryTypeTrial    RepositoryType = "TRIAL"
	RepositoryTypeDefault  RepositoryType = "DEFAULT"
	RepositoryTypeSystem   RepositoryType = "SYSTEM"
	RepositoryTypeManaged  RepositoryType = "MANAGED"
)

func ValidRepositoryType(s string) (RepositoryType, bool) {
	switch s {
	case "PERSONAL":
		return RepositoryTypePersonal, true
	case "TRIAL":
		return RepositoryTypeTrial, true
	case "DEFAULT":
		return RepositoryTypeDefault, true
	case "SYSTEM":
		return RepositoryTypeSystem, true
	case "MANAGED":
		return RepositoryTypeManaged, true
	}
	return RepositoryType(""), false
}

// S3ArchivingFormat represents the format to store archived segments in on AWS S3.
type S3ArchivingFormat string

// The format to store archived segments in on AWS S3.
const (
	S3ArchivingFormatRaw    S3ArchivingFormat = "RAW"
	S3ArchivingFormatNdjson S3ArchivingFormat = "NDJSON"
)

func ValidS3ArchivingFormat(s string) (S3ArchivingFormat, bool) {
	switch s {
	case "RAW":
		return S3ArchivingFormatRaw, true
	case "NDJSON":
		return S3ArchivingFormatNdjson, true
	}
	return S3ArchivingFormat(""), false
}

type SearchDomainTypes string

const (
	SearchDomainTypesAll        SearchDomainTypes = "All"
	SearchDomainTypesViews      SearchDomainTypes = "Views"
	SearchDomainTypesRepository SearchDomainTypes = "Repository"
)

func ValidSearchDomainTypes(s string) (SearchDomainTypes, bool) {
	switch s {
	case "All":
		return SearchDomainTypesAll, true
	case "Views":
		return SearchDomainTypesViews, true
	case "Repository":
		return SearchDomainTypesRepository, true
	}
	return SearchDomainTypes(""), false
}

type SearchFleetStatusFilter string

const (
	SearchFleetStatusFilterError SearchFleetStatusFilter = "Error"
	SearchFleetStatusFilterOk    SearchFleetStatusFilter = "OK"
)

func ValidSearchFleetStatusFilter(s string) (SearchFleetStatusFilter, bool) {
	switch s {
	case "Error":
		return SearchFleetStatusFilterError, true
	case "OK":
		return SearchFleetStatusFilterOk, true
	}
	return SearchFleetStatusFilter(""), false
}

type Searchdomain__SortBy string

const (
	Searchdomain__SortByName      Searchdomain__SortBy = "Name"
	Searchdomain__SortByVolume    Searchdomain__SortBy = "Volume"
	Searchdomain__SortByDeletedAt Searchdomain__SortBy = "DeletedAt"
)

func ValidSearchdomain__SortBy(s string) (Searchdomain__SortBy, bool) {
	switch s {
	case "Name":
		return Searchdomain__SortByName, true
	case "Volume":
		return Searchdomain__SortByVolume, true
	case "DeletedAt":
		return Searchdomain__SortByDeletedAt, true
	}
	return Searchdomain__SortBy(""), false
}

type SessionRevocation__Type string

const (
	SessionRevocation__TypeOrganization SessionRevocation__Type = "Organization"
	SessionRevocation__TypeUser         SessionRevocation__Type = "User"
	SessionRevocation__TypeSession      SessionRevocation__Type = "Session"
)

func ValidSessionRevocation__Type(s string) (SessionRevocation__Type, bool) {
	switch s {
	case "Organization":
		return SessionRevocation__TypeOrganization, true
	case "User":
		return SessionRevocation__TypeUser, true
	case "Session":
		return SessionRevocation__TypeSession, true
	}
	return SessionRevocation__Type(""), false
}

type Sessions__Filter_Level string

const (
	Sessions__Filter_LevelOrganization Sessions__Filter_Level = "Organization"
	Sessions__Filter_LevelUser         Sessions__Filter_Level = "User"
)

func ValidSessions__Filter_Level(s string) (Sessions__Filter_Level, bool) {
	switch s {
	case "Organization":
		return Sessions__Filter_LevelOrganization, true
	case "User":
		return Sessions__Filter_LevelUser, true
	}
	return Sessions__Filter_Level(""), false
}

type Sessions__SortBy string

const (
	Sessions__SortByLastActivityTime Sessions__SortBy = "LastActivityTime"
	Sessions__SortByLoginTime        Sessions__SortBy = "LoginTime"
	Sessions__SortByIPAddress        Sessions__SortBy = "IPAddress"
	Sessions__SortByLocation         Sessions__SortBy = "Location"
	Sessions__SortByClientInfo       Sessions__SortBy = "ClientInfo"
	Sessions__SortByUser             Sessions__SortBy = "User"
)

func ValidSessions__SortBy(s string) (Sessions__SortBy, bool) {
	switch s {
	case "LastActivityTime":
		return Sessions__SortByLastActivityTime, true
	case "LoginTime":
		return Sessions__SortByLoginTime, true
	case "IPAddress":
		return Sessions__SortByIPAddress, true
	case "Location":
		return Sessions__SortByLocation, true
	case "ClientInfo":
		return Sessions__SortByClientInfo, true
	case "User":
		return Sessions__SortByUser, true
	}
	return Sessions__SortBy(""), false
}

// Severity represents output diagnostic from query validation.
type Severity string

// Output diagnostic from query validation.
const (
	SeverityError       Severity = "Error"
	SeverityWarning     Severity = "Warning"
	SeverityInformation Severity = "Information"
	SeverityHint        Severity = "Hint"
)

func ValidSeverity(s string) (Severity, bool) {
	switch s {
	case "Error":
		return SeverityError, true
	case "Warning":
		return SeverityWarning, true
	case "Information":
		return SeverityInformation, true
	case "Hint":
		return SeverityHint, true
	}
	return Severity(""), false
}

type ShowTermsAndConditions string

const (
	ShowTermsAndConditionsStandardMandatoryDoDNoticeAndConsent ShowTermsAndConditions = "StandardMandatoryDoDNoticeAndConsent"
	ShowTermsAndConditionsLogScaleEula                         ShowTermsAndConditions = "LogScaleEula"
	ShowTermsAndConditionsNone                                 ShowTermsAndConditions = "None"
)

func ValidShowTermsAndConditions(s string) (ShowTermsAndConditions, bool) {
	switch s {
	case "StandardMandatoryDoDNoticeAndConsent":
		return ShowTermsAndConditionsStandardMandatoryDoDNoticeAndConsent, true
	case "LogScaleEula":
		return ShowTermsAndConditionsLogScaleEula, true
	case "None":
		return ShowTermsAndConditionsNone, true
	}
	return ShowTermsAndConditions(""), false
}

type SocialLoginField string

const (
	SocialLoginFieldAllowAll      SocialLoginField = "AllowAll"
	SocialLoginFieldDenyAll       SocialLoginField = "DenyAll"
	SocialLoginFieldAllowSelected SocialLoginField = "AllowSelected"
)

func ValidSocialLoginField(s string) (SocialLoginField, bool) {
	switch s {
	case "AllowAll":
		return SocialLoginFieldAllowAll, true
	case "DenyAll":
		return SocialLoginFieldDenyAll, true
	case "AllowSelected":
		return SocialLoginFieldAllowSelected, true
	}
	return SocialLoginField(""), false
}

type SocialProviderProfile string

const (
	SocialProviderProfileGoogle    SocialProviderProfile = "Google"
	SocialProviderProfileGitHub    SocialProviderProfile = "Github"
	SocialProviderProfileBitbucket SocialProviderProfile = "Bitbucket"
)

func ValidSocialProviderProfile(s string) (SocialProviderProfile, bool) {
	switch s {
	case "Google":
		return SocialProviderProfileGoogle, true
	case "Github":
		return SocialProviderProfileGitHub, true
	case "Bitbucket":
		return SocialProviderProfileBitbucket, true
	}
	return SocialProviderProfile(""), false
}

// SortField represents field to sort queries by.
type SortField string

// Field to sort queries by.
const (
	SortFieldInitiatedBy                SortField = "InitiatedBy"
	SortFieldView                       SortField = "View"
	SortFieldAge                        SortField = "Age"
	SortFieldStatus                     SortField = "Status"
	SortFieldDeltaTotalMemoryAllocation SortField = "DeltaTotalMemoryAllocation"
	SortFieldTotalMemoryAllocation      SortField = "TotalMemoryAllocation"
	SortFieldDeltaLiveCPU               SortField = "DeltaLiveCPU"
	SortFieldTotalLiveCPU               SortField = "TotalLiveCPU"
	SortFieldDeltaStaticCPU             SortField = "DeltaStaticCPU"
	SortFieldTotalStaticCPU             SortField = "TotalStaticCPU"
	SortFieldDeltaStaticCost            SortField = "DeltaStaticCost"
	SortFieldDeltaLiveCost              SortField = "DeltaLiveCost"
	SortFieldDeltaTotalCost             SortField = "DeltaTotalCost"
	SortFieldStaticCost                 SortField = "StaticCost"
	SortFieldLiveCost                   SortField = "LiveCost"
	SortFieldTotalCost                  SortField = "TotalCost"
)

func ValidSortField(s string) (SortField, bool) {
	switch s {
	case "InitiatedBy":
		return SortFieldInitiatedBy, true
	case "View":
		return SortFieldView, true
	case "Age":
		return SortFieldAge, true
	case "Status":
		return SortFieldStatus, true
	case "DeltaTotalMemoryAllocation":
		return SortFieldDeltaTotalMemoryAllocation, true
	case "TotalMemoryAllocation":
		return SortFieldTotalMemoryAllocation, true
	case "DeltaLiveCPU":
		return SortFieldDeltaLiveCPU, true
	case "TotalLiveCPU":
		return SortFieldTotalLiveCPU, true
	case "DeltaStaticCPU":
		return SortFieldDeltaStaticCPU, true
	case "TotalStaticCPU":
		return SortFieldTotalStaticCPU, true
	case "DeltaStaticCost":
		return SortFieldDeltaStaticCost, true
	case "DeltaLiveCost":
		return SortFieldDeltaLiveCost, true
	case "DeltaTotalCost":
		return SortFieldDeltaTotalCost, true
	case "StaticCost":
		return SortFieldStaticCost, true
	case "LiveCost":
		return SortFieldLiveCost, true
	case "TotalCost":
		return SortFieldTotalCost, true
	}
	return SortField(""), false
}

// SortOrder represents order to sort queries by.
type SortOrder string

// Order to sort queries by.
const (
	SortOrderAscending  SortOrder = "Ascending"
	SortOrderDescending SortOrder = "Descending"
)

func ValidSortOrder(s string) (SortOrder, bool) {
	switch s {
	case "Ascending":
		return SortOrderAscending, true
	case "Descending":
		return SortOrderDescending, true
	}
	return SortOrder(""), false
}

// SystemAction represents actions a user may perform on the system.
type SystemAction string

// Actions a user may perform on the system.
const (
	SystemActionAdministerSystemPermissions SystemAction = "AdministerSystemPermissions"
	SystemActionChangeSubdomain             SystemAction = "ChangeSubdomain"
	SystemActionViewSubdomain               SystemAction = "ViewSubdomain"
	SystemActionDeleteOrganizations         SystemAction = "DeleteOrganizations"
	SystemActionAdministerOrganizations     SystemAction = "AdministerOrganizations"
	SystemActionAdministerCloud             SystemAction = "AdministerCloud"
	SystemActionAdministerTokens            SystemAction = "AdministerTokens"
	SystemActionAdministerCluster           SystemAction = "AdministerCluster"
	SystemActionChangeSharedFiles           SystemAction = "ChangeSharedFiles"
)

func ValidSystemAction(s string) (SystemAction, bool) {
	switch s {
	case "AdministerSystemPermissions":
		return SystemActionAdministerSystemPermissions, true
	case "ChangeSubdomain":
		return SystemActionChangeSubdomain, true
	case "ViewSubdomain":
		return SystemActionViewSubdomain, true
	case "DeleteOrganizations":
		return SystemActionDeleteOrganizations, true
	case "AdministerOrganizations":
		return SystemActionAdministerOrganizations, true
	case "AdministerCloud":
		return SystemActionAdministerCloud, true
	case "AdministerTokens":
		return SystemActionAdministerTokens, true
	case "AdministerCluster":
		return SystemActionAdministerCluster, true
	case "ChangeSharedFiles":
		return SystemActionChangeSharedFiles, true
	}
	return SystemAction(""), false
}

// SystemPermission represents system permissions..
type SystemPermission string

// System permissions..
const (
	SystemPermissionReadHealthCheck                   SystemPermission = "ReadHealthCheck"
	SystemPermissionManageOrganizations               SystemPermission = "ManageOrganizations"
	SystemPermissionImportOrganization                SystemPermission = "ImportOrganization"
	SystemPermissionDeleteOrganizations               SystemPermission = "DeleteOrganizations"
	SystemPermissionChangeSystemPermissions           SystemPermission = "ChangeSystemPermissions"
	SystemPermissionManageCluster                     SystemPermission = "ManageCluster"
	SystemPermissionIngestAcrossAllReposWithinCluster SystemPermission = "IngestAcrossAllReposWithinCluster"
	SystemPermissionDeleteHumioOwnedRepositoryOrView  SystemPermission = "DeleteHumioOwnedRepositoryOrView"
	SystemPermissionChangeUsername                    SystemPermission = "ChangeUsername"
	SystemPermissionChangeFeatureFlags                SystemPermission = "ChangeFeatureFlags"
	SystemPermissionChangeSubdomains                  SystemPermission = "ChangeSubdomains"
	SystemPermissionListSubdomains                    SystemPermission = "ListSubdomains"
	SystemPermissionPatchGlobal                       SystemPermission = "PatchGlobal"
	SystemPermissionChangeBucketStorage               SystemPermission = "ChangeBucketStorage"
	SystemPermissionManageOrganizationLinks           SystemPermission = "ManageOrganizationLinks"
)

func ValidSystemPermission(s string) (SystemPermission, bool) {
	switch s {
	case "ReadHealthCheck":
		return SystemPermissionReadHealthCheck, true
	case "ManageOrganizations":
		return SystemPermissionManageOrganizations, true
	case "ImportOrganization":
		return SystemPermissionImportOrganization, true
	case "DeleteOrganizations":
		return SystemPermissionDeleteOrganizations, true
	case "ChangeSystemPermissions":
		return SystemPermissionChangeSystemPermissions, true
	case "ManageCluster":
		return SystemPermissionManageCluster, true
	case "IngestAcrossAllReposWithinCluster":
		return SystemPermissionIngestAcrossAllReposWithinCluster, true
	case "DeleteHumioOwnedRepositoryOrView":
		return SystemPermissionDeleteHumioOwnedRepositoryOrView, true
	case "ChangeUsername":
		return SystemPermissionChangeUsername, true
	case "ChangeFeatureFlags":
		return SystemPermissionChangeFeatureFlags, true
	case "ChangeSubdomains":
		return SystemPermissionChangeSubdomains, true
	case "ListSubdomains":
		return SystemPermissionListSubdomains, true
	case "PatchGlobal":
		return SystemPermissionPatchGlobal, true
	case "ChangeBucketStorage":
		return SystemPermissionChangeBucketStorage, true
	case "ManageOrganizationLinks":
		return SystemPermissionManageOrganizationLinks, true
	}
	return SystemPermission(""), false
}

type Targets string

const (
	TargetsAll     Targets = "All"
	TargetsGroup   Targets = "Group"
	TargetsRoot    Targets = "Root"
	TargetsOrgRoot Targets = "OrgRoot"
)

func ValidTargets(s string) (Targets, bool) {
	switch s {
	case "All":
		return TargetsAll, true
	case "Group":
		return TargetsGroup, true
	case "Root":
		return TargetsRoot, true
	case "OrgRoot":
		return TargetsOrgRoot, true
	}
	return Targets(""), false
}

type Tokens__SortBy string

const (
	Tokens__SortByExpirationDate Tokens__SortBy = "ExpirationDate"
	Tokens__SortByName           Tokens__SortBy = "Name"
)

func ValidTokens__SortBy(s string) (Tokens__SortBy, bool) {
	switch s {
	case "ExpirationDate":
		return Tokens__SortByExpirationDate, true
	case "Name":
		return Tokens__SortByName, true
	}
	return Tokens__SortBy(""), false
}

type Tokens__Type string

const (
	Tokens__TypeViewPermissionToken         Tokens__Type = "ViewPermissionToken"
	Tokens__TypeOrganizationPermissionToken Tokens__Type = "OrganizationPermissionToken"
	Tokens__TypeSystemPermissionToken       Tokens__Type = "SystemPermissionToken"
)

func ValidTokens__Type(s string) (Tokens__Type, bool) {
	switch s {
	case "ViewPermissionToken":
		return Tokens__TypeViewPermissionToken, true
	case "OrganizationPermissionToken":
		return Tokens__TypeOrganizationPermissionToken, true
	case "SystemPermissionToken":
		return Tokens__TypeSystemPermissionToken, true
	}
	return Tokens__Type(""), false
}

type UiTheme string

const (
	UiThemeAuto  UiTheme = "Auto"
	UiThemeDark  UiTheme = "Dark"
	UiThemeLight UiTheme = "Light"
)

func ValidUiTheme(s string) (UiTheme, bool) {
	switch s {
	case "Auto":
		return UiThemeAuto, true
	case "Dark":
		return UiThemeDark, true
	case "Light":
		return UiThemeLight, true
	}
	return UiTheme(""), false
}

// ViewAction represents actions a user may perform on a view.
type ViewAction string

// Actions a user may perform on a view.
const (
	ViewActionChangeConnections                    ViewAction = "ChangeConnections"
	ViewActionChangeUserAccess                     ViewAction = "ChangeUserAccess"
	ViewActionChangeTriggersAndActions             ViewAction = "ChangeTriggersAndActions" // Denotes if you can administer alerts, scheduled searches and actions.
	ViewActionChangeInteractions                   ViewAction = "ChangeInteractions"
	ViewActionChangeViewOrRepositoryDescription    ViewAction = "ChangeViewOrRepositoryDescription"
	ViewActionChangeDashboards                     ViewAction = "ChangeDashboards"
	ViewActionChangeDashboardReadonlyToken         ViewAction = "ChangeDashboardReadonlyToken"
	ViewActionChangeFdrFeeds                       ViewAction = "ChangeFdrFeeds"
	ViewActionChangeDataspaceKind                  ViewAction = "ChangeDataspaceKind"
	ViewActionChangeFdrFeedControls                ViewAction = "ChangeFdrFeedControls"
	ViewActionReadFdrFeeds                         ViewAction = "ReadFdrFeeds"
	ViewActionChangeIngestFeeds                    ViewAction = "ChangeIngestFeeds"
	ViewActionChangeFiles                          ViewAction = "ChangeFiles"
	ViewActionChangeParsers                        ViewAction = "ChangeParsers"
	ViewActionChangeSavedQueries                   ViewAction = "ChangeSavedQueries"
	ViewActionConnectView                          ViewAction = "ConnectView"
	ViewActionConnectMultiClusterView              ViewAction = "ConnectMultiClusterView"
	ViewActionChangeDataDeletionPermissions        ViewAction = "ChangeDataDeletionPermissions"
	ViewActionChangeRetention                      ViewAction = "ChangeRetention"
	ViewActionChangeTimeBasedRetention             ViewAction = "ChangeTimeBasedRetention"
	ViewActionChangeSizeBasedRetention             ViewAction = "ChangeSizeBasedRetention"
	ViewActionChangeDefaultSearchSettings          ViewAction = "ChangeDefaultSearchSettings"
	ViewActionChangeS3archivingSettings            ViewAction = "ChangeS3ArchivingSettings"
	ViewActionDeleteDataSources                    ViewAction = "DeleteDataSources"
	ViewActionDeleteRepositoryOrView               ViewAction = "DeleteRepositoryOrView"
	ViewActionDeleteEvents                         ViewAction = "DeleteEvents"
	ViewActionReadEvents                           ViewAction = "ReadEvents" // Denotes if you can see log events.
	ViewActionChangeIngestTokens                   ViewAction = "ChangeIngestTokens"
	ViewActionChangePackages                       ViewAction = "ChangePackages"
	ViewActionEventForwarding                      ViewAction = "EventForwarding" // Denotes if you can administer event forwarding rules.
	ViewActionChangeIngestListeners                ViewAction = "ChangeIngestListeners"
	ViewActionChangePermissionTokens               ViewAction = "ChangePermissionTokens"
	ViewActionChangeIngestBlocking                 ViewAction = "ChangeIngestBlocking"
	ViewActionChangeFieldsToBeRemovedBeforeParsing ViewAction = "ChangeFieldsToBeRemovedBeforeParsing"
	ViewActionExportQueryResults                   ViewAction = "ExportQueryResults"
	ViewActionChangeOrganizationOwnedQueries       ViewAction = "ChangeOrganizationOwnedQueries"
	ViewActionReadExternalFunctions                ViewAction = "ReadExternalFunctions"
	ViewActionChangeScheduledReports               ViewAction = "ChangeScheduledReports"
)

func ValidViewAction(s string) (ViewAction, bool) {
	switch s {
	case "ChangeConnections":
		return ViewActionChangeConnections, true
	case "ChangeUserAccess":
		return ViewActionChangeUserAccess, true
	case "ChangeTriggersAndActions":
		return ViewActionChangeTriggersAndActions, true
	case "ChangeInteractions":
		return ViewActionChangeInteractions, true
	case "ChangeViewOrRepositoryDescription":
		return ViewActionChangeViewOrRepositoryDescription, true
	case "ChangeDashboards":
		return ViewActionChangeDashboards, true
	case "ChangeDashboardReadonlyToken":
		return ViewActionChangeDashboardReadonlyToken, true
	case "ChangeFdrFeeds":
		return ViewActionChangeFdrFeeds, true
	case "ChangeDataspaceKind":
		return ViewActionChangeDataspaceKind, true
	case "ChangeFdrFeedControls":
		return ViewActionChangeFdrFeedControls, true
	case "ReadFdrFeeds":
		return ViewActionReadFdrFeeds, true
	case "ChangeIngestFeeds":
		return ViewActionChangeIngestFeeds, true
	case "ChangeFiles":
		return ViewActionChangeFiles, true
	case "ChangeParsers":
		return ViewActionChangeParsers, true
	case "ChangeSavedQueries":
		return ViewActionChangeSavedQueries, true
	case "ConnectView":
		return ViewActionConnectView, true
	case "ConnectMultiClusterView":
		return ViewActionConnectMultiClusterView, true
	case "ChangeDataDeletionPermissions":
		return ViewActionChangeDataDeletionPermissions, true
	case "ChangeRetention":
		return ViewActionChangeRetention, true
	case "ChangeTimeBasedRetention":
		return ViewActionChangeTimeBasedRetention, true
	case "ChangeSizeBasedRetention":
		return ViewActionChangeSizeBasedRetention, true
	case "ChangeDefaultSearchSettings":
		return ViewActionChangeDefaultSearchSettings, true
	case "ChangeS3ArchivingSettings":
		return ViewActionChangeS3archivingSettings, true
	case "DeleteDataSources":
		return ViewActionDeleteDataSources, true
	case "DeleteRepositoryOrView":
		return ViewActionDeleteRepositoryOrView, true
	case "DeleteEvents":
		return ViewActionDeleteEvents, true
	case "ReadEvents":
		return ViewActionReadEvents, true
	case "ChangeIngestTokens":
		return ViewActionChangeIngestTokens, true
	case "ChangePackages":
		return ViewActionChangePackages, true
	case "EventForwarding":
		return ViewActionEventForwarding, true
	case "ChangeIngestListeners":
		return ViewActionChangeIngestListeners, true
	case "ChangePermissionTokens":
		return ViewActionChangePermissionTokens, true
	case "ChangeIngestBlocking":
		return ViewActionChangeIngestBlocking, true
	case "ChangeFieldsToBeRemovedBeforeParsing":
		return ViewActionChangeFieldsToBeRemovedBeforeParsing, true
	case "ExportQueryResults":
		return ViewActionExportQueryResults, true
	case "ChangeOrganizationOwnedQueries":
		return ViewActionChangeOrganizationOwnedQueries, true
	case "ReadExternalFunctions":
		return ViewActionReadExternalFunctions, true
	case "ChangeScheduledReports":
		return ViewActionChangeScheduledReports, true
	}
	return ViewAction(""), false
}
