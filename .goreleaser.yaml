project_name: humioctl

builds:
  - binary: humioctl
    goos:
      - windows
      - darwin
      - linux
    goarch:
      - amd64

release:
  # Repo in which the release will be created.
  # Default is extracted from the origin remote URL.
  github:
    owner: humio
    name: cli

#brews:
#  -
#    github:
#      owner: humio
#      name: homebrew-humio
#    folder: Formula
#    homepage:  https://humio.com/
#    description: Manage and Stream Logs to Humio
#    test: |
#      system "echo DONE"

archives:
  -
    format: tar.gz
    replacements:
      amd64: 64-bit
      darwin: macOS
      linux: Linux
    format_overrides:
      - goos: windows
        format: zip

#snapcrafts:
#  -
#    # The name of the snap. This is optional.
#    # Default is project name.
#    name: humioctl
#
#    # Wether to publish the snap to the snapcraft store.
#    # Remember you need to `snapcraft login` first.
#    # Defaults to false.
#    publish: true
#
#    # Single-line elevator pitch for your amazing snap.
#    # 79 char long at most.
#    summary: CLI for managing and streaming data to Humio.
#
#    # This the description of your snap. You have a paragraph or two to tell the
#    # most important story about your snap. Keep it under 100 words though,
#    # we live in tweetspace and your description wants to look good in the snap
#    # store.
#    description: |
#      The Humio CLI is an easy way to manage your Humio cluster. You can also
#      use it to tail files and stream them to Humio, but this is no replacement
#      for a full-featured data shipper like filebeat.
#
#    # A guardrail to prevent you from releasing a snap to all your users before
#    # it is ready.
#    # `devel` will let you release only to the `edge` and `beta` channels in the
#    # store. `stable` will let you release also to the `candidate` and `stable`
#    # channels. More info about channels here:
#    # https://snapcraft.io/docs/reference/channels
#    grade: stable
#
#    # Snaps can be setup to follow three different confinement policies:
#    # `strict`, `devmode` and `classic`. A strict confinement where the snap
#    # can only read and write in its own namespace is recommended. Extra
#    # permissions for strict snaps can be declared as `plugs` for the app, which
#    # are explained later. More info about confinement here:
#    # https://snapcraft.io/docs/reference/confinement
#    confinement: strict
#
#    # Each binary built by GoReleaser is an app inside the snap. In this section
#    # you can declare extra details for those binaries. It is optional.
#    apps:
#
#      # The name of the app must be the same name as the binary built or the snapcraft name.
#      humioctl:
#
#        # If your app requires extra permissions to work outside of its default
#        # confined space, declare them here.
#        # You can read the documentation about the available plugs and the
#        # things they allow:
#        # https://snapcraft.io/docs/reference/interfaces.
#        plugs: ["home", "network"]
#
#dockers:
#  - image_templates:
#    - humio/cli:latest
#    - humio/cli:{{ .Tag }}
